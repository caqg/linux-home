;; -*- coding: utf-8-unix -*-
;; History for SLIME REPL. Automatically written.
;; Edit only if you know what you're doing
("(lcm)" "(gcd)
" "(gcd (gcd (gcd 5 12) 20) 60)" "(gcd 5 12 20 60)" "(lcm 5 12 20 60)
" "*debug-io*" "*standard-output*" "*standard-out*" "(documentation 'c1)" "(class-of c1-first)" "(find-class 'c1)" "(class-name (class-of c1-first))" "(documentation 'describe-object 'function)" "(describe-object c1-first t)" "(describe-object c1-first)" "(describe-object c1-first 1)" "(describe-object c1-first nil)" "(print-object c1-first nil)" "(print-object c1-first)" "(slot-value * 'x)" "(make-instance 'r
                        )" "(defclass r (q) ((x :initarg b)) (:default-initargs a 1 b 2))" "(defclasss r (q) ((x :initarg b))
                    )" "(defclasss r (q) ((x :initarg b)))" "(defclass q () ((x :initarg a)))" "(slot-value c1-first 'x)" "(setf (slot-value c1-first 'x) 3)" "c1-first" "(defvar c1-first (make-instance 'c1))" "(slot-value ** 'x)" "(slot-value 'x *)" "(make-instance 'c1)" "(make-c1 )" "(defclass c1 () ((x :type float :initform 0)))" "(defclass c1 () (:name x :initform 0))" "(defclass c1 () (x :initform 0))" "(defclass c1 () (x :type float :initform 0))" "(help 'defclass)" "(documentation 'defclass 'function)" "(documentation 'defclass 'macro)" "(defclass c1)" "*print-lines*" "*print-miser-width*" "*print-right-margin*" "*print-pprint-dispatch*" "*print-pretty*" "(loop as i below i
      do (print i))" "(loop as i below 5 
      do (print i))" "(loop as i below i do (print i))" "**" "(long-site-name)" "(short-site-name)" "(software-version)" "(software-type)" "(machine-instance)" "(machine-version)" "(machine-type)" "(lisp-implementation-version)" "(lisp-implementation-vetsion)" "(lisp-implementation-type)" "lisp-implementation-type" "(directory *default-pathname-defaults*)" "(make-load-form p)" "p" "*load-verbose*" "(describe 'string-external-format)" " (user-homedir-pathname \"localhost\")" " (user-homedir-pathname \"localhost\"))" " (user-homedir-pathname :host \"localhost\"))" " (user-homedir-pathname :host \"localhost\")" " (user-homedir-pathname)" "(host-namestring *default-pathname-defaults*)" "(host-namestrring **)" "(pathname-host *)" "*default-pathname-defaults*" "(documentation 'merge-pathnames 'function)" "(merge-pathnames \"foobar:/home/cesar\")" "(merge-pathnames \"/home/cesar\")" "(truename \"~cesar\")" "(truename \"/home/cesar\")" "(truename \"~\")" "q" "(inspect p)" "(setq p  (parse-namestring \"//localhost/home/cesar/.emacs.d/init.el\"))" "(setq p  (parse-namestring \"localhost;/home/cesar/.emacs.d/init.el\"))" "(print (pathname-host p))" "(pprint p)" "(setq p  (parse-namestring \"/home/cesar/.emacs.d/init.el\"))" "(let ((p (parse-namestring \"~/.emacs.d/init.el\"))) (pprint p))" "*features*" "(quit)" "exit" "(log lambda-parameters-limit 2)" "(logbit lambda-parameters-list)" "(log lambda-parameters-list)" "(log 10 2)" "(log lambda-parameters-list 2)" "(documentation 'log 'function)" "(describe 'log 'function)" "lambda-parameters-limit" "lambda-list-keywords" "#(1 2 3)" "(upgraded-array-element-type '(complex single-float))" "(upgraded-array-element-type 'real)" "(upgraded-array-element-type 'rational)" "(upgraded-array-element-type 'atom)" "(upgraded-array-element-type 'short-float)" "(upgraded-array-element-type 'bit)" "(upgraded-array-element 'bit)" "(prin1 #*)" "array-rank-limit" "(array-rank-limit)" "(upgraded-array-element-type 'standard-char)
" "char-font-limit" "#\\n" "#\\f" "#\\escape" "#\\break" "#\\Ï€" "#\\Rubout" "#\\return" "#\\page" "#\\linefeed" "#\\tab" "#\\space" "#\\backspace" "(eql 1.0d0 1.0l0)" "(eql 1.0f0 1.0d0)" "(eql 1.0s0 1.0f0)" "(eql 0.0 -0.0)" "(eq 0.0 -0.0)" "(equal 0.0 -0.0)" "(equalp 0.0 -0.0)" "(= 0.0 -0.0)" "-0.0" "-2/3" "-2/-3" "4/6" "(apropos 'vector)" "(simple-vector 'float)" "(simple-vector float)" "(documentation 'simple-vector 'type)" "(documentation 'simple-vector 'function)" "(let ((x 1)) (list (incf x) (incf x) (setq x (+ x 1))))" "(+ 1 2)" "(ql:quickload \"alexandria\")" "(featurep :sbcl)" "features" "(featurep 'sbcl)" "(describe 'featurep)" "(documentation 'featurep 'function)" "(ql:update-client)" "(ql:update-dist \"quicklisp\")" "(QUICKLISP-CLIENT::QUICKLISP-SYSTEMS)" "QUICKLISP-CLIENT::QUICKLISP-SYSTEMS" "quicklisp-client:quicklisp-systems" "(apropos 'quicklisp)" "(documentation 'swank:ed-in-emacs 'function)" "(ed \"foo.lisp\")" "(exit)" "(inst x)" "inst" "(setf inst (make-instance 'clss))" "(defclass clss () ((x :initform 8)))" "(defclass clss () ((x :iniform 8)))" "(defclass clss () ((x :value 0)))" "(defclass clss () ((x :init 0)))" " clss () ((x :init 0)))" "(defclass () clss ((x :init 0)))" "(defclass c ((c :init 0)))" "(documentation 'defclass)" "(documentation defclass)" "(apropos 'class)" "(help 'documentation)
" "(documentation 'lambda 'function)" "(documentation 'lambda)" "*Features*" "(apropos 'featur)" "(require \"asdf\")" "(asdf:asdf-version)" "(ql:system-apropos \"xml\")" "(ql:system-apropos \"tk\")" "(ql:system-apropos \"term\")" "(ql:quicklisp-apropos \"term\")" "(quicklisp-apropos \"term\")" "(ql:add-to-init-file)" "(quicklisp-quickstart:install)" "(load #P\"/usr/share/cl-quicklisp/quicklisp.lisp\")" "(load #P\"/usr/share/quicklisp/quicklisp.lisp\")" " (load \"quicklisp.lisp\")" "(factorial 100)" "(load #P\"factorial.fasl\")" "(load #P\"factorial\")" "(list #P\"factorial.lisp\")" "(apropos 'current)" "(directory-namestring #P\".\")" "(pathname-directory #P\".\")" "(documentation 'pathname-directory 'function)" "(documentation 'directory-namestring 'function)" "(documentation 'directory 'function)")