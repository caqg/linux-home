;;; org-context-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))



;;; Generated autoloads from org-context.el

(defvar org-context-capture-alist nil "\
Alist that specifies contextual capture templates.

Each element is of the form (CONDITION . TEMPLATE-LIST) where
CONDITION is either a symbol matching a major mode or a regular
expression matching the buffer file-name or the buffer name and
TEMPLATE-LIST is a list of contextual capture templates as
described in the Org manual that will be added to the set of
default ones.")
(defvar-local org-context-capture nil "\
Buffer local variable that holds the templates definitions.")
(put 'org-context-capture 'safe-local-variable 'org-context-capture-safe-p)
(autoload 'org-context-capture-safe-p "org-context" "\
Return non-nil if the list of capture templates TEMPLATES is safe.

A template is considered safe if it does not have to evaluate
arbitrary functions.

(fn TEMPLATES)" nil nil)
(defvar org-context-agenda-alist nil "\
Alist of filename patterns vs corresponding custom agenda
  list.")
(defvar-local org-context-agenda nil "\
Buffer local variable that holds the custom agenda commands.")
(put 'org-context-agenda 'safe-local-variable 'org-context-agenda-safe-p)
(autoload 'org-context-agenda-safe-p "org-context" "\
Return non-nil if the list of agenda commands COMMANDS is safe.

An agenda command is considered safe if it does not have to evaluate
arbitrary functions.

(fn COMMANDS)" nil nil)
(autoload 'org-context-agenda-from "org-context" "\


(fn FILE-OR-BUFFER KEY)" nil nil)
(defvar org-context-mode nil "\
Non-nil if Org-Context mode is enabled.
See the `org-context-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-context-mode'.")
(custom-autoload 'org-context-mode "org-context" nil)
(autoload 'org-context-mode "org-context" "\
Minor mode to activate `org-context'.

This is a global minor mode.  If called interactively, toggle the
`Org-Context mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-context-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t nil)
(define-obsolete-function-alias 'org-context-activate 'org-context-mode "\
0.0.5")
(register-definition-prefixes "org-context" '("org-"))

;;; End of scraped data

(provide 'org-context-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8-emacs-unix
;; End:

;;; org-context-autoloads.el ends here
