;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Rd-mode-abbrev-table
  '(
    ("`ag" "\\arguments" nil 0)
    ("`al" "\\alias" nil 0)
    ("`au" "\\author" nil 0)
    ("`bf" "\\bold" nil 0)
    ("`co" "\\code" nil 0)
    ("`de" "\\describe" nil 0)
    ("`dn" "\\description" nil 0)
    ("`dt" "\\details" nil 0)
    ("`em" "\\emph" nil 0)
    ("`en" "\\enumerate" nil 0)
    ("`ex" "\\examples" nil 0)
    ("`fi" "\\file" nil 0)
    ("`fo" "\\format" nil 0)
    ("`it" "\\item" nil 0)
    ("`iz" "\\itemize" nil 0)
    ("`kw" "\\keyword" nil 0)
    ("`li" "\\link" nil 0)
    ("`me" "\\method" nil 0)
    ("`na" "\\name" nil 0)
    ("`no" "\\note" nil 0)
    ("`re" "\\references" nil 0)
    ("`sa" "\\seealso" nil 0)
    ("`se" "\\section" nil 0)
    ("`so" "\\source" nil 0)
    ("`ss" "\\subsection" nil 0)
    ("`sy" "\\synopsis" nil 0)
    ("`ta" "\\tabular" nil 0)
    ("`ti" "\\title" nil 0)
    ("`us" "\\usage" nil 0)
    ("`va" "\\value" nil 0)
   ))

(define-abbrev-table 'awk-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'bison-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("#d" "#define" nil 0)
    ("#ef" "#endif" nil 0)
    ("#el" "#else" nil 0)
    ("#er" "#error" nil 0)
    ("#i" "#include" nil 0)
    ("#id" "#ifdef" nil 0)
    ("#in" "#ifndef" nil 0)
    ("#p" "#pragma" nil 0)
    ("#u" "#undef" nil 0)
    ("br#" "break" nil 0)
    ("catch" "catch" c-electric-continued-statement 0)
    ("co#" "continue" nil 0)
    ("de#" "default" nil 0)
    ("ei#" "else if" nil 0)
    ("else" "else" c-electric-continued-statement 0)
    ("er#" "(void)fprintfstderr, );" (lambda nil (backward-char 2) (set-mark (point)) (backward-char 8)) 0)
    ("ex#" "extern" nil 0)
    ("fp#" "(void)fprintf, );" (lambda nil (backward-char 4)) 0)
    ("fs#" "fscanf)" (lambda nil (backward-char 1)) 0)
    ("pr#" "(void)printf);" (lambda nil (backward-char 2)) 0)
    ("reg#" "register" nil 0)
    ("ret#" "return" nil 0)
    ("sc#" "scanf)" (lambda nil (backward-char 1)) 0)
    ("si#" "sizeof" nil 0)
    ("sp#" "sprintf)" (lambda nil (backward-char 1)) 0)
    ("ss#" "sscanf)" (lambda nil (backward-char 1)) 0)
    ("sw#" "switch" nil 0)
    ("ty#" "typedef" nil 0)
    ("un#" "unsigned" nil 0)
    ("vo#" "volatile" nil 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("#d" "#define" nil 0)
    ("#ef" "#endif" nil 0)
    ("#el" "#else" nil 0)
    ("#er" "#error" nil 0)
    ("#i" "#include" nil 0)
    ("#id" "#ifdef" nil 0)
    ("#in" "#ifndef" nil 0)
    ("#p" "#pragma" nil 0)
    ("#u" "#undef" nil 0)
    ("br#" "break" nil 0)
    ("co#" "continue" nil 0)
    ("de#" "default" nil 0)
    ("ei#" "else if" nil 0)
    ("else" "else" c-electric-continued-statement 0)
    ("er#" "(void)fprintfstderr, );" (lambda nil (backward-char 2) (set-mark (point)) (backward-char 8)) 0)
    ("ex#" "extern" nil 0)
    ("fp#" "(void)fprintf, );" (lambda nil (backward-char 4)) 0)
    ("fs#" "fscanf)" (lambda nil (backward-char 1)) 0)
    ("pr#" "(void)printf);" (lambda nil (backward-char 2)) 0)
    ("reg#" "register" nil 0)
    ("ret#" "return" nil 0)
    ("sc#" "scanf)" (lambda nil (backward-char 1)) 0)
    ("si#" "sizeof" nil 0)
    ("sp#" "sprintf)" (lambda nil (backward-char 1)) 0)
    ("ss#" "sscanf)" (lambda nil (backward-char 1)) 0)
    ("sw#" "switch" nil 0)
    ("ty#" "typedef" nil 0)
    ("un#" "unsigned" nil 0)
    ("vo#" "volatile" nil 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cakefile-mode-abbrev-table
  '(
    ("#d" "#define" nil 3)
    ("#ef" "#endif" nil 0)
    ("#el" "#else" nil 0)
    ("#i" "#include" nil 2)
    ("#id" "#ifdef" nil 0)
    ("#in" "#ifndef" nil 0)
    ("#u" "#undef" nil 0)
   ))

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'common-lisp-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'cvs-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'edebug-eval-mode-abbrev-table '())

(define-abbrev-table 'edebug-x-breakpoint-list-mode-abbrev-table '())

(define-abbrev-table 'edebug-x-instrumented-function-list-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'eieio-custom-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'ess-julia-mode-abbrev-table '())

(define-abbrev-table 'franz-lisp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gdb-breakpoints-mode-abbrev-table '())

(define-abbrev-table 'gdb-disassembly-mode-abbrev-table '())

(define-abbrev-table 'gdb-frames-mode-abbrev-table '())

(define-abbrev-table 'gdb-locals-mode-abbrev-table '())

(define-abbrev-table 'gdb-memory-mode-abbrev-table '())

(define-abbrev-table 'gdb-registers-mode-abbrev-table '())

(define-abbrev-table 'gdb-script-mode-abbrev-table '())

(define-abbrev-table 'gdb-threads-mode-abbrev-table '())

(define-abbrev-table 'generic-code-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'gud-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-julia-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'jison-mode-abbrev-table '())

(define-abbrev-table 'julia-mode-abbrev-table '())

(define-abbrev-table 'lisp-interaction-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'log-edit-mode-abbrev-table '())

(define-abbrev-table 'magit-cherry-mode-abbrev-table '())

(define-abbrev-table 'magit-diff-mode-abbrev-table '())

(define-abbrev-table 'magit-log-mode-abbrev-table '())

(define-abbrev-table 'magit-log-select-mode-abbrev-table '())

(define-abbrev-table 'magit-merge-preview-mode-abbrev-table '())

(define-abbrev-table 'magit-mode-abbrev-table '())

(define-abbrev-table 'magit-popup-mode-abbrev-table '())

(define-abbrev-table 'magit-process-mode-abbrev-table '())

(define-abbrev-table 'magit-reflog-mode-abbrev-table '())

(define-abbrev-table 'magit-refs-mode-abbrev-table '())

(define-abbrev-table 'magit-revision-mode-abbrev-table '())

(define-abbrev-table 'magit-stash-mode-abbrev-table '())

(define-abbrev-table 'magit-stashes-mode-abbrev-table '())

(define-abbrev-table 'magit-status-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'mod2-mode-abbrev-table '())

(define-abbrev-table 'mod2-mode-electric-abbrev-table
  '(
    ("%" "MOD" nil 0)
    ("abs" "ABS" nil 0)
    ("and" "AND" nil 0)
    ("arr" "ARRAY" nil 0)
    ("array" "ARRAY" nil 0)
    ("beg" "BEGIN" nil 0)
    ("begin" "BEGIN" nil 0)
    ("bit" "BITSET" nil 0)
    ("bitset" "BITSET" nil 0)
    ("boo" "BOOLEAN" nil 0)
    ("boolean" "BOOLEAN" nil 0)
    ("by" "BY" nil 0)
    ("cap" "CAP" nil 0)
    ("card" "CARDINAL" nil 0)
    ("cardinal" "CARDINAL" nil 0)
    ("cas" "CASE" nil 0)
    ("case" "CASE" nil 0)
    ("cha" "CHAR" nil 0)
    ("char" "CHAR" nil 0)
    ("chr" "CHR" nil 0)
    ("con" "CONST" nil 0)
    ("const" "CONST" nil 0)
    ("dec" "DEC" nil 0)
    ("def" "DEFINITION" nil 0)
    ("definition" "DEFINITION" nil 0)
    ("dis" "DISPOSE" nil 0)
    ("dispose" "DISPOSE" nil 0)
    ("div" "DIV" nil 0)
    ("do" "DO" nil 0)
    ("eli" "ELSIF" nil 0)
    ("els" "ELSE" nil 0)
    ("else" "ELSE" nil 0)
    ("elsif" "ELSIF" nil 0)
    ("end" "END" nil 3)
    ("exc" "EXCL" nil 0)
    ("excl" "EXCL" nil 0)
    ("exi" "EXIT" nil 0)
    ("exit" "EXIT" nil 0)
    ("exp" "EXPORT" nil 0)
    ("export" "EXPORT" nil 0)
    ("fal" "FALSE" nil 0)
    ("false" "FALSE" nil 0)
    ("flo" "FLOAT" nil 0)
    ("float" "FLOAT" nil 0)
    ("for" "FOR" nil 0)
    ("fro" "FROM" nil 0)
    ("from" "FROM" nil 0)
    ("hal" "HALT" nil 0)
    ("halt" "HALT" nil 0)
    ("hig" "HIGH" nil 0)
    ("high" "HIGH" nil 0)
    ("if" "IF" nil 2)
    ("imp" "IMPORT" nil 0)
    ("impl" "IMPLEMENTATION" nil 0)
    ("implementation" "IMPLEMENTATION" nil 0)
    ("import" "IMPORT" nil 0)
    ("in" "IN" nil 0)
    ("inc" "INC" nil 0)
    ("incl" "INCL" nil 0)
    ("int" "INTEGER" nil 0)
    ("integer" "INTEGER" nil 0)
    ("loo" "LOOP" nil 0)
    ("loop" "LOOP" nil 0)
    ("mod" "MOD" nil 0)
    ("modu" "MODULE" nil 0)
    ("module" "MODULE" nil 0)
    ("new" "NEW" nil 0)
    ("nil" "NIL" nil 0)
    ("not" "NOT" nil 0)
    ("odd" "ODD" nil 0)
    ("of" "OF" nil 0)
    ("or" "OR" nil 0)
    ("ord" "ORD" nil 0)
    ("poi" "POINTER" nil 0)
    ("pointer" "POINTER" nil 0)
    ("pro" "PROCEDURE" nil 0)
    ("proc" "PROC" nil 1)
    ("procedure" "PROCEDURE" nil 0)
    ("qua" "QUALIFIED" nil 0)
    ("qualified" "QUALIFIED" nil 0)
    ("rea" "REAL" nil 0)
    ("real" "REAL" nil 0)
    ("rec" "RECORD" nil 0)
    ("record" "RECORD" nil 0)
    ("rep" "REPEAT" nil 0)
    ("repeat" "REPEAT" nil 0)
    ("ret" "RETURN" nil 0)
    ("return" "RETURN" nil 0)
    ("set" "SET" nil 0)
    ("the" "THEN" nil 0)
    ("then" "THEN" nil 0)
    ("to" "TO" nil 0)
    ("tru" "TRUE" nil 0)
    ("true" "TRUE" nil 0)
    ("trun" "TRUNC" nil 0)
    ("trunc" "TRUNC" nil 0)
    ("typ" "TYPE" nil 0)
    ("type" "TYPE" nil 0)
    ("unt" "UNTIL" nil 0)
    ("until" "UNTIL" nil 0)
    ("val" "VAL" nil 0)
    ("var" "VAR" nil 0)
    ("whi" "WHILE" nil 0)
    ("while" "WHILE" nil 0)
    ("wit" "WITH" nil 0)
    ("with" "WITH" nil 0)
    ("~" "NOT" nil 0)
   ))

(define-abbrev-table 'multishell-list-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'p4-annotate-mode-abbrev-table '())

(define-abbrev-table 'p4-basic-list-mode-abbrev-table '())

(define-abbrev-table 'p4-basic-mode-abbrev-table '())

(define-abbrev-table 'p4-change-form-mode-abbrev-table '())

(define-abbrev-table 'p4-diff-mode-abbrev-table '())

(define-abbrev-table 'p4-filelog-mode-abbrev-table '())

(define-abbrev-table 'p4-form-mode-abbrev-table '())

(define-abbrev-table 'p4-grep-mode-abbrev-table '())

(define-abbrev-table 'p4-job-form-mode-abbrev-table '())

(define-abbrev-table 'p4-opened-list-mode-abbrev-table '())

(define-abbrev-table 'p4-status-list-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'remember-mode-abbrev-table '())

(define-abbrev-table 'scheme-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'sldb-mode-abbrev-table '())

(define-abbrev-table 'slime-compiler-notes-mode-abbrev-table '())

(define-abbrev-table 'slime-connection-list-mode-abbrev-table '())

(define-abbrev-table 'slime-fuzzy-completions-mode-abbrev-table '())

(define-abbrev-table 'slime-inspector-mode-abbrev-table '())

(define-abbrev-table 'slime-mrepl-mode-abbrev-table '())

(define-abbrev-table 'slime-thread-control-mode-abbrev-table '())

(define-abbrev-table 'slime-trace-dialog--detail-mode-abbrev-table '())

(define-abbrev-table 'slime-trace-dialog-mode-abbrev-table '())

(define-abbrev-table 'slime-xref-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'sql-mode-abbrev-table
  '(
    ("del" "delete" nil 0)
    ("ins" "insert" nil 0)
    ("sel" "select" nil 0)
    ("upd" "update" nil 0)
   ))

(define-abbrev-table 'starweb-mode-abbrev-table
  '(
    ("a" "A" nil 0)
    ("cmw" "CMW" nil 0)
    ("faf" "FAF" nil 0)
    ("fah" "FAH" nil 0)
    ("fai" "FAI" nil 0)
    ("fap" "FAP" nil 0)
    ("fb" "FB" nil 0)
    ("fcf" "FCF" nil 0)
    ("fch" "FCH" nil 0)
    ("fcp" "FCP" nil 0)
    ("fd" "FD" nil 0)
    ("fg" "FG" nil 0)
    ("fhi" "FHI" nil 0)
    ("fj" "FJ" nil 0)
    ("fl" "FL" nil 0)
    ("fn" "FN" nil 0)
    ("fp" "FP" nil 0)
    ("fq" "FQ" nil 0)
    ("fr" "FR" nil 0)
    ("ftf" "FTF" nil 0)
    ("fti" "FTI" nil 0)
    ("ftp" "FTP" nil 0)
    ("fu" "FU" nil 0)
    ("fw" "FW" nil 0)
    ("fww" "FWW" nil 0)
    ("fwww" "FWWW" nil 0)
    ("fx" "FX" nil 0)
    ("iac" "IAC" nil 0)
    ("iaf" "IAF" nil 0)
    ("icc" "ICC" nil 0)
    ("icf" "ICF" nil 0)
    ("ip" "IP" nil 0)
    ("itf" "ITF" nil 0)
    ("itp" "ITP" nil 0)
    ("j" "J" nil 0)
    ("l" "L" nil 0)
    ("n" "N" nil 0)
    ("pac" "PAC" nil 0)
    ("paf" "PAF" nil 0)
    ("pcc" "PCC" nil 0)
    ("pcf" "PCF" nil 0)
    ("pmw" "PMW" nil 0)
    ("pp" "PP" nil 0)
    ("ptf" "PTF" nil 0)
    ("pti" "PTI" nil 0)
    ("vf" "VF" nil 0)
    ("vw" "VW" nil 0)
    ("wbf" "WBF" nil 0)
    ("wbi" "WBI" nil 0)
    ("wbp" "WBP" nil 0)
    ("wg" "WG" nil 0)
    ("wii" "WII" nil 0)
    ("wil" "WIL" nil 0)
    ("wir" "WIR" nil 0)
    ("ws" "WS" nil 0)
    ("wx" "WX" nil 0)
    ("x" "X" nil 0)
    ("z" "Z" nil 0)
   ))

(define-abbrev-table 'sun-assembler-abbrev-table
  '(
    ("#d" "#define" nil 3)
    ("#ef" "#endif" nil 0)
    ("#el" "#else" nil 0)
    ("#i" "#include" nil 2)
    ("#id" "#ifdef" nil 0)
    ("#in" "#ifndef" nil 0)
    ("#u" "#undef" nil 0)
   ))

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'vhdl-mode-abbrev-table
  '(
    ("--" "" vhdl-template-display-comment-hook 0)
    ("abs" "" vhdl-template-default-hook 0)
    ("access" "" vhdl-template-default-hook 0)
    ("after" "" vhdl-template-default-hook 0)
    ("alias" "" vhdl-template-alias-hook 0)
    ("all" "" vhdl-template-default-hook 0)
    ("and" "" vhdl-template-default-hook 0)
    ("arch" "" vhdl-template-architecture-hook 0)
    ("architecture" "" vhdl-template-architecture-hook 0)
    ("array" "" vhdl-template-default-hook 0)
    ("assert" "" vhdl-template-assert-hook 0)
    ("attr" "" vhdl-template-attribute-hook 0)
    ("attribute" "" vhdl-template-attribute-hook 0)
    ("begin" "" vhdl-template-default-indent-hook 0)
    ("block" "" vhdl-template-block-hook 0)
    ("body" "" vhdl-template-default-hook 0)
    ("buffer" "" vhdl-template-default-hook 0)
    ("bus" "" vhdl-template-default-hook 0)
    ("case" "" vhdl-template-case-hook 0)
    ("comp" "" vhdl-template-component-hook 0)
    ("component" "" vhdl-template-component-hook 0)
    ("cond" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conditional" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conf" "" vhdl-template-configuration-hook 0)
    ("configuration" "" vhdl-template-configuration-hook 0)
    ("cons" "" vhdl-template-constant-hook 0)
    ("constant" "" vhdl-template-constant-hook 0)
    ("disconnect" "" vhdl-template-disconnect-hook 0)
    ("downto" "" vhdl-template-default-hook 0)
    ("else" "" vhdl-template-else-hook 0)
    ("elseif" "" vhdl-template-elsif-hook 0)
    ("elsif" "" vhdl-template-elsif-hook 0)
    ("end" "" vhdl-template-default-indent-hook 0)
    ("entity" "" vhdl-template-entity-hook 0)
    ("exit" "" vhdl-template-exit-hook 0)
    ("file" "" vhdl-template-file-hook 0)
    ("for" "" vhdl-template-for-hook 0)
    ("func" "" vhdl-template-function-hook 0)
    ("function" "" vhdl-template-function-hook 0)
    ("generic" "" vhdl-template-generic-hook 0)
    ("group" "" vhdl-template-group-hook 0)
    ("guarded" "" vhdl-template-default-hook 0)
    ("if" "" vhdl-template-if-hook 0)
    ("impure" "" vhdl-template-default-hook 0)
    ("in" "" vhdl-template-default-hook 0)
    ("inertial" "" vhdl-template-default-hook 0)
    ("inout" "" vhdl-template-default-hook 0)
    ("inst" "" vhdl-template-instance-hook 0)
    ("instance" "" vhdl-template-instance-hook 0)
    ("is" "" vhdl-template-default-hook 0)
    ("label" "" vhdl-template-default-hook 0)
    ("library" "" vhdl-template-library-hook 0)
    ("linkage" "" vhdl-template-default-hook 0)
    ("literal" "" vhdl-template-default-hook 0)
    ("loop" "" vhdl-template-bare-loop-hook 0)
    ("map" "" vhdl-template-map-hook 0)
    ("mod" "" vhdl-template-default-hook 0)
    ("nand" "" vhdl-template-default-hook 0)
    ("new" "" vhdl-template-default-hook 0)
    ("next" "" vhdl-template-next-hook 0)
    ("nor" "" vhdl-template-default-hook 0)
    ("not" "" vhdl-template-default-hook 0)
    ("null" "" vhdl-template-default-hook 0)
    ("of" "" vhdl-template-default-hook 0)
    ("on" "" vhdl-template-default-hook 0)
    ("open" "" vhdl-template-default-hook 0)
    ("or" "" vhdl-template-default-hook 0)
    ("others" "" vhdl-template-default-hook 0)
    ("out" "" vhdl-template-default-hook 0)
    ("pack" "" vhdl-template-package-hook 0)
    ("package" "" vhdl-template-package-hook 0)
    ("port" "" vhdl-template-port-hook 0)
    ("postponed" "" vhdl-template-default-hook 0)
    ("procedure" "" vhdl-template-procedure-hook 0)
    ("process" "" vhdl-template-process-hook 0)
    ("pure" "" vhdl-template-default-hook 0)
    ("range" "" vhdl-template-default-hook 0)
    ("record" "" vhdl-template-default-hook 0)
    ("register" "" vhdl-template-default-hook 0)
    ("reject" "" vhdl-template-default-hook 0)
    ("rem" "" vhdl-template-default-hook 0)
    ("report" "" vhdl-template-report-hook 0)
    ("return" "" vhdl-template-return-hook 0)
    ("rol" "" vhdl-template-default-hook 0)
    ("ror" "" vhdl-template-default-hook 0)
    ("select" "" vhdl-template-selected-signal-asst-hook 0)
    ("severity" "" vhdl-template-default-hook 0)
    ("shared" "" vhdl-template-default-hook 0)
    ("sig" "" vhdl-template-signal-hook 0)
    ("signal" "" vhdl-template-signal-hook 0)
    ("sla" "" vhdl-template-default-hook 0)
    ("sll" "" vhdl-template-default-hook 0)
    ("sra" "" vhdl-template-default-hook 0)
    ("srl" "" vhdl-template-default-hook 0)
    ("subtype" "" vhdl-template-subtype-hook 0)
    ("then" "" vhdl-template-default-hook 0)
    ("to" "" vhdl-template-default-hook 0)
    ("transport" "" vhdl-template-default-hook 0)
    ("type" "" vhdl-template-type-hook 0)
    ("unaffected" "" vhdl-template-default-hook 0)
    ("units" "" vhdl-template-default-hook 0)
    ("until" "" vhdl-template-default-hook 0)
    ("use" "" vhdl-template-use-hook 0)
    ("var" "" vhdl-template-variable-hook 0)
    ("variable" "" vhdl-template-variable-hook 0)
    ("wait" "" vhdl-template-wait-hook 0)
    ("when" "" vhdl-template-when-hook 0)
    ("while" "" vhdl-template-while-loop-hook 0)
    ("with" "" vhdl-template-with-hook 0)
    ("xnor" "" vhdl-template-default-hook 0)
    ("xor" "" vhdl-template-default-hook 0)
   ))

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

