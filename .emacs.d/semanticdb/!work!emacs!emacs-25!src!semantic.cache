;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [831 843])
            ("setjmp.h" include (:system-flag t) nil [845 864])
            ("stdalign.h" include (:system-flag t) nil [865 886])
            ("stdarg.h" include (:system-flag t) nil [887 906])
            ("stddef.h" include (:system-flag t) nil [907 926])
            ("float.h" include (:system-flag t) nil [927 945])
            ("inttypes.h" include (:system-flag t) nil [946 967])
            ("limits.h" include (:system-flag t) nil [968 987])
            ("intprops.h" include (:system-flag t) nil [989 1010])
            ("verify.h" include (:system-flag t) nil [1011 1030])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1452 1467])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1657 1680])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1734 1755])
            ("max" variable (:constant-flag t) nil [1843 1846])
            ("min" variable (:constant-flag t) nil [1885 1888])
            ("ARRAYELTS" variable (:constant-flag t) nil [1967 1976])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2110 2120])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2519 2541])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2542 2574])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2585 2598])
            ("pI" variable (:constant-flag t) nil [2617 2619])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2680 2707])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2708 2741])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2752 2765])
            ("pI" variable (:constant-flag t) nil [2785 2787])
            ("EMACS_INT" variable (:type "long int") nil [2836 2855])
            ("EMACS_UINT" variable (:type "long int") nil [2878 2898])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2909 2922])
            ("pI" variable (:constant-flag t) nil [2943 2945])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3158 3185]))                  
                :type "enum")
                nil [3150 3258])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [3511 3536])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [3546 3559])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (3597 3605)
                        :type "int")
                        (reparse-symbol enumsubparts) [3576 3605]))                  
                :type "enum")
                nil [3569 3629])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3804 3819]))                  
                :type "int")
                nil [3796 3852])
            ("" type
               (:members 
                  ( ("BITS_PER_CHAR" variable
                       (:constant-flag t
                        :default-value (3941 3949)
                        :type "int")
                        (reparse-symbol enumsubparts) [3920 3949])
                    ("BITS_PER_SHORT" variable
                       (:constant-flag t
                        :default-value (3976 3984)
                        :type "int")
                        (reparse-symbol enumsubparts) [3955 3984])
                    ("BITS_PER_LONG" variable
                       (:constant-flag t
                        :default-value (4028 4036)
                        :type "int")
                        (reparse-symbol enumsubparts) [4007 4036])
                    ("BITS_PER_EMACS_INT" variable
                       (:constant-flag t
                        :default-value (4083 4091)
                        :type "int")
                        (reparse-symbol enumsubparts) [4062 4091]))                  
                :type "enum")
                nil [3907 4117])
            ("printmax_t" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [4543 4572])
            ("uprintmax_t" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [4573 4604])
            ("pMd" variable (:constant-flag t) nil [4614 4617])
            ("pMu" variable (:constant-flag t) nil [4633 4636])
            ("pD" variable (:constant-flag t) nil [5019 5021])
            ("pD" variable (:constant-flag t) nil [5064 5066])
            ("pD" variable (:constant-flag t) nil [5111 5113])
            ("eassert" variable (:constant-flag t) nil [6417 6424])
            ("eassume" variable (:constant-flag t) nil [6495 6502])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8102 8133)
                        :type "int")
                        (reparse-symbol enumsubparts) [8092 8133])
                    ("INTTYPEBITS" variable
                       (:constant-flag t
                        :default-value (8202 8216)
                        :type "int")
                        (reparse-symbol enumsubparts) [8188 8216])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8309 8320)
                        :type "int")
                        (reparse-symbol enumsubparts) [8295 8320]))                  
                :type "enum")
                nil [7865 8325])
            ("VAL_MAX" variable (:constant-flag t) nil [8685 8692])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9135 9146])
            ("GCALIGNED" variable (:constant-flag t) nil [9522 9531])
            ("lisp_h_XLI" variable (:constant-flag t) nil [10858 10868])
            ("lisp_h_XIL" variable (:constant-flag t) nil [10885 10895])
            ("lisp_h_CHECK_LIST_CONS" variable (:constant-flag t) nil [10918 10940])
            ("lisp_h_CHECK_NUMBER" variable (:constant-flag t) nil [10989 11008])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [11060 11079])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [11129 11146])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [11240 11252])
            ("lisp_h_EQ" variable (:constant-flag t) nil [11289 11298])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [11334 11347])
            ("lisp_h_INTEGERP" variable (:constant-flag t) nil [11385 11400])
            ("lisp_h_MARKERP" variable (:constant-flag t) nil [11466 11480])
            ("lisp_h_MISCP" variable (:constant-flag t) nil [11541 11553])
            ("lisp_h_NILP" variable (:constant-flag t) nil [11590 11601])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [11626 11647])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [11740 11764])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [11804 11821])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [11905 11919])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [11958 11976])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [12019 12030])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [12057 12068])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [12097 12109])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [12192 12204])
            ("lisp_h_check_cons_list" variable (:constant-flag t) nil [12254 12276])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [13118 13142])
            ("INTMASK" variable (:constant-flag t) nil [14895 14902])
            ("case_Lisp_Int" variable (:constant-flag t) nil [14948 14961])
            ("ENUM_BF" variable (:constant-flag t) nil [15328 15335])
            ("Lisp_Object" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [20713 20743])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [20752 20766])
            ("LISP_INITIALLY_ZERO" variable (:constant-flag t) nil [20883 20902])
            ("Lisp_Fwd" variable (:type "int") nil [20989 20998])
            ("might_dump" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [22696 22719])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [22832 22856])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [23231 23253])
            ("redirect" variable
               (:suffix ":3"
                :type ("symbol_redirect" type (:type "enum") nil nil))
                nil [23566 23605])
            ("constant" variable
               (:suffix ":2"
                :type "unsigned int")
                nil [23784 23806])
            ("interned" variable
               (:suffix ":2"
                :type "unsigned int")
                nil [23904 23926])
            ("declared_special" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24066 24095])
            ("pinned" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24167 24186])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24236 24253])
            ("val" variable (:type ("" type
                 (:members 
                    ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24406 24424])
                      ("alias" variable
                         (:pointer 1
                          :type ("Lisp_Symbol" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [24429 24455])
                      ("blv" variable
                         (:pointer 1
                          :type ("Lisp_Buffer_Local_Value" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [24460 24496])
                      ("fwd" variable
                         (:pointer 1
                          :type ("Lisp_Fwd" type (:type "union") nil nil))
                          (reparse-symbol classsubparts) [24501 24521]))                    
                  :type "union")
                  nil nil)) nil [24394 24530])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24596 24617])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24658 24676])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24747 24772])
            ("EXFUN" variable (:constant-flag t) nil [25031 25036])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [25225 25240])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [25277 25297])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [25320 25332])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [25348 25360])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [25383 25395])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [25431 25443])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [25492 25504])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [25566 25578])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [25659 25671])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [25765 25777])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [25884 25896])
            ("TAG_PTR" variable (:constant-flag t) nil [26285 26292])
            ("TAG_SYMOFFSET" variable (:constant-flag t) nil [26575 26588])
            ("XLI_BUILTIN_LISPSYM" variable (:constant-flag t) nil [26799 26818])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [27058 27076])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [27530 27560])
            ("globals.h" include nil nil [27574 27594])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [28008 28023])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [28251 28268])
            ("VALMASK" variable (:constant-flag t) nil [30324 30331])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [30553 30573])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [30613 30633])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [31555 31582])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31766 31768]))                  
                :type "int")
                nil [31761 31769])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [31861 31883])
            ("INTTYPEBITS" variable (:type "int") nil [31983 31995])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [32216 32243])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [32316 32333])
            ("n" variable (:type "int") nil [32343 32345])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [32422 32445])
            ("VALBITS" variable (:type "int") nil [32489 32497])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [32620 32668])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [32671 32702])
            ("p" variable (:type "int") nil [32712 32714])
            ("i" variable (:type "int") nil [32911 32913])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [33038 33061])
            ("XUINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [33327 33344])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [33527 33554])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33601 33604]))                  
                :type "int")
                nil [33596 33624])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [33922 33939])
            ("upper" variable (:type "int") nil [34163 34169])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34412 34414])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34415 34431]))                  
                :type "int")
                nil [34404 34432])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34532 34534])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34535 34547]))                  
                :type "int")
                nil [34524 34548])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [34656 34668])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34775 34777])
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34778 34789]))                  
                :type "int")
                nil [34767 34790])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34921 34923])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34924 34940]))                  
                :type "int")
                nil [34913 34941])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35036 35038])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35039 35055]))                  
                :type "int")
                nil [35028 35056])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35157 35159])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35160 35176]))                  
                :type "int")
                nil [35149 35177])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35271 35273])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35274 35290]))                  
                :type "int")
                nil [35263 35291])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35386 35388])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35389 35405]))                  
                :type "int")
                nil [35378 35406])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35519 35521])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35522 35538]))                  
                :type "int")
                nil [35511 35539])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35664 35666])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35667 35683]))                  
                :type "int")
                nil [35656 35684])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35800 35802])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35803 35819]))                  
                :type "int")
                nil [35792 35820])
            ("a" variable
               (:default-value "XIL (TAG_PTR (type, ptr))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35951 35993])
            ("a" variable (:type "int") nil [36061 36063])
            ("a" variable
               (:default-value "XIL (TAG_SYMOFFSET ((char *) sym - (char *) lispsym))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36133 36203])
            ("a" variable (:type "int") nil [36245 36247])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36331 36340])
                    ("" variable (:type ("index" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36341 36347]))                  
                :type "int")
                nil [36313 36348])
            ("XSETINT" variable (:constant-flag t) nil [36360 36367])
            ("XSETFASTINT" variable (:constant-flag t) nil [36406 36417])
            ("XSETCONS" variable (:constant-flag t) nil [36456 36464])
            ("XSETVECTOR" variable (:constant-flag t) nil [36516 36526])
            ("XSETSTRING" variable (:constant-flag t) nil [36584 36594])
            ("XSETSYMBOL" variable (:constant-flag t) nil [36648 36658])
            ("XSETFLOAT" variable (:constant-flag t) nil [36702 36711])
            ("XSETMISC" variable (:constant-flag t) nil [36764 36772])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [36853 36865])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [36969 36985])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [37266 37282])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [37450 37472])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [37660 37684])
            ("XSETPROCESS" variable (:constant-flag t) nil [37756 37767])
            ("XSETWINDOW" variable (:constant-flag t) nil [37822 37832])
            ("XSETTERMINAL" variable (:constant-flag t) nil [37886 37898])
            ("XSETSUBR" variable (:constant-flag t) nil [37954 37962])
            ("XSETCOMPILED" variable (:constant-flag t) nil [38014 38026])
            ("XSETBUFFER" variable (:constant-flag t) nil [38082 38092])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [38146 38160])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [38218 38233])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [38292 38310])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38697 38699])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38700 38710]))                  
                :type "int")
                nil [38689 38711])
            ("a" variable
               (:default-value "XIL (TAG_PTR (Lisp_Int0, p))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [38769 38814])
            ("a" variable (:type "int") nil [38870 38872])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [39055 39089])
            ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [39160 39176])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [39236 39252])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Cons" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [39310 39334]))                    
                  :type "union")
                  nil nil)) nil [39182 39343])
            ("car" variable (:type "int") nil [39877 39881])
            ("cdr" variable (:type "int") nil [39956 39960])
            ("car" variable (:type "int") nil [40053 40069])
            ("cdr" variable (:type "int") nil [40126 40142])
            ("n" variable (:type "int") nil [40386 40388])
            ("n" variable (:type "int") nil [40463 40465])
            ("Qnil" variable (:type "int") nil [40946 40951])
            ("Qnil" variable (:type "int") nil [41032 41037])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41156 41171])
            ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41176 41196])
            ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) nil [41201 41220])
            ("data" variable
               (:pointer 1
                :type "unsigned char")
                nil [41265 41285])
            ("size_byte" variable (:type "int") nil [41412 41422])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [42161 42179])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [42305 42323])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [42613 42633])
            ("data" variable (:type "int") nil [42969 42974])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43088 43095]))                  
                :type "int")
                nil [43081 43096])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43181 43188]))                  
                :type "int")
                nil [43174 43195])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43284 43291]))                  
                :type "int")
                nil [43277 43298])
            ("size" variable (:type "int") nil [43382 43387])
            ("size_byte" variable (:type "int") nil [43640 43650])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43731 43747]))                  
                :type "int")
                nil [43717 43749])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [43843 43858])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [45470 45485])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [45592 45624])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45629 45673])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [46099 46131])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [46173 46188])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [46406 46444])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [46505 46545])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [46548 46568])
            ("size" variable (:type "int") nil [46578 46583])
            ("data" variable (:type "int") nil [46668 46673])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46786 46788]))                  
                :type "int")
                nil [46768 46789])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [46925 46997])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [47041 47060])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47120 47192])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [47243 47269])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47373 47418])
            ("Qnil" variable (:type "int") nil [47650 47655])
            ("addr" variable
               (:pointer 1
                :type "unsigned char")
                nil [47758 47778])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47782 47827])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47862 47864]))                  
                :type "int")
                nil [47838 47895])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [48435 48449])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [48549 48563])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [48614 48660])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48663 48683])
            ("size" variable (:type "int") nil [48693 48698])
            ("PTRDIFF_MIN" variable (:type "int") nil [48859 48875])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [49014 49034])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [49319 49339])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49828 49840]))                  
                :type "int")
                nil [49820 49841])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49898 49900])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49904 49911]))                  
                :type "int")
                nil [49890 49912])
            ("VECSIZE" variable (:constant-flag t) nil [50060 50067])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [50345 50358])
            ("UNSIGNED_CMP" variable (:constant-flag t) nil [50778 50790])
            ("ASCII_CHAR_P" variable (:constant-flag t) nil [51032 51044])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [52222 52254])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52372 52391])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52574 52593])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52692 52712])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52858 52876])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52882 52931])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52993 53035])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [53212 53244])
            ("depth" variable (:type "int") nil [53635 53645])
            ("min_char" variable (:type "int") nil [53711 53724])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [53786 53830])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53913 53948])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [53951 53967])
            ("val" variable (:type "int") nil [54259 54263])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54857 54873])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54875 54881])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54882 54886])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54887 54891]))                  
                :type "int")
                nil [54828 54892])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54920 54923])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54924 54928])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54929 54933]))                  
                :type "int")
                nil [54904 54934])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [55101 55133])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [55171 55176]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55152 55177])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55203 55215]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55184 55216])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55242 55254])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55255 55267]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55223 55268])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55294 55306])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55307 55319])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55320 55332]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55275 55333])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55359 55371])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55372 55384])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55385 55397])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55398 55410]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55340 55411])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55437 55449])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55450 55462])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55463 55475])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55476 55488])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55489 55501]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55418 55502])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55528 55540])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55541 55553])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55554 55566])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55567 55579])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55580 55592])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55593 55605]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55509 55606])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55632 55644])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55645 55657])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55658 55670])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55671 55683])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55684 55696])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55697 55709])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55710 55722]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55613 55723])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55749 55761])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55762 55774])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55775 55787])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55788 55800])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55801 55813])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55814 55826])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55827 55839])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55840 55852]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55730 55853])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55887 55904]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55860 55905])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55934 55944])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [55945 55959]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55912 55960]))                    
                  :type "union")
                  nil nil)) nil [55138 55976])
            ("min_args" variable (:type "short") nil [55981 56006])
            ("max_args" variable (:type "short") nil [55981 56006])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [56011 56035])
            ("intspec" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [56040 56060])
            ("doc" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [56065 56081])
            ("alias" variable (:type "int") nil [57472 57478])
            ("blv" variable (:type "int") nil [57625 57629])
            ("fwd" variable (:type "int") nil [57760 57764])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [58014 58024])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [58175 58183])
            ("fwd" variable
               (:default-value "v"
                :type "int")
                nil [58318 58326])
            ("name" variable (:type "int") nil [58405 58410])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [58552 58570])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [58740 58775])
            ("DEFSYM" variable (:constant-flag t) nil [59191 59197])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59515 59532])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59582 59613])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59673 59703])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59763 59789])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59790 59802])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59803 59815]))                  
                :type "bool")
                nil [59748 59816])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59884 59910])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59911 59923]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [59862 59924])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [60025 60057])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60159 60176])
            ("rehash_size" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60383 60407])
            ("rehash_threshold" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60505 60534])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60636 60653])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60866 60883])
            ("next_free" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60936 60958])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61147 61165])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [61417 61433])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61616 61642])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [61690 61718])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61833 61867])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61940 61942])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61943 61959]))                  
                :type "int")
                nil [61925 61960])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62073 62075])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62076 62092]))                  
                :type "int")
                nil [62065 62093])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [62105 62120])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62333 62335])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62336 62350])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62355 62359]))                  
                :type "int")
                nil [62327 62360])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62515 62517])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62518 62532])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62537 62542]))                  
                :type "int")
                nil [62509 62546])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62728 62730])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62731 62736])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62737 62741]))                  
                :type "int")
                nil [62722 62742])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62905 62907])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62908 62913])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62914 62918]))                  
                :type "int")
                nil [62899 62919])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63152 63154])
                    ("" variable (:type ("index" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63155 63161])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63162 63166]))                  
                :type "int")
                nil [63146 63167])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63292 63294])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63295 63300]))                  
                :type "int")
                nil [63285 63301])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8"
                :type "double")
                nil [63580 63631])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5"
                :type "double")
                nil [63703 63749])
            ("y" variable (:type "int") nil [63969 63971])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [64272 64307])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64333 64355])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [64358 64379])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [64407 64442])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64471 64493])
            ("spacer" variable
               (:suffix ":13"
                :type "unsigned int")
                nil [64496 64517])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64688 64716])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64829 64856])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65422 65444])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65773 65798])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [65861 65879])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [66119 66137])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [66757 66792])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [66823 66845])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [66850 66871])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [66876 66902])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66907 66925])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66930 66946])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66951 66969])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [69311 69346])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [69380 69402])
            ("SAVE_TYPE_BITS" variable (:type "int") nil [69934 69949])
            ("data" variable
               (:dereference 1
                :type ("" type
                     (:members 
                        ( ("pointer" variable
                             (:pointer 1
                              :type "void")
                              (reparse-symbol classsubparts) [69968 69982])
                          ("funcpointer" variable (:type ("voidfuncptr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [69989 70013])
                          ("integer" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70020 70038])
                          ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70045 70064]))                        
                      :type "union")
                      nil nil))
                nil [69954 70094])
            ("pointer" variable (:type "int") nil [70528 70536])
            ("pointer" variable
               (:default-value "val"
                :type "int")
                nil [70697 70711])
            ("funcpointer" variable (:type "int") nil [70880 70892])
            ("integer" variable (:type "int") nil [71092 71100])
            ("integer" variable
               (:default-value "val"
                :type "int")
                nil [71265 71279])
            ("object" variable (:type "int") nil [71473 71480])
            ("base" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [71758 71784])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [71846 71874])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [71879 71907])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [72116 72137])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [72228 72263])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [72291 72313])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [72318 72339])
            ("chain" variable
               (:pointer 1
                :type ("Lisp_Misc" type (:type "union") nil nil))
                nil [72344 72367])
            ("u_any" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72528 72555])
            ("u_free" variable (:type ("Lisp_Free" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72599 72623])
            ("u_marker" variable (:type ("Lisp_Marker" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72628 72656])
            ("u_overlay" variable (:type ("Lisp_Overlay" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72661 72691])
            ("u_save_value" variable (:type ("Lisp_Save_Value" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72696 72732])
            ("u_finalizer" variable (:type ("Lisp_Finalizer" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72737 72771])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72908 72910])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72911 72921]))                  
                :type "int")
                nil [72900 72922])
            ("u_any" variable (:type "int") nil [73028 73034])
            ("type" variable (:type "int") nil [73116 73121])
            ("u_marker" variable (:type "int") nil [73226 73235])
            ("u_overlay" variable (:type "int") nil [73343 73353])
            ("u_save_value" variable (:type "int") nil [73470 73483])
            ("u_finalizer" variable (:type "int") nil [73597 73609])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [73979 74003])
            ("intvar" variable
               (:pointer 1
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [74029 74047])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74274 74298])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [74325 74339])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74564 74588])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74614 74634])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74803 74827])
            ("offset" variable (:type "int") nil [74860 74871])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74952 74974])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76454 76479])
            ("frame_local" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76636 76660])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76778 76796])
            ("fwd" variable
               (:pointer 1
                :type ("Lisp_Fwd" type (:type "union") nil nil))
                nil [76880 76900])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77023 77041])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77149 77169])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77453 77473])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [77598 77622])
            ("offset" variable (:type "int") nil [77655 77666])
            ("u_intfwd" variable (:type ("Lisp_Intfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77696 77724])
            ("u_boolfwd" variable (:type ("Lisp_Boolfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77729 77759])
            ("u_objfwd" variable (:type ("Lisp_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77764 77792])
            ("u_buffer_objfwd" variable (:type ("Lisp_Buffer_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77797 77839])
            ("u_kboard_objfwd" variable (:type ("Lisp_Kboard_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77844 77886])
            ("type" variable (:type "int") nil [77971 77976])
            ("u_buffer_objfwd" variable (:type "int") nil [78097 78113])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [78195 78207])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [78214 78239]))                    
                  :type "union")
                  nil nil)) nil [78177 78248])
            ("data" variable (:type "int") nil [78322 78327])
            ("_UCHAR_T" variable (:constant-flag t) nil [79109 79117])
            ("UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [79118 79146])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [80148 80164])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80239 80241]))                  
                :type "int")
                nil [80231 80242])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80319 80321]))                  
                :type "int")
                nil [80313 80322])
            ("hi" variable (:type "int") nil [80453 80456])
            ("TYPE_RANGED_INTEGERP" variable (:constant-flag t) nil [80468 80488])
            ("Lisp_String" variable (:type "int") nil [81203 81215])
            ("Lisp_Misc_Overlay" variable (:type "int") nil [81399 81417])
            ("Lisp_Misc_Save_Value" variable (:type "int") nil [81501 81522])
            ("Lisp_Misc_Finalizer" variable (:type "int") nil [81606 81626])
            ("EQ" variable (:type "int") nil [81819 81846])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [81924 81944])
            ("false" variable (:type "int") nil [82291 82297])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82629 82631])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82632 82658]))                  
                :type "int")
                nil [82614 82659])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82726 82728])
                    ("" variable (:type ("PVEC_PROCESS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82729 82742]))                  
                :type "int")
                nil [82711 82743])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82809 82811])
                    ("" variable (:type ("PVEC_WINDOW" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82812 82824]))                  
                :type "int")
                nil [82794 82825])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82893 82895])
                    ("" variable (:type ("PVEC_TERMINAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82896 82910]))                  
                :type "int")
                nil [82878 82911])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82975 82977])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82978 82988]))                  
                :type "int")
                nil [82960 82989])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83057 83059])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83060 83074]))                  
                :type "int")
                nil [83042 83075])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83141 83143])
                    ("" variable (:type ("PVEC_BUFFER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83144 83156]))                  
                :type "int")
                nil [83126 83157])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83228 83230])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83231 83247]))                  
                :type "int")
                nil [83213 83248])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83323 83325])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83326 83346]))                  
                :type "int")
                nil [83308 83347])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83419 83421])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83422 83439]))                  
                :type "int")
                nil [83404 83440])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83505 83507])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83508 83519]))                  
                :type "int")
                nil [83490 83520])
            ("EQ" variable (:type "int") nil [83618 83642])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83777 83779]))                  
                :type "int")
                nil [83762 83780])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83840 83849])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83853 83861])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83863 83870])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83871 83873]))                  
                :type "int")
                nil [83828 83874])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [83943 83973])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84023 84047])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84098 84122])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84183 84194])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84196 84205])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84206 84208]))                  
                :type "int")
                nil [84171 84209])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84273 84291])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84293 84302])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84303 84311]))                  
                :type "int")
                nil [84261 84313])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84371 84380])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84382 84389])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84390 84392]))                  
                :type "int")
                nil [84359 84393])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84453 84464])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84466 84475])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84476 84478]))                  
                :type "int")
                nil [84441 84479])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84544 84561])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84563 84578])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84579 84581]))                  
                :type "int")
                nil [84532 84582])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84749 84751]))                  
                :type "int")
                nil [84742 84752])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84791 84793]))                  
                :type "int")
                nil [84783 84794])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84818 84826])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84827 84829]))                  
                :type "int")
                nil [84797 84830])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84912 84922])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84924 84934])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84935 84937]))                  
                :type "int")
                nil [84900 84938])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BUFFERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84998 85009])
                    ("" variable (:type ("Qbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85011 85020])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85021 85023]))                  
                :type "int")
                nil [84986 85024])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("WINDOWP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85084 85095])
                    ("" variable (:type ("Qwindowp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85097 85106])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85107 85109]))                  
                :type "int")
                nil [85072 85110])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NATNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85286 85297])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85299 85310])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85311 85313]))                  
                :type "int")
                nil [85274 85314])
            ("CHECK_RANGED_INTEGER" variable (:constant-flag t) nil [85326 85346])
            ("CHECK_TYPE_RANGED_INTEGER" variable (:constant-flag t) nil [85709 85734])
            ("CHECK_NUMBER_COERCE_MARKER" variable (:constant-flag t) nil [85979 86005])
            ("extract_float" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86276 86278]))                  
                :type "int")
                nil [86261 86279])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86349 86360])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86362 86371])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86372 86374]))                  
                :type "int")
                nil [86337 86375])
            ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" variable (:constant-flag t) nil [86387 86422])
            ("tmp" variable
               (:default-value "XCAR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86813 86840])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86857 86861]))                  
                :type "int")
                nil [86843 86862])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86874 86876])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86877 86881]))                  
                :type "int")
                nil [86865 86882])
            ("tmp" variable
               (:default-value "XCDR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86935 86962])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86979 86983]))                  
                :type "int")
                nil [86965 86984])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86996 86998])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86999 87003]))                  
                :type "int")
                nil [86987 87004])
            ("DEFUN" variable (:constant-flag t) nil [88969 88974])
            ("functionp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89366 89370]))                  
                :type "int")
                nil [89355 89371])
            ("CALLMANY" variable (:constant-flag t) nil [89654 89662])
            ("CALLN" variable (:constant-flag t) nil [90007 90012])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [91212 91223])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [91384 91401])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [91566 91577])
            ("DEFVAR_INT" variable (:constant-flag t) nil [91739 91749])
            ("DEFVAR_BUFFER_DEFAULTS" variable (:constant-flag t) nil [91910 91932])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [92114 92127])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [92797 92825])
            ("sys_setjmp" variable (:constant-flag t) nil [92835 92845])
            ("sys_longjmp" variable (:constant-flag t) nil [92869 92880])
            ("CHAR_BIT" variable (:type "int") nil [94527 94536])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94586 94595])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94616 94628]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94602 94629])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94636 94652]))                    
                  :type "struct")
                  nil nil)) nil [94541 94666])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94716 94725])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [94746 94753]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94732 94754])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [94761 94771]))                    
                  :type "struct")
                  nil nil)) nil [94671 94789])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94839 94848])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [94869 94873]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94855 94874])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [94881 94889]))                    
                  :type "struct")
                  nil nil)) nil [94794 94907])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94957 94966])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [94987 94992]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94973 94993]))                    
                  :type "struct")
                  nil nil)) nil [94912 95012])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95062 95071])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95139 95176])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95139 95176])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95139 95176]))                    
                  :type "struct")
                  nil nil)) nil [95017 95187])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95237 95246])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95253 95279])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95286 95307])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95314 95332])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95339 95355]))                    
                  :type "struct")
                  nil nil)) nil [95192 95365])
            ("specpdl" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("specbinding" type (:type "union") nil nil))
                nil [95372 95406])
            ("specpdl_ptr" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("specbinding" type (:type "union") nil nil))
                nil [95407 95445])
            ("specpdl_size" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [95446 95476])
            ("specpdl" variable (:type "int") nil [95541 95549])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [96757 96779])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96782 96804])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96807 96823])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96826 96847])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96850 96875])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97208 97234])
            ("bytecode_dest" variable (:type "int") nil [97237 97255])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [97400 97416])
            ("lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [97419 97445])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [97448 97467])
            ("poll_suppress_count" variable (:type "int") nil [97470 97494])
            ("interrupt_input_blocked" variable (:type "int") nil [97497 97525])
            ("byte_stack" variable
               (:pointer 1
                :type ("byte_stack" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [97528 97558])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97563 97601])
            ("stack_bottom" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [97696 97722])
            ("pending_signals" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [98557 98594])
            ("QUIT" variable (:constant-flag t) nil [98642 98646])
            ("QUITP" variable (:constant-flag t) nil [98892 98897])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [98945 98986])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [98987 99025])
            ("window" type
               (:prototype t
                :type "struct")
                nil [99170 99184])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [99185 99198])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99451 99462])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99464 99474])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99475 99482])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99483 99488])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99489 99503])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99505 99510]))                  
                :type "int")
                nil [99443 99511])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99659 99661])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99662 99676])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99681 99685])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99686 99690]))                  
                :type "int")
                nil [99650 99691])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99800 99802])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99803 99817])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99822 99827])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99831 99835]))                  
                :type "int")
                nil [99791 99836])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [100021 100041])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100130 100144])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [100239 100251])
            ("found" variable (:type "int") nil [100457 100463])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100599 100613])
            ("intervals" variable (:type "int") nil [100724 100734])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [100855 100869])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [101075 101088])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [101188 101202])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101447 101465])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101640 101660])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101785 101805])
            ("INTEGER_TO_CONS" variable (:constant-flag t) nil [102406 102421])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [102877 102892])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [104430 104445])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [104659 104675])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105249 105321])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105249 105321])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105249 105321])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109367 109401])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [109483 109523])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [111843 111885])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111886 111917])
            ("stack_base" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111918 111949])
            ("consing_since_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111950 111984])
            ("gc_relative_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111985 112024])
            ("memory_full_cons_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [112025 112069])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112647 112662])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112664 112679]))                  
                :type "int")
                nil [112640 112681])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112769 112784])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112786 112801])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112803 112818]))                  
                :type "int")
                nil [112762 112820])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112921 112936])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112938 112953])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112957 112972])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112974 112989]))                  
                :type "int")
                nil [112914 112991])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113550 113554])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113555 113567]))                  
                :type "int")
                nil [113529 113569])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114316 114320])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114321 114333]))                  
                :type "int")
                nil [114296 114335])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114507 114511])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114512 114524]))                  
                :type "int")
                nil [114494 114526])
            ("v" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [115063 115077])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [115080 115102])
            ("p" variable
               (:default-value "allocate_vector (size)"
                :type "int")
                nil [115106 115133])
            ("v" variable (:type "int") nil [115164 115166])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [115299 115355])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [115358 115401])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [115477 115491])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [115515 115535])
            ("v" variable (:type "int") nil [115545 115547])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [115794 115815])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [116130 116158])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116323 116350])
            ("abort_on_gc" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116351 116375])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118624 118667])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [118706 118725])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [118779 118802])
            ("Lisp_Object" function (:type "int") nil [119014 119043])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [119067 119090])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [120154 120205])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120712 120716])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120717 120729]))                  
                :type "int")
                nil [120702 120731])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120818 120822])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120823 120835]))                  
                :type "int")
                nil [120799 120837])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120867 120902])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120903 120933])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120934 120973])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120974 121011])
            ("handlerlist" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [121012 121047])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121464 121472]))                  
                :type "int")
                nil [121450 121520])
            ("Lisp_Object" function (:type "int") nil [122745 122774])
            ("Lisp_Object" function (:type "int") nil [122923 122945])
            ("Lisp_Object" function (:type "int") nil [122960 122989])
            ("Lisp_Object" function (:type "int") nil [123038 123067])
            ("Lisp_Object" function (:type "int") nil [123095 123124])
            ("Lisp_Object" function (:type "int") nil [123173 123215])
            ("Lisp_Object" function (:type "int") nil [123256 123285])
            ("Lisp_Object" function (:type "int") nil [123338 123380])
            ("Lisp_Object" function (:type "int") nil [123426 123481])
            ("re_registers" type
               (:prototype t
                :type "struct")
                nil [128725 128745])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129085 129092])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129093 129100])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129101 129106]))                  
                :type "int")
                nil [129057 129107])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129238 129245])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129246 129253])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129254 129273]))                  
                :type "int")
                nil [129210 129274])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130126 130162])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130163 130202])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130640 130679])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [130680 130714])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [130750 130776])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131077 131113])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [132323 132350])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [132351 132375])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132529 132593])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132529 132593])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133132 133159])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133224 133249])
            ("IS_DAEMON" variable (:constant-flag t) nil [133427 133436])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [133467 133481])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133724 133760])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133830 133864])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133923 133955])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [134503 134519])
            ("byte_stack_list" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("byte_stack" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [135826 135868])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [136829 136853])
            ("terminal" type
               (:prototype t
                :type "struct")
                nil [136886 136902])
            ("NO_INLINE" variable (:type "int") nil [137682 137692])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [138864 138896])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [139765 139820])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [139821 139878])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [140756 140792])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [141051 141081])
            ("immediate_quit" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [141124 141151])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [141642 141659])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [141699 141716])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [141982 142014])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142025 142030])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142031 142045])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142047 142052]))                  
                :type "int")
                nil [142017 142056])
            ("len" variable (:type "int") nil [142073 142077])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142314 142318])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142319 142331]))                  
                :type "int")
                nil [142296 142333])
            ("eabs" variable (:constant-flag t) nil [142694 142698])
            ("make_fixnum_or_float" variable (:constant-flag t) nil [142827 142847])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [143189 143204])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [143322 143334])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [143433 143444])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [143774 143786])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [144250 144268])
            ("SAFE_FREE" variable (:constant-flag t) nil [144502 144511])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [144726 144742])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [146204 146226])
            ("s" variable (:type ("Lisp_Cons" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [146479 146498])
            ("d" variable (:type "double") nil [146501 146510])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [146511 146522])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [146523 146531])
            ("s" variable (:type ("Lisp_String" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [146561 146582])
            ("d" variable (:type "double") nil [146585 146594])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [146595 146606])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [146607 146615])
            ("STACK_CONS" variable (:constant-flag t) nil [147342 147352])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [147439 147453])
            ("AUTO_CONS" variable (:constant-flag t) nil [147802 147811])
            ("AUTO_LIST1" variable (:constant-flag t) nil [147873 147883])
            ("AUTO_LIST2" variable (:constant-flag t) nil [147981 147991])
            ("AUTO_LIST3" variable (:constant-flag t) nil [148136 148146])
            ("AUTO_LIST4" variable (:constant-flag t) nil [148311 148321])
            ("verify_ascii" variable (:constant-flag t) nil [148703 148715])
            ("AUTO_STRING" variable (:constant-flag t) nil [149010 149021])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [149474 149487])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [149965 149985])
            ("Fgarbage_collect" function
               (:prototype-flag t
                :type "int")
                nil [150447 150467])
            ("UNEVALLED" variable (:type "int") nil [150986 150996])
            ("true" variable (:type "int") nil [151039 151044])
            ("false" variable (:type "int") nil [151195 151201]))          
      :file "lisp.h"
      :pointmax 151250
      :fsize 151255
      :lastmodtime '(22418 61196 746564 861000)
      :unmatched-syntax '((symbol 151205 . 151222) (close-paren 151202 . 151203) (RETURN 151188 . 151194) (ELSE 151179 . 151183) (semantic-list 151076 . 151176) (semantic-list 151055 . 151071) (IF 151052 . 151054) (ELSE 151047 . 151051) (RETURN 151032 . 151038) (semantic-list 151007 . 151027) (IF 151004 . 151006) (ELSE 150999 . 151003) (punctuation 150984 . 150985) (punctuation 150983 . 150984) (symbol 150974 . 150982) (punctuation 150973 . 150974) (punctuation 150972 . 150973) (semantic-list 150964 . 150972) (symbol 150958 . 150963) (RETURN 150951 . 150957) (semantic-list 150930 . 150946) (IF 150927 . 150929) (semantic-list 150573 . 150923) (semantic-list 150521 . 150568) (IF 150518 . 150520) (open-paren 150514 . 150515) (close-paren 150512 . 150513) (symbol 150506 . 150512) (symbol 150494 . 150505) (open-paren 150493 . 150494) (symbol 150483 . 150492) (BOOL 150478 . 150482) (symbol 150471 . 150477) (close-paren 150468 . 150469) (semantic-list 150267 . 150442) (IF 150264 . 150266) (open-paren 150260 . 150261) (close-paren 150258 . 150259) (VOID 150254 . 150258) (open-paren 150253 . 150254) (symbol 150244 . 150252) (VOID 150239 . 150243) (symbol 150232 . 150238) (punctuation 147133 . 147134) (close-paren 147132 . 147133) (semantic-list 147020 . 147129) (punctuation 147018 . 147019) (symbol 147001 . 147017) (punctuation 146995 . 146996) (semantic-list 146912 . 146995) (punctuation 146910 . 146911) (symbol 146895 . 146909) (open-paren 146889 . 146890) (ENUM 146882 . 146886) (punctuation 146617 . 146618) (close-paren 146616 . 146617) (open-paren 146557 . 146558) (symbol 146542 . 146556) (UNION 146536 . 146541) (punctuation 146533 . 146534) (close-paren 146532 . 146533) (open-paren 146475 . 146476) (symbol 146462 . 146474) (UNION 146456 . 146461) (punctuation 146368 . 146369) (close-paren 146367 . 146368) (symbol 146361 . 146366) (punctuation 146359 . 146360) (symbol 146329 . 146358) (open-paren 146327 . 146328) (ENUM 146322 . 146326) (punctuation 143178 . 143179) (close-paren 143177 . 143178) (semantic-list 143174 . 143177) (open-paren 143173 . 143174) (symbol 143152 . 143172) (close-paren 143150 . 143151) (symbol 143144 . 143150) (open-paren 143143 . 143144) (symbol 143128 . 143142) (punctuation 143127 . 143128) (VOID 143122 . 143126) (EXTERN 143115 . 143121) (punctuation 143112 . 143113) (close-paren 143111 . 143112) (number 143106 . 143110) (punctuation 143104 . 143105) (number 143101 . 143103) (punctuation 143099 . 143100) (symbol 143088 . 143098) (open-paren 143086 . 143087) (symbol 143075 . 143085) (ENUM 143070 . 143074) (punctuation 142428 . 142429) (close-paren 142427 . 142428) (VOID 142423 . 142427) (open-paren 142422 . 142423) (symbol 142405 . 142421) (VOID 142400 . 142404) (EXTERN 142393 . 142399) (close-paren 142334 . 142335) (semantic-list 142326 . 142331) (RETURN 142289 . 142295) (open-paren 142216 . 142217) (close-paren 142214 . 142215) (symbol 142211 . 142214) (punctuation 142210 . 142211) (CHAR 142205 . 142209) (CONST 142199 . 142204) (open-paren 142198 . 142199) (symbol 142190 . 142197) (punctuation 142188 . 142189) (CHAR 142183 . 142187) (symbol 142176 . 142182) (punctuation 142173 . 142174) (close-paren 142172 . 142173) (symbol 142163 . 142172) (punctuation 142161 . 142162) (punctuation 142160 . 142161) (CHAR 142155 . 142159) (CONST 142149 . 142154) (open-paren 142148 . 142149) (symbol 142131 . 142147) (punctuation 142130 . 142131) (CHAR 142125 . 142129) (EXTERN 142118 . 142124) (punctuation 142115 . 142116) (close-paren 142114 . 142115) (punctuation 142113 . 142114) (CHAR 142108 . 142112) (CONST 142102 . 142107) (open-paren 142101 . 142102) (symbol 142093 . 142100) (VOID 142088 . 142092) (EXTERN 142081 . 142087) (close-paren 142078 . 142079) (punctuation 142071 . 142072) (symbol 142066 . 142070) (RETURN 142059 . 142065) (number 142053 . 142054) (punctuation 142051 . 142052) (semantic-list 142037 . 142045) (open-paren 141978 . 141979) (close-paren 141976 . 141977) (symbol 141970 . 141976) (symbol 141958 . 141969) (punctuation 141956 . 141957) (symbol 141952 . 141956) (punctuation 141951 . 141952) (CHAR 141946 . 141950) (open-paren 141945 . 141946) (symbol 141934 . 141944) (punctuation 141932 . 141933) (CHAR 141927 . 141931) (symbol 141920 . 141926) (punctuation 141762 . 141763) (close-paren 141761 . 141762) (punctuation 141760 . 141761) (CONST 141754 . 141759) (CHAR 141749 . 141753) (punctuation 141747 . 141748) (punctuation 141746 . 141747) (punctuation 141745 . 141746) (CHAR 141740 . 141744) (open-paren 141739 . 141740) (symbol 141729 . 141738) (VOID 141724 . 141728) (EXTERN 141717 . 141723) (close-paren 141697 . 141698) (symbol 141686 . 141697) (open-paren 141685 . 141686) (symbol 141673 . 141684) (punctuation 141672 . 141673) (CHAR 141667 . 141671) (EXTERN 141660 . 141666) (close-paren 141640 . 141641) (punctuation 141639 . 141640) (CHAR 141634 . 141638) (CONST 141628 . 141633) (open-paren 141627 . 141628) (symbol 141619 . 141626) (punctuation 141618 . 141619) (CHAR 141613 . 141617) (EXTERN 141606 . 141612) (punctuation 141603 . 141604) (close-paren 141602 . 141603) (symbol 141593 . 141602) (punctuation 141591 . 141592) (symbol 141582 . 141591) (punctuation 141580 . 141581) (symbol 141571 . 141580) (punctuation 141569 . 141570) (punctuation 141568 . 141569) (symbol 141558 . 141567) (punctuation 141556 . 141557) (punctuation 141555 . 141556) (VOID 141550 . 141554) (open-paren 141549 . 141550) (symbol 141541 . 141548) (punctuation 141540 . 141541) (VOID 141535 . 141539) (EXTERN 141528 . 141534) (punctuation 141526 . 141527) (close-paren 141525 . 141526) (semantic-list 141520 . 141525) (open-paren 141519 . 141520) (symbol 141498 . 141518) (close-paren 141494 . 141495) (symbol 141485 . 141494) (punctuation 141483 . 141484) (symbol 141474 . 141483) (punctuation 141472 . 141473) (punctuation 141471 . 141472) (VOID 141466 . 141470) (open-paren 141465 . 141466) (symbol 141455 . 141464) (punctuation 141454 . 141455) (VOID 141449 . 141453) (EXTERN 141442 . 141448) (punctuation 141440 . 141441) (close-paren 141439 . 141440) (semantic-list 141434 . 141439) (open-paren 141433 . 141434) (symbol 141411 . 141432) (close-paren 141409 . 141410) (symbol 141400 . 141409) (punctuation 141398 . 141399) (symbol 141389 . 141398) (open-paren 141388 . 141389) (symbol 141379 . 141387) (punctuation 141378 . 141379) (VOID 141373 . 141377) (EXTERN 141366 . 141372) (punctuation 141364 . 141365) (close-paren 141363 . 141364) (punctuation 141362 . 141363) (VOID 141357 . 141361) (open-paren 141356 . 141357) (symbol 141350 . 141355) (VOID 141345 . 141349) (EXTERN 141338 . 141344) (punctuation 141336 . 141337) (close-paren 141335 . 141336) (semantic-list 141332 . 141335) (open-paren 141331 . 141332) (symbol 141310 . 141330) (close-paren 141308 . 141309) (symbol 141302 . 141308) (punctuation 141300 . 141301) (punctuation 141299 . 141300) (VOID 141294 . 141298) (open-paren 141293 . 141294) (symbol 141284 . 141292) (punctuation 141283 . 141284) (VOID 141278 . 141282) (EXTERN 141271 . 141277) (punctuation 141269 . 141270) (close-paren 141268 . 141269) (semantic-list 141265 . 141268) (open-paren 141264 . 141265) (symbol 141242 . 141263) (close-paren 141240 . 141241) (symbol 141234 . 141240) (open-paren 141233 . 141234) (symbol 141225 . 141232) (punctuation 141224 . 141225) (VOID 141219 . 141223) (EXTERN 141212 . 141218) (punctuation 141210 . 141211) (close-paren 141209 . 141210) (semantic-list 141206 . 141209) (open-paren 141205 . 141206) (symbol 141183 . 141204) (close-paren 141181 . 141182) (symbol 141175 . 141181) (open-paren 141174 . 141175) (symbol 141166 . 141173) (punctuation 141165 . 141166) (VOID 141160 . 141164) (EXTERN 141153 . 141159) (punctuation 141049 . 141050) (close-paren 141048 . 141049) (open-paren 141047 . 141048) (symbol 141038 . 141047) (CHAR 141033 . 141037) (EXTERN 141026 . 141032) (punctuation 141024 . 141025) (close-paren 141023 . 141024) (open-paren 141022 . 141023) (symbol 141014 . 141022) (CHAR 141009 . 141013) (EXTERN 141002 . 141008) (punctuation 140863 . 140864) (close-paren 140862 . 140863) (VOID 140858 . 140862) (open-paren 140857 . 140858) (symbol 140840 . 140856) (VOID 140835 . 140839) (EXTERN 140828 . 140834) (punctuation 140826 . 140827) (close-paren 140825 . 140826) (symbol 140819 . 140825) (open-paren 140818 . 140819) (symbol 140805 . 140817) (VOID 140800 . 140804) (EXTERN 140793 . 140799) (punctuation 139912 . 139913) (close-paren 139911 . 139912) (VOID 139907 . 139911) (open-paren 139906 . 139907) (symbol 139891 . 139905) (VOID 139886 . 139890) (EXTERN 139879 . 139885) (punctuation 139173 . 139174) (close-paren 139172 . 139173) (VOID 139168 . 139172) (open-paren 139167 . 139168) (symbol 139157 . 139166) (VOID 139152 . 139156) (EXTERN 139145 . 139151) (punctuation 139143 . 139144) (close-paren 139142 . 139143) (VOID 139138 . 139142) (open-paren 139137 . 139138) (symbol 139124 . 139136) (VOID 139119 . 139123) (EXTERN 139112 . 139118) (punctuation 139083 . 139084) (close-paren 139082 . 139083) (VOID 139078 . 139082) (open-paren 139077 . 139078) (symbol 139060 . 139076) (VOID 139055 . 139059) (EXTERN 139048 . 139054) (punctuation 139015 . 139016) (close-paren 139014 . 139015) (number 139013 . 139014) (punctuation 139011 . 139012) (number 139010 . 139011) (open-paren 139009 . 139010) (symbol 138985 . 139008) (close-paren 138981 . 138982) (punctuation 138980 . 138981) (punctuation 138979 . 138980) (punctuation 138978 . 138979) (punctuation 138976 . 138977) (symbol 138971 . 138976) (punctuation 138970 . 138971) (CHAR 138965 . 138969) (CONST 138959 . 138964) (open-paren 138958 . 138959) (symbol 138952 . 138957) (VOID 138947 . 138951) (EXTERN 138930 . 138936) (punctuation 138928 . 138929) (close-paren 138927 . 138928) (VOID 138923 . 138927) (open-paren 138922 . 138923) (symbol 138909 . 138921) (VOID 138904 . 138908) (EXTERN 138897 . 138903) (punctuation 138835 . 138836) (close-paren 138834 . 138835) (symbol 138823 . 138834) (punctuation 138821 . 138822) (BOOL 138817 . 138821) (punctuation 138770 . 138771) (symbol 138759 . 138770) (punctuation 138757 . 138758) (symbol 138746 . 138757) (punctuation 138699 . 138700) (symbol 138688 . 138699) (punctuation 138686 . 138687) (symbol 138675 . 138686) (open-paren 138674 . 138675) (symbol 138649 . 138673) (symbol 138637 . 138648) (EXTERN 138630 . 138636) (punctuation 138628 . 138629) (close-paren 138627 . 138628) (VOID 138623 . 138627) (open-paren 138622 . 138623) (symbol 138608 . 138621) (VOID 138603 . 138607) (EXTERN 138596 . 138602) (punctuation 138566 . 138567) (close-paren 138565 . 138566) (VOID 138561 . 138565) (open-paren 138560 . 138561) (symbol 138548 . 138559) (VOID 138543 . 138547) (EXTERN 138536 . 138542) (punctuation 138508 . 138509) (close-paren 138507 . 138508) (VOID 138503 . 138507) (open-paren 138502 . 138503) (symbol 138485 . 138501) (VOID 138480 . 138484) (EXTERN 138473 . 138479) (punctuation 138471 . 138472) (close-paren 138470 . 138471) (INT 138467 . 138470) (open-paren 138466 . 138467) (symbol 138448 . 138465) (symbol 138436 . 138447) (EXTERN 138429 . 138435) (punctuation 138427 . 138428) (close-paren 138426 . 138427) (VOID 138422 . 138426) (open-paren 138421 . 138422) (symbol 138402 . 138420) (VOID 138397 . 138401) (EXTERN 138390 . 138396) (punctuation 138357 . 138358) (close-paren 138356 . 138357) (VOID 138352 . 138356) (open-paren 138351 . 138352) (symbol 138337 . 138350) (VOID 138332 . 138336) (EXTERN 138325 . 138331) (punctuation 138295 . 138296) (close-paren 138294 . 138295) (symbol 138283 . 138294) (punctuation 138281 . 138282) (symbol 138270 . 138281) (punctuation 138268 . 138269) (symbol 138257 . 138268) (punctuation 138255 . 138256) (symbol 138244 . 138255) (open-paren 138243 . 138244) (symbol 138231 . 138242) (INT 138227 . 138230) (EXTERN 138220 . 138226) (punctuation 138218 . 138219) (close-paren 138217 . 138218) (VOID 138213 . 138217) (open-paren 138212 . 138213) (symbol 138195 . 138211) (VOID 138190 . 138194) (EXTERN 138183 . 138189) (punctuation 138181 . 138182) (close-paren 138180 . 138181) (punctuation 138179 . 138180) (symbol 138172 . 138178) (STRUCT 138165 . 138171) (open-paren 138164 . 138165) (symbol 138150 . 138163) (VOID 138145 . 138149) (EXTERN 138138 . 138144) (punctuation 138136 . 138137) (close-paren 138135 . 138136) (symbol 138124 . 138135) (open-paren 138123 . 138124) (symbol 138111 . 138122) (VOID 138106 . 138110) (EXTERN 138099 . 138105) (punctuation 138097 . 138098) (close-paren 138096 . 138097) (symbol 138085 . 138096) (open-paren 138084 . 138085) (symbol 138074 . 138083) (VOID 138069 . 138073) (EXTERN 138062 . 138068) (punctuation 138060 . 138061) (close-paren 138059 . 138060) (VOID 138055 . 138059) (open-paren 138054 . 138055) (symbol 138037 . 138053) (VOID 138032 . 138036) (EXTERN 138025 . 138031) (punctuation 138022 . 138023) (close-paren 138021 . 138022) (punctuation 138020 . 138021) (CONST 138014 . 138019) (CHAR 138009 . 138013) (open-paren 138008 . 138009) (symbol 137995 . 138007) (VOID 137990 . 137994) (EXTERN 137983 . 137989) (punctuation 137981 . 137982) (close-paren 137980 . 137981) (symbol 137971 . 137980) (punctuation 137969 . 137970) (punctuation 137968 . 137969) (CONST 137962 . 137967) (VOID 137957 . 137961) (punctuation 137955 . 137956) (INT 137952 . 137955) (open-paren 137951 . 137952) (symbol 137935 . 137950) (symbol 137925 . 137934) (EXTERN 137918 . 137924) (punctuation 137916 . 137917) (close-paren 137915 . 137916) (symbol 137906 . 137915) (punctuation 137904 . 137905) (punctuation 137903 . 137904) (CONST 137897 . 137902) (VOID 137892 . 137896) (punctuation 137890 . 137891) (INT 137887 . 137890) (open-paren 137886 . 137887) (symbol 137874 . 137885) (symbol 137864 . 137873) (EXTERN 137857 . 137863) (punctuation 137855 . 137856) (close-paren 137854 . 137855) (symbol 137845 . 137854) (punctuation 137843 . 137844) (punctuation 137842 . 137843) (VOID 137837 . 137841) (punctuation 137835 . 137836) (INT 137832 . 137835) (open-paren 137831 . 137832) (symbol 137820 . 137830) (symbol 137810 . 137819) (EXTERN 137803 . 137809) (punctuation 137801 . 137802) (close-paren 137800 . 137801) (INT 137797 . 137800) (open-paren 137796 . 137797) (symbol 137784 . 137795) (INT 137780 . 137783) (EXTERN 137773 . 137779) (punctuation 137771 . 137772) (close-paren 137770 . 137771) (semantic-list 137767 . 137770) (INT 137764 . 137767) (open-paren 137763 . 137764) (symbol 137752 . 137762) (INT 137748 . 137751) (EXTERN 137741 . 137747) (punctuation 137739 . 137740) (close-paren 137738 . 137739) (INT 137735 . 137738) (punctuation 137733 . 137734) (INT 137730 . 137733) (punctuation 137728 . 137729) (punctuation 137727 . 137728) (CHAR 137722 . 137726) (CONST 137716 . 137721) (open-paren 137715 . 137716) (symbol 137704 . 137714) (INT 137700 . 137703) (EXTERN 137693 . 137699) (close-paren 137680 . 137681) (VOID 137676 . 137680) (open-paren 137675 . 137676) (symbol 137663 . 137674) (VOID 137658 . 137662) (EXTERN 137641 . 137647) (punctuation 137639 . 137640) (close-paren 137638 . 137639) (INT 137635 . 137638) (open-paren 137634 . 137635) (symbol 137618 . 137633) (VOID 137613 . 137617) (EXTERN 137606 . 137612) (punctuation 137604 . 137605) (close-paren 137603 . 137604) (VOID 137599 . 137603) (open-paren 137598 . 137599) (symbol 137586 . 137597) (VOID 137581 . 137585) (EXTERN 137574 . 137580) (punctuation 137572 . 137573) (close-paren 137571 . 137572) (symbol 137562 . 137571) (punctuation 137560 . 137561) (punctuation 137559 . 137560) (VOID 137554 . 137558) (open-paren 137553 . 137554) (symbol 137541 . 137552) (VOID 137536 . 137540) (EXTERN 137529 . 137535) (punctuation 137527 . 137528) (close-paren 137526 . 137527) (VOID 137522 . 137526) (open-paren 137521 . 137522) (symbol 137510 . 137520) (symbol 137500 . 137509) (EXTERN 137493 . 137499) (punctuation 137491 . 137492) (close-paren 137490 . 137491) (INT 137487 . 137490) (punctuation 137485 . 137486) (INT 137482 . 137485) (punctuation 137480 . 137481) (INT 137477 . 137480) (open-paren 137476 . 137477) (symbol 137460 . 137475) (INT 137456 . 137459) (EXTERN 137449 . 137455) (punctuation 137447 . 137448) (close-paren 137446 . 137447) (INT 137443 . 137446) (open-paren 137442 . 137443) (symbol 137432 . 137441) (VOID 137427 . 137431) (EXTERN 137420 . 137426) (punctuation 137418 . 137419) (close-paren 137417 . 137418) (INT 137414 . 137417) (open-paren 137413 . 137414) (symbol 137397 . 137412) (VOID 137392 . 137396) (EXTERN 137385 . 137391) (punctuation 137383 . 137384) (close-paren 137382 . 137383) (VOID 137378 . 137382) (open-paren 137377 . 137378) (symbol 137357 . 137376) (VOID 137352 . 137356) (EXTERN 137345 . 137351) (punctuation 137343 . 137344) (close-paren 137342 . 137343) (VOID 137338 . 137342) (open-paren 137337 . 137338) (symbol 137318 . 137336) (VOID 137313 . 137317) (EXTERN 137306 . 137312) (punctuation 137304 . 137305) (close-paren 137303 . 137304) (punctuation 137302 . 137303) (symbol 137285 . 137301) (STRUCT 137278 . 137284) (open-paren 137277 . 137278) (symbol 137261 . 137276) (VOID 137256 . 137260) (EXTERN 137249 . 137255) (punctuation 137247 . 137248) (close-paren 137246 . 137247) (punctuation 137245 . 137246) (symbol 137228 . 137244) (STRUCT 137221 . 137227) (open-paren 137220 . 137221) (symbol 137205 . 137219) (VOID 137200 . 137204) (EXTERN 137193 . 137199) (punctuation 137191 . 137192) (close-paren 137190 . 137191) (VOID 137186 . 137190) (open-paren 137185 . 137186) (symbol 137167 . 137184) (VOID 137162 . 137166) (EXTERN 137155 . 137161) (punctuation 137153 . 137154) (close-paren 137152 . 137153) (VOID 137148 . 137152) (open-paren 137147 . 137148) (symbol 137135 . 137146) (VOID 137130 . 137134) (EXTERN 137123 . 137129) (punctuation 137121 . 137122) (close-paren 137120 . 137121) (VOID 137116 . 137120) (open-paren 137115 . 137116) (symbol 137102 . 137114) (VOID 137097 . 137101) (EXTERN 137090 . 137096) (punctuation 137088 . 137089) (close-paren 137087 . 137088) (VOID 137083 . 137087) (open-paren 137082 . 137083) (symbol 137060 . 137081) (VOID 137055 . 137059) (EXTERN 137048 . 137054) (punctuation 137046 . 137047) (close-paren 137045 . 137046) (symbol 137044 . 137045) (CHAR 137039 . 137043) (open-paren 137038 . 137039) (symbol 137027 . 137037) (VOID 137022 . 137026) (EXTERN 137015 . 137021) (punctuation 137006 . 137007) (close-paren 137005 . 137006) (VOID 137001 . 137005) (open-paren 137000 . 137001) (symbol 136979 . 136999) (punctuation 136978 . 136979) (CHAR 136973 . 136977) (EXTERN 136966 . 136972) (punctuation 136796 . 136797) (close-paren 136795 . 136796) (VOID 136791 . 136795) (open-paren 136790 . 136791) (symbol 136776 . 136789) (VOID 136771 . 136775) (EXTERN 136764 . 136770) (punctuation 136734 . 136735) (close-paren 136733 . 136734) (VOID 136729 . 136733) (open-paren 136728 . 136729) (symbol 136715 . 136727) (VOID 136710 . 136714) (EXTERN 136703 . 136709) (punctuation 136674 . 136675) (close-paren 136673 . 136674) (symbol 136662 . 136673) (punctuation 136660 . 136661) (symbol 136649 . 136660) (open-paren 136648 . 136649) (symbol 136619 . 136647) (VOID 136614 . 136618) (EXTERN 136607 . 136613) (punctuation 136574 . 136575) (close-paren 136573 . 136574) (VOID 136569 . 136573) (open-paren 136568 . 136569) (symbol 136555 . 136567) (VOID 136550 . 136554) (EXTERN 136543 . 136549) (punctuation 136541 . 136542) (close-paren 136540 . 136541) (symbol 136529 . 136540) (punctuation 136491 . 136492) (symbol 136480 . 136491) (punctuation 136478 . 136479) (symbol 136467 . 136478) (punctuation 136457 . 136458) (symbol 136448 . 136457) (punctuation 136446 . 136447) (symbol 136437 . 136446) (open-paren 136436 . 136437) (symbol 136413 . 136435) (VOID 136408 . 136412) (EXTERN 136401 . 136407) (punctuation 136399 . 136400) (close-paren 136398 . 136399) (symbol 136389 . 136398) (punctuation 136387 . 136388) (symbol 136378 . 136387) (open-paren 136377 . 136378) (symbol 136363 . 136376) (VOID 136358 . 136362) (EXTERN 136351 . 136357) (punctuation 136349 . 136350) (close-paren 136348 . 136349) (VOID 136344 . 136348) (open-paren 136343 . 136344) (symbol 136323 . 136342) (VOID 136318 . 136322) (EXTERN 136311 . 136317) (punctuation 136309 . 136310) (close-paren 136308 . 136309) (BOOL 136304 . 136308) (punctuation 136302 . 136303) (symbol 136291 . 136302) (punctuation 136289 . 136290) (symbol 136280 . 136289) (open-paren 136279 . 136280) (symbol 136265 . 136278) (VOID 136260 . 136264) (EXTERN 136253 . 136259) (punctuation 136251 . 136252) (close-paren 136250 . 136251) (symbol 136241 . 136250) (punctuation 136239 . 136240) (symbol 136230 . 136239) (open-paren 136229 . 136230) (symbol 136215 . 136228) (VOID 136210 . 136214) (EXTERN 136203 . 136209) (punctuation 136201 . 136202) (close-paren 136200 . 136201) (punctuation 136199 . 136200) (symbol 136192 . 136198) (STRUCT 136185 . 136191) (open-paren 136184 . 136185) (symbol 136165 . 136183) (VOID 136160 . 136164) (EXTERN 136153 . 136159) (punctuation 136124 . 136125) (close-paren 136123 . 136124) (VOID 136119 . 136123) (open-paren 136118 . 136119) (symbol 136103 . 136117) (VOID 136098 . 136102) (EXTERN 136091 . 136097) (punctuation 136089 . 136090) (close-paren 136088 . 136089) (VOID 136084 . 136088) (open-paren 136083 . 136084) (symbol 136071 . 136082) (VOID 136066 . 136070) (EXTERN 136059 . 136065) (punctuation 136028 . 136029) (close-paren 136027 . 136028) (punctuation 136026 . 136027) (symbol 136014 . 136025) (punctuation 136012 . 136013) (symbol 136003 . 136012) (punctuation 136001 . 136002) (symbol 135990 . 136001) (punctuation 135981 . 135982) (symbol 135970 . 135981) (punctuation 135968 . 135969) (symbol 135957 . 135968) (punctuation 135955 . 135956) (symbol 135944 . 135955) (open-paren 135943 . 135944) (symbol 135928 . 135942) (symbol 135916 . 135927) (EXTERN 135909 . 135915) (punctuation 135907 . 135908) (close-paren 135906 . 135907) (VOID 135902 . 135906) (open-paren 135901 . 135902) (symbol 135881 . 135900) (VOID 135876 . 135880) (EXTERN 135869 . 135875) (punctuation 135824 . 135825) (close-paren 135823 . 135824) (VOID 135819 . 135823) (open-paren 135818 . 135819) (symbol 135801 . 135817) (VOID 135796 . 135800) (EXTERN 135789 . 135795) (punctuation 135756 . 135757) (close-paren 135755 . 135756) (BOOL 135751 . 135755) (open-paren 135750 . 135751) (symbol 135731 . 135749) (INT 135727 . 135730) (EXTERN 135720 . 135726) (punctuation 135718 . 135719) (close-paren 135717 . 135718) (VOID 135713 . 135717) (open-paren 135712 . 135713) (symbol 135700 . 135711) (VOID 135695 . 135699) (EXTERN 135688 . 135694) (punctuation 135686 . 135687) (close-paren 135685 . 135686) (BOOL 135681 . 135685) (punctuation 135679 . 135680) (BOOL 135675 . 135679) (punctuation 135673 . 135674) (symbol 135662 . 135673) (open-paren 135661 . 135662) (symbol 135646 . 135660) (symbol 135634 . 135645) (EXTERN 135627 . 135633) (punctuation 135625 . 135626) (close-paren 135624 . 135625) (symbol 135613 . 135624) (open-paren 135612 . 135613) (symbol 135596 . 135611) (symbol 135584 . 135595) (EXTERN 135577 . 135583) (punctuation 135575 . 135576) (close-paren 135574 . 135575) (VOID 135570 . 135574) (open-paren 135569 . 135570) (symbol 135550 . 135568) (symbol 135531 . 135549) (ENUM 135526 . 135530) (EXTERN 135519 . 135525) (punctuation 135517 . 135518) (close-paren 135516 . 135517) (symbol 135491 . 135513) (punctuation 135444 . 135445) (symbol 135425 . 135444) (punctuation 135361 . 135362) (symbol 135342 . 135361) (open-paren 135287 . 135288) (symbol 135266 . 135284) (ENUM 135261 . 135265) (punctuation 135233 . 135234) (close-paren 135232 . 135233) (VOID 135228 . 135232) (open-paren 135227 . 135228) (symbol 135210 . 135226) (VOID 135205 . 135209) (EXTERN 135198 . 135204) (punctuation 135196 . 135197) (close-paren 135195 . 135196) (VOID 135191 . 135195) (open-paren 135190 . 135191) (symbol 135166 . 135189) (VOID 135161 . 135165) (EXTERN 135154 . 135160) (punctuation 135152 . 135153) (close-paren 135151 . 135152) (VOID 135147 . 135151) (open-paren 135146 . 135147) (symbol 135132 . 135145) (VOID 135127 . 135131) (EXTERN 135120 . 135126) (punctuation 135118 . 135119) (close-paren 135117 . 135118) (VOID 135113 . 135117) (open-paren 135112 . 135113) (symbol 135096 . 135111) (VOID 135091 . 135095) (EXTERN 135084 . 135090) (punctuation 135082 . 135083) (close-paren 135081 . 135082) (symbol 135070 . 135081) (punctuation 135068 . 135069) (BOOL 135064 . 135068) (punctuation 135062 . 135063) (punctuation 135061 . 135062) (punctuation 135060 . 135061) (CHAR 135055 . 135059) (punctuation 135053 . 135054) (INT 135050 . 135053) (punctuation 135048 . 135049) (INT 135045 . 135048) (punctuation 135043 . 135044) (INT 135040 . 135043) (open-paren 135039 . 135040) (symbol 135027 . 135038) (INT 135023 . 135026) (EXTERN 135016 . 135022) (punctuation 134950 . 134951) (close-paren 134949 . 134950) (symbol 134938 . 134949) (open-paren 134937 . 134938) (symbol 134908 . 134936) (VOID 134903 . 134907) (EXTERN 134896 . 134902) (punctuation 134894 . 134895) (close-paren 134893 . 134894) (VOID 134889 . 134893) (open-paren 134888 . 134889) (symbol 134872 . 134887) (VOID 134867 . 134871) (EXTERN 134860 . 134866) (punctuation 134858 . 134859) (close-paren 134857 . 134858) (VOID 134853 . 134857) (open-paren 134852 . 134853) (symbol 134833 . 134851) (VOID 134828 . 134832) (EXTERN 134821 . 134827) (punctuation 134707 . 134708) (close-paren 134706 . 134707) (INT 134703 . 134706) (open-paren 134702 . 134703) (symbol 134670 . 134701) (VOID 134665 . 134669) (EXTERN 134658 . 134664) (punctuation 134656 . 134657) (close-paren 134655 . 134656) (INT 134652 . 134655) (open-paren 134651 . 134652) (symbol 134622 . 134650) (VOID 134617 . 134621) (EXTERN 134610 . 134616) (punctuation 134146 . 134147) (close-paren 134145 . 134146) (INT 134142 . 134145) (punctuation 134140 . 134141) (punctuation 134139 . 134140) (symbol 134126 . 134138) (STRUCT 134119 . 134125) (punctuation 134112 . 134113) (symbol 134101 . 134112) (punctuation 134099 . 134100) (BOOL 134095 . 134099) (punctuation 134093 . 134094) (INT 134090 . 134093) (punctuation 134088 . 134089) (INT 134085 . 134088) (punctuation 134083 . 134084) (symbol 134075 . 134083) (open-paren 134074 . 134075) (symbol 134046 . 134073) (INT 134042 . 134045) (EXTERN 134035 . 134041) (punctuation 134033 . 134034) (close-paren 134032 . 134033) (symbol 134021 . 134032) (open-paren 134020 . 134021) (symbol 133998 . 134019) (VOID 133993 . 133997) (EXTERN 133986 . 133992) (punctuation 133417 . 133418) (close-paren 133416 . 133417) (number 133415 . 133416) (open-paren 133414 . 133415) (symbol 133403 . 133414) (INT 133399 . 133402) (EXTERN 133392 . 133398) (punctuation 133052 . 133053) (close-paren 133051 . 133052) (symbol 133040 . 133051) (punctuation 133038 . 133039) (INT 133035 . 133038) (open-paren 133034 . 133035) (symbol 133018 . 133033) (VOID 133013 . 133017) (EXTERN 133006 . 133012) (close-paren 132997 . 132998) (open-paren 132996 . 132997) (close-paren 132994 . 132995) (VOID 132990 . 132994) (open-paren 132989 . 132990) (symbol 132958 . 132988) (VOID 132953 . 132957) (symbol 132946 . 132952) (close-paren 132944 . 132945) (open-paren 132943 . 132944) (close-paren 132941 . 132942) (VOID 132937 . 132941) (open-paren 132936 . 132937) (symbol 132901 . 132935) (VOID 132896 . 132900) (symbol 132889 . 132895) (close-paren 132887 . 132888) (open-paren 132886 . 132887) (close-paren 132884 . 132885) (VOID 132880 . 132884) (open-paren 132879 . 132880) (symbol 132866 . 132878) (VOID 132861 . 132865) (symbol 132854 . 132860) (punctuation 132650 . 132651) (close-paren 132649 . 132650) (INT 132646 . 132649) (punctuation 132644 . 132645) (INT 132641 . 132644) (open-paren 132640 . 132641) (symbol 132616 . 132639) (VOID 132611 . 132615) (EXTERN 132594 . 132600) (punctuation 132527 . 132528) (close-paren 132526 . 132527) (BOOL 132522 . 132526) (punctuation 132520 . 132521) (punctuation 132519 . 132520) (CHAR 132514 . 132518) (CONST 132508 . 132513) (punctuation 132506 . 132507) (punctuation 132505 . 132506) (CHAR 132500 . 132504) (CONST 132494 . 132499) (open-paren 132493 . 132494) (symbol 132477 . 132492) (symbol 132465 . 132476) (EXTERN 132458 . 132464) (punctuation 132293 . 132294) (close-paren 132292 . 132293) (VOID 132288 . 132292) (open-paren 132287 . 132288) (symbol 132273 . 132286) (VOID 132268 . 132272) (EXTERN 132261 . 132267) (punctuation 132259 . 132260) (close-paren 132258 . 132259) (symbol 132247 . 132258) (open-paren 132246 . 132247) (symbol 132224 . 132245) (VOID 132219 . 132223) (EXTERN 132212 . 132218) (punctuation 132210 . 132211) (close-paren 132209 . 132210) (symbol 132198 . 132209) (punctuation 132196 . 132197) (punctuation 132195 . 132196) (symbol 132189 . 132194) (STRUCT 132182 . 132188) (open-paren 132181 . 132182) (symbol 132165 . 132180) (symbol 132153 . 132164) (EXTERN 132146 . 132152) (punctuation 132144 . 132145) (close-paren 132143 . 132144) (symbol 132132 . 132143) (punctuation 132130 . 132131) (INT 132127 . 132130) (punctuation 132125 . 132126) (INT 132122 . 132125) (punctuation 132120 . 132121) (symbol 132109 . 132120) (open-paren 132108 . 132109) (symbol 132092 . 132107) (symbol 132080 . 132091) (EXTERN 132073 . 132079) (punctuation 132071 . 132072) (close-paren 132070 . 132071) (symbol 132059 . 132070) (punctuation 132057 . 132058) (symbol 132046 . 132057) (punctuation 132044 . 132045) (punctuation 132043 . 132044) (symbol 132031 . 132042) (open-paren 132030 . 132031) (symbol 132015 . 132029) (VOID 132010 . 132014) (EXTERN 132003 . 132009) (punctuation 132001 . 132002) (close-paren 132000 . 132001) (symbol 131989 . 132000) (punctuation 131987 . 131988) (symbol 131976 . 131987) (punctuation 131974 . 131975) (punctuation 131973 . 131974) (symbol 131967 . 131972) (STRUCT 131960 . 131966) (open-paren 131959 . 131960) (symbol 131941 . 131958) (VOID 131936 . 131940) (EXTERN 131929 . 131935) (punctuation 131899 . 131900) (close-paren 131898 . 131899) (VOID 131894 . 131898) (open-paren 131893 . 131894) (symbol 131878 . 131892) (VOID 131873 . 131877) (EXTERN 131866 . 131872) (punctuation 131864 . 131865) (close-paren 131863 . 131864) (symbol 131854 . 131863) (punctuation 131852 . 131853) (symbol 131843 . 131852) (punctuation 131841 . 131842) (symbol 131832 . 131841) (open-paren 131831 . 131832) (symbol 131813 . 131830) (BOOL 131808 . 131812) (EXTERN 131801 . 131807) (punctuation 131799 . 131800) (close-paren 131798 . 131799) (VOID 131794 . 131798) (open-paren 131793 . 131794) (symbol 131767 . 131792) (VOID 131762 . 131766) (EXTERN 131755 . 131761) (punctuation 131753 . 131754) (close-paren 131752 . 131753) (VOID 131748 . 131752) (open-paren 131747 . 131748) (symbol 131732 . 131746) (symbol 131722 . 131731) (EXTERN 131715 . 131721) (punctuation 131684 . 131685) (close-paren 131683 . 131684) (VOID 131679 . 131683) (open-paren 131678 . 131679) (symbol 131661 . 131677) (VOID 131656 . 131660) (EXTERN 131649 . 131655) (punctuation 131647 . 131648) (close-paren 131646 . 131647) (VOID 131642 . 131646) (open-paren 131641 . 131642) (symbol 131624 . 131640) (VOID 131619 . 131623) (EXTERN 131612 . 131618) (punctuation 131610 . 131611) (close-paren 131609 . 131610) (VOID 131605 . 131609) (open-paren 131604 . 131605) (symbol 131590 . 131603) (VOID 131585 . 131589) (EXTERN 131578 . 131584) (punctuation 131576 . 131577) (close-paren 131575 . 131576) (VOID 131571 . 131575) (open-paren 131570 . 131571) (symbol 131549 . 131569) (VOID 131544 . 131548) (EXTERN 131537 . 131543) (punctuation 131535 . 131536) (close-paren 131534 . 131535) (VOID 131530 . 131534) (open-paren 131529 . 131530) (symbol 131512 . 131528) (VOID 131507 . 131511) (EXTERN 131500 . 131506) (punctuation 131498 . 131499) (close-paren 131497 . 131498) (VOID 131493 . 131497) (open-paren 131492 . 131493) (symbol 131475 . 131491) (symbol 131463 . 131474) (EXTERN 131456 . 131462) (punctuation 131454 . 131455) (close-paren 131453 . 131454) (VOID 131449 . 131453) (open-paren 131448 . 131449) (symbol 131430 . 131447) (symbol 131418 . 131429) (EXTERN 131411 . 131417) (punctuation 131409 . 131410) (close-paren 131408 . 131409) (VOID 131404 . 131408) (open-paren 131403 . 131404) (symbol 131388 . 131402) (symbol 131376 . 131387) (EXTERN 131369 . 131375) (punctuation 131367 . 131368) (close-paren 131366 . 131367) (punctuation 131365 . 131366) (CHAR 131360 . 131364) (CONST 131354 . 131359) (punctuation 131352 . 131353) (symbol 131341 . 131352) (open-paren 131340 . 131341) (symbol 131321 . 131339) (VOID 131316 . 131320) (EXTERN 131309 . 131315) (punctuation 131307 . 131308) (close-paren 131306 . 131307) (symbol 131295 . 131306) (open-paren 131294 . 131295) (symbol 131279 . 131293) (VOID 131274 . 131278) (EXTERN 131267 . 131273) (punctuation 131265 . 131266) (close-paren 131264 . 131265) (BOOL 131260 . 131264) (open-paren 131259 . 131260) (symbol 131227 . 131258) (BOOL 131222 . 131226) (EXTERN 131215 . 131221) (punctuation 131213 . 131214) (close-paren 131212 . 131213) (VOID 131208 . 131212) (open-paren 131207 . 131208) (symbol 131167 . 131206) (BOOL 131162 . 131166) (EXTERN 131155 . 131161) (punctuation 131153 . 131154) (close-paren 131152 . 131153) (VOID 131148 . 131152) (open-paren 131147 . 131148) (symbol 131126 . 131146) (BOOL 131121 . 131125) (EXTERN 131114 . 131120) (punctuation 131006 . 131007) (close-paren 131005 . 131006) (VOID 131001 . 131005) (open-paren 131000 . 131001) (symbol 130979 . 130999) (VOID 130974 . 130978) (EXTERN 130967 . 130973) (punctuation 130965 . 130966) (close-paren 130964 . 130965) (punctuation 130963 . 130964) (INT 130959 . 130962) (punctuation 130957 . 130958) (symbol 130946 . 130957) (open-paren 130945 . 130946) (symbol 130930 . 130944) (symbol 130918 . 130929) (EXTERN 130911 . 130917) (punctuation 130909 . 130910) (close-paren 130908 . 130909) (symbol 130897 . 130908) (open-paren 130896 . 130897) (symbol 130881 . 130895) (symbol 130869 . 130880) (EXTERN 130862 . 130868) (punctuation 130748 . 130749) (close-paren 130747 . 130748) (VOID 130743 . 130747) (open-paren 130742 . 130743) (symbol 130727 . 130741) (VOID 130722 . 130726) (EXTERN 130715 . 130721) (punctuation 130606 . 130607) (close-paren 130605 . 130606) (VOID 130601 . 130605) (open-paren 130600 . 130601) (symbol 130584 . 130599) (VOID 130579 . 130583) (EXTERN 130572 . 130578) (punctuation 130570 . 130571) (close-paren 130569 . 130570) (VOID 130565 . 130569) (open-paren 130564 . 130565) (symbol 130546 . 130563) (VOID 130541 . 130545) (EXTERN 130534 . 130540) (punctuation 130501 . 130502) (close-paren 130500 . 130501) (VOID 130496 . 130500) (open-paren 130495 . 130496) (symbol 130476 . 130494) (VOID 130471 . 130475) (EXTERN 130464 . 130470) (punctuation 130462 . 130463) (close-paren 130461 . 130462) (VOID 130457 . 130461) (open-paren 130456 . 130457) (symbol 130437 . 130455) (VOID 130432 . 130436) (EXTERN 130425 . 130431) (punctuation 130389 . 130390) (close-paren 130388 . 130389) (VOID 130384 . 130388) (open-paren 130383 . 130384) (symbol 130367 . 130382) (VOID 130362 . 130366) (EXTERN 130355 . 130361) (punctuation 130322 . 130323) (close-paren 130321 . 130322) (VOID 130317 . 130321) (open-paren 130316 . 130317) (symbol 130300 . 130315) (VOID 130295 . 130299) (EXTERN 130288 . 130294) (punctuation 130286 . 130287) (close-paren 130285 . 130286) (VOID 130281 . 130285) (open-paren 130280 . 130281) (symbol 130262 . 130279) (VOID 130257 . 130261) (EXTERN 130250 . 130256) (punctuation 130248 . 130249) (close-paren 130247 . 130248) (symbol 130238 . 130247) (open-paren 130237 . 130238) (symbol 130222 . 130236) (symbol 130210 . 130221) (EXTERN 130203 . 130209) (punctuation 130093 . 130094) (close-paren 130092 . 130093) (VOID 130088 . 130092) (open-paren 130087 . 130088) (symbol 130068 . 130086) (VOID 130063 . 130067) (EXTERN 130056 . 130062) (punctuation 130054 . 130055) (close-paren 130053 . 130054) (VOID 130049 . 130053) (open-paren 130048 . 130049) (symbol 130033 . 130047) (VOID 130028 . 130032) (EXTERN 130021 . 130027) (punctuation 130019 . 130020) (close-paren 130018 . 130019) (punctuation 130017 . 130018) (symbol 130007 . 130016) (punctuation 130005 . 130006) (symbol 129996 . 130005) (punctuation 129986 . 129987) (symbol 129977 . 129986) (punctuation 129975 . 129976) (symbol 129966 . 129975) (open-paren 129965 . 129966) (symbol 129940 . 129964) (symbol 129930 . 129939) (EXTERN 129923 . 129929) (punctuation 129921 . 129922) (close-paren 129920 . 129921) (punctuation 129919 . 129920) (symbol 129909 . 129918) (punctuation 129907 . 129908) (symbol 129898 . 129907) (punctuation 129885 . 129886) (symbol 129876 . 129885) (punctuation 129874 . 129875) (symbol 129865 . 129874) (open-paren 129864 . 129865) (symbol 129843 . 129863) (symbol 129833 . 129842) (EXTERN 129826 . 129832) (punctuation 129824 . 129825) (close-paren 129823 . 129824) (punctuation 129822 . 129823) (symbol 129812 . 129821) (punctuation 129810 . 129811) (punctuation 129809 . 129810) (symbol 129799 . 129808) (punctuation 129797 . 129798) (symbol 129788 . 129797) (open-paren 129787 . 129788) (symbol 129763 . 129786) (symbol 129753 . 129762) (EXTERN 129746 . 129752) (punctuation 129744 . 129745) (close-paren 129743 . 129744) (BOOL 129739 . 129743) (punctuation 129737 . 129738) (symbol 129728 . 129737) (punctuation 129716 . 129717) (symbol 129707 . 129716) (punctuation 129705 . 129706) (symbol 129696 . 129705) (punctuation 129694 . 129695) (symbol 129685 . 129694) (punctuation 129683 . 129684) (symbol 129674 . 129683) (open-paren 129673 . 129674) (symbol 129660 . 129672) (symbol 129650 . 129659) (EXTERN 129643 . 129649) (punctuation 129641 . 129642) (close-paren 129640 . 129641) (BOOL 129636 . 129640) (punctuation 129634 . 129635) (punctuation 129633 . 129634) (symbol 129623 . 129632) (punctuation 129621 . 129622) (punctuation 129620 . 129621) (symbol 129610 . 129619) (punctuation 129608 . 129609) (symbol 129599 . 129608) (punctuation 129587 . 129588) (symbol 129578 . 129587) (punctuation 129576 . 129577) (symbol 129567 . 129576) (punctuation 129565 . 129566) (symbol 129556 . 129565) (punctuation 129554 . 129555) (symbol 129545 . 129554) (open-paren 129544 . 129545) (symbol 129531 . 129543) (symbol 129521 . 129530) (EXTERN 129514 . 129520) (punctuation 129512 . 129513) (close-paren 129511 . 129512) (symbol 129500 . 129511) (punctuation 129498 . 129499) (symbol 129489 . 129498) (punctuation 129487 . 129488) (symbol 129478 . 129487) (punctuation 129442 . 129443) (symbol 129433 . 129442) (punctuation 129431 . 129432) (symbol 129422 . 129431) (punctuation 129420 . 129421) (symbol 129409 . 129420) (open-paren 129408 . 129409) (symbol 129392 . 129407) (symbol 129382 . 129391) (EXTERN 129375 . 129381) (punctuation 129373 . 129374) (close-paren 129372 . 129373) (symbol 129363 . 129372) (punctuation 129353 . 129354) (punctuation 129352 . 129353) (CHAR 129347 . 129351) (CONST 129341 . 129346) (punctuation 129339 . 129340) (symbol 129328 . 129339) (open-paren 129327 . 129328) (symbol 129295 . 129326) (symbol 129285 . 129294) (EXTERN 129278 . 129284) (close-paren 129275 . 129276) (RETURN 129203 . 129209) (open-paren 129199 . 129200) (close-paren 129197 . 129198) (symbol 129191 . 129197) (symbol 129179 . 129190) (punctuation 129177 . 129178) (symbol 129171 . 129177) (symbol 129159 . 129170) (open-paren 129158 . 129159) (symbol 129128 . 129157) (symbol 129118 . 129127) (symbol 129111 . 129117) (close-paren 129108 . 129109) (RETURN 129050 . 129056) (open-paren 129046 . 129047) (close-paren 129044 . 129045) (symbol 129038 . 129044) (symbol 129026 . 129037) (punctuation 129024 . 129025) (symbol 129018 . 129024) (symbol 129006 . 129017) (open-paren 129005 . 129006) (symbol 128987 . 129004) (symbol 128977 . 128986) (symbol 128970 . 128976) (punctuation 128967 . 128968) (close-paren 128966 . 128967) (symbol 128955 . 128966) (punctuation 128943 . 128944) (symbol 128932 . 128943) (punctuation 128930 . 128931) (symbol 128919 . 128930) (open-paren 128918 . 128919) (symbol 128891 . 128917) (symbol 128881 . 128890) (EXTERN 128874 . 128880) (punctuation 128872 . 128873) (close-paren 128871 . 128872) (BOOL 128867 . 128871) (punctuation 128865 . 128866) (BOOL 128861 . 128865) (punctuation 128859 . 128860) (symbol 128848 . 128859) (punctuation 128838 . 128839) (punctuation 128837 . 128838) (symbol 128824 . 128836) (STRUCT 128817 . 128823) (punctuation 128807 . 128808) (symbol 128796 . 128807) (open-paren 128795 . 128796) (symbol 128779 . 128794) (punctuation 128778 . 128779) (symbol 128760 . 128777) (STRUCT 128753 . 128759) (EXTERN 128746 . 128752) (punctuation 128723 . 128724) (close-paren 128722 . 128723) (VOID 128718 . 128722) (open-paren 128717 . 128718) (symbol 128687 . 128716) (VOID 128682 . 128686) (EXTERN 128675 . 128681) (punctuation 128673 . 128674) (close-paren 128672 . 128673) (symbol 128666 . 128672) (symbol 128656 . 128665) (punctuation 128654 . 128655) (symbol 128648 . 128654) (symbol 128638 . 128647) (punctuation 128604 . 128605) (symbol 128596 . 128604) (symbol 128586 . 128595) (open-paren 128585 . 128586) (symbol 128566 . 128584) (VOID 128561 . 128565) (EXTERN 128554 . 128560) (punctuation 128552 . 128553) (close-paren 128551 . 128552) (VOID 128547 . 128551) (open-paren 128546 . 128547) (symbol 128526 . 128545) (VOID 128521 . 128525) (EXTERN 128514 . 128520) (punctuation 128512 . 128513) (close-paren 128511 . 128512) (VOID 128507 . 128511) (open-paren 128506 . 128507) (symbol 128486 . 128505) (VOID 128481 . 128485) (EXTERN 128474 . 128480) (punctuation 128443 . 128444) (close-paren 128442 . 128443) (BOOL 128438 . 128442) (punctuation 128436 . 128437) (symbol 128425 . 128436) (open-paren 128424 . 128425) (symbol 128409 . 128423) (symbol 128397 . 128408) (EXTERN 128390 . 128396) (punctuation 128388 . 128389) (close-paren 128387 . 128388) (VOID 128383 . 128387) (open-paren 128382 . 128383) (symbol 128367 . 128381) (VOID 128362 . 128366) (EXTERN 128355 . 128361) (punctuation 128353 . 128354) (close-paren 128352 . 128353) (VOID 128348 . 128352) (open-paren 128347 . 128348) (symbol 128335 . 128346) (VOID 128330 . 128334) (EXTERN 128323 . 128329) (punctuation 128321 . 128322) (close-paren 128320 . 128321) (symbol 128309 . 128320) (open-paren 128308 . 128309) (symbol 128280 . 128307) (BOOL 128275 . 128279) (EXTERN 128268 . 128274) (punctuation 128266 . 128267) (close-paren 128265 . 128266) (punctuation 128264 . 128265) (CHAR 128259 . 128263) (CONST 128253 . 128258) (open-paren 128252 . 128253) (symbol 128235 . 128251) (BOOL 128230 . 128234) (EXTERN 128223 . 128229) (punctuation 128221 . 128222) (close-paren 128220 . 128221) (punctuation 128219 . 128220) (CHAR 128214 . 128218) (CONST 128208 . 128213) (punctuation 128206 . 128207) (INT 128203 . 128206) (open-paren 128202 . 128203) (symbol 128185 . 128201) (symbol 128173 . 128184) (EXTERN 128166 . 128172) (punctuation 128164 . 128165) (close-paren 128163 . 128164) (symbol 128152 . 128163) (open-paren 128151 . 128152) (symbol 128130 . 128150) (BOOL 128125 . 128129) (EXTERN 128118 . 128124) (punctuation 128116 . 128117) (close-paren 128115 . 128116) (symbol 128104 . 128115) (punctuation 128102 . 128103) (punctuation 128101 . 128102) (CHAR 128096 . 128100) (CONST 128090 . 128095) (open-paren 128089 . 128090) (symbol 128064 . 128088) (VOID 128059 . 128063) (EXTERN 128042 . 128048) (punctuation 128040 . 128041) (close-paren 128039 . 128040) (symbol 128028 . 128039) (punctuation 128026 . 128027) (punctuation 128025 . 128026) (CHAR 128020 . 128024) (CONST 128014 . 128019) (open-paren 128013 . 128014) (symbol 127995 . 128012) (VOID 127990 . 127994) (EXTERN 127973 . 127979) (punctuation 127971 . 127972) (close-paren 127970 . 127971) (INT 127967 . 127970) (punctuation 127965 . 127966) (symbol 127954 . 127965) (punctuation 127952 . 127953) (punctuation 127951 . 127952) (CHAR 127946 . 127950) (CONST 127940 . 127945) (open-paren 127939 . 127940) (symbol 127921 . 127938) (VOID 127916 . 127920) (EXTERN 127899 . 127905) (punctuation 127897 . 127898) (close-paren 127896 . 127897) (symbol 127885 . 127896) (open-paren 127884 . 127885) (symbol 127863 . 127883) (VOID 127858 . 127862) (EXTERN 127851 . 127857) (punctuation 127849 . 127850) (close-paren 127848 . 127849) (punctuation 127847 . 127848) (VOID 127842 . 127846) (open-paren 127841 . 127842) (symbol 127827 . 127840) (VOID 127822 . 127826) (EXTERN 127815 . 127821) (punctuation 127813 . 127814) (close-paren 127812 . 127813) (INT 127809 . 127812) (open-paren 127808 . 127809) (symbol 127790 . 127807) (VOID 127785 . 127789) (EXTERN 127778 . 127784) (punctuation 127776 . 127777) (close-paren 127775 . 127776) (INT 127772 . 127775) (punctuation 127770 . 127771) (symbol 127759 . 127770) (punctuation 127752 . 127753) (symbol 127741 . 127752) (punctuation 127739 . 127740) (symbol 127728 . 127739) (punctuation 127726 . 127727) (symbol 127715 . 127726) (punctuation 127708 . 127709) (symbol 127697 . 127708) (punctuation 127695 . 127696) (symbol 127684 . 127695) (punctuation 127682 . 127683) (symbol 127671 . 127682) (open-paren 127670 . 127671) (symbol 127657 . 127669) (symbol 127645 . 127656) (EXTERN 127638 . 127644) (punctuation 127636 . 127637) (close-paren 127635 . 127636) (symbol 127624 . 127635) (punctuation 127622 . 127623) (symbol 127611 . 127622) (open-paren 127610 . 127611) (symbol 127587 . 127609) (symbol 127575 . 127586) (EXTERN 127568 . 127574) (punctuation 127536 . 127537) (close-paren 127535 . 127536) (VOID 127531 . 127535) (open-paren 127530 . 127531) (symbol 127515 . 127529) (VOID 127510 . 127514) (EXTERN 127503 . 127509) (punctuation 127501 . 127502) (close-paren 127500 . 127501) (symbol 127491 . 127500) (punctuation 127489 . 127490) (symbol 127480 . 127489) (punctuation 127478 . 127479) (punctuation 127477 . 127478) (symbol 127470 . 127476) (STRUCT 127463 . 127469) (open-paren 127462 . 127463) (symbol 127449 . 127461) (symbol 127437 . 127448) (EXTERN 127430 . 127436) (punctuation 127428 . 127429) (close-paren 127427 . 127428) (symbol 127418 . 127427) (punctuation 127416 . 127417) (symbol 127407 . 127416) (punctuation 127358 . 127359) (symbol 127347 . 127358) (punctuation 127345 . 127346) (symbol 127334 . 127345) (open-paren 127333 . 127334) (symbol 127306 . 127332) (symbol 127294 . 127305) (EXTERN 127287 . 127293) (punctuation 127285 . 127286) (close-paren 127284 . 127285) (symbol 127275 . 127284) (punctuation 127273 . 127274) (symbol 127264 . 127273) (punctuation 127262 . 127263) (symbol 127251 . 127262) (punctuation 127249 . 127250) (symbol 127238 . 127249) (open-paren 127237 . 127238) (symbol 127221 . 127236) (symbol 127209 . 127220) (EXTERN 127202 . 127208) (punctuation 127200 . 127201) (close-paren 127199 . 127200) (symbol 127188 . 127199) (punctuation 127186 . 127187) (symbol 127175 . 127186) (punctuation 127173 . 127174) (symbol 127162 . 127173) (open-paren 127161 . 127162) (symbol 127139 . 127160) (symbol 127127 . 127138) (EXTERN 127120 . 127126) (punctuation 127118 . 127119) (close-paren 127117 . 127118) (symbol 127111 . 127117) (punctuation 127110 . 127111) (symbol 127098 . 127109) (STRUCT 127091 . 127097) (open-paren 127090 . 127091) (symbol 127075 . 127089) (VOID 127070 . 127074) (EXTERN 127063 . 127069) (punctuation 127061 . 127062) (close-paren 127060 . 127061) (symbol 127051 . 127060) (punctuation 127049 . 127050) (punctuation 127048 . 127049) (symbol 127041 . 127047) (STRUCT 127034 . 127040) (open-paren 127033 . 127034) (symbol 127010 . 127032) (symbol 127000 . 127009) (EXTERN 126993 . 126999) (punctuation 126991 . 126992) (close-paren 126990 . 126991) (symbol 126981 . 126990) (punctuation 126979 . 126980) (punctuation 126978 . 126979) (symbol 126971 . 126977) (STRUCT 126964 . 126970) (open-paren 126963 . 126964) (symbol 126940 . 126962) (symbol 126930 . 126939) (EXTERN 126923 . 126929) (punctuation 126921 . 126922) (close-paren 126920 . 126921) (punctuation 126919 . 126920) (symbol 126912 . 126918) (STRUCT 126905 . 126911) (open-paren 126904 . 126905) (symbol 126884 . 126903) (VOID 126879 . 126883) (EXTERN 126872 . 126878) (punctuation 126870 . 126871) (close-paren 126869 . 126870) (symbol 126858 . 126869) (open-paren 126857 . 126858) (symbol 126836 . 126856) (symbol 126826 . 126835) (EXTERN 126819 . 126825) (punctuation 126817 . 126818) (close-paren 126816 . 126817) (symbol 126805 . 126816) (open-paren 126804 . 126805) (symbol 126788 . 126803) (symbol 126778 . 126787) (EXTERN 126771 . 126777) (punctuation 126739 . 126740) (close-paren 126738 . 126739) (VOID 126734 . 126738) (open-paren 126733 . 126734) (symbol 126718 . 126732) (VOID 126713 . 126717) (EXTERN 126706 . 126712) (punctuation 126704 . 126705) (close-paren 126703 . 126704) (VOID 126699 . 126703) (open-paren 126698 . 126699) (symbol 126683 . 126697) (VOID 126678 . 126682) (EXTERN 126671 . 126677) (punctuation 126669 . 126670) (close-paren 126668 . 126669) (INT 126665 . 126668) (open-paren 126664 . 126665) (symbol 126652 . 126663) (VOID 126647 . 126651) (EXTERN 126640 . 126646) (punctuation 126638 . 126639) (close-paren 126637 . 126638) (VOID 126633 . 126637) (open-paren 126632 . 126633) (symbol 126615 . 126631) (VOID 126610 . 126614) (EXTERN 126603 . 126609) (punctuation 126601 . 126602) (close-paren 126600 . 126601) (symbol 126589 . 126600) (open-paren 126588 . 126589) (symbol 126568 . 126587) (symbol 126556 . 126567) (EXTERN 126549 . 126555) (punctuation 126547 . 126548) (close-paren 126546 . 126547) (symbol 126535 . 126546) (open-paren 126534 . 126535) (symbol 126514 . 126533) (symbol 126502 . 126513) (EXTERN 126495 . 126501) (punctuation 126493 . 126494) (close-paren 126492 . 126493) (symbol 126483 . 126492) (open-paren 126482 . 126483) (symbol 126464 . 126481) (BOOL 126459 . 126463) (EXTERN 126452 . 126458) (punctuation 126450 . 126451) (close-paren 126449 . 126450) (symbol 126438 . 126449) (punctuation 126436 . 126437) (symbol 126425 . 126436) (punctuation 126423 . 126424) (symbol 126412 . 126423) (punctuation 126369 . 126370) (BOOL 126365 . 126369) (punctuation 126363 . 126364) (symbol 126352 . 126363) (punctuation 126350 . 126351) (symbol 126339 . 126350) (open-paren 126338 . 126339) (symbol 126310 . 126337) (VOID 126305 . 126309) (EXTERN 126298 . 126304) (punctuation 126296 . 126297) (close-paren 126295 . 126296) (symbol 126286 . 126295) (punctuation 126284 . 126285) (symbol 126275 . 126284) (open-paren 126274 . 126275) (symbol 126248 . 126273) (VOID 126243 . 126247) (EXTERN 126236 . 126242) (punctuation 126234 . 126235) (close-paren 126233 . 126234) (symbol 126224 . 126233) (punctuation 126222 . 126223) (symbol 126213 . 126222) (open-paren 126212 . 126213) (symbol 126185 . 126211) (VOID 126180 . 126184) (EXTERN 126173 . 126179) (punctuation 126171 . 126172) (close-paren 126170 . 126171) (symbol 126161 . 126170) (punctuation 126159 . 126160) (symbol 126150 . 126159) (open-paren 126149 . 126150) (symbol 126122 . 126148) (VOID 126117 . 126121) (EXTERN 126110 . 126116) (punctuation 126108 . 126109) (close-paren 126107 . 126108) (symbol 126096 . 126107) (open-paren 126095 . 126096) (symbol 126086 . 126094) (VOID 126081 . 126085) (EXTERN 126064 . 126070) (punctuation 126062 . 126063) (close-paren 126061 . 126062) (symbol 126050 . 126061) (open-paren 126049 . 126050) (symbol 126021 . 126048) (BOOL 126016 . 126020) (EXTERN 126009 . 126015) (punctuation 125978 . 125979) (close-paren 125977 . 125978) (VOID 125973 . 125977) (open-paren 125972 . 125973) (symbol 125956 . 125971) (VOID 125951 . 125955) (EXTERN 125944 . 125950) (punctuation 125942 . 125943) (close-paren 125941 . 125942) (BOOL 125937 . 125941) (open-paren 125936 . 125937) (symbol 125923 . 125935) (VOID 125918 . 125922) (EXTERN 125911 . 125917) (punctuation 125909 . 125910) (close-paren 125908 . 125909) (BOOL 125904 . 125908) (punctuation 125902 . 125903) (symbol 125893 . 125902) (punctuation 125882 . 125883) (symbol 125873 . 125882) (punctuation 125871 . 125872) (symbol 125862 . 125871) (punctuation 125860 . 125861) (symbol 125851 . 125860) (open-paren 125850 . 125851) (symbol 125826 . 125849) (symbol 125814 . 125825) (EXTERN 125807 . 125813) (punctuation 125805 . 125806) (close-paren 125804 . 125805) (BOOL 125800 . 125804) (punctuation 125798 . 125799) (symbol 125789 . 125798) (punctuation 125787 . 125788) (symbol 125778 . 125787) (open-paren 125777 . 125778) (symbol 125758 . 125776) (symbol 125746 . 125757) (EXTERN 125739 . 125745) (punctuation 125737 . 125738) (close-paren 125736 . 125737) (VOID 125732 . 125736) (open-paren 125731 . 125732) (symbol 125717 . 125730) (VOID 125712 . 125716) (EXTERN 125695 . 125701) (punctuation 125693 . 125694) (close-paren 125692 . 125693) (symbol 125681 . 125692) (open-paren 125680 . 125681) (symbol 125655 . 125679) (VOID 125650 . 125654) (EXTERN 125643 . 125649) (punctuation 125641 . 125642) (close-paren 125640 . 125641) (symbol 125629 . 125640) (open-paren 125628 . 125629) (symbol 125605 . 125627) (VOID 125600 . 125604) (EXTERN 125593 . 125599) (punctuation 125591 . 125592) (close-paren 125590 . 125591) (VOID 125586 . 125590) (open-paren 125585 . 125586) (symbol 125563 . 125584) (symbol 125551 . 125562) (EXTERN 125544 . 125550) (punctuation 125542 . 125543) (close-paren 125541 . 125542) (VOID 125537 . 125541) (open-paren 125536 . 125537) (symbol 125516 . 125535) (symbol 125504 . 125515) (EXTERN 125497 . 125503) (punctuation 125495 . 125496) (close-paren 125494 . 125495) (symbol 125483 . 125494) (open-paren 125482 . 125483) (symbol 125474 . 125481) (VOID 125469 . 125473) (EXTERN 125462 . 125468) (punctuation 125201 . 125202) (close-paren 125200 . 125201) (symbol 125194 . 125200) (symbol 125182 . 125193) (open-paren 125181 . 125182) (symbol 125152 . 125180) (BOOL 125147 . 125151) (EXTERN 125140 . 125146) (punctuation 125138 . 125139) (close-paren 125137 . 125138) (symbol 125131 . 125137) (punctuation 125130 . 125131) (symbol 125118 . 125129) (STRUCT 125111 . 125117) (open-paren 125110 . 125111) (symbol 125081 . 125109) (BOOL 125076 . 125080) (EXTERN 125069 . 125075) (punctuation 125067 . 125068) (close-paren 125066 . 125067) (VOID 125062 . 125066) (open-paren 125061 . 125062) (symbol 125038 . 125060) (symbol 125026 . 125037) (punctuation 125024 . 125025) (close-paren 125023 . 125024) (symbol 125018 . 125023) (symbol 125006 . 125017) (open-paren 125005 . 125006) (symbol 124991 . 125004) (VOID 124986 . 124990) (EXTERN 124979 . 124985) (punctuation 124977 . 124978) (close-paren 124976 . 124977) (VOID 124972 . 124976) (open-paren 124971 . 124972) (symbol 124958 . 124970) (VOID 124953 . 124957) (EXTERN 124946 . 124952) (punctuation 124944 . 124945) (close-paren 124943 . 124944) (symbol 124934 . 124943) (punctuation 124932 . 124933) (punctuation 124931 . 124932) (symbol 124919 . 124930) (punctuation 124917 . 124918) (symbol 124906 . 124917) (open-paren 124905 . 124906) (symbol 124885 . 124904) (symbol 124875 . 124884) (EXTERN 124868 . 124874) (punctuation 124866 . 124867) (close-paren 124865 . 124866) (symbol 124854 . 124865) (open-paren 124853 . 124854) (symbol 124841 . 124852) (VOID 124836 . 124840) (EXTERN 124829 . 124835) (punctuation 124827 . 124828) (close-paren 124826 . 124827) (VOID 124822 . 124826) (open-paren 124821 . 124822) (symbol 124808 . 124820) (VOID 124803 . 124807) (EXTERN 124796 . 124802) (punctuation 124794 . 124795) (close-paren 124793 . 124794) (VOID 124789 . 124793) (open-paren 124788 . 124789) (symbol 124778 . 124787) (VOID 124773 . 124777) (EXTERN 124766 . 124772) (punctuation 124764 . 124765) (close-paren 124763 . 124764) (symbol 124752 . 124763) (punctuation 124750 . 124751) (symbol 124739 . 124750) (punctuation 124737 . 124738) (symbol 124726 . 124737) (open-paren 124725 . 124726) (symbol 124714 . 124724) (symbol 124702 . 124713) (EXTERN 124695 . 124701) (punctuation 124693 . 124694) (close-paren 124692 . 124693) (symbol 124681 . 124692) (punctuation 124679 . 124680) (symbol 124668 . 124679) (open-paren 124667 . 124668) (symbol 124656 . 124666) (symbol 124644 . 124655) (EXTERN 124637 . 124643) (punctuation 124635 . 124636) (close-paren 124634 . 124635) (punctuation 124633 . 124634) (punctuation 124632 . 124633) (punctuation 124631 . 124632) (punctuation 124629 . 124630) (symbol 124618 . 124629) (punctuation 124616 . 124617) (symbol 124607 . 124616) (open-paren 124606 . 124607) (symbol 124596 . 124605) (symbol 124584 . 124595) (EXTERN 124577 . 124583) (punctuation 124575 . 124576) (close-paren 124574 . 124575) (VOID 124570 . 124574) (open-paren 124569 . 124570) (symbol 124554 . 124568) (VOID 124549 . 124553) (EXTERN 124542 . 124548) (punctuation 124540 . 124541) (close-paren 124539 . 124540) (VOID 124535 . 124539) (open-paren 124534 . 124535) (symbol 124517 . 124533) (punctuation 124516 . 124517) (VOID 124511 . 124515) (EXTERN 124504 . 124510) (punctuation 124502 . 124503) (close-paren 124501 . 124502) (symbol 124498 . 124501) (symbol 124486 . 124497) (open-paren 124485 . 124486) (symbol 124471 . 124484) (symbol 124459 . 124470) (EXTERN 124452 . 124458) (punctuation 124450 . 124451) (close-paren 124449 . 124450) (symbol 124438 . 124449) (open-paren 124437 . 124438) (symbol 124425 . 124436) (VOID 124420 . 124424) (EXTERN 124413 . 124419) (punctuation 124411 . 124412) (close-paren 124410 . 124411) (number 124409 . 124410) (punctuation 124407 . 124408) (number 124406 . 124407) (open-paren 124405 . 124406) (symbol 124381 . 124404) (close-paren 124377 . 124378) (symbol 124370 . 124377) (punctuation 124368 . 124369) (punctuation 124367 . 124368) (CHAR 124362 . 124366) (CONST 124356 . 124361) (open-paren 124355 . 124356) (symbol 124348 . 124354) (VOID 124343 . 124347) (EXTERN 124326 . 124332) (punctuation 124324 . 124325) (close-paren 124323 . 124324) (number 124322 . 124323) (punctuation 124320 . 124321) (number 124319 . 124320) (open-paren 124318 . 124319) (symbol 124294 . 124317) (close-paren 124292 . 124293) (punctuation 124291 . 124292) (punctuation 124290 . 124291) (punctuation 124289 . 124290) (punctuation 124287 . 124288) (punctuation 124286 . 124287) (CHAR 124281 . 124285) (CONST 124275 . 124280) (open-paren 124274 . 124275) (symbol 124268 . 124273) (VOID 124263 . 124267) (EXTERN 124246 . 124252) (punctuation 124244 . 124245) (close-paren 124243 . 124244) (symbol 124232 . 124243) (punctuation 124230 . 124231) (symbol 124221 . 124230) (open-paren 124220 . 124221) (symbol 124210 . 124219) (symbol 124198 . 124209) (EXTERN 124191 . 124197) (punctuation 124189 . 124190) (close-paren 124188 . 124189) (punctuation 124187 . 124188) (VOID 124182 . 124186) (punctuation 124180 . 124181) (semantic-list 124172 . 124180) (semantic-list 124168 . 124171) (VOID 124163 . 124167) (punctuation 124161 . 124162) (symbol 124152 . 124161) (open-paren 124151 . 124152) (symbol 124128 . 124150) (VOID 124123 . 124127) (EXTERN 124116 . 124122) (punctuation 124114 . 124115) (close-paren 124113 . 124114) (symbol 124102 . 124113) (punctuation 124100 . 124101) (semantic-list 124087 . 124100) (semantic-list 124083 . 124086) (VOID 124078 . 124082) (punctuation 124076 . 124077) (symbol 124067 . 124076) (open-paren 124066 . 124067) (symbol 124047 . 124065) (VOID 124042 . 124046) (EXTERN 124035 . 124041) (punctuation 124033 . 124034) (close-paren 124032 . 124033) (symbol 124023 . 124032) (open-paren 124022 . 124023) (symbol 124001 . 124021) (VOID 123996 . 124000) (EXTERN 123989 . 123995) (punctuation 123987 . 123988) (close-paren 123986 . 123987) (VOID 123982 . 123986) (open-paren 123981 . 123982) (symbol 123951 . 123980) (VOID 123946 . 123950) (EXTERN 123939 . 123945) (punctuation 123937 . 123938) (close-paren 123936 . 123937) (semantic-list 123930 . 123936) (semantic-list 123926 . 123929) (VOID 123921 . 123925) (open-paren 123920 . 123921) (symbol 123893 . 123919) (VOID 123888 . 123892) (EXTERN 123881 . 123887) (punctuation 123879 . 123880) (close-paren 123878 . 123879) (INT 123875 . 123878) (punctuation 123873 . 123874) (semantic-list 123868 . 123873) (semantic-list 123864 . 123867) (VOID 123859 . 123863) (open-paren 123858 . 123859) (symbol 123832 . 123857) (VOID 123827 . 123831) (EXTERN 123820 . 123826) (punctuation 123818 . 123819) (close-paren 123817 . 123818) (punctuation 123816 . 123817) (VOID 123811 . 123815) (punctuation 123809 . 123810) (semantic-list 123801 . 123809) (semantic-list 123797 . 123800) (VOID 123792 . 123796) (open-paren 123791 . 123792) (symbol 123765 . 123790) (VOID 123760 . 123764) (EXTERN 123753 . 123759) (punctuation 123751 . 123752) (close-paren 123750 . 123751) (symbol 123739 . 123750) (punctuation 123737 . 123738) (semantic-list 123724 . 123737) (semantic-list 123720 . 123723) (VOID 123715 . 123719) (open-paren 123714 . 123715) (symbol 123692 . 123713) (VOID 123687 . 123691) (EXTERN 123680 . 123686) (punctuation 123678 . 123679) (close-paren 123677 . 123678) (symbol 123666 . 123677) (punctuation 123664 . 123665) (symbol 123653 . 123664) (open-paren 123652 . 123653) (symbol 123643 . 123651) (VOID 123638 . 123642) (EXTERN 123631 . 123637) (punctuation 123629 . 123630) (close-paren 123628 . 123629) (symbol 123617 . 123628) (ENUM 123612 . 123616) (punctuation 123610 . 123611) (symbol 123599 . 123610) (open-paren 123598 . 123599) (symbol 123576 . 123597) (punctuation 123575 . 123576) (symbol 123567 . 123574) (STRUCT 123560 . 123566) (EXTERN 123553 . 123559) (punctuation 123551 . 123552) (close-paren 123550 . 123551) (symbol 123539 . 123550) (ENUM 123534 . 123538) (punctuation 123532 . 123533) (symbol 123521 . 123532) (open-paren 123520 . 123521) (symbol 123507 . 123519) (punctuation 123506 . 123507) (symbol 123498 . 123505) (STRUCT 123491 . 123497) (EXTERN 123484 . 123490) (punctuation 123482 . 123483) (close-paren 123481 . 123482) (punctuation 123439 . 123440) (punctuation 123424 . 123425) (symbol 123413 . 123424) (punctuation 123406 . 123407) (punctuation 123405 . 123406) (symbol 123393 . 123404) (punctuation 123391 . 123392) (symbol 123382 . 123391) (punctuation 123380 . 123381) (punctuation 123351 . 123352) (open-paren 123337 . 123338) (symbol 123307 . 123332) (symbol 123295 . 123306) (EXTERN 123288 . 123294) (punctuation 123286 . 123287) (close-paren 123285 . 123286) (punctuation 123269 . 123270) (punctuation 123254 . 123255) (symbol 123243 . 123254) (punctuation 123241 . 123242) (symbol 123230 . 123241) (punctuation 123228 . 123229) (symbol 123217 . 123228) (punctuation 123215 . 123216) (punctuation 123186 . 123187) (open-paren 123172 . 123173) (symbol 123146 . 123171) (symbol 123134 . 123145) (EXTERN 123127 . 123133) (punctuation 123125 . 123126) (close-paren 123124 . 123125) (punctuation 123108 . 123109) (punctuation 123093 . 123094) (symbol 123082 . 123093) (punctuation 123080 . 123081) (symbol 123069 . 123080) (punctuation 123067 . 123068) (punctuation 123051 . 123052) (open-paren 123037 . 123038) (symbol 123011 . 123036) (symbol 122999 . 123010) (EXTERN 122992 . 122998) (punctuation 122990 . 122991) (close-paren 122989 . 122990) (punctuation 122973 . 122974) (punctuation 122958 . 122959) (symbol 122947 . 122958) (punctuation 122945 . 122946) (punctuation 122936 . 122937) (open-paren 122922 . 122923) (symbol 122898 . 122921) (symbol 122886 . 122897) (EXTERN 122879 . 122885) (punctuation 122877 . 122878) (close-paren 122876 . 122877) (symbol 122865 . 122876) (punctuation 122863 . 122864) (symbol 122852 . 122863) (punctuation 122850 . 122851) (symbol 122839 . 122850) (open-paren 122838 . 122839) (symbol 122809 . 122837) (symbol 122797 . 122808) (EXTERN 122790 . 122796) (punctuation 122788 . 122789) (close-paren 122787 . 122788) (symbol 122776 . 122787) (punctuation 122774 . 122775) (punctuation 122758 . 122759) (punctuation 122743 . 122744) (symbol 122732 . 122743) (open-paren 122731 . 122732) (symbol 122716 . 122730) (symbol 122704 . 122715) (EXTERN 122697 . 122703) (punctuation 122695 . 122696) (close-paren 122694 . 122695) (symbol 122683 . 122694) (punctuation 122681 . 122682) (symbol 122670 . 122681) (punctuation 122668 . 122669) (symbol 122657 . 122668) (punctuation 122655 . 122656) (symbol 122644 . 122655) (punctuation 122642 . 122643) (symbol 122631 . 122642) (punctuation 122629 . 122630) (symbol 122618 . 122629) (punctuation 122616 . 122617) (symbol 122605 . 122616) (punctuation 122603 . 122604) (symbol 122592 . 122603) (open-paren 122591 . 122592) (symbol 122585 . 122590) (symbol 122573 . 122584) (EXTERN 122566 . 122572) (punctuation 122564 . 122565) (close-paren 122563 . 122564) (symbol 122552 . 122563) (punctuation 122550 . 122551) (symbol 122539 . 122550) (punctuation 122537 . 122538) (symbol 122526 . 122537) (punctuation 122524 . 122525) (symbol 122513 . 122524) (punctuation 122511 . 122512) (symbol 122500 . 122511) (punctuation 122498 . 122499) (symbol 122487 . 122498) (punctuation 122485 . 122486) (symbol 122474 . 122485) (open-paren 122473 . 122474) (symbol 122467 . 122472) (symbol 122455 . 122466) (EXTERN 122448 . 122454) (punctuation 122446 . 122447) (close-paren 122445 . 122446) (symbol 122434 . 122445) (punctuation 122432 . 122433) (symbol 122421 . 122432) (punctuation 122419 . 122420) (symbol 122408 . 122419) (punctuation 122406 . 122407) (symbol 122395 . 122406) (punctuation 122393 . 122394) (symbol 122382 . 122393) (punctuation 122380 . 122381) (symbol 122369 . 122380) (open-paren 122368 . 122369) (symbol 122362 . 122367) (symbol 122350 . 122361) (EXTERN 122343 . 122349) (punctuation 122341 . 122342) (close-paren 122340 . 122341) (symbol 122329 . 122340) (punctuation 122327 . 122328) (symbol 122316 . 122327) (punctuation 122314 . 122315) (symbol 122303 . 122314) (punctuation 122301 . 122302) (symbol 122290 . 122301) (punctuation 122288 . 122289) (symbol 122277 . 122288) (open-paren 122276 . 122277) (symbol 122270 . 122275) (symbol 122258 . 122269) (EXTERN 122251 . 122257) (punctuation 122249 . 122250) (close-paren 122248 . 122249) (symbol 122237 . 122248) (punctuation 122235 . 122236) (symbol 122224 . 122235) (punctuation 122222 . 122223) (symbol 122211 . 122222) (punctuation 122209 . 122210) (symbol 122198 . 122209) (open-paren 122197 . 122198) (symbol 122191 . 122196) (symbol 122179 . 122190) (EXTERN 122172 . 122178) (punctuation 122170 . 122171) (close-paren 122169 . 122170) (symbol 122158 . 122169) (punctuation 122156 . 122157) (symbol 122145 . 122156) (punctuation 122143 . 122144) (symbol 122132 . 122143) (open-paren 122131 . 122132) (symbol 122125 . 122130) (symbol 122113 . 122124) (EXTERN 122106 . 122112) (punctuation 122104 . 122105) (close-paren 122103 . 122104) (symbol 122092 . 122103) (punctuation 122090 . 122091) (symbol 122079 . 122090) (open-paren 122078 . 122079) (symbol 122072 . 122077) (symbol 122060 . 122071) (EXTERN 122053 . 122059) (punctuation 122051 . 122052) (close-paren 122050 . 122051) (symbol 122039 . 122050) (open-paren 122038 . 122039) (symbol 122032 . 122037) (symbol 122020 . 122031) (EXTERN 122013 . 122019) (punctuation 122011 . 122012) (close-paren 122010 . 122011) (symbol 121999 . 122010) (punctuation 121997 . 121998) (symbol 121986 . 121997) (open-paren 121985 . 121986) (symbol 121978 . 121984) (symbol 121966 . 121977) (EXTERN 121959 . 121965) (punctuation 121957 . 121958) (close-paren 121956 . 121957) (symbol 121952 . 121956) (symbol 121940 . 121951) (open-paren 121939 . 121940) (symbol 121930 . 121938) (symbol 121918 . 121929) (EXTERN 121911 . 121917) (punctuation 121909 . 121910) (close-paren 121908 . 121909) (symbol 121897 . 121908) (punctuation 121895 . 121896) (punctuation 121894 . 121895) (CHAR 121889 . 121893) (CONST 121883 . 121888) (open-paren 121882 . 121883) (symbol 121869 . 121881) (VOID 121864 . 121868) (EXTERN 121847 . 121853) (punctuation 121845 . 121846) (close-paren 121844 . 121845) (symbol 121833 . 121844) (punctuation 121827 . 121828) (symbol 121816 . 121827) (punctuation 121814 . 121815) (symbol 121803 . 121814) (punctuation 121801 . 121802) (symbol 121790 . 121801) (open-paren 121789 . 121790) (symbol 121780 . 121788) (VOID 121775 . 121779) (EXTERN 121758 . 121764) (punctuation 121756 . 121757) (close-paren 121755 . 121756) (symbol 121744 . 121755) (punctuation 121742 . 121743) (symbol 121731 . 121742) (punctuation 121729 . 121730) (symbol 121718 . 121729) (open-paren 121717 . 121718) (symbol 121708 . 121716) (VOID 121703 . 121707) (EXTERN 121686 . 121692) (punctuation 121684 . 121685) (close-paren 121683 . 121684) (symbol 121672 . 121683) (punctuation 121670 . 121671) (symbol 121659 . 121670) (open-paren 121658 . 121659) (symbol 121649 . 121657) (VOID 121644 . 121648) (EXTERN 121627 . 121633) (punctuation 121625 . 121626) (close-paren 121624 . 121625) (symbol 121613 . 121624) (open-paren 121612 . 121613) (symbol 121603 . 121611) (VOID 121598 . 121602) (EXTERN 121581 . 121587) (punctuation 121579 . 121580) (close-paren 121578 . 121579) (symbol 121567 . 121578) (punctuation 121565 . 121566) (symbol 121554 . 121565) (open-paren 121553 . 121554) (symbol 121545 . 121552) (VOID 121540 . 121544) (EXTERN 121523 . 121529) (punctuation 121521 . 121522) (close-paren 121520 . 121521) (punctuation 121463 . 121464) (punctuation 121437 . 121438) (symbol 121433 . 121437) (punctuation 121432 . 121433) (symbol 121420 . 121431) (punctuation 121418 . 121419) (symbol 121413 . 121418) (symbol 121403 . 121412) (open-paren 121402 . 121403) (symbol 121383 . 121401) (symbol 121371 . 121382) (EXTERN 121364 . 121370) (punctuation 121362 . 121363) (close-paren 121361 . 121362) (symbol 121350 . 121361) (punctuation 121348 . 121349) (symbol 121337 . 121348) (punctuation 121335 . 121336) (symbol 121324 . 121335) (open-paren 121323 . 121324) (symbol 121302 . 121322) (VOID 121297 . 121301) (EXTERN 121290 . 121296) (punctuation 121288 . 121289) (close-paren 121287 . 121288) (symbol 121276 . 121287) (open-paren 121275 . 121276) (symbol 121266 . 121274) (VOID 121261 . 121265) (EXTERN 121254 . 121260) (close-paren 120838 . 120839) (semantic-list 120830 . 120835) (RETURN 120792 . 120798) (open-paren 120788 . 120789) (close-paren 120786 . 120787) (symbol 120783 . 120786) (punctuation 120782 . 120783) (CHAR 120777 . 120781) (CONST 120771 . 120776) (open-paren 120770 . 120771) (symbol 120754 . 120769) (symbol 120742 . 120753) (symbol 120735 . 120741) (close-paren 120732 . 120733) (semantic-list 120724 . 120729) (RETURN 120695 . 120701) (open-paren 120691 . 120692) (close-paren 120689 . 120690) (symbol 120686 . 120689) (punctuation 120685 . 120686) (CHAR 120680 . 120684) (CONST 120674 . 120679) (open-paren 120673 . 120674) (symbol 120666 . 120672) (symbol 120654 . 120665) (symbol 120647 . 120653) (punctuation 120644 . 120645) (close-paren 120643 . 120644) (VOID 120639 . 120643) (open-paren 120638 . 120639) (symbol 120624 . 120637) (VOID 120619 . 120623) (EXTERN 120612 . 120618) (punctuation 120610 . 120611) (close-paren 120609 . 120610) (VOID 120605 . 120609) (open-paren 120604 . 120605) (symbol 120593 . 120603) (VOID 120588 . 120592) (EXTERN 120581 . 120587) (punctuation 120579 . 120580) (close-paren 120578 . 120579) (VOID 120574 . 120578) (open-paren 120573 . 120574) (symbol 120560 . 120572) (VOID 120555 . 120559) (EXTERN 120548 . 120554) (punctuation 120546 . 120547) (close-paren 120545 . 120546) (symbol 120534 . 120545) (punctuation 120532 . 120533) (punctuation 120531 . 120532) (CHAR 120526 . 120530) (CONST 120520 . 120525) (open-paren 120519 . 120520) (symbol 120507 . 120518) (VOID 120502 . 120506) (EXTERN 120495 . 120501) (punctuation 120493 . 120494) (close-paren 120492 . 120493) (symbol 120481 . 120492) (punctuation 120454 . 120455) (semantic-list 120428 . 120454) (semantic-list 120424 . 120427) (VOID 120419 . 120423) (punctuation 120417 . 120418) (symbol 120406 . 120417) (open-paren 120405 . 120406) (symbol 120393 . 120404) (VOID 120388 . 120392) (EXTERN 120381 . 120387) (punctuation 120379 . 120380) (close-paren 120378 . 120379) (BOOL 120374 . 120378) (punctuation 120372 . 120373) (INT 120369 . 120372) (punctuation 120367 . 120368) (punctuation 120366 . 120367) (CONST 120360 . 120365) (CHAR 120355 . 120359) (open-paren 120354 . 120355) (symbol 120337 . 120353) (symbol 120325 . 120336) (EXTERN 120318 . 120324) (punctuation 120316 . 120317) (close-paren 120315 . 120316) (BOOL 120311 . 120315) (punctuation 120309 . 120310) (symbol 120298 . 120309) (punctuation 120296 . 120297) (punctuation 120295 . 120296) (symbol 120283 . 120294) (punctuation 120263 . 120264) (symbol 120252 . 120263) (punctuation 120250 . 120251) (symbol 120239 . 120250) (punctuation 120237 . 120238) (symbol 120226 . 120237) (open-paren 120225 . 120226) (symbol 120219 . 120224) (INT 120215 . 120218) (EXTERN 120208 . 120214) (close-paren 120206 . 120207) (semantic-list 120136 . 120149) (IF 120133 . 120135) (open-paren 120129 . 120130) (close-paren 120127 . 120128) (symbol 120126 . 120127) (symbol 120114 . 120125) (open-paren 120113 . 120114) (symbol 120097 . 120112) (VOID 120092 . 120096) (symbol 120085 . 120091) (punctuation 120083 . 120084) (close-paren 120082 . 120083) (symbol 120073 . 120082) (punctuation 120071 . 120072) (symbol 120062 . 120071) (punctuation 120060 . 120061) (punctuation 120059 . 120060) (CHAR 120054 . 120058) (CONST 120048 . 120053) (punctuation 120046 . 120047) (symbol 120035 . 120046) (open-paren 120034 . 120035) (symbol 120025 . 120033) (symbol 120013 . 120024) (EXTERN 120006 . 120012) (punctuation 120004 . 120005) (close-paren 120003 . 120004) (symbol 119992 . 120003) (punctuation 119990 . 119991) (symbol 119979 . 119990) (open-paren 119978 . 119979) (symbol 119966 . 119977) (VOID 119961 . 119965) (EXTERN 119954 . 119960) (punctuation 119952 . 119953) (close-paren 119951 . 119952) (symbol 119940 . 119951) (punctuation 119938 . 119939) (symbol 119927 . 119938) (punctuation 119925 . 119926) (symbol 119914 . 119925) (open-paren 119913 . 119914) (symbol 119899 . 119912) (symbol 119887 . 119898) (EXTERN 119880 . 119886) (punctuation 119878 . 119879) (close-paren 119877 . 119878) (symbol 119868 . 119877) (punctuation 119866 . 119867) (punctuation 119865 . 119866) (CHAR 119860 . 119864) (CONST 119854 . 119859) (open-paren 119853 . 119854) (symbol 119835 . 119852) (symbol 119823 . 119834) (EXTERN 119816 . 119822) (punctuation 119814 . 119815) (close-paren 119813 . 119814) (symbol 119804 . 119813) (punctuation 119802 . 119803) (punctuation 119801 . 119802) (CHAR 119796 . 119800) (CONST 119790 . 119795) (open-paren 119789 . 119790) (symbol 119780 . 119788) (symbol 119768 . 119779) (EXTERN 119761 . 119767) (punctuation 119759 . 119760) (close-paren 119758 . 119759) (symbol 119747 . 119758) (open-paren 119746 . 119747) (symbol 119732 . 119745) (symbol 119720 . 119731) (EXTERN 119713 . 119719) (punctuation 119683 . 119684) (close-paren 119682 . 119683) (number 119681 . 119682) (punctuation 119679 . 119680) (number 119678 . 119679) (open-paren 119677 . 119678) (symbol 119653 . 119676) (close-paren 119649 . 119650) (symbol 119642 . 119649) (punctuation 119640 . 119641) (punctuation 119639 . 119640) (CONST 119633 . 119638) (CHAR 119628 . 119632) (punctuation 119619 . 119620) (symbol 119610 . 119619) (punctuation 119608 . 119609) (punctuation 119607 . 119608) (CONST 119601 . 119606) (CHAR 119596 . 119600) (punctuation 119594 . 119595) (punctuation 119593 . 119594) (symbol 119583 . 119592) (punctuation 119581 . 119582) (punctuation 119580 . 119581) (punctuation 119579 . 119580) (CHAR 119574 . 119578) (open-paren 119573 . 119574) (symbol 119563 . 119572) (symbol 119553 . 119562) (EXTERN 119546 . 119552) (punctuation 119544 . 119545) (close-paren 119543 . 119544) (number 119542 . 119543) (punctuation 119540 . 119541) (number 119539 . 119540) (open-paren 119538 . 119539) (symbol 119514 . 119537) (close-paren 119510 . 119511) (punctuation 119509 . 119510) (punctuation 119508 . 119509) (punctuation 119507 . 119508) (punctuation 119505 . 119506) (punctuation 119504 . 119505) (CONST 119498 . 119503) (CHAR 119493 . 119497) (punctuation 119485 . 119486) (symbol 119476 . 119485) (punctuation 119474 . 119475) (punctuation 119473 . 119474) (CONST 119467 . 119472) (CHAR 119462 . 119466) (punctuation 119460 . 119461) (punctuation 119459 . 119460) (symbol 119449 . 119458) (punctuation 119447 . 119448) (punctuation 119446 . 119447) (punctuation 119445 . 119446) (CHAR 119440 . 119444) (open-paren 119439 . 119440) (symbol 119430 . 119438) (symbol 119420 . 119429) (EXTERN 119413 . 119419) (punctuation 119411 . 119412) (close-paren 119410 . 119411) (number 119409 . 119410) (punctuation 119407 . 119408) (number 119406 . 119407) (open-paren 119405 . 119406) (symbol 119381 . 119404) (close-paren 119377 . 119378) (punctuation 119376 . 119377) (punctuation 119375 . 119376) (punctuation 119374 . 119375) (punctuation 119372 . 119373) (punctuation 119371 . 119372) (CONST 119365 . 119370) (CHAR 119360 . 119364) (punctuation 119358 . 119359) (punctuation 119357 . 119358) (CHAR 119352 . 119356) (open-paren 119351 . 119352) (symbol 119342 . 119350) (symbol 119332 . 119341) (EXTERN 119325 . 119331) (punctuation 119323 . 119324) (close-paren 119322 . 119323) (symbol 119315 . 119322) (punctuation 119309 . 119310) (punctuation 119308 . 119309) (CHAR 119303 . 119307) (CONST 119297 . 119302) (punctuation 119295 . 119296) (punctuation 119294 . 119295) (CHAR 119289 . 119293) (CONST 119283 . 119288) (punctuation 119281 . 119282) (symbol 119272 . 119281) (punctuation 119270 . 119271) (punctuation 119269 . 119270) (CHAR 119264 . 119268) (open-paren 119263 . 119264) (symbol 119256 . 119262) (symbol 119246 . 119255) (EXTERN 119239 . 119245) (punctuation 119208 . 119209) (close-paren 119207 . 119208) (VOID 119203 . 119207) (open-paren 119202 . 119203) (symbol 119188 . 119201) (VOID 119183 . 119187) (EXTERN 119176 . 119182) (punctuation 119174 . 119175) (close-paren 119173 . 119174) (VOID 119169 . 119173) (open-paren 119168 . 119169) (symbol 119152 . 119167) (VOID 119147 . 119151) (EXTERN 119140 . 119146) (punctuation 119138 . 119139) (close-paren 119137 . 119138) (DOUBLE 119131 . 119137) (punctuation 119129 . 119130) (punctuation 119128 . 119129) (CHAR 119123 . 119127) (open-paren 119122 . 119123) (symbol 119106 . 119121) (INT 119102 . 119105) (EXTERN 119095 . 119101) (punctuation 119057 . 119058) (close-paren 119056 . 119057) (symbol 119045 . 119056) (punctuation 119043 . 119044) (punctuation 119027 . 119028) (punctuation 119012 . 119013) (punctuation 119011 . 119012) (CHAR 119006 . 119010) (CONST 119000 . 119005) (open-paren 118999 . 119000) (symbol 118955 . 118990) (symbol 118943 . 118954) (EXTERN 118936 . 118942) (punctuation 118934 . 118935) (close-paren 118933 . 118934) (symbol 118922 . 118933) (punctuation 118915 . 118916) (punctuation 118914 . 118915) (CHAR 118909 . 118913) (CONST 118903 . 118908) (punctuation 118901 . 118902) (symbol 118890 . 118901) (punctuation 118888 . 118889) (symbol 118877 . 118888) (open-paren 118876 . 118877) (symbol 118856 . 118875) (VOID 118851 . 118855) (EXTERN 118844 . 118850) (punctuation 118842 . 118843) (close-paren 118841 . 118842) (punctuation 118840 . 118841) (CHAR 118835 . 118839) (CONST 118829 . 118834) (open-paren 118828 . 118829) (symbol 118815 . 118827) (VOID 118810 . 118814) (EXTERN 118803 . 118809) (punctuation 118777 . 118778) (close-paren 118776 . 118777) (punctuation 118775 . 118776) (CHAR 118770 . 118774) (CONST 118764 . 118769) (open-paren 118763 . 118764) (symbol 118738 . 118762) (VOID 118733 . 118737) (EXTERN 118726 . 118732) (close-paren 118704 . 118705) (symbol 118693 . 118704) (open-paren 118692 . 118693) (symbol 118680 . 118691) (VOID 118675 . 118679) (EXTERN 118668 . 118674) (punctuation 118594 . 118595) (close-paren 118593 . 118594) (VOID 118589 . 118593) (open-paren 118588 . 118589) (symbol 118572 . 118587) (VOID 118567 . 118571) (EXTERN 118560 . 118566) (punctuation 118558 . 118559) (close-paren 118557 . 118558) (symbol 118546 . 118557) (open-paren 118545 . 118546) (symbol 118531 . 118544) (symbol 118519 . 118530) (EXTERN 118512 . 118518) (punctuation 118510 . 118511) (close-paren 118509 . 118510) (UNSIGNED 118501 . 118509) (punctuation 118499 . 118500) (UNSIGNED 118491 . 118499) (punctuation 118484 . 118485) (punctuation 118483 . 118484) (symbol 118475 . 118482) (STRUCT 118468 . 118474) (punctuation 118466 . 118467) (symbol 118455 . 118466) (punctuation 118448 . 118449) (symbol 118437 . 118448) (punctuation 118435 . 118436) (symbol 118424 . 118435) (punctuation 118417 . 118418) (semantic-list 118391 . 118417) (semantic-list 118377 . 118390) (VOID 118372 . 118376) (open-paren 118371 . 118372) (symbol 118344 . 118370) (VOID 118339 . 118343) (EXTERN 118332 . 118338) (punctuation 118330 . 118331) (close-paren 118329 . 118330) (symbol 118318 . 118329) (punctuation 118316 . 118317) (symbol 118305 . 118316) (punctuation 118303 . 118304) (symbol 118292 . 118303) (punctuation 118262 . 118263) (semantic-list 118195 . 118262) (semantic-list 118191 . 118194) (VOID 118186 . 118190) (open-paren 118185 . 118186) (symbol 118170 . 118184) (VOID 118165 . 118169) (EXTERN 118158 . 118164) (punctuation 118156 . 118157) (close-paren 118155 . 118156) (symbol 118144 . 118155) (punctuation 118142 . 118143) (INT 118139 . 118142) (punctuation 118137 . 118138) (INT 118134 . 118137) (punctuation 118132 . 118133) (symbol 118121 . 118132) (open-paren 118120 . 118121) (symbol 118099 . 118119) (VOID 118094 . 118098) (EXTERN 118087 . 118093) (punctuation 118085 . 118086) (close-paren 118084 . 118085) (punctuation 118083 . 118084) (INT 118079 . 118082) (punctuation 118077 . 118078) (punctuation 118076 . 118077) (INT 118072 . 118075) (punctuation 118025 . 118026) (INT 118022 . 118025) (punctuation 118020 . 118021) (symbol 118009 . 118020) (open-paren 118008 . 118009) (symbol 117983 . 118007) (symbol 117971 . 117982) (EXTERN 117964 . 117970) (punctuation 117962 . 117963) (close-paren 117961 . 117962) (symbol 117950 . 117961) (open-paren 117949 . 117950) (symbol 117933 . 117948) (symbol 117921 . 117932) (EXTERN 117914 . 117920) (close-paren 117541 . 117542) (punctuation 117539 . 117540) (semantic-list 117537 . 117539) (semantic-list "((void) 0)" 117514 . 117536) (spp-arg-list nil 117514 . 117536) (open-paren 117512 . 117513) (close-paren 117510 . 117511) (VOID 117506 . 117510) (open-paren 117505 . 117506) (close-paren 117503 . 117504) (symbol 117488 . 117503) (open-paren 117487 . 117488) (VOID 117482 . 117486) (symbol 117475 . 117481) (punctuation 117405 . 117406) (close-paren 117404 . 117405) (symbol 117393 . 117404) (open-paren 117392 . 117393) (symbol 117372 . 117391) (INT 117368 . 117371) (EXTERN 117361 . 117367) (punctuation 117359 . 117360) (close-paren 117358 . 117359) (VOID 117354 . 117358) (open-paren 117353 . 117354) (symbol 117337 . 117352) (punctuation 117335 . 117336) (symbol 117328 . 117334) (STRUCT 117321 . 117327) (EXTERN 117314 . 117320) (punctuation 117312 . 117313) (close-paren 117311 . 117312) (VOID 117307 . 117311) (open-paren 117306 . 117307) (symbol 117292 . 117305) (VOID 117287 . 117291) (EXTERN 117280 . 117286) (punctuation 117278 . 117279) (close-paren 117277 . 117278) (VOID 117273 . 117277) (open-paren 117272 . 117273) (symbol 117261 . 117271) (VOID 117256 . 117260) (EXTERN 117249 . 117255) (punctuation 117247 . 117248) (close-paren 117246 . 117247) (VOID 117242 . 117246) (open-paren 117241 . 117242) (symbol 117225 . 117240) (VOID 117220 . 117224) (EXTERN 117213 . 117219) (punctuation 117211 . 117212) (close-paren 117210 . 117211) (punctuation 117209 . 117210) (symbol 117199 . 117208) (STRUCT 117192 . 117198) (open-paren 117191 . 117192) (symbol 117181 . 117190) (VOID 117176 . 117180) (EXTERN 117169 . 117175) (punctuation 117167 . 117168) (close-paren 117166 . 117167) (symbol 117155 . 117166) (open-paren 117154 . 117155) (symbol 117142 . 117153) (VOID 117137 . 117141) (EXTERN 117130 . 117136) (punctuation 117128 . 117129) (close-paren 117127 . 117128) (symbol 117116 . 117127) (punctuation 117114 . 117115) (symbol 117103 . 117114) (punctuation 117101 . 117102) (symbol 117090 . 117101) (open-paren 117089 . 117090) (symbol 117075 . 117088) (symbol 117063 . 117074) (EXTERN 117056 . 117062) (punctuation 117054 . 117055) (close-paren 117053 . 117054) (symbol 117042 . 117053) (open-paren 117041 . 117042) (symbol 117025 . 117040) (VOID 117020 . 117024) (EXTERN 117013 . 117019) (punctuation 117011 . 117012) (close-paren 117010 . 117011) (symbol 117001 . 117010) (punctuation 116999 . 117000) (punctuation 116998 . 116999) (symbol 116986 . 116997) (open-paren 116985 . 116986) (symbol 116968 . 116984) (symbol 116956 . 116967) (EXTERN 116949 . 116955) (punctuation 116947 . 116948) (close-paren 116946 . 116947) (symbol 116935 . 116946) (punctuation 116922 . 116923) (punctuation 116921 . 116922) (VOID 116916 . 116920) (punctuation 116914 . 116915) (semantic-list 116908 . 116914) (semantic-list 116904 . 116907) (VOID 116899 . 116903) (open-paren 116898 . 116899) (symbol 116872 . 116897) (symbol 116860 . 116871) (EXTERN 116853 . 116859) (punctuation 116851 . 116852) (close-paren 116850 . 116851) (punctuation 116849 . 116850) (VOID 116844 . 116848) (punctuation 116842 . 116843) (punctuation 116841 . 116842) (VOID 116836 . 116840) (open-paren 116835 . 116836) (symbol 116817 . 116834) (symbol 116805 . 116816) (EXTERN 116798 . 116804) (punctuation 116796 . 116797) (close-paren 116795 . 116796) (symbol 116786 . 116795) (punctuation 116784 . 116785) (punctuation 116783 . 116784) (VOID 116778 . 116782) (open-paren 116777 . 116778) (symbol 116759 . 116776) (symbol 116747 . 116758) (EXTERN 116740 . 116746) (punctuation 116738 . 116739) (close-paren 116737 . 116738) (punctuation 116736 . 116737) (VOID 116731 . 116735) (open-paren 116730 . 116731) (symbol 116716 . 116729) (symbol 116704 . 116715) (EXTERN 116697 . 116703) (punctuation 116695 . 116696) (close-paren 116694 . 116695) (symbol 116683 . 116694) (punctuation 116681 . 116682) (symbol 116670 . 116681) (punctuation 116657 . 116658) (symbol 116646 . 116657) (punctuation 116644 . 116645) (symbol 116633 . 116644) (open-paren 116632 . 116633) (symbol 116606 . 116631) (symbol 116594 . 116605) (EXTERN 116587 . 116593) (punctuation 116585 . 116586) (close-paren 116584 . 116585) (symbol 116575 . 116584) (punctuation 116573 . 116574) (symbol 116564 . 116573) (punctuation 116562 . 116563) (symbol 116553 . 116562) (open-paren 116552 . 116553) (symbol 116530 . 116551) (symbol 116518 . 116529) (EXTERN 116511 . 116517) (punctuation 116509 . 116510) (close-paren 116508 . 116509) (VOID 116504 . 116508) (open-paren 116503 . 116504) (symbol 116476 . 116502) (symbol 116466 . 116475) (EXTERN 116459 . 116465) (punctuation 116457 . 116458) (close-paren 116456 . 116457) (VOID 116452 . 116456) (open-paren 116451 . 116452) (symbol 116428 . 116450) (VOID 116423 . 116427) (EXTERN 116416 . 116422) (punctuation 116414 . 116415) (close-paren 116413 . 116414) (DOUBLE 116407 . 116413) (open-paren 116406 . 116407) (symbol 116395 . 116405) (symbol 116383 . 116394) (EXTERN 116376 . 116382) (punctuation 115639 . 115640) (close-paren 115638 . 115639) (symbol 115629 . 115638) (ENUM 115624 . 115628) (punctuation 115614 . 115615) (INT 115611 . 115614) (punctuation 115609 . 115610) (INT 115606 . 115609) (punctuation 115604 . 115605) (INT 115601 . 115604) (open-paren 115600 . 115601) (symbol 115578 . 115599) (punctuation 115577 . 115578) (symbol 115565 . 115576) (STRUCT 115558 . 115564) (EXTERN 115551 . 115557) (close-paren 115548 . 115549) (RETURN 115538 . 115544) (punctuation 115514 . 115515) (punctuation 115513 . 115514) (semantic-list 115510 . 115513) (symbol 115494 . 115509) (punctuation 115476 . 115477) (punctuation 115475 . 115476) (semantic-list 115472 . 115475) (symbol 115456 . 115471) (punctuation 115452 . 115453) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 115427 . 115430) ("v" symbol "XVECTOR" 115419 . 115426)))) 115405 . 115452) (open-paren 115295 . 115296) (close-paren 115293 . 115294) (symbol 115285 . 115293) (INT 115281 . 115284) (punctuation 115279 . 115280) (symbol 115274 . 115279) (INT 115270 . 115273) (open-paren 115269 . 115270) (symbol 115242 . 115268) (symbol 115230 . 115241) (symbol 115223 . 115229) (close-paren 115167 . 115168) (RETURN 115157 . 115163) (punctuation 115153 . 115154) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 115151 . 115152) ("a" symbol "v" 115148 . 115149)))) 115136 . 115153) (open-paren 115059 . 115060) (close-paren 115057 . 115058) (symbol 115053 . 115057) (symbol 115043 . 115052) (open-paren 115042 . 115043) (symbol 115023 . 115041) (symbol 115011 . 115022) (symbol 115004 . 115010) (punctuation 114692 . 114693) (close-paren 114691 . 114692) (symbol 114682 . 114691) (open-paren 114681 . 114682) (symbol 114665 . 114680) (punctuation 114664 . 114665) (symbol 114652 . 114663) (STRUCT 114645 . 114651) (EXTERN 114638 . 114644) (punctuation 114636 . 114637) (close-paren 114635 . 114636) (punctuation 114634 . 114635) (symbol 114622 . 114633) (STRUCT 114615 . 114621) (open-paren 114614 . 114615) (symbol 114599 . 114613) (VOID 114594 . 114598) (EXTERN 114587 . 114593) (punctuation 114585 . 114586) (close-paren 114584 . 114585) (symbol 114573 . 114584) (punctuation 114571 . 114572) (symbol 114560 . 114571) (open-paren 114559 . 114560) (symbol 114549 . 114558) (symbol 114537 . 114548) (EXTERN 114530 . 114536) (close-paren 114527 . 114528) (semantic-list 114519 . 114524) (RETURN 114487 . 114493) (open-paren 114483 . 114484) (close-paren 114481 . 114482) (symbol 114478 . 114481) (punctuation 114477 . 114478) (CHAR 114472 . 114476) (CONST 114466 . 114471) (open-paren 114465 . 114466) (symbol 114452 . 114464) (symbol 114440 . 114451) (symbol 114433 . 114439) (close-paren 114336 . 114337) (semantic-list 114328 . 114333) (RETURN 114289 . 114295) (open-paren 114285 . 114286) (close-paren 114283 . 114284) (symbol 114280 . 114283) (punctuation 114279 . 114280) (CHAR 114274 . 114278) (CONST 114268 . 114273) (open-paren 114267 . 114268) (symbol 114247 . 114266) (symbol 114235 . 114246) (symbol 114228 . 114234) (punctuation 114154 . 114155) (close-paren 114153 . 114154) (symbol 114144 . 114153) (punctuation 114142 . 114143) (punctuation 114141 . 114142) (CHAR 114136 . 114140) (CONST 114130 . 114135) (open-paren 114129 . 114130) (symbol 114110 . 114128) (symbol 114098 . 114109) (EXTERN 114091 . 114097) (punctuation 114089 . 114090) (close-paren 114088 . 114089) (BOOL 114084 . 114088) (punctuation 114082 . 114083) (symbol 114073 . 114082) (punctuation 114071 . 114072) (symbol 114062 . 114071) (punctuation 114060 . 114061) (punctuation 114059 . 114060) (CHAR 114054 . 114058) (CONST 114048 . 114053) (open-paren 114047 . 114048) (symbol 114030 . 114046) (symbol 114018 . 114029) (EXTERN 114011 . 114017) (punctuation 114009 . 114010) (close-paren 114008 . 114009) (BOOL 114004 . 114008) (punctuation 114002 . 114003) (symbol 113993 . 114002) (punctuation 113991 . 113992) (symbol 113982 . 113991) (punctuation 113973 . 113974) (punctuation 113972 . 113973) (CHAR 113967 . 113971) (CONST 113961 . 113966) (open-paren 113960 . 113961) (symbol 113938 . 113959) (symbol 113926 . 113937) (EXTERN 113919 . 113925) (punctuation 113917 . 113918) (close-paren 113916 . 113917) (symbol 113907 . 113916) (punctuation 113905 . 113906) (symbol 113896 . 113905) (punctuation 113894 . 113895) (punctuation 113893 . 113894) (CHAR 113888 . 113892) (CONST 113882 . 113887) (open-paren 113881 . 113882) (symbol 113858 . 113880) (symbol 113846 . 113857) (EXTERN 113839 . 113845) (punctuation 113837 . 113838) (close-paren 113836 . 113837) (symbol 113827 . 113836) (punctuation 113825 . 113826) (symbol 113816 . 113825) (open-paren 113815 . 113816) (symbol 113786 . 113814) (symbol 113774 . 113785) (EXTERN 113767 . 113773) (punctuation 113765 . 113766) (close-paren 113764 . 113765) (symbol 113755 . 113764) (open-paren 113754 . 113755) (symbol 113735 . 113753) (symbol 113723 . 113734) (EXTERN 113716 . 113722) (punctuation 113714 . 113715) (close-paren 113713 . 113714) (punctuation 113712 . 113713) (symbol 113700 . 113711) (punctuation 113698 . 113699) (symbol 113689 . 113698) (open-paren 113688 . 113689) (symbol 113671 . 113687) (symbol 113659 . 113670) (EXTERN 113652 . 113658) (punctuation 113650 . 113651) (close-paren 113649 . 113650) (symbol 113640 . 113649) (punctuation 113638 . 113639) (symbol 113629 . 113638) (punctuation 113627 . 113628) (punctuation 113626 . 113627) (CHAR 113621 . 113625) (CONST 113615 . 113620) (open-paren 113614 . 113615) (symbol 113592 . 113613) (symbol 113580 . 113591) (EXTERN 113573 . 113579) (close-paren 113570 . 113571) (semantic-list 113562 . 113567) (RETURN 113522 . 113528) (open-paren 113518 . 113519) (close-paren 113516 . 113517) (symbol 113513 . 113516) (punctuation 113512 . 113513) (CHAR 113507 . 113511) (CONST 113501 . 113506) (open-paren 113500 . 113501) (symbol 113479 . 113499) (symbol 113467 . 113478) (symbol 113460 . 113466) (punctuation 113386 . 113387) (close-paren 113385 . 113386) (symbol 113376 . 113385) (punctuation 113374 . 113375) (punctuation 113373 . 113374) (CHAR 113368 . 113372) (CONST 113362 . 113367) (open-paren 113361 . 113362) (symbol 113341 . 113360) (symbol 113329 . 113340) (EXTERN 113322 . 113328) (punctuation 113320 . 113321) (close-paren 113319 . 113320) (number 113318 . 113319) (punctuation 113316 . 113317) (number 113315 . 113316) (open-paren 113314 . 113315) (symbol 113290 . 113313) (close-paren 113286 . 113287) (punctuation 113285 . 113286) (punctuation 113284 . 113285) (punctuation 113283 . 113284) (punctuation 113281 . 113282) (punctuation 113280 . 113281) (CHAR 113275 . 113279) (CONST 113269 . 113274) (punctuation 113267 . 113268) (punctuation 113266 . 113267) (CHAR 113261 . 113265) (open-paren 113260 . 113261) (symbol 113238 . 113259) (symbol 113226 . 113237) (EXTERN 113219 . 113225) (punctuation 113217 . 113218) (close-paren 113216 . 113217) (symbol 113207 . 113216) (punctuation 113205 . 113206) (punctuation 113204 . 113205) (CHAR 113199 . 113203) (CONST 113193 . 113198) (open-paren 113192 . 113193) (symbol 113180 . 113191) (symbol 113168 . 113179) (EXTERN 113161 . 113167) (punctuation 113159 . 113160) (close-paren 113158 . 113159) (VOID 113154 . 113158) (open-paren 113153 . 113154) (symbol 113137 . 113152) (VOID 113132 . 113136) (EXTERN 113115 . 113121) (punctuation 113113 . 113114) (close-paren 113112 . 113113) (symbol 113101 . 113112) (punctuation 113099 . 113100) (symbol 113088 . 113099) (open-paren 113087 . 113088) (symbol 113070 . 113086) (symbol 113058 . 113069) (EXTERN 113051 . 113057) (punctuation 113049 . 113050) (close-paren 113048 . 113049) (symbol 113039 . 113048) (open-paren 113038 . 113039) (symbol 113014 . 113037) (symbol 113002 . 113013) (EXTERN 112995 . 113001) (close-paren 112992 . 112993) (semantic-list 112986 . 112989) (semantic-list 112969 . 112972) (semantic-list 112950 . 112953) (semantic-list 112933 . 112936) (RETURN 112907 . 112913) (open-paren 112903 . 112904) (close-paren 112901 . 112902) (symbol 112900 . 112901) (symbol 112890 . 112899) (punctuation 112888 . 112889) (symbol 112887 . 112888) (symbol 112877 . 112886) (punctuation 112875 . 112876) (symbol 112874 . 112875) (symbol 112864 . 112873) (punctuation 112862 . 112863) (symbol 112861 . 112862) (symbol 112851 . 112860) (open-paren 112850 . 112851) (symbol 112843 . 112849) (symbol 112831 . 112842) (symbol 112824 . 112830) (close-paren 112821 . 112822) (semantic-list 112815 . 112818) (semantic-list 112798 . 112801) (semantic-list 112781 . 112784) (RETURN 112755 . 112761) (open-paren 112751 . 112752) (close-paren 112749 . 112750) (symbol 112748 . 112749) (symbol 112738 . 112747) (punctuation 112736 . 112737) (symbol 112735 . 112736) (symbol 112725 . 112734) (punctuation 112723 . 112724) (symbol 112722 . 112723) (symbol 112712 . 112721) (open-paren 112711 . 112712) (symbol 112704 . 112710) (symbol 112692 . 112703) (symbol 112685 . 112691) (close-paren 112682 . 112683) (semantic-list 112676 . 112679) (semantic-list 112659 . 112662) (RETURN 112633 . 112639) (open-paren 112629 . 112630) (close-paren 112627 . 112628) (symbol 112626 . 112627) (symbol 112616 . 112625) (punctuation 112614 . 112615) (symbol 112613 . 112614) (symbol 112603 . 112612) (open-paren 112602 . 112603) (symbol 112595 . 112601) (symbol 112583 . 112594) (symbol 112576 . 112582) (punctuation 112520 . 112521) (close-paren 112519 . 112520) (punctuation 112518 . 112519) (punctuation 112517 . 112518) (punctuation 112516 . 112517) (punctuation 112514 . 112515) (symbol 112503 . 112514) (punctuation 112501 . 112502) (symbol 112492 . 112501) (punctuation 112490 . 112491) (symbol 112482 . 112490) (ENUM 112477 . 112481) (open-paren 112476 . 112477) (symbol 112470 . 112475) (symbol 112458 . 112469) (EXTERN 112451 . 112457) (punctuation 112449 . 112450) (close-paren 112448 . 112449) (symbol 112435 . 112448) (punctuation 112433 . 112434) (symbol 112420 . 112433) (open-paren 112419 . 112420) (symbol 112410 . 112418) (ENUM 112405 . 112409) (punctuation 112403 . 112404) (close-paren 112402 . 112403) (symbol 112391 . 112402) (punctuation 112384 . 112385) (symbol 112373 . 112384) (punctuation 112371 . 112372) (symbol 112360 . 112371) (punctuation 112358 . 112359) (symbol 112347 . 112358) (punctuation 112345 . 112346) (symbol 112334 . 112345) (open-paren 112333 . 112334) (symbol 112327 . 112332) (symbol 112315 . 112326) (EXTERN 112308 . 112314) (punctuation 112306 . 112307) (close-paren 112305 . 112306) (symbol 112294 . 112305) (punctuation 112292 . 112293) (symbol 112281 . 112292) (punctuation 112279 . 112280) (symbol 112268 . 112279) (punctuation 112266 . 112267) (symbol 112255 . 112266) (open-paren 112254 . 112255) (symbol 112248 . 112253) (symbol 112236 . 112247) (EXTERN 112229 . 112235) (punctuation 112227 . 112228) (close-paren 112226 . 112227) (symbol 112215 . 112226) (punctuation 112213 . 112214) (symbol 112202 . 112213) (punctuation 112200 . 112201) (symbol 112189 . 112200) (open-paren 112188 . 112189) (symbol 112182 . 112187) (symbol 112170 . 112181) (EXTERN 112163 . 112169) (punctuation 112161 . 112162) (close-paren 112160 . 112161) (symbol 112149 . 112160) (punctuation 112147 . 112148) (symbol 112136 . 112147) (open-paren 112135 . 112136) (symbol 112129 . 112134) (symbol 112117 . 112128) (EXTERN 112110 . 112116) (punctuation 112108 . 112109) (close-paren 112107 . 112108) (symbol 112096 . 112107) (open-paren 112095 . 112096) (symbol 112089 . 112094) (symbol 112077 . 112088) (EXTERN 112070 . 112076) (close-paren 111834 . 111835) (open-paren 111833 . 111834) (close-paren 111831 . 111832) (VOID 111827 . 111831) (open-paren 111826 . 111827) (symbol 111808 . 111825) (VOID 111803 . 111807) (symbol 111796 . 111802) (close-paren 111794 . 111795) (open-paren 111793 . 111794) (close-paren 111791 . 111792) (VOID 111787 . 111791) (open-paren 111786 . 111787) (symbol 111769 . 111785) (VOID 111764 . 111768) (symbol 111757 . 111763) (punctuation 111528 . 111529) (close-paren 111527 . 111528) (symbol 111516 . 111527) (open-paren 111515 . 111516) (symbol 111503 . 111514) (VOID 111498 . 111502) (EXTERN 111491 . 111497) (punctuation 111489 . 111490) (close-paren 111488 . 111489) (symbol 111477 . 111488) (open-paren 111476 . 111477) (symbol 111462 . 111475) (BOOL 111457 . 111461) (EXTERN 111450 . 111456) (punctuation 111448 . 111449) (close-paren 111447 . 111448) (symbol 111438 . 111447) (open-paren 111437 . 111438) (symbol 111418 . 111436) (VOID 111413 . 111417) (EXTERN 111396 . 111402) (punctuation 111394 . 111395) (close-paren 111393 . 111394) (symbol 111387 . 111393) (open-paren 111386 . 111387) (symbol 111374 . 111385) (VOID 111369 . 111373) (EXTERN 111352 . 111358) (punctuation 111350 . 111351) (close-paren 111349 . 111350) (punctuation 111348 . 111349) (CHAR 111343 . 111347) (CONST 111337 . 111342) (open-paren 111336 . 111337) (symbol 111321 . 111335) (VOID 111316 . 111320) (EXTERN 111309 . 111315) (punctuation 111307 . 111308) (close-paren 111306 . 111307) (symbol 111297 . 111306) (punctuation 111295 . 111296) (symbol 111286 . 111295) (punctuation 111284 . 111285) (punctuation 111283 . 111284) (symbol 111271 . 111282) (STRUCT 111264 . 111270) (open-paren 111263 . 111264) (symbol 111242 . 111262) (VOID 111237 . 111241) (EXTERN 111230 . 111236) (punctuation 111228 . 111229) (close-paren 111227 . 111228) (symbol 111216 . 111227) (open-paren 111215 . 111216) (symbol 111205 . 111214) (VOID 111200 . 111204) (EXTERN 111193 . 111199) (punctuation 111191 . 111192) (close-paren 111190 . 111191) (VOID 111186 . 111190) (open-paren 111185 . 111186) (symbol 111169 . 111184) (VOID 111164 . 111168) (EXTERN 111157 . 111163) (punctuation 111155 . 111156) (close-paren 111154 . 111155) (VOID 111150 . 111154) (open-paren 111149 . 111150) (symbol 111135 . 111148) (punctuation 111134 . 111135) (VOID 111129 . 111133) (EXTERN 111122 . 111128) (punctuation 111092 . 111093) (close-paren 111091 . 111092) (punctuation 111090 . 111091) (symbol 111080 . 111089) (punctuation 111078 . 111079) (punctuation 111077 . 111078) (symbol 111067 . 111076) (punctuation 111057 . 111058) (symbol 111048 . 111057) (punctuation 111046 . 111047) (punctuation 111045 . 111046) (CHAR 111040 . 111044) (UNSIGNED 111031 . 111039) (CONST 111025 . 111030) (open-paren 111024 . 111025) (symbol 111001 . 111023) (VOID 110996 . 111000) (EXTERN 110989 . 110995) (punctuation 110955 . 110956) (close-paren 110954 . 110955) (semantic-list 110940 . 110954) (semantic-list 110929 . 110939) (VOID 110924 . 110928) (punctuation 110922 . 110923) (punctuation 110921 . 110922) (VOID 110916 . 110920) (open-paren 110915 . 110916) (symbol 110899 . 110914) (VOID 110894 . 110898) (EXTERN 110887 . 110893) (punctuation 110854 . 110855) (close-paren 110853 . 110854) (VOID 110849 . 110853) (open-paren 110848 . 110849) (symbol 110830 . 110847) (VOID 110825 . 110829) (EXTERN 110818 . 110824) (punctuation 110784 . 110785) (close-paren 110783 . 110784) (punctuation 110782 . 110783) (INT 110778 . 110781) (punctuation 110776 . 110777) (punctuation 110775 . 110776) (INT 110771 . 110774) (punctuation 110769 . 110770) (punctuation 110768 . 110769) (INT 110764 . 110767) (punctuation 110762 . 110763) (punctuation 110761 . 110762) (INT 110757 . 110760) (punctuation 110755 . 110756) (punctuation 110754 . 110755) (INT 110750 . 110753) (punctuation 110742 . 110743) (punctuation 110741 . 110742) (INT 110737 . 110740) (punctuation 110735 . 110736) (symbol 110726 . 110735) (punctuation 110724 . 110725) (punctuation 110723 . 110724) (symbol 110716 . 110722) (STRUCT 110709 . 110715) (open-paren 110708 . 110709) (symbol 110694 . 110707) (BOOL 110689 . 110693) (EXTERN 110682 . 110688) (punctuation 110680 . 110681) (close-paren 110679 . 110680) (symbol 110668 . 110679) (open-paren 110667 . 110668) (symbol 110657 . 110666) (symbol 110645 . 110656) (EXTERN 110638 . 110644) (punctuation 110636 . 110637) (close-paren 110635 . 110636) (VOID 110631 . 110635) (open-paren 110630 . 110631) (symbol 110619 . 110629) (VOID 110614 . 110618) (EXTERN 110607 . 110613) (punctuation 110605 . 110606) (close-paren 110604 . 110605) (VOID 110600 . 110604) (open-paren 110599 . 110600) (symbol 110585 . 110598) (VOID 110580 . 110584) (EXTERN 110573 . 110579) (punctuation 110571 . 110572) (close-paren 110570 . 110571) (symbol 110559 . 110570) (punctuation 110557 . 110558) (punctuation 110556 . 110557) (symbol 110550 . 110555) (STRUCT 110543 . 110549) (open-paren 110542 . 110543) (symbol 110519 . 110541) (VOID 110514 . 110518) (punctuation 110511 . 110512) (close-paren 110510 . 110511) (VOID 110506 . 110510) (open-paren 110505 . 110506) (symbol 110495 . 110504) (VOID 110490 . 110494) (EXTERN 110483 . 110489) (punctuation 110481 . 110482) (close-paren 110480 . 110481) (symbol 110471 . 110480) (open-paren 110470 . 110471) (symbol 110451 . 110469) (VOID 110446 . 110450) (EXTERN 110439 . 110445) (punctuation 110437 . 110438) (close-paren 110436 . 110437) (VOID 110432 . 110436) (open-paren 110431 . 110432) (symbol 110414 . 110430) (VOID 110409 . 110413) (EXTERN 110402 . 110408) (punctuation 110400 . 110401) (close-paren 110399 . 110400) (VOID 110395 . 110399) (open-paren 110394 . 110395) (symbol 110368 . 110393) (VOID 110363 . 110367) (EXTERN 110356 . 110362) (punctuation 110354 . 110355) (close-paren 110353 . 110354) (BOOL 110349 . 110353) (punctuation 110347 . 110348) (symbol 110336 . 110347) (punctuation 110334 . 110335) (punctuation 110333 . 110334) (CHAR 110328 . 110332) (CONST 110322 . 110327) (open-paren 110321 . 110322) (symbol 110301 . 110320) (VOID 110296 . 110300) (EXTERN 110289 . 110295) (punctuation 110287 . 110288) (close-paren 110286 . 110287) (BOOL 110282 . 110286) (punctuation 110280 . 110281) (BOOL 110276 . 110280) (punctuation 110274 . 110275) (symbol 110265 . 110274) (punctuation 110263 . 110264) (punctuation 110262 . 110263) (CHAR 110257 . 110261) (CONST 110251 . 110256) (open-paren 110250 . 110251) (symbol 110236 . 110249) (VOID 110231 . 110235) (EXTERN 110224 . 110230) (punctuation 110222 . 110223) (close-paren 110221 . 110222) (symbol 110210 . 110221) (open-paren 110209 . 110210) (symbol 110194 . 110208) (VOID 110189 . 110193) (EXTERN 110182 . 110188) (punctuation 110180 . 110181) (close-paren 110179 . 110180) (symbol 110168 . 110179) (open-paren 110167 . 110168) (symbol 110158 . 110166) (VOID 110153 . 110157) (EXTERN 110146 . 110152) (punctuation 110144 . 110145) (close-paren 110143 . 110144) (punctuation 110142 . 110143) (CHAR 110137 . 110141) (CONST 110131 . 110136) (open-paren 110130 . 110131) (symbol 110115 . 110129) (VOID 110110 . 110114) (EXTERN 110103 . 110109) (punctuation 110101 . 110102) (close-paren 110100 . 110101) (punctuation 110099 . 110100) (CHAR 110094 . 110098) (CONST 110088 . 110093) (open-paren 110087 . 110088) (symbol 110078 . 110086) (VOID 110073 . 110077) (EXTERN 110066 . 110072) (punctuation 110064 . 110065) (close-paren 110063 . 110064) (number 110062 . 110063) (punctuation 110060 . 110061) (number 110059 . 110060) (open-paren 110058 . 110059) (symbol 110034 . 110057) (close-paren 110032 . 110033) (punctuation 110031 . 110032) (punctuation 110030 . 110031) (punctuation 110029 . 110030) (punctuation 110027 . 110028) (punctuation 110026 . 110027) (CHAR 110021 . 110025) (CONST 110015 . 110020) (open-paren 110014 . 110015) (symbol 110006 . 110013) (VOID 110001 . 110005) (EXTERN 109994 . 110000) (punctuation 109992 . 109993) (close-paren 109991 . 109992) (BOOL 109987 . 109991) (punctuation 109985 . 109986) (BOOL 109981 . 109985) (open-paren 109980 . 109981) (symbol 109966 . 109979) (VOID 109961 . 109965) (EXTERN 109954 . 109960) (punctuation 109952 . 109953) (close-paren 109951 . 109952) (VOID 109947 . 109951) (open-paren 109946 . 109947) (symbol 109930 . 109945) (symbol 109918 . 109929) (EXTERN 109911 . 109917) (punctuation 109909 . 109910) (close-paren 109908 . 109909) (VOID 109904 . 109908) (open-paren 109903 . 109904) (symbol 109887 . 109902) (VOID 109882 . 109886) (EXTERN 109875 . 109881) (punctuation 109873 . 109874) (close-paren 109872 . 109873) (symbol 109861 . 109872) (open-paren 109860 . 109861) (symbol 109837 . 109859) (symbol 109825 . 109836) (EXTERN 109818 . 109824) (punctuation 109816 . 109817) (close-paren 109815 . 109816) (VOID 109811 . 109815) (open-paren 109810 . 109811) (symbol 109791 . 109809) (VOID 109786 . 109790) (EXTERN 109779 . 109785) (punctuation 109777 . 109778) (close-paren 109776 . 109777) (VOID 109772 . 109776) (open-paren 109771 . 109772) (symbol 109758 . 109770) (BOOL 109753 . 109757) (EXTERN 109746 . 109752) (punctuation 109744 . 109745) (close-paren 109743 . 109744) (BOOL 109739 . 109743) (open-paren 109738 . 109739) (symbol 109709 . 109737) (VOID 109704 . 109708) (EXTERN 109697 . 109703) (punctuation 109695 . 109696) (close-paren 109694 . 109695) (VOID 109690 . 109694) (open-paren 109689 . 109690) (symbol 109669 . 109688) (VOID 109664 . 109668) (EXTERN 109657 . 109663) (punctuation 109655 . 109656) (close-paren 109654 . 109655) (symbol 109647 . 109654) (punctuation 109645 . 109646) (punctuation 109644 . 109645) (CONST 109638 . 109643) (CHAR 109633 . 109637) (open-paren 109632 . 109633) (symbol 109620 . 109631) (VOID 109615 . 109619) (EXTERN 109608 . 109614) (punctuation 109606 . 109607) (close-paren 109605 . 109606) (punctuation 109604 . 109605) (punctuation 109603 . 109604) (punctuation 109602 . 109603) (punctuation 109600 . 109601) (punctuation 109599 . 109600) (CONST 109593 . 109598) (CHAR 109588 . 109592) (open-paren 109587 . 109588) (symbol 109576 . 109586) (VOID 109571 . 109575) (EXTERN 109564 . 109570) (punctuation 109562 . 109563) (close-paren 109561 . 109562) (number 109560 . 109561) (open-paren 109559 . 109560) (symbol 109543 . 109559) (symbol 109531 . 109542) (EXTERN 109524 . 109530) (punctuation 109453 . 109454) (close-paren 109452 . 109453) (INT 109449 . 109452) (punctuation 109447 . 109448) (BOOL 109443 . 109447) (punctuation 109441 . 109442) (symbol 109430 . 109441) (open-paren 109429 . 109430) (symbol 109421 . 109428) (symbol 109409 . 109420) (EXTERN 109402 . 109408) (punctuation 109186 . 109187) (close-paren 109185 . 109186) (VOID 109181 . 109185) (open-paren 109180 . 109181) (symbol 109165 . 109179) (VOID 109160 . 109164) (EXTERN 109153 . 109159) (punctuation 109151 . 109152) (close-paren 109150 . 109151) (BOOL 109146 . 109150) (punctuation 109144 . 109145) (symbol 109135 . 109144) (punctuation 109133 . 109134) (symbol 109124 . 109133) (punctuation 109122 . 109123) (punctuation 109121 . 109122) (CHAR 109116 . 109120) (CONST 109110 . 109115) (punctuation 109100 . 109101) (symbol 109091 . 109100) (punctuation 109089 . 109090) (symbol 109080 . 109089) (punctuation 109078 . 109079) (symbol 109069 . 109078) (punctuation 109067 . 109068) (symbol 109058 . 109067) (open-paren 109057 . 109058) (symbol 109041 . 109056) (VOID 109036 . 109040) (EXTERN 109029 . 109035) (punctuation 109027 . 109028) (close-paren 109026 . 109027) (BOOL 109022 . 109026) (punctuation 109020 . 109021) (BOOL 109016 . 109020) (punctuation 109014 . 109015) (BOOL 109010 . 109014) (punctuation 109008 . 109009) (BOOL 109004 . 109008) (punctuation 109002 . 109003) (symbol 108991 . 109002) (punctuation 108989 . 108990) (symbol 108980 . 108989) (punctuation 108978 . 108979) (symbol 108969 . 108978) (open-paren 108968 . 108969) (symbol 108954 . 108967) (VOID 108949 . 108953) (EXTERN 108942 . 108948) (punctuation 108940 . 108941) (close-paren 108939 . 108940) (symbol 108930 . 108939) (punctuation 108928 . 108929) (symbol 108919 . 108928) (punctuation 108906 . 108907) (symbol 108897 . 108906) (punctuation 108895 . 108896) (symbol 108886 . 108895) (open-paren 108885 . 108886) (symbol 108859 . 108884) (VOID 108854 . 108858) (EXTERN 108847 . 108853) (punctuation 108845 . 108846) (close-paren 108844 . 108845) (symbol 108835 . 108844) (punctuation 108833 . 108834) (symbol 108824 . 108833) (punctuation 108817 . 108818) (symbol 108808 . 108817) (punctuation 108806 . 108807) (symbol 108797 . 108806) (punctuation 108795 . 108796) (symbol 108786 . 108795) (open-paren 108785 . 108786) (symbol 108765 . 108784) (VOID 108760 . 108764) (EXTERN 108753 . 108759) (punctuation 108751 . 108752) (close-paren 108750 . 108751) (symbol 108741 . 108750) (punctuation 108739 . 108740) (symbol 108730 . 108739) (punctuation 108728 . 108729) (symbol 108719 . 108728) (open-paren 108718 . 108719) (symbol 108698 . 108717) (VOID 108693 . 108697) (EXTERN 108686 . 108692) (punctuation 108684 . 108685) (close-paren 108683 . 108684) (symbol 108674 . 108683) (punctuation 108672 . 108673) (symbol 108663 . 108672) (punctuation 108661 . 108662) (punctuation 108660 . 108661) (symbol 108653 . 108659) (STRUCT 108646 . 108652) (open-paren 108645 . 108646) (symbol 108620 . 108644) (VOID 108615 . 108619) (EXTERN 108608 . 108614) (punctuation 108606 . 108607) (close-paren 108605 . 108606) (punctuation 108604 . 108605) (symbol 108594 . 108603) (punctuation 108592 . 108593) (symbol 108583 . 108592) (punctuation 108581 . 108582) (symbol 108572 . 108581) (open-paren 108571 . 108572) (symbol 108544 . 108570) (VOID 108539 . 108543) (EXTERN 108532 . 108538) (punctuation 108530 . 108531) (close-paren 108529 . 108530) (punctuation 108528 . 108529) (symbol 108518 . 108527) (punctuation 108516 . 108517) (symbol 108507 . 108516) (punctuation 108505 . 108506) (symbol 108496 . 108505) (open-paren 108495 . 108496) (symbol 108470 . 108494) (VOID 108465 . 108469) (EXTERN 108458 . 108464) (punctuation 108456 . 108457) (close-paren 108455 . 108456) (symbol 108446 . 108455) (punctuation 108444 . 108445) (symbol 108435 . 108444) (open-paren 108434 . 108435) (symbol 108422 . 108433) (VOID 108417 . 108421) (EXTERN 108410 . 108416) (punctuation 108408 . 108409) (close-paren 108407 . 108408) (BOOL 108403 . 108407) (punctuation 108401 . 108402) (symbol 108392 . 108401) (punctuation 108390 . 108391) (symbol 108381 . 108390) (punctuation 108375 . 108376) (symbol 108366 . 108375) (punctuation 108364 . 108365) (symbol 108355 . 108364) (open-paren 108354 . 108355) (symbol 108342 . 108353) (symbol 108330 . 108341) (EXTERN 108323 . 108329) (punctuation 108321 . 108322) (close-paren 108320 . 108321) (BOOL 108316 . 108320) (punctuation 108314 . 108315) (symbol 108305 . 108314) (punctuation 108303 . 108304) (symbol 108294 . 108303) (punctuation 108292 . 108293) (symbol 108283 . 108292) (punctuation 108281 . 108282) (symbol 108272 . 108281) (open-paren 108271 . 108272) (symbol 108256 . 108270) (VOID 108251 . 108255) (EXTERN 108244 . 108250) (punctuation 108242 . 108243) (close-paren 108241 . 108242) (BOOL 108237 . 108241) (punctuation 108235 . 108236) (symbol 108226 . 108235) (punctuation 108224 . 108225) (symbol 108215 . 108224) (open-paren 108214 . 108215) (symbol 108199 . 108213) (VOID 108194 . 108198) (EXTERN 108187 . 108193) (punctuation 108185 . 108186) (close-paren 108184 . 108185) (BOOL 108180 . 108184) (punctuation 108178 . 108179) (BOOL 108174 . 108178) (punctuation 108172 . 108173) (symbol 108163 . 108172) (punctuation 108161 . 108162) (symbol 108152 . 108161) (open-paren 108151 . 108152) (symbol 108139 . 108150) (symbol 108127 . 108138) (EXTERN 108120 . 108126) (punctuation 108118 . 108119) (close-paren 108117 . 108118) (symbol 108108 . 108117) (punctuation 108106 . 108107) (symbol 108097 . 108106) (open-paren 108096 . 108097) (symbol 108086 . 108095) (VOID 108081 . 108085) (EXTERN 108074 . 108080) (punctuation 108072 . 108073) (close-paren 108071 . 108072) (BOOL 108067 . 108071) (punctuation 108065 . 108066) (symbol 108056 . 108065) (punctuation 108042 . 108043) (symbol 108033 . 108042) (punctuation 108031 . 108032) (symbol 108022 . 108031) (punctuation 108008 . 108009) (symbol 107999 . 108008) (punctuation 107997 . 107998) (symbol 107986 . 107997) (open-paren 107985 . 107986) (symbol 107951 . 107984) (VOID 107946 . 107950) (EXTERN 107939 . 107945) (punctuation 107937 . 107938) (close-paren 107936 . 107937) (symbol 107927 . 107936) (punctuation 107925 . 107926) (punctuation 107924 . 107925) (CHAR 107919 . 107923) (CONST 107913 . 107918) (open-paren 107912 . 107913) (symbol 107878 . 107911) (VOID 107873 . 107877) (EXTERN 107866 . 107872) (punctuation 107864 . 107865) (close-paren 107863 . 107864) (symbol 107854 . 107863) (punctuation 107852 . 107853) (punctuation 107851 . 107852) (CHAR 107846 . 107850) (CONST 107840 . 107845) (open-paren 107839 . 107840) (symbol 107817 . 107838) (VOID 107812 . 107816) (EXTERN 107805 . 107811) (punctuation 107803 . 107804) (close-paren 107802 . 107803) (punctuation 107801 . 107802) (CHAR 107796 . 107800) (CONST 107790 . 107795) (open-paren 107789 . 107790) (symbol 107775 . 107788) (VOID 107770 . 107774) (EXTERN 107763 . 107769) (punctuation 107761 . 107762) (close-paren 107760 . 107761) (INT 107757 . 107760) (open-paren 107756 . 107757) (symbol 107744 . 107755) (VOID 107739 . 107743) (EXTERN 107732 . 107738) (punctuation 107730 . 107731) (close-paren 107729 . 107730) (BOOL 107725 . 107729) (punctuation 107723 . 107724) (symbol 107714 . 107723) (punctuation 107712 . 107713) (symbol 107703 . 107712) (punctuation 107701 . 107702) (punctuation 107700 . 107701) (symbol 107693 . 107699) (STRUCT 107686 . 107692) (open-paren 107685 . 107686) (symbol 107666 . 107684) (VOID 107661 . 107665) (EXTERN 107654 . 107660) (punctuation 107652 . 107653) (close-paren 107651 . 107652) (BOOL 107647 . 107651) (punctuation 107645 . 107646) (symbol 107636 . 107645) (punctuation 107634 . 107635) (symbol 107625 . 107634) (punctuation 107619 . 107620) (symbol 107610 . 107619) (punctuation 107608 . 107609) (symbol 107599 . 107608) (punctuation 107597 . 107598) (symbol 107586 . 107597) (open-paren 107585 . 107586) (symbol 107566 . 107584) (VOID 107561 . 107565) (EXTERN 107554 . 107560) (punctuation 107552 . 107553) (close-paren 107551 . 107552) (symbol 107535 . 107551) (BOOL 107530 . 107534) (punctuation 107528 . 107529) (symbol 107519 . 107528) (punctuation 107517 . 107518) (symbol 107508 . 107517) (open-paren 107507 . 107508) (symbol 107491 . 107506) (VOID 107486 . 107490) (EXTERN 107479 . 107485) (punctuation 107477 . 107478) (close-paren 107476 . 107477) (BOOL 107472 . 107476) (punctuation 107470 . 107471) (BOOL 107466 . 107470) (punctuation 107464 . 107465) (BOOL 107460 . 107464) (punctuation 107452 . 107453) (symbol 107443 . 107452) (punctuation 107441 . 107442) (symbol 107432 . 107441) (punctuation 107430 . 107431) (punctuation 107429 . 107430) (CHAR 107424 . 107428) (CONST 107418 . 107423) (open-paren 107417 . 107418) (symbol 107403 . 107416) (VOID 107398 . 107402) (EXTERN 107391 . 107397) (punctuation 107389 . 107390) (close-paren 107388 . 107389) (symbol 107379 . 107388) (punctuation 107377 . 107378) (punctuation 107376 . 107377) (CHAR 107371 . 107375) (CONST 107365 . 107370) (open-paren 107364 . 107365) (symbol 107345 . 107363) (VOID 107340 . 107344) (EXTERN 107333 . 107339) (punctuation 107331 . 107332) (close-paren 107330 . 107331) (symbol 107321 . 107330) (punctuation 107319 . 107320) (punctuation 107318 . 107319) (CHAR 107313 . 107317) (CONST 107307 . 107312) (open-paren 107306 . 107307) (symbol 107299 . 107305) (VOID 107294 . 107298) (EXTERN 107287 . 107293) (punctuation 107285 . 107286) (close-paren 107284 . 107285) (symbol 107275 . 107284) (punctuation 107273 . 107274) (symbol 107264 . 107273) (punctuation 107262 . 107263) (symbol 107253 . 107262) (punctuation 107245 . 107246) (punctuation 107244 . 107245) (CHAR 107239 . 107243) (UNSIGNED 107230 . 107238) (CONST 107224 . 107229) (open-paren 107223 . 107224) (symbol 107201 . 107222) (INT 107197 . 107200) (EXTERN 107190 . 107196) (punctuation 107188 . 107189) (close-paren 107187 . 107188) (symbol 107178 . 107187) (punctuation 107176 . 107177) (symbol 107167 . 107176) (punctuation 107165 . 107166) (symbol 107156 . 107165) (punctuation 107147 . 107148) (punctuation 107146 . 107147) (CHAR 107141 . 107145) (UNSIGNED 107132 . 107140) (CONST 107126 . 107131) (open-paren 107125 . 107126) (symbol 107102 . 107124) (INT 107098 . 107101) (EXTERN 107091 . 107097) (punctuation 107089 . 107090) (close-paren 107088 . 107089) (BOOL 107084 . 107088) (punctuation 107082 . 107083) (BOOL 107078 . 107082) (punctuation 107076 . 107077) (symbol 107067 . 107076) (punctuation 107058 . 107059) (punctuation 107057 . 107058) (CHAR 107052 . 107056) (UNSIGNED 107043 . 107051) (punctuation 107041 . 107042) (punctuation 107040 . 107041) (CHAR 107035 . 107039) (UNSIGNED 107026 . 107034) (CONST 107020 . 107025) (open-paren 107019 . 107020) (symbol 107009 . 107018) (symbol 106999 . 107008) (EXTERN 106992 . 106998) (punctuation 106990 . 106991) (close-paren 106989 . 106990) (symbol 106980 . 106989) (punctuation 106978 . 106979) (punctuation 106977 . 106978) (symbol 106970 . 106976) (STRUCT 106963 . 106969) (open-paren 106962 . 106963) (symbol 106951 . 106961) (VOID 106946 . 106950) (EXTERN 106939 . 106945) (punctuation 106937 . 106938) (close-paren 106936 . 106937) (symbol 106927 . 106936) (open-paren 106926 . 106927) (symbol 106917 . 106925) (VOID 106912 . 106916) (EXTERN 106905 . 106911) (punctuation 106903 . 106904) (close-paren 106902 . 106903) (VOID 106898 . 106902) (open-paren 106897 . 106898) (symbol 106881 . 106896) (VOID 106876 . 106880) (EXTERN 106859 . 106865) (punctuation 106857 . 106858) (close-paren 106856 . 106857) (symbol 106847 . 106856) (punctuation 106845 . 106846) (symbol 106836 . 106845) (open-paren 106835 . 106836) (symbol 106821 . 106834) (VOID 106816 . 106820) (EXTERN 106809 . 106815) (punctuation 106778 . 106779) (close-paren 106777 . 106778) (VOID 106773 . 106777) (open-paren 106772 . 106773) (symbol 106758 . 106771) (VOID 106753 . 106757) (EXTERN 106746 . 106752) (punctuation 106744 . 106745) (close-paren 106743 . 106744) (VOID 106739 . 106743) (open-paren 106738 . 106739) (symbol 106720 . 106737) (VOID 106715 . 106719) (EXTERN 106708 . 106714) (punctuation 106706 . 106707) (close-paren 106705 . 106706) (symbol 106696 . 106705) (punctuation 106694 . 106695) (punctuation 106693 . 106694) (symbol 106687 . 106692) (STRUCT 106680 . 106686) (open-paren 106679 . 106680) (symbol 106665 . 106678) (INT 106661 . 106664) (EXTERN 106654 . 106660) (punctuation 106492 . 106493) (close-paren 106491 . 106492) (VOID 106487 . 106491) (open-paren 106486 . 106487) (symbol 106474 . 106485) (VOID 106469 . 106473) (EXTERN 106462 . 106468) (punctuation 106460 . 106461) (close-paren 106459 . 106460) (VOID 106455 . 106459) (open-paren 106454 . 106455) (symbol 106439 . 106453) (VOID 106434 . 106438) (EXTERN 106427 . 106433) (punctuation 106396 . 106397) (close-paren 106395 . 106396) (symbol 106394 . 106395) (symbol 106382 . 106393) (punctuation 106380 . 106381) (symbol 106379 . 106380) (symbol 106367 . 106378) (open-paren 106366 . 106367) (symbol 106355 . 106365) (symbol 106343 . 106354) (EXTERN 106336 . 106342) (punctuation 106334 . 106335) (close-paren 106333 . 106334) (VOID 106329 . 106333) (open-paren 106328 . 106329) (symbol 106311 . 106327) (VOID 106306 . 106310) (EXTERN 106299 . 106305) (punctuation 106266 . 106267) (close-paren 106265 . 106266) (VOID 106261 . 106265) (open-paren 106260 . 106261) (symbol 106248 . 106259) (VOID 106243 . 106247) (EXTERN 106236 . 106242) (punctuation 106234 . 106235) (close-paren 106233 . 106234) (symbol 106222 . 106233) (open-paren 106221 . 106222) (symbol 106201 . 106220) (symbol 106189 . 106200) (EXTERN 106182 . 106188) (punctuation 106180 . 106181) (close-paren 106179 . 106180) (symbol 106168 . 106179) (open-paren 106167 . 106168) (symbol 106147 . 106166) (symbol 106135 . 106146) (EXTERN 106128 . 106134) (punctuation 106126 . 106127) (close-paren 106125 . 106126) (symbol 106116 . 106125) (punctuation 106114 . 106115) (symbol 106103 . 106114) (open-paren 106102 . 106103) (symbol 106082 . 106101) (symbol 106072 . 106081) (EXTERN 106065 . 106071) (punctuation 106063 . 106064) (close-paren 106062 . 106063) (symbol 106053 . 106062) (punctuation 106051 . 106052) (symbol 106040 . 106051) (open-paren 106039 . 106040) (symbol 106019 . 106038) (symbol 106009 . 106018) (EXTERN 106002 . 106008) (punctuation 106000 . 106001) (close-paren 105999 . 106000) (VOID 105995 . 105999) (open-paren 105994 . 105995) (symbol 105965 . 105993) (VOID 105960 . 105964) (EXTERN 105953 . 105959) (punctuation 105951 . 105952) (close-paren 105950 . 105951) (symbol 105939 . 105950) (punctuation 105937 . 105938) (symbol 105926 . 105937) (open-paren 105925 . 105926) (symbol 105911 . 105924) (symbol 105899 . 105910) (EXTERN 105892 . 105898) (punctuation 105890 . 105891) (close-paren 105889 . 105890) (symbol 105878 . 105889) (punctuation 105876 . 105877) (symbol 105865 . 105876) (open-paren 105864 . 105865) (symbol 105851 . 105863) (symbol 105839 . 105850) (EXTERN 105832 . 105838) (punctuation 105830 . 105831) (close-paren 105829 . 105830) (symbol 105818 . 105829) (punctuation 105816 . 105817) (symbol 105805 . 105816) (open-paren 105804 . 105805) (symbol 105797 . 105803) (symbol 105785 . 105796) (EXTERN 105778 . 105784) (punctuation 105776 . 105777) (close-paren 105775 . 105776) (symbol 105764 . 105775) (punctuation 105762 . 105763) (symbol 105751 . 105762) (punctuation 105749 . 105750) (symbol 105738 . 105749) (open-paren 105737 . 105738) (symbol 105729 . 105736) (symbol 105717 . 105728) (EXTERN 105710 . 105716) (punctuation 105708 . 105709) (close-paren 105707 . 105708) (symbol 105696 . 105707) (punctuation 105694 . 105695) (symbol 105683 . 105694) (open-paren 105682 . 105683) (symbol 105674 . 105681) (symbol 105662 . 105673) (EXTERN 105655 . 105661) (punctuation 105653 . 105654) (close-paren 105652 . 105653) (symbol 105641 . 105652) (open-paren 105640 . 105641) (symbol 105625 . 105639) (symbol 105613 . 105624) (EXTERN 105606 . 105612) (punctuation 105604 . 105605) (close-paren 105603 . 105604) (symbol 105592 . 105603) (punctuation 105590 . 105591) (symbol 105579 . 105590) (punctuation 105577 . 105578) (symbol 105566 . 105577) (open-paren 105565 . 105566) (symbol 105559 . 105564) (symbol 105547 . 105558) (EXTERN 105540 . 105546) (punctuation 105538 . 105539) (close-paren 105537 . 105538) (symbol 105528 . 105537) (punctuation 105526 . 105527) (symbol 105517 . 105526) (punctuation 105508 . 105509) (symbol 105499 . 105508) (punctuation 105497 . 105498) (symbol 105488 . 105497) (punctuation 105486 . 105487) (symbol 105475 . 105486) (open-paren 105474 . 105475) (symbol 105459 . 105473) (symbol 105447 . 105458) (EXTERN 105440 . 105446) (punctuation 105438 . 105439) (close-paren 105437 . 105438) (punctuation 105436 . 105437) (symbol 105426 . 105435) (punctuation 105424 . 105425) (punctuation 105423 . 105424) (symbol 105413 . 105422) (punctuation 105411 . 105412) (symbol 105402 . 105411) (punctuation 105390 . 105391) (symbol 105379 . 105390) (punctuation 105377 . 105378) (symbol 105366 . 105377) (punctuation 105364 . 105365) (symbol 105353 . 105364) (open-paren 105352 . 105353) (symbol 105334 . 105351) (VOID 105329 . 105333) (EXTERN 105322 . 105328) (punctuation 105247 . 105248) (close-paren 105246 . 105247) (symbol 105235 . 105246) (punctuation 105233 . 105234) (punctuation 105232 . 105233) (symbol 105216 . 105231) (STRUCT 105209 . 105215) (open-paren 105208 . 105209) (symbol 105185 . 105207) (VOID 105180 . 105184) (punctuation 105178 . 105179) (close-paren 105177 . 105178) (symbol 105167 . 105177) (punctuation 105159 . 105160) (symbol 105148 . 105159) (punctuation 105146 . 105147) (symbol 105135 . 105146) (punctuation 105133 . 105134) (punctuation 105132 . 105133) (symbol 105116 . 105131) (STRUCT 105109 . 105115) (open-paren 105108 . 105109) (symbol 105099 . 105107) (symbol 105089 . 105098) (punctuation 105087 . 105088) (close-paren 105086 . 105087) (punctuation 105085 . 105086) (symbol 105074 . 105084) (punctuation 105072 . 105073) (symbol 105061 . 105072) (punctuation 105059 . 105060) (punctuation 105058 . 105059) (symbol 105042 . 105057) (STRUCT 105035 . 105041) (open-paren 105034 . 105035) (symbol 105022 . 105033) (symbol 105012 . 105021) (punctuation 105010 . 105011) (close-paren 105009 . 105010) (symbol 104998 . 105009) (punctuation 104996 . 104997) (symbol 104985 . 104996) (punctuation 104954 . 104955) (symbol 104943 . 104954) (punctuation 104941 . 104942) (symbol 104930 . 104941) (punctuation 104928 . 104929) (symbol 104913 . 104928) (STRUCT 104906 . 104912) (open-paren 104905 . 104906) (symbol 104889 . 104904) (symbol 104877 . 104888) (punctuation 104875 . 104876) (close-paren 104874 . 104875) (INT 104871 . 104874) (punctuation 104869 . 104870) (symbol 104858 . 104869) (open-paren 104857 . 104858) (symbol 104850 . 104856) (symbol 104839 . 104849) (punctuation 104837 . 104838) (close-paren 104836 . 104837) (symbol 104827 . 104836) (punctuation 104825 . 104826) (punctuation 104824 . 104825) (CONST 104818 . 104823) (CHAR 104813 . 104817) (open-paren 104812 . 104813) (symbol 104800 . 104811) (symbol 104789 . 104799) (punctuation 104787 . 104788) (close-paren 104786 . 104787) (VOID 104782 . 104786) (open-paren 104781 . 104782) (symbol 104758 . 104780) (VOID 104753 . 104757) (EXTERN 104746 . 104752) (punctuation 104744 . 104745) (close-paren 104743 . 104744) (symbol 104734 . 104743) (punctuation 104732 . 104733) (symbol 104723 . 104732) (punctuation 104721 . 104722) (symbol 104710 . 104721) (open-paren 104709 . 104710) (symbol 104695 . 104708) (symbol 104683 . 104694) (EXTERN 104676 . 104682) (close-paren 104657 . 104658) (symbol 104648 . 104657) (open-paren 104647 . 104648) (symbol 104629 . 104646) (symbol 104619 . 104628) (EXTERN 104612 . 104618) (punctuation 104610 . 104611) (close-paren 104609 . 104610) (number 104606 . 104608) (punctuation 104604 . 104605) (symbol 104580 . 104603) (open-paren 104578 . 104579) (ENUM 104573 . 104577) (punctuation 104545 . 104546) (close-paren 104544 . 104545) (VOID 104540 . 104544) (open-paren 104539 . 104540) (symbol 104524 . 104538) (VOID 104519 . 104523) (EXTERN 104512 . 104518) (punctuation 104510 . 104511) (close-paren 104509 . 104510) (VOID 104505 . 104509) (open-paren 104504 . 104505) (symbol 104487 . 104503) (VOID 104482 . 104486) (EXTERN 104475 . 104481) (punctuation 104389 . 104390) (close-paren 104388 . 104389) (VOID 104384 . 104388) (open-paren 104383 . 104384) (symbol 104367 . 104382) (VOID 104362 . 104366) (EXTERN 104355 . 104361) (punctuation 104353 . 104354) (close-paren 104352 . 104353) (VOID 104348 . 104352) (open-paren 104347 . 104348) (symbol 104329 . 104346) (VOID 104324 . 104328) (EXTERN 104317 . 104323) (punctuation 104315 . 104316) (close-paren 104314 . 104315) (VOID 104310 . 104314) (open-paren 104309 . 104310) (symbol 104296 . 104308) (VOID 104291 . 104295) (EXTERN 104284 . 104290) (punctuation 104252 . 104253) (close-paren 104251 . 104252) (VOID 104247 . 104251) (open-paren 104246 . 104247) (symbol 104228 . 104245) (VOID 104223 . 104227) (EXTERN 104216 . 104222) (punctuation 104214 . 104215) (close-paren 104213 . 104214) (symbol 104204 . 104213) (punctuation 104202 . 104203) (punctuation 104201 . 104202) (CHAR 104196 . 104200) (UNSIGNED 104187 . 104195) (CONST 104181 . 104186) (open-paren 104180 . 104181) (symbol 104156 . 104179) (symbol 104146 . 104155) (EXTERN 104139 . 104145) (punctuation 104137 . 104138) (close-paren 104136 . 104137) (symbol 104127 . 104136) (punctuation 104125 . 104126) (punctuation 104124 . 104125) (CHAR 104119 . 104123) (UNSIGNED 104110 . 104118) (CONST 104104 . 104109) (open-paren 104103 . 104104) (symbol 104089 . 104102) (symbol 104079 . 104088) (EXTERN 104072 . 104078) (punctuation 104038 . 104039) (close-paren 104037 . 104038) (VOID 104033 . 104037) (open-paren 104032 . 104033) (symbol 104017 . 104031) (VOID 104012 . 104016) (EXTERN 104005 . 104011) (punctuation 104003 . 104004) (close-paren 104002 . 104003) (VOID 103998 . 104002) (open-paren 103997 . 103998) (symbol 103980 . 103996) (VOID 103975 . 103979) (EXTERN 103968 . 103974) (punctuation 103966 . 103967) (close-paren 103965 . 103966) (VOID 103961 . 103965) (open-paren 103960 . 103961) (symbol 103948 . 103959) (VOID 103943 . 103947) (EXTERN 103936 . 103942) (punctuation 103934 . 103935) (close-paren 103933 . 103934) (symbol 103922 . 103933) (punctuation 103920 . 103921) (BOOL 103916 . 103920) (punctuation 103914 . 103915) (BOOL 103910 . 103914) (punctuation 103908 . 103909) (symbol 103899 . 103908) (punctuation 103856 . 103857) (symbol 103847 . 103856) (punctuation 103845 . 103846) (punctuation 103844 . 103845) (CHAR 103839 . 103843) (UNSIGNED 103830 . 103838) (CONST 103824 . 103829) (open-paren 103823 . 103824) (symbol 103802 . 103822) (symbol 103790 . 103801) (EXTERN 103783 . 103789) (punctuation 103752 . 103753) (close-paren 103751 . 103752) (VOID 103747 . 103751) (open-paren 103746 . 103747) (symbol 103733 . 103745) (VOID 103728 . 103732) (EXTERN 103721 . 103727) (punctuation 103719 . 103720) (close-paren 103718 . 103719) (VOID 103714 . 103718) (open-paren 103713 . 103714) (symbol 103700 . 103712) (VOID 103695 . 103699) (EXTERN 103688 . 103694) (punctuation 103661 . 103662) (close-paren 103660 . 103661) (punctuation 103659 . 103660) (symbol 103647 . 103658) (STRUCT 103640 . 103646) (open-paren 103639 . 103640) (symbol 103616 . 103638) (VOID 103611 . 103615) (EXTERN 103604 . 103610) (punctuation 103602 . 103603) (close-paren 103601 . 103602) (VOID 103597 . 103601) (open-paren 103596 . 103597) (symbol 103583 . 103595) (VOID 103578 . 103582) (EXTERN 103571 . 103577) (punctuation 103569 . 103570) (close-paren 103568 . 103569) (BOOL 103564 . 103568) (punctuation 103562 . 103563) (symbol 103551 . 103562) (punctuation 103549 . 103550) (symbol 103538 . 103549) (punctuation 103536 . 103537) (symbol 103525 . 103536) (open-paren 103524 . 103525) (symbol 103511 . 103523) (VOID 103506 . 103510) (EXTERN 103499 . 103505) (punctuation 103497 . 103498) (close-paren 103496 . 103497) (punctuation 103495 . 103496) (symbol 103486 . 103494) (UNION 103480 . 103485) (open-paren 103479 . 103480) (symbol 103458 . 103478) (symbol 103446 . 103457) (EXTERN 103439 . 103445) (punctuation 103437 . 103438) (close-paren 103436 . 103437) (symbol 103425 . 103436) (punctuation 103415 . 103416) (symbol 103404 . 103415) (punctuation 103402 . 103403) (symbol 103391 . 103402) (open-paren 103390 . 103391) (symbol 103370 . 103389) (VOID 103365 . 103369) (EXTERN 103348 . 103354) (punctuation 103346 . 103347) (close-paren 103345 . 103346) (symbol 103334 . 103345) (punctuation 103332 . 103333) (symbol 103321 . 103332) (open-paren 103320 . 103321) (symbol 103302 . 103319) (VOID 103297 . 103301) (EXTERN 103280 . 103286) (punctuation 103278 . 103279) (close-paren 103277 . 103278) (punctuation 103276 . 103277) (symbol 103264 . 103275) (STRUCT 103257 . 103263) (open-paren 103256 . 103257) (symbol 103238 . 103255) (punctuation 103237 . 103238) (symbol 103225 . 103236) (STRUCT 103218 . 103224) (EXTERN 103211 . 103217) (punctuation 103208 . 103209) (close-paren 103207 . 103208) (symbol 103198 . 103207) (punctuation 103196 . 103197) (symbol 103185 . 103196) (open-paren 103184 . 103185) (symbol 103167 . 103183) (symbol 103157 . 103166) (EXTERN 103150 . 103156) (punctuation 103148 . 103149) (close-paren 103147 . 103148) (symbol 103139 . 103147) (punctuation 103137 . 103138) (symbol 103129 . 103137) (punctuation 103127 . 103128) (symbol 103116 . 103127) (open-paren 103115 . 103116) (symbol 103100 . 103114) (symbol 103091 . 103099) (EXTERN 103084 . 103090) (punctuation 102661 . 102662) (close-paren 102660 . 102661) (symbol 102651 . 102660) (open-paren 102650 . 102651) (symbol 102634 . 102649) (symbol 102622 . 102633) (EXTERN 102615 . 102621) (punctuation 102613 . 102614) (close-paren 102612 . 102613) (symbol 102604 . 102612) (open-paren 102603 . 102604) (symbol 102588 . 102602) (symbol 102576 . 102587) (EXTERN 102569 . 102575) (punctuation 102207 . 102208) (close-paren 102206 . 102207) (symbol 102196 . 102206) (symbol 102179 . 102195) (ENUM 102174 . 102178) (punctuation 102139 . 102140) (symbol 102135 . 102139) (symbol 102123 . 102134) (punctuation 102121 . 102122) (symbol 102117 . 102121) (symbol 102105 . 102116) (open-paren 102104 . 102105) (symbol 102091 . 102103) (symbol 102079 . 102090) (EXTERN 102072 . 102078) (punctuation 102070 . 102071) (close-paren 102069 . 102070) (symbol 102049 . 102068) (punctuation 102045 . 102046) (symbol 102026 . 102045) (punctuation 102022 . 102023) (symbol 102012 . 102022) (punctuation 102008 . 102009) (symbol 101998 . 102008) (punctuation 101994 . 101995) (symbol 101980 . 101994) (punctuation 101976 . 101977) (symbol 101965 . 101976) (open-paren 101961 . 101962) (symbol 101944 . 101960) (ENUM 101939 . 101943) (punctuation 101937 . 101938) (close-paren 101936 . 101937) (symbol 101925 . 101936) (open-paren 101924 . 101925) (symbol 101906 . 101923) (symbol 101894 . 101905) (EXTERN 101887 . 101893) (punctuation 101885 . 101886) (close-paren 101884 . 101885) (symbol 101873 . 101884) (open-paren 101872 . 101873) (symbol 101854 . 101871) (symbol 101842 . 101853) (EXTERN 101835 . 101841) (close-paren 101806 . 101807) (punctuation 101784 . 101785) (punctuation 101783 . 101784) (semantic-list 101776 . 101783) (symbol 101760 . 101775) (open-paren 101756 . 101757) (close-paren 101754 . 101755) (symbol 101751 . 101754) (symbol 101739 . 101750) (punctuation 101737 . 101738) (symbol 101734 . 101737) (symbol 101724 . 101733) (punctuation 101722 . 101723) (symbol 101717 . 101722) (symbol 101705 . 101716) (open-paren 101704 . 101705) (symbol 101676 . 101703) (VOID 101671 . 101675) (symbol 101664 . 101670) (close-paren 101661 . 101662) (punctuation 101639 . 101640) (punctuation 101638 . 101639) (semantic-list 101631 . 101638) (symbol 101619 . 101630) (punctuation 101615 . 101616) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101570 . 101571)))) 101561 . 101615) (open-paren 101557 . 101558) (close-paren 101555 . 101556) (symbol 101552 . 101555) (symbol 101540 . 101551) (punctuation 101538 . 101539) (symbol 101535 . 101538) (symbol 101525 . 101534) (punctuation 101523 . 101524) (symbol 101518 . 101523) (symbol 101506 . 101517) (open-paren 101505 . 101506) (symbol 101481 . 101504) (VOID 101476 . 101480) (symbol 101469 . 101475) (close-paren 101466 . 101467) (punctuation 101446 . 101447) (punctuation 101445 . 101446) (semantic-list 101438 . 101445) (symbol 101426 . 101437) (punctuation 101422 . 101423) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101359 . 101360)))) 101350 . 101422) (open-paren 101346 . 101347) (close-paren 101344 . 101345) (symbol 101341 . 101344) (symbol 101329 . 101340) (punctuation 101327 . 101328) (symbol 101324 . 101327) (symbol 101314 . 101323) (punctuation 101312 . 101313) (symbol 101307 . 101312) (symbol 101295 . 101306) (open-paren 101294 . 101295) (symbol 101272 . 101293) (VOID 101267 . 101271) (symbol 101260 . 101266) (close-paren 101203 . 101204) (punctuation 101187 . 101188) (punctuation 101186 . 101187) (semantic-list 101179 . 101186) (symbol 101167 . 101178) (open-paren 101163 . 101164) (close-paren 101161 . 101162) (symbol 101158 . 101161) (symbol 101146 . 101157) (punctuation 101144 . 101145) (symbol 101139 . 101144) (symbol 101127 . 101138) (open-paren 101126 . 101127) (symbol 101103 . 101125) (VOID 101098 . 101102) (symbol 101091 . 101097) (close-paren 101089 . 101090) (punctuation 101074 . 101075) (punctuation 101073 . 101074) (semantic-list 101066 . 101073) (symbol 101054 . 101065) (open-paren 101050 . 101051) (close-paren 101048 . 101049) (symbol 101045 . 101048) (symbol 101033 . 101044) (punctuation 101031 . 101032) (symbol 101026 . 101031) (symbol 101014 . 101025) (open-paren 101013 . 101014) (symbol 100991 . 101012) (VOID 100986 . 100990) (symbol 100979 . 100985) (close-paren 100870 . 100871) (punctuation 100854 . 100855) (punctuation 100853 . 100854) (semantic-list 100850 . 100853) (symbol 100842 . 100849) (open-paren 100838 . 100839) (close-paren 100836 . 100837) (symbol 100835 . 100836) (symbol 100826 . 100834) (punctuation 100824 . 100825) (symbol 100823 . 100824) (symbol 100811 . 100822) (open-paren 100810 . 100811) (symbol 100789 . 100809) (VOID 100784 . 100788) (symbol 100777 . 100783) (close-paren 100735 . 100736) (punctuation 100723 . 100724) (punctuation 100722 . 100723) (semantic-list 100719 . 100722) (symbol 100711 . 100718) (RETURN 100704 . 100710) (open-paren 100700 . 100701) (close-paren 100698 . 100699) (symbol 100697 . 100698) (symbol 100685 . 100696) (open-paren 100684 . 100685) (symbol 100667 . 100683) (symbol 100658 . 100666) (symbol 100651 . 100657) (close-paren 100614 . 100615) (punctuation 100598 . 100599) (punctuation 100597 . 100598) (semantic-list 100588 . 100597) (symbol 100579 . 100587) (open-paren 100575 . 100576) (close-paren 100573 . 100574) (symbol 100568 . 100573) (symbol 100556 . 100567) (punctuation 100554 . 100555) (symbol 100547 . 100554) (symbol 100535 . 100546) (open-paren 100534 . 100535) (symbol 100516 . 100533) (VOID 100511 . 100515) (symbol 100504 . 100510) (close-paren 100464 . 100465) (punctuation 100456 . 100457) (punctuation 100455 . 100456) (symbol 100452 . 100455) (RETURN 100445 . 100451) (punctuation 100441 . 100442) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 100394 . 100397)))) 100385 . 100441) (open-paren 100381 . 100382) (close-paren 100379 . 100380) (symbol 100376 . 100379) (punctuation 100375 . 100376) (symbol 100351 . 100374) (STRUCT 100344 . 100350) (open-paren 100343 . 100344) (symbol 100333 . 100342) (INT 100329 . 100332) (symbol 100322 . 100328) (close-paren 100252 . 100253) (punctuation 100238 . 100239) (punctuation 100237 . 100238) (semantic-list 100232 . 100237) (symbol 100224 . 100231) (open-paren 100220 . 100221) (close-paren 100218 . 100219) (symbol 100214 . 100218) (punctuation 100213 . 100214) (symbol 100201 . 100212) (STRUCT 100194 . 100200) (punctuation 100192 . 100193) (symbol 100189 . 100192) (symbol 100177 . 100188) (open-paren 100176 . 100177) (symbol 100160 . 100175) (VOID 100155 . 100159) (symbol 100148 . 100154) (close-paren 100145 . 100146) (punctuation 100129 . 100130) (punctuation 100128 . 100129) (semantic-list 100123 . 100128) (symbol 100115 . 100122) (open-paren 100111 . 100112) (close-paren 100109 . 100110) (symbol 100104 . 100109) (symbol 100092 . 100103) (punctuation 100090 . 100091) (symbol 100087 . 100090) (symbol 100075 . 100086) (open-paren 100074 . 100075) (symbol 100057 . 100073) (VOID 100052 . 100056) (symbol 100045 . 100051) (close-paren 100042 . 100043) (punctuation 100020 . 100021) (punctuation 100019 . 100020) (semantic-list 100014 . 100019) (symbol 100006 . 100013) (open-paren 100002 . 100003) (close-paren 100000 . 100001) (symbol 99992 . 100000) (symbol 99980 . 99991) (punctuation 99978 . 99979) (symbol 99975 . 99978) (symbol 99963 . 99974) (open-paren 99962 . 99963) (symbol 99942 . 99961) (VOID 99937 . 99941) (symbol 99930 . 99936) (close-paren 99837 . 99838) (number 99828 . 99829) (punctuation 99826 . 99827) (punctuation 99820 . 99821) (number 99818 . 99819) (punctuation 99802 . 99803) (punctuation 99801 . 99802) (open-paren 99787 . 99788) (close-paren 99785 . 99786) (symbol 99782 . 99785) (symbol 99770 . 99781) (punctuation 99768 . 99769) (symbol 99765 . 99768) (symbol 99755 . 99764) (punctuation 99753 . 99754) (symbol 99752 . 99753) (punctuation 99751 . 99752) (symbol 99735 . 99750) (STRUCT 99728 . 99734) (open-paren 99727 . 99728) (symbol 99707 . 99726) (VOID 99702 . 99706) (symbol 99695 . 99701) (close-paren 99692 . 99693) (punctuation 99679 . 99680) (number 99677 . 99678) (punctuation 99661 . 99662) (punctuation 99660 . 99661) (open-paren 99646 . 99647) (close-paren 99644 . 99645) (symbol 99641 . 99644) (symbol 99629 . 99640) (punctuation 99627 . 99628) (symbol 99624 . 99627) (symbol 99614 . 99623) (punctuation 99612 . 99613) (symbol 99611 . 99612) (punctuation 99610 . 99611) (symbol 99594 . 99609) (STRUCT 99587 . 99593) (open-paren 99586 . 99587) (symbol 99568 . 99585) (VOID 99563 . 99567) (symbol 99556 . 99562) (close-paren 99512 . 99513) (punctuation 99504 . 99505) (SIZEOF 99497 . 99503) (punctuation 99473 . 99474) (punctuation 99463 . 99464) (punctuation 99462 . 99463) (semantic-list 99459 . 99462) (punctuation 99439 . 99440) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 99382 . 99383)))) 99373 . 99439) (open-paren 99369 . 99370) (close-paren 99367 . 99368) (symbol 99362 . 99367) (symbol 99352 . 99361) (punctuation 99350 . 99351) (symbol 99346 . 99350) (punctuation 99345 . 99346) (symbol 99333 . 99344) (punctuation 99331 . 99332) (symbol 99325 . 99331) (symbol 99315 . 99324) (punctuation 99313 . 99314) (symbol 99312 . 99313) (symbol 99300 . 99311) (open-paren 99299 . 99300) (symbol 99293 . 99298) (VOID 99288 . 99292) (symbol 99281 . 99287) (punctuation 99122 . 99123) (close-paren 99121 . 99122) (punctuation 99120 . 99121) (symbol 99108 . 99119) (open-paren 99107 . 99108) (symbol 99097 . 99106) (VOID 99092 . 99096) (punctuation 98632 . 98633) (close-paren 98631 . 98632) (VOID 98627 . 98631) (open-paren 98626 . 98627) (symbol 98608 . 98625) (VOID 98603 . 98607) (EXTERN 98596 . 98602) (punctuation 98555 . 98556) (close-paren 98554 . 98555) (VOID 98550 . 98554) (open-paren 98549 . 98550) (symbol 98525 . 98548) (VOID 98520 . 98524) (EXTERN 98513 . 98519) (punctuation 97560 . 97561) (close-paren 97559 . 97560) (open-paren 96753 . 96754) (symbol 96745 . 96752) (STRUCT 96738 . 96744) (punctuation 96735 . 96736) (close-paren 96734 . 96735) (symbol 96722 . 96733) (punctuation 96720 . 96721) (symbol 96706 . 96720) (punctuation 96704 . 96705) (symbol 96697 . 96704) (open-paren 96695 . 96696) (symbol 96683 . 96694) (ENUM 96678 . 96682) (close-paren 95550 . 95551) (punctuation 95539 . 95540) (symbol 95527 . 95538) (RETURN 95520 . 95526) (open-paren 95516 . 95517) (close-paren 95514 . 95515) (VOID 95510 . 95514) (open-paren 95509 . 95510) (symbol 95495 . 95508) (symbol 95485 . 95494) (symbol 95478 . 95484) (punctuation 95369 . 95370) (close-paren 95368 . 95369) (punctuation 95235 . 95236) (symbol 95230 . 95234) (symbol "specbind_tag" 95207 . 95229) (ENUM "enum" 95207 . 95229) (punctuation 95235 . 95236) (symbol 95230 . 95234) (symbol "specbind_tag" 95207 . 95229) (ENUM "enum" 95207 . 95229) (punctuation 95060 . 95061) (symbol 95055 . 95059) (symbol "specbind_tag" 95032 . 95054) (ENUM "enum" 95032 . 95054) (punctuation 95060 . 95061) (symbol 95055 . 95059) (symbol "specbind_tag" 95032 . 95054) (ENUM "enum" 95032 . 95054) (punctuation 94955 . 94956) (symbol 94950 . 94954) (symbol "specbind_tag" 94927 . 94949) (ENUM "enum" 94927 . 94949) (punctuation 94955 . 94956) (symbol 94950 . 94954) (symbol "specbind_tag" 94927 . 94949) (ENUM "enum" 94927 . 94949) (punctuation 94837 . 94838) (symbol 94832 . 94836) (symbol "specbind_tag" 94809 . 94831) (ENUM "enum" 94809 . 94831) (punctuation 94837 . 94838) (symbol 94832 . 94836) (symbol "specbind_tag" 94809 . 94831) (ENUM "enum" 94809 . 94831) (punctuation 94714 . 94715) (symbol 94709 . 94713) (symbol "specbind_tag" 94686 . 94708) (ENUM "enum" 94686 . 94708) (punctuation 94714 . 94715) (symbol 94709 . 94713) (symbol "specbind_tag" 94686 . 94708) (ENUM "enum" 94686 . 94708) (punctuation 94584 . 94585) (symbol 94579 . 94583) (symbol "specbind_tag" 94556 . 94578) (ENUM "enum" 94556 . 94578) (punctuation 94584 . 94585) (symbol 94579 . 94583) (symbol "specbind_tag" 94556 . 94578) (ENUM "enum" 94556 . 94578) (punctuation 94525 . 94526) (symbol 94520 . 94524) (symbol "specbind_tag" 94497 . 94519) (ENUM "enum" 94497 . 94519) (open-paren 94491 . 94492) (symbol 94477 . 94488) (UNION 94471 . 94476) (punctuation 94468 . 94469) (close-paren 94467 . 94468) (symbol 94401 . 94420) (punctuation 94361 . 94362) (symbol 94344 . 94361) (punctuation 94225 . 94226) (symbol 94214 . 94225) (punctuation 94173 . 94174) (symbol 94156 . 94173) (punctuation 94121 . 94122) (symbol 94102 . 94121) (punctuation 94072 . 94073) (symbol 94054 . 94072) (punctuation 94021 . 94022) (symbol 94003 . 94021) (punctuation 93948 . 93949) (symbol 93934 . 93948) (open-paren 93930 . 93931) (symbol 93917 . 93929) (ENUM 93912 . 93916) (punctuation 90448 . 90449) (close-paren 90447 . 90448) (INT 90444 . 90447) (punctuation 90442 . 90443) (punctuation 90441 . 90442) (CHAR 90436 . 90440) (CONST 90430 . 90435) (punctuation 90428 . 90429) (punctuation 90427 . 90428) (symbol 90408 . 90426) (STRUCT 90401 . 90407) (open-paren 90400 . 90401) (symbol 90386 . 90399) (VOID 90381 . 90385) (EXTERN 90374 . 90380) (punctuation 90372 . 90373) (close-paren 90371 . 90372) (punctuation 90370 . 90371) (symbol 90360 . 90369) (punctuation 90358 . 90359) (punctuation 90357 . 90358) (CHAR 90352 . 90356) (CONST 90346 . 90351) (punctuation 90344 . 90345) (punctuation 90343 . 90344) (symbol 90331 . 90342) (STRUCT 90324 . 90330) (open-paren 90323 . 90324) (symbol 90312 . 90322) (VOID 90307 . 90311) (EXTERN 90300 . 90306) (punctuation 90298 . 90299) (close-paren 90297 . 90298) (punctuation 90296 . 90297) (BOOL 90291 . 90295) (punctuation 90289 . 90290) (punctuation 90288 . 90289) (CHAR 90283 . 90287) (CONST 90277 . 90282) (punctuation 90275 . 90276) (punctuation 90274 . 90275) (symbol 90261 . 90273) (STRUCT 90254 . 90260) (open-paren 90253 . 90254) (symbol 90241 . 90252) (VOID 90236 . 90240) (EXTERN 90229 . 90235) (punctuation 90227 . 90228) (close-paren 90226 . 90227) (punctuation 90225 . 90226) (symbol 90213 . 90224) (punctuation 90211 . 90212) (punctuation 90210 . 90211) (CHAR 90205 . 90209) (CONST 90199 . 90204) (punctuation 90197 . 90198) (punctuation 90196 . 90197) (symbol 90184 . 90195) (STRUCT 90177 . 90183) (open-paren 90176 . 90177) (symbol 90158 . 90175) (VOID 90153 . 90157) (EXTERN 90146 . 90152) (punctuation 90144 . 90145) (close-paren 90143 . 90144) (punctuation 90142 . 90143) (symbol 90130 . 90141) (punctuation 90128 . 90129) (punctuation 90127 . 90128) (CHAR 90122 . 90126) (CONST 90116 . 90121) (punctuation 90114 . 90115) (punctuation 90113 . 90114) (symbol 90101 . 90112) (STRUCT 90094 . 90100) (open-paren 90093 . 90094) (symbol 90081 . 90092) (VOID 90076 . 90080) (EXTERN 90069 . 90075) (punctuation 89565 . 89566) (close-paren 89564 . 89565) (number 89560 . 89561) (punctuation 89559 . 89560) (punctuation 89557 . 89558) (symbol 89547 . 89556) (punctuation 89541 . 89542) (number 89540 . 89541) (punctuation 89539 . 89540) (punctuation 89537 . 89538) (symbol 89532 . 89536) (open-paren 89526 . 89527) (symbol 89516 . 89523) (ENUM 89511 . 89515) (punctuation 89508 . 89509) (close-paren 89507 . 89508) (punctuation 89506 . 89507) (symbol 89496 . 89505) (STRUCT 89489 . 89495) (open-paren 89488 . 89489) (symbol 89480 . 89487) (VOID 89475 . 89479) (EXTERN 89468 . 89474) (close-paren 89372 . 89373) (RETURN 89348 . 89354) (open-paren 89344 . 89345) (close-paren 89342 . 89343) (symbol 89339 . 89342) (symbol 89327 . 89338) (open-paren 89326 . 89327) (symbol 89316 . 89325) (BOOL 89311 . 89315) (symbol 89304 . 89310) (close-paren 87005 . 87006) (open-paren 86931 . 86932) (close-paren 86929 . 86930) (symbol 86928 . 86929) (symbol 86916 . 86927) (open-paren 86915 . 86916) (symbol 86898 . 86914) (VOID 86893 . 86897) (symbol 86886 . 86892) (close-paren 86883 . 86884) (open-paren 86809 . 86810) (close-paren 86807 . 86808) (symbol 86806 . 86807) (symbol 86794 . 86805) (open-paren 86793 . 86794) (symbol 86776 . 86792) (VOID 86771 . 86775) (symbol 86764 . 86770) (close-paren 86376 . 86377) (semantic-list 86357 . 86360) (open-paren 86333 . 86334) (close-paren 86331 . 86332) (symbol 86330 . 86331) (symbol 86318 . 86329) (open-paren 86317 . 86318) (symbol 86295 . 86316) (VOID 86290 . 86294) (symbol 86283 . 86289) (close-paren 86280 . 86281) (RETURN 86254 . 86260) (open-paren 86250 . 86251) (close-paren 86248 . 86249) (symbol 86247 . 86248) (symbol 86235 . 86246) (open-paren 86234 . 86235) (symbol 86224 . 86233) (DOUBLE 86217 . 86223) (symbol 86210 . 86216) (close-paren 85315 . 85316) (semantic-list 85294 . 85297) (open-paren 85270 . 85271) (close-paren 85268 . 85269) (symbol 85267 . 85268) (symbol 85255 . 85266) (open-paren 85254 . 85255) (symbol 85241 . 85253) (VOID 85236 . 85240) (symbol 85229 . 85235) (close-paren 85111 . 85112) (semantic-list 85092 . 85095) (open-paren 85068 . 85069) (close-paren 85066 . 85067) (symbol 85065 . 85066) (symbol 85053 . 85064) (open-paren 85052 . 85053) (symbol 85039 . 85051) (VOID 85034 . 85038) (symbol 85027 . 85033) (close-paren 85025 . 85026) (semantic-list 85006 . 85009) (open-paren 84982 . 84983) (close-paren 84980 . 84981) (symbol 84979 . 84980) (symbol 84967 . 84978) (open-paren 84966 . 84967) (symbol 84953 . 84965) (VOID 84948 . 84952) (symbol 84941 . 84947) (close-paren 84939 . 84940) (semantic-list 84919 . 84922) (open-paren 84896 . 84897) (close-paren 84894 . 84895) (symbol 84885 . 84894) (symbol 84873 . 84884) (punctuation 84871 . 84872) (symbol 84870 . 84871) (symbol 84858 . 84869) (open-paren 84857 . 84858) (symbol 84845 . 84856) (VOID 84840 . 84844) (symbol 84833 . 84839) (close-paren 84831 . 84832) (RETURN 84776 . 84782) (semantic-list 84758 . 84771) (IF 84755 . 84757) (RETURN 84735 . 84741) (semantic-list 84717 . 84730) (IF 84714 . 84716) (open-paren 84710 . 84711) (close-paren 84708 . 84709) (symbol 84707 . 84708) (symbol 84695 . 84706) (open-paren 84694 . 84695) (symbol 84671 . 84693) (symbol 84661 . 84670) (symbol 84654 . 84660) (close-paren 84583 . 84584) (semantic-list 84558 . 84561) (open-paren 84528 . 84529) (close-paren 84526 . 84527) (symbol 84525 . 84526) (symbol 84513 . 84524) (open-paren 84512 . 84513) (symbol 84494 . 84511) (VOID 84489 . 84493) (symbol 84482 . 84488) (close-paren 84480 . 84481) (semantic-list 84461 . 84464) (open-paren 84437 . 84438) (close-paren 84435 . 84436) (symbol 84434 . 84435) (symbol 84422 . 84433) (open-paren 84421 . 84422) (symbol 84408 . 84420) (VOID 84403 . 84407) (symbol 84396 . 84402) (close-paren 84394 . 84395) (semantic-list 84377 . 84380) (open-paren 84355 . 84356) (close-paren 84353 . 84354) (symbol 84352 . 84353) (symbol 84340 . 84351) (open-paren 84339 . 84340) (symbol 84328 . 84338) (VOID 84323 . 84327) (symbol 84316 . 84322) (close-paren 84314 . 84315) (semantic-list 84308 . 84311) (semantic-list 84281 . 84291) (open-paren 84257 . 84258) (close-paren 84255 . 84256) (symbol 84254 . 84255) (symbol 84242 . 84253) (open-paren 84241 . 84242) (symbol 84224 . 84240) (VOID 84219 . 84223) (symbol 84212 . 84218) (close-paren 84210 . 84211) (semantic-list 84191 . 84194) (open-paren 84167 . 84168) (close-paren 84165 . 84166) (symbol 84164 . 84165) (symbol 84152 . 84163) (open-paren 84151 . 84152) (symbol 84138 . 84150) (VOID 84133 . 84137) (symbol 84126 . 84132) (close-paren 84123 . 84124) (open-paren 84094 . 84095) (close-paren 84092 . 84093) (symbol 84091 . 84092) (symbol 84079 . 84090) (open-paren 84078 . 84079) (close-paren 84076 . 84077) (symbol 84064 . 84076) (open-paren 84063 . 84064) (VOID 84058 . 84062) (symbol 84051 . 84057) (close-paren 84048 . 84049) (open-paren 84020 . 84021) (close-paren 84018 . 84019) (symbol 84017 . 84018) (symbol 84005 . 84016) (open-paren 84004 . 84005) (close-paren 84002 . 84003) (symbol 83990 . 84002) (open-paren 83989 . 83990) (VOID 83984 . 83988) (symbol 83977 . 83983) (close-paren 83974 . 83975) (open-paren 83939 . 83940) (close-paren 83937 . 83938) (symbol 83936 . 83937) (symbol 83924 . 83935) (punctuation 83922 . 83923) (symbol 83921 . 83922) (symbol 83909 . 83920) (open-paren 83908 . 83909) (close-paren 83906 . 83907) (symbol 83891 . 83906) (open-paren 83890 . 83891) (VOID 83885 . 83889) (symbol 83878 . 83884) (close-paren 83875 . 83876) (semantic-list 83858 . 83861) (punctuation 83851 . 83852) (punctuation 83850 . 83851) (semantic-list 83846 . 83849) (open-paren 83824 . 83825) (close-paren 83822 . 83823) (symbol 83821 . 83822) (symbol 83809 . 83820) (open-paren 83808 . 83809) (symbol 83797 . 83807) (VOID 83792 . 83796) (symbol 83785 . 83791) (close-paren 83781 . 83782) (punctuation 83760 . 83761) (punctuation 83759 . 83760) (semantic-list 83755 . 83758) (symbol 83742 . 83754) (punctuation 83740 . 83741) (punctuation 83739 . 83740) (semantic-list 83735 . 83738) (symbol 83727 . 83734) (punctuation 83725 . 83726) (punctuation 83724 . 83725) (semantic-list 83720 . 83723) (symbol 83712 . 83719) (RETURN 83705 . 83711) (open-paren 83701 . 83702) (close-paren 83699 . 83700) (symbol 83698 . 83699) (symbol 83686 . 83697) (open-paren 83685 . 83686) (symbol 83678 . 83684) (BOOL 83673 . 83677) (symbol 83666 . 83672) (close-paren 83643 . 83644) (punctuation 83617 . 83618) (semantic-list 83613 . 83616) (symbol 83607 . 83612) (RETURN 83600 . 83606) (open-paren 83596 . 83597) (close-paren 83594 . 83595) (symbol 83593 . 83594) (symbol 83581 . 83592) (open-paren 83580 . 83581) (symbol 83573 . 83579) (BOOL 83568 . 83572) (symbol 83561 . 83567) (close-paren 83521 . 83522) (RETURN 83483 . 83489) (open-paren 83479 . 83480) (close-paren 83477 . 83478) (symbol 83476 . 83477) (symbol 83464 . 83475) (open-paren 83463 . 83464) (symbol 83456 . 83462) (BOOL 83451 . 83455) (symbol 83444 . 83450) (close-paren 83441 . 83442) (RETURN 83397 . 83403) (open-paren 83393 . 83394) (close-paren 83391 . 83392) (symbol 83390 . 83391) (symbol 83378 . 83389) (open-paren 83377 . 83378) (symbol 83363 . 83376) (BOOL 83358 . 83362) (symbol 83351 . 83357) (close-paren 83348 . 83349) (RETURN 83301 . 83307) (open-paren 83297 . 83298) (close-paren 83295 . 83296) (symbol 83294 . 83295) (symbol 83282 . 83293) (open-paren 83281 . 83282) (symbol 83264 . 83280) (BOOL 83259 . 83263) (symbol 83252 . 83258) (close-paren 83249 . 83250) (RETURN 83206 . 83212) (open-paren 83202 . 83203) (close-paren 83200 . 83201) (symbol 83199 . 83200) (symbol 83187 . 83198) (open-paren 83186 . 83187) (symbol 83173 . 83185) (BOOL 83168 . 83172) (symbol 83161 . 83167) (close-paren 83158 . 83159) (RETURN 83119 . 83125) (open-paren 83115 . 83116) (close-paren 83113 . 83114) (symbol 83112 . 83113) (symbol 83100 . 83111) (open-paren 83099 . 83100) (symbol 83091 . 83098) (BOOL 83086 . 83090) (symbol 83079 . 83085) (close-paren 83076 . 83077) (RETURN 83035 . 83041) (open-paren 83031 . 83032) (close-paren 83029 . 83030) (symbol 83028 . 83029) (symbol 83016 . 83027) (open-paren 83015 . 83016) (symbol 83005 . 83014) (BOOL 83000 . 83004) (symbol 82993 . 82999) (close-paren 82990 . 82991) (RETURN 82953 . 82959) (open-paren 82949 . 82950) (close-paren 82947 . 82948) (symbol 82946 . 82947) (symbol 82934 . 82945) (open-paren 82933 . 82934) (symbol 82927 . 82932) (BOOL 82922 . 82926) (symbol 82915 . 82921) (close-paren 82912 . 82913) (RETURN 82871 . 82877) (open-paren 82867 . 82868) (close-paren 82865 . 82866) (symbol 82864 . 82865) (symbol 82852 . 82863) (open-paren 82851 . 82852) (symbol 82841 . 82850) (BOOL 82836 . 82840) (symbol 82829 . 82835) (close-paren 82826 . 82827) (RETURN 82787 . 82793) (open-paren 82783 . 82784) (close-paren 82781 . 82782) (symbol 82780 . 82781) (symbol 82768 . 82779) (open-paren 82767 . 82768) (symbol 82759 . 82766) (BOOL 82754 . 82758) (symbol 82747 . 82753) (close-paren 82744 . 82745) (RETURN 82704 . 82710) (open-paren 82700 . 82701) (close-paren 82698 . 82699) (symbol 82697 . 82698) (symbol 82685 . 82696) (open-paren 82684 . 82685) (symbol 82675 . 82683) (BOOL 82670 . 82674) (symbol 82663 . 82669) (close-paren 82660 . 82661) (RETURN 82607 . 82613) (open-paren 82603 . 82604) (close-paren 82601 . 82602) (symbol 82600 . 82601) (symbol 82588 . 82599) (open-paren 82587 . 82588) (symbol 82565 . 82586) (BOOL 82560 . 82564) (symbol 82553 . 82559) (close-paren 82503 . 82504) (semantic-list 82309 . 82502) (ELSE 82300 . 82304) (RETURN 82284 . 82290) (semantic-list 82260 . 82279) (IF 82257 . 82259) (open-paren 82253 . 82254) (close-paren 82251 . 82252) (symbol 82247 . 82251) (INT 82243 . 82246) (punctuation 82241 . 82242) (symbol 82240 . 82241) (symbol 82228 . 82239) (open-paren 82227 . 82228) (symbol 82213 . 82226) (BOOL 82208 . 82212) (symbol 82201 . 82207) (close-paren 82143 . 82144) (punctuation 82141 . 82142) (semantic-list 82030 . 82141) (RETURN 82023 . 82029) (open-paren 82019 . 82020) (close-paren 82017 . 82018) (symbol 82013 . 82017) (INT 82009 . 82012) (punctuation 82007 . 82008) (symbol 82006 . 82007) (punctuation 82005 . 82006) (symbol 81987 . 82004) (STRUCT 81980 . 81986) (open-paren 81979 . 81980) (symbol 81960 . 81978) (BOOL 81955 . 81959) (symbol 81948 . 81954) (close-paren 81945 . 81946) (punctuation 81922 . 81923) (punctuation 81921 . 81922) (semantic-list 81917 . 81920) (symbol 81908 . 81916) (RETURN 81901 . 81907) (open-paren 81897 . 81898) (close-paren 81895 . 81896) (symbol 81894 . 81895) (punctuation 81893 . 81894) (symbol 81884 . 81892) (UNION 81878 . 81883) (open-paren 81877 . 81878) (symbol 81862 . 81876) (BOOL 81857 . 81861) (symbol 81850 . 81856) (close-paren 81847 . 81848) (punctuation 81818 . 81819) (semantic-list 81814 . 81817) (symbol 81808 . 81813) (RETURN 81801 . 81807) (open-paren 81797 . 81798) (close-paren 81795 . 81796) (symbol 81794 . 81795) (symbol 81782 . 81793) (open-paren 81781 . 81782) (symbol 81771 . 81780) (BOOL 81766 . 81770) (symbol 81759 . 81765) (close-paren 81627 . 81628) (punctuation 81604 . 81605) (punctuation 81603 . 81604) (semantic-list 81599 . 81602) (symbol 81589 . 81598) (punctuation 81587 . 81588) (punctuation 81586 . 81587) (semantic-list 81582 . 81585) (symbol 81576 . 81581) (RETURN 81569 . 81575) (open-paren 81565 . 81566) (close-paren 81563 . 81564) (symbol 81562 . 81563) (symbol 81550 . 81561) (open-paren 81549 . 81550) (symbol 81538 . 81548) (BOOL 81533 . 81537) (symbol 81526 . 81532) (close-paren 81523 . 81524) (punctuation 81499 . 81500) (punctuation 81498 . 81499) (semantic-list 81494 . 81497) (symbol 81484 . 81493) (punctuation 81482 . 81483) (punctuation 81481 . 81482) (semantic-list 81477 . 81480) (symbol 81471 . 81476) (RETURN 81464 . 81470) (open-paren 81460 . 81461) (close-paren 81458 . 81459) (symbol 81457 . 81458) (symbol 81445 . 81456) (open-paren 81444 . 81445) (symbol 81432 . 81443) (BOOL 81427 . 81431) (symbol 81420 . 81426) (close-paren 81418 . 81419) (punctuation 81397 . 81398) (punctuation 81396 . 81397) (semantic-list 81392 . 81395) (symbol 81382 . 81391) (punctuation 81380 . 81381) (punctuation 81379 . 81380) (semantic-list 81375 . 81378) (symbol 81369 . 81374) (RETURN 81362 . 81368) (open-paren 81358 . 81359) (close-paren 81356 . 81357) (symbol 81355 . 81356) (symbol 81343 . 81354) (open-paren 81342 . 81343) (symbol 81333 . 81341) (BOOL 81328 . 81332) (symbol 81321 . 81327) (close-paren 81319 . 81320) (punctuation 81317 . 81318) (semantic-list 81286 . 81317) (punctuation 81284 . 81285) (punctuation 81282 . 81283) (punctuation 81281 . 81282) (semantic-list 81277 . 81280) (symbol 81265 . 81276) (RETURN 81258 . 81264) (open-paren 81254 . 81255) (close-paren 81252 . 81253) (symbol 81251 . 81252) (symbol 81239 . 81250) (open-paren 81238 . 81239) (symbol 81230 . 81237) (BOOL 81225 . 81229) (symbol 81218 . 81224) (close-paren 81216 . 81217) (punctuation 81201 . 81202) (punctuation 81200 . 81201) (semantic-list 81196 . 81199) (symbol 81190 . 81195) (RETURN 81183 . 81189) (open-paren 81179 . 81180) (close-paren 81177 . 81178) (symbol 81176 . 81177) (symbol 81164 . 81175) (open-paren 81163 . 81164) (symbol 81155 . 81162) (BOOL 81150 . 81154) (symbol 81143 . 81149) (close-paren 81140 . 81141) (punctuation 81138 . 81139) (semantic-list #("(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 0 1 (macros (("x" symbol "x" 81136 . 81137)))) 81120 . 81138) (RETURN 81113 . 81119) (open-paren 81109 . 81110) (close-paren 81107 . 81108) (symbol 81106 . 81107) (symbol 81094 . 81105) (open-paren 81093 . 81094) (close-paren 81091 . 81092) (symbol 81084 . 81091) (open-paren 81083 . 81084) (BOOL 81078 . 81082) (symbol 81071 . 81077) (close-paren 81069 . 81070) (punctuation 81067 . 81068) (semantic-list #("(XTYPE (x) == Lisp_Vectorlike)" 0 1 (macros (("x" symbol "x" 81065 . 81066)))) 81045 . 81067) (RETURN 81038 . 81044) (open-paren 81034 . 81035) (close-paren 81032 . 81033) (symbol 81031 . 81032) (symbol 81019 . 81030) (open-paren 81018 . 81019) (close-paren 81016 . 81017) (symbol 81005 . 81016) (open-paren 81004 . 81005) (BOOL 80999 . 81003) (symbol 80992 . 80998) (close-paren 80990 . 80991) (punctuation 80988 . 80989) (semantic-list #("((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 0 1 (macros (("x" symbol "x" 80986 . 80987)))) 80969 . 80988) (RETURN 80962 . 80968) (open-paren 80958 . 80959) (close-paren 80956 . 80957) (symbol 80955 . 80956) (symbol 80943 . 80954) (open-paren 80942 . 80943) (close-paren 80940 . 80941) (symbol 80932 . 80940) (open-paren 80931 . 80932) (BOOL 80926 . 80930) (symbol 80919 . 80925) (close-paren 80917 . 80918) (punctuation 80915 . 80916) (semantic-list #("(XTYPE (x) == Lisp_Symbol)" 0 1 (macros (("x" symbol "x" 80913 . 80914)))) 80897 . 80915) (RETURN 80890 . 80896) (open-paren 80886 . 80887) (close-paren 80884 . 80885) (symbol 80883 . 80884) (symbol 80871 . 80882) (open-paren 80870 . 80871) (close-paren 80868 . 80869) (symbol 80861 . 80868) (open-paren 80860 . 80861) (BOOL 80855 . 80859) (symbol 80848 . 80854) (close-paren 80846 . 80847) (punctuation 80844 . 80845) (semantic-list #("(XTYPE (x) == Lisp_Misc)" 0 1 (macros (("x" symbol "x" 80842 . 80843)))) 80828 . 80844) (RETURN 80821 . 80827) (open-paren 80817 . 80818) (close-paren 80815 . 80816) (symbol 80814 . 80815) (symbol 80802 . 80813) (open-paren 80801 . 80802) (close-paren 80799 . 80800) (symbol 80794 . 80799) (open-paren 80793 . 80794) (BOOL 80788 . 80792) (symbol 80781 . 80787) (close-paren 80779 . 80780) (punctuation 80777 . 80778) (semantic-list #("(XTYPE (x) == Lisp_Float)" 0 1 (macros (("x" symbol "x" 80775 . 80776)))) 80760 . 80777) (RETURN 80753 . 80759) (open-paren 80749 . 80750) (close-paren 80747 . 80748) (symbol 80746 . 80747) (symbol 80734 . 80745) (open-paren 80733 . 80734) (close-paren 80731 . 80732) (symbol 80725 . 80731) (open-paren 80724 . 80725) (BOOL 80719 . 80723) (symbol 80712 . 80718) (close-paren 80710 . 80711) (punctuation 80708 . 80709) (semantic-list #("(XTYPE (x) == Lisp_Cons)" 0 1 (macros (("x" symbol "x" 80706 . 80707)))) 80692 . 80708) (RETURN 80685 . 80691) (open-paren 80681 . 80682) (close-paren 80679 . 80680) (symbol 80678 . 80679) (symbol 80666 . 80677) (open-paren 80665 . 80666) (close-paren 80663 . 80664) (symbol 80658 . 80663) (open-paren 80657 . 80658) (BOOL 80652 . 80656) (symbol 80645 . 80651) (close-paren 80457 . 80458) (punctuation 80451 . 80452) (punctuation 80450 . 80451) (semantic-list 80446 . 80449) (symbol 80441 . 80445) (punctuation 80439 . 80440) (punctuation 80438 . 80439) (semantic-list 80434 . 80437) (symbol 80429 . 80433) (punctuation 80427 . 80428) (punctuation 80426 . 80427) (symbol 80423 . 80425) (punctuation 80421 . 80422) (punctuation 80420 . 80421) (semantic-list 80416 . 80419) (symbol 80407 . 80415) (RETURN 80400 . 80406) (open-paren 80396 . 80397) (close-paren 80394 . 80395) (symbol 80392 . 80394) (symbol 80383 . 80391) (punctuation 80381 . 80382) (symbol 80380 . 80381) (symbol 80368 . 80379) (punctuation 80366 . 80367) (symbol 80364 . 80366) (symbol 80355 . 80363) (open-paren 80354 . 80355) (symbol 80338 . 80353) (BOOL 80333 . 80337) (symbol 80326 . 80332) (close-paren 80323 . 80324) (punctuation 80311 . 80312) (punctuation 80310 . 80311) (number 80308 . 80309) (punctuation 80306 . 80307) (punctuation 80305 . 80306) (semantic-list 80301 . 80304) (symbol 80292 . 80300) (RETURN 80285 . 80291) (open-paren 80281 . 80282) (close-paren 80279 . 80280) (symbol 80278 . 80279) (symbol 80266 . 80277) (open-paren 80265 . 80266) (symbol 80257 . 80264) (BOOL 80252 . 80256) (symbol 80245 . 80251) (close-paren 80243 . 80244) (punctuation 80229 . 80230) (punctuation 80228 . 80229) (semantic-list 80224 . 80227) (symbol 80215 . 80223) (RETURN 80208 . 80214) (open-paren 80204 . 80205) (close-paren 80202 . 80203) (symbol 80201 . 80202) (symbol 80189 . 80200) (open-paren 80188 . 80189) (symbol 80180 . 80187) (BOOL 80175 . 80179) (symbol 80168 . 80174) (close-paren 80165 . 80166) (RETURN 80141 . 80147) (open-paren 80137 . 80138) (close-paren 80135 . 80136) (symbol 80134 . 80135) (symbol 80122 . 80133) (open-paren 80121 . 80122) (close-paren 80119 . 80120) (symbol 80115 . 80119) (open-paren 80114 . 80115) (BOOL 80109 . 80113) (symbol 80102 . 80108) (punctuation 80070 . 80071) (close-paren 80069 . 80070) (number 80064 . 80066) (punctuation 80062 . 80063) (symbol 80048 . 80061) (punctuation 79950 . 79951) (symbol 79941 . 79950) (punctuation 79939 . 79940) (symbol 79930 . 79938) (punctuation 79928 . 79929) (symbol 79917 . 79927) (punctuation 79915 . 79916) (symbol 79904 . 79914) (punctuation 79902 . 79903) (symbol 79891 . 79901) (punctuation 79889 . 79890) (symbol 79880 . 79888) (punctuation 79872 . 79873) (symbol 79853 . 79871) (punctuation 79846 . 79847) (number 79837 . 79846) (punctuation 79835 . 79836) (symbol 79825 . 79834) (punctuation 79819 . 79820) (number 79810 . 79819) (punctuation 79808 . 79809) (symbol 79799 . 79807) (punctuation 79793 . 79794) (number 79784 . 79793) (punctuation 79782 . 79783) (symbol 79771 . 79781) (punctuation 79765 . 79766) (number 79756 . 79765) (punctuation 79754 . 79755) (symbol 79743 . 79753) (punctuation 79737 . 79738) (number 79728 . 79737) (punctuation 79726 . 79727) (symbol 79715 . 79725) (punctuation 79709 . 79710) (number 79700 . 79709) (punctuation 79698 . 79699) (symbol 79689 . 79697) (open-paren 79683 . 79684) (symbol 79671 . 79680) (ENUM 79666 . 79670) (punctuation 79396 . 79397) (close-paren 79395 . 79396) (number 79391 . 79392) (punctuation 79389 . 79390) (symbol 79368 . 79388) (punctuation 79362 . 79363) (number 79361 . 79362) (punctuation 79359 . 79360) (symbol 79339 . 79358) (punctuation 79333 . 79334) (number 79332 . 79333) (punctuation 79330 . 79331) (symbol 79309 . 79329) (punctuation 79303 . 79304) (number 79302 . 79303) (punctuation 79300 . 79301) (symbol 79281 . 79299) (punctuation 79275 . 79276) (number 79274 . 79275) (punctuation 79272 . 79273) (symbol 79254 . 79271) (punctuation 79248 . 79249) (number 79247 . 79248) (punctuation 79245 . 79246) (symbol 79228 . 79244) (open-paren 79222 . 79223) (symbol 79206 . 79219) (ENUM 79201 . 79205) (punctuation 78899 . 78900) (close-paren 78898 . 78899) (semantic-list 78810 . 78895) (punctuation 78808 . 78809) (symbol 78782 . 78801) (open-paren 78776 . 78777) (ENUM 78769 . 78773) (close-paren 78328 . 78329) (punctuation 78321 . 78322) (symbol 78320 . 78321) (punctuation 78319 . 78320) (punctuation 78318 . 78319) (semantic-list 78315 . 78318) (symbol 78308 . 78314) (RETURN 78301 . 78307) (open-paren 78297 . 78298) (close-paren 78295 . 78296) (symbol 78294 . 78295) (symbol 78282 . 78293) (open-paren 78281 . 78282) (symbol 78269 . 78280) (DOUBLE 78262 . 78268) (symbol 78255 . 78261) (punctuation 78252 . 78253) (close-paren 78251 . 78252) (open-paren 78171 . 78172) (symbol 78158 . 78168) (STRUCT 78151 . 78157) (close-paren 78114 . 78115) (punctuation 78096 . 78097) (punctuation 78095 . 78096) (symbol 78094 . 78095) (punctuation 78093 . 78094) (RETURN 78086 . 78092) (punctuation 78082 . 78083) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 78063 . 78077)))) 78054 . 78082) (open-paren 78050 . 78051) (close-paren 78048 . 78049) (symbol 78047 . 78048) (punctuation 78046 . 78047) (symbol 78037 . 78045) (UNION 78031 . 78036) (open-paren 78030 . 78031) (symbol 78015 . 78029) (punctuation 78013 . 78014) (symbol 77994 . 78012) (STRUCT 77987 . 77993) (symbol 77980 . 77986) (close-paren 77977 . 77978) (punctuation 77970 . 77971) (symbol 77962 . 77970) (punctuation 77961 . 77962) (punctuation 77960 . 77961) (symbol 77959 . 77960) (RETURN 77952 . 77958) (open-paren 77948 . 77949) (close-paren 77946 . 77947) (symbol 77945 . 77946) (punctuation 77944 . 77945) (symbol 77935 . 77943) (UNION 77929 . 77934) (open-paren 77928 . 77929) (symbol 77919 . 77927) (symbol 77905 . 77918) (ENUM 77900 . 77904) (symbol 77893 . 77899) (punctuation 77890 . 77891) (close-paren 77889 . 77890) (open-paren 77690 . 77691) (symbol 77679 . 77687) (UNION 77673 . 77678) (punctuation 77670 . 77671) (close-paren 77669 . 77670) (open-paren 77592 . 77593) (symbol 77571 . 77589) (STRUCT 77564 . 77570) (punctuation 77477 . 77478) (close-paren 77476 . 77477) (open-paren 76338 . 76339) (symbol 76312 . 76335) (STRUCT 76305 . 76311) (punctuation 74978 . 74979) (close-paren 74977 . 74978) (open-paren 74797 . 74798) (symbol 74776 . 74794) (STRUCT 74769 . 74775) (punctuation 74638 . 74639) (close-paren 74637 . 74638) (open-paren 74558 . 74559) (symbol 74544 . 74555) (STRUCT 74537 . 74543) (punctuation 74343 . 74344) (close-paren 74342 . 74343) (open-paren 74268 . 74269) (symbol 74253 . 74265) (STRUCT 74246 . 74252) (punctuation 74051 . 74052) (close-paren 74050 . 74051) (open-paren 73973 . 73974) (symbol 73959 . 73970) (STRUCT 73952 . 73958) (close-paren 73610 . 73611) (punctuation 73596 . 73597) (punctuation 73595 . 73596) (semantic-list 73592 . 73595) (symbol 73586 . 73591) (punctuation 73584 . 73585) (RETURN 73577 . 73583) (punctuation 73573 . 73574) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 73558 . 73568)))) 73549 . 73573) (open-paren 73545 . 73546) (close-paren 73543 . 73544) (symbol 73542 . 73543) (symbol 73530 . 73541) (open-paren 73529 . 73530) (symbol 73518 . 73528) (punctuation 73516 . 73517) (symbol 73501 . 73515) (STRUCT 73494 . 73500) (symbol 73487 . 73493) (close-paren 73484 . 73485) (punctuation 73469 . 73470) (punctuation 73468 . 73469) (semantic-list 73465 . 73468) (symbol 73459 . 73464) (punctuation 73457 . 73458) (RETURN 73450 . 73456) (punctuation 73446 . 73447) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SAVE_VALUEP" 73430 . 73441)))) 73421 . 73446) (open-paren 73417 . 73418) (close-paren 73415 . 73416) (symbol 73414 . 73415) (symbol 73402 . 73413) (open-paren 73401 . 73402) (symbol 73389 . 73400) (punctuation 73387 . 73388) (symbol 73371 . 73386) (STRUCT 73364 . 73370) (symbol 73357 . 73363) (close-paren 73354 . 73355) (punctuation 73342 . 73343) (punctuation 73341 . 73342) (semantic-list 73338 . 73341) (symbol 73332 . 73337) (punctuation 73330 . 73331) (RETURN 73323 . 73329) (punctuation 73319 . 73320) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 73306 . 73314)))) 73297 . 73319) (open-paren 73293 . 73294) (close-paren 73291 . 73292) (symbol 73290 . 73291) (symbol 73278 . 73289) (open-paren 73277 . 73278) (symbol 73268 . 73276) (punctuation 73266 . 73267) (symbol 73253 . 73265) (STRUCT 73246 . 73252) (symbol 73239 . 73245) (close-paren 73236 . 73237) (punctuation 73225 . 73226) (punctuation 73224 . 73225) (semantic-list 73221 . 73224) (symbol 73215 . 73220) (punctuation 73213 . 73214) (RETURN 73206 . 73212) (punctuation 73202 . 73203) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 73190 . 73197)))) 73181 . 73202) (open-paren 73177 . 73178) (close-paren 73175 . 73176) (symbol 73174 . 73175) (symbol 73162 . 73173) (open-paren 73161 . 73162) (symbol 73153 . 73160) (punctuation 73151 . 73152) (symbol 73139 . 73150) (STRUCT 73132 . 73138) (symbol 73125 . 73131) (close-paren 73122 . 73123) (punctuation 73115 . 73116) (punctuation 73114 . 73115) (semantic-list 73111 . 73114) (symbol 73102 . 73110) (RETURN 73095 . 73101) (open-paren 73091 . 73092) (close-paren 73089 . 73090) (symbol 73088 . 73089) (symbol 73076 . 73087) (open-paren 73075 . 73076) (symbol 73065 . 73074) (symbol 73050 . 73064) (ENUM 73045 . 73049) (symbol 73038 . 73044) (close-paren 73035 . 73036) (punctuation 73027 . 73028) (punctuation 73026 . 73027) (semantic-list 73023 . 73026) (symbol 73017 . 73022) (punctuation 73015 . 73016) (RETURN 73008 . 73014) (punctuation 73004 . 73005) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MISCP" 72994 . 72999)))) 72985 . 73004) (open-paren 72981 . 72982) (close-paren 72979 . 72980) (symbol 72978 . 72979) (symbol 72966 . 72977) (open-paren 72965 . 72966) (symbol 72956 . 72964) (punctuation 72954 . 72955) (symbol 72940 . 72953) (STRUCT 72933 . 72939) (symbol 72926 . 72932) (close-paren 72923 . 72924) (RETURN 72893 . 72899) (open-paren 72889 . 72890) (close-paren 72887 . 72888) (symbol 72886 . 72887) (symbol 72874 . 72885) (open-paren 72873 . 72874) (symbol 72867 . 72872) (punctuation 72865 . 72866) (symbol 72855 . 72864) (UNION 72849 . 72854) (symbol 72842 . 72848) (punctuation 72839 . 72840) (close-paren 72838 . 72839) (open-paren 72522 . 72523) (symbol 72510 . 72519) (UNION 72504 . 72509) (punctuation 72371 . 72372) (close-paren 72370 . 72371) (open-paren 72222 . 72223) (symbol 72210 . 72219) (STRUCT 72203 . 72209) (punctuation 72141 . 72142) (close-paren 72140 . 72141) (open-paren 71752 . 71753) (symbol 71735 . 71749) (STRUCT 71728 . 71734) (close-paren 71481 . 71482) (punctuation 71472 . 71473) (semantic-list 71469 . 71472) (symbol 71465 . 71469) (punctuation 71464 . 71465) (punctuation 71463 . 71464) (semantic-list 71458 . 71463) (symbol 71446 . 71457) (RETURN 71439 . 71445) (punctuation 71435 . 71436) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71387 . 71396)))) 71378 . 71435) (open-paren 71374 . 71375) (close-paren 71372 . 71373) (symbol 71371 . 71372) (INT 71367 . 71370) (punctuation 71365 . 71366) (symbol 71362 . 71365) (symbol 71350 . 71361) (open-paren 71349 . 71350) (symbol 71336 . 71348) (symbol 71324 . 71335) (symbol 71317 . 71323) (close-paren 71280 . 71281) (punctuation 71264 . 71265) (semantic-list 71261 . 71264) (symbol 71257 . 71261) (punctuation 71256 . 71257) (punctuation 71255 . 71256) (semantic-list 71250 . 71255) (symbol 71238 . 71249) (punctuation 71234 . 71235) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71185 . 71194)))) 71176 . 71234) (open-paren 71172 . 71173) (close-paren 71170 . 71171) (symbol 71167 . 71170) (symbol 71157 . 71166) (punctuation 71155 . 71156) (symbol 71154 . 71155) (INT 71150 . 71153) (punctuation 71148 . 71149) (symbol 71145 . 71148) (symbol 71133 . 71144) (open-paren 71132 . 71133) (symbol 71115 . 71131) (VOID 71110 . 71114) (symbol 71103 . 71109) (close-paren 71101 . 71102) (punctuation 71091 . 71092) (semantic-list 71088 . 71091) (symbol 71084 . 71088) (punctuation 71083 . 71084) (punctuation 71082 . 71083) (semantic-list 71077 . 71082) (symbol 71065 . 71076) (RETURN 71058 . 71064) (punctuation 71054 . 71055) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71005 . 71014)))) 70996 . 71054) (open-paren 70992 . 70993) (close-paren 70990 . 70991) (symbol 70989 . 70990) (INT 70985 . 70988) (punctuation 70983 . 70984) (symbol 70980 . 70983) (symbol 70968 . 70979) (open-paren 70967 . 70968) (symbol 70953 . 70966) (symbol 70943 . 70952) (symbol 70936 . 70942) (close-paren 70893 . 70894) (punctuation 70879 . 70880) (semantic-list 70876 . 70879) (symbol 70872 . 70876) (punctuation 70871 . 70872) (punctuation 70870 . 70871) (semantic-list 70865 . 70870) (symbol 70853 . 70864) (RETURN 70846 . 70852) (punctuation 70842 . 70843) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70789 . 70798)))) 70780 . 70842) (open-paren 70776 . 70777) (close-paren 70774 . 70775) (symbol 70773 . 70774) (INT 70769 . 70772) (punctuation 70767 . 70768) (symbol 70764 . 70767) (symbol 70752 . 70763) (open-paren 70751 . 70752) (symbol 70733 . 70750) (symbol 70721 . 70732) (symbol 70714 . 70720) (close-paren 70712 . 70713) (punctuation 70696 . 70697) (semantic-list 70693 . 70696) (symbol 70689 . 70693) (punctuation 70688 . 70689) (punctuation 70687 . 70688) (semantic-list 70682 . 70687) (symbol 70670 . 70681) (punctuation 70666 . 70667) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70617 . 70626)))) 70608 . 70666) (open-paren 70604 . 70605) (close-paren 70602 . 70603) (symbol 70599 . 70602) (punctuation 70598 . 70599) (VOID 70593 . 70597) (punctuation 70591 . 70592) (symbol 70590 . 70591) (INT 70586 . 70589) (punctuation 70584 . 70585) (symbol 70581 . 70584) (symbol 70569 . 70580) (open-paren 70568 . 70569) (symbol 70551 . 70567) (VOID 70546 . 70550) (symbol 70539 . 70545) (close-paren 70537 . 70538) (punctuation 70527 . 70528) (semantic-list 70524 . 70527) (symbol 70520 . 70524) (punctuation 70519 . 70520) (punctuation 70518 . 70519) (semantic-list 70513 . 70518) (symbol 70501 . 70512) (RETURN 70494 . 70500) (punctuation 70490 . 70491) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70441 . 70450)))) 70432 . 70490) (open-paren 70428 . 70429) (close-paren 70426 . 70427) (symbol 70425 . 70426) (INT 70421 . 70424) (punctuation 70419 . 70420) (symbol 70416 . 70419) (symbol 70404 . 70415) (open-paren 70403 . 70404) (symbol 70389 . 70402) (punctuation 70387 . 70388) (VOID 70382 . 70386) (symbol 70375 . 70381) (close-paren 70329 . 70330) (punctuation 70327 . 70328) (semantic-list 70259 . 70327) (RETURN 70252 . 70258) (punctuation 70248 . 70249) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 70217 . 70218)))) 70208 . 70248) (open-paren 70204 . 70205) (close-paren 70202 . 70203) (symbol 70201 . 70202) (INT 70197 . 70200) (punctuation 70195 . 70196) (symbol 70194 . 70195) (punctuation 70193 . 70194) (symbol 70177 . 70192) (STRUCT 70170 . 70176) (open-paren 70169 . 70170) (symbol 70159 . 70168) (INT 70155 . 70158) (symbol 70148 . 70154) (punctuation 70098 . 70099) (close-paren 70097 . 70098) (punctuation 69932 . 69933) (symbol 69922 . 69931) (symbol "Lisp_Save_Type" 69897 . 69921) (ENUM "enum" 69897 . 69921) (punctuation 69455 . 69456) (semantic-list 69430 . 69455) (punctuation 69428 . 69429) (number 69425 . 69427) (punctuation 69423 . 69424) (symbol 69416 . 69422) (UNSIGNED 69407 . 69415) (open-paren 69305 . 69306) (symbol 69287 . 69302) (STRUCT 69280 . 69286) (punctuation 69277 . 69278) (close-paren 69276 . 69277) (VOID 69272 . 69276) (open-paren 69271 . 69272) (close-paren 69269 . 69270) (symbol 69258 . 69269) (punctuation 69257 . 69258) (open-paren 69256 . 69257) (VOID 69251 . 69255) (TYPEDEF 69243 . 69250) (punctuation 68363 . 68364) (close-paren 68362 . 68363) (semantic-list 68332 . 68359) (punctuation 68330 . 68331) (symbol 68312 . 68329) (punctuation 68310 . 68311) (symbol 68293 . 68309) (punctuation 68225 . 68226) (semantic-list 68188 . 68225) (punctuation 68186 . 68187) (symbol 68169 . 68185) (punctuation 68167 . 68168) (symbol 68135 . 68160) (punctuation 68129 . 68130) (semantic-list 68097 . 68129) (punctuation 68095 . 68096) (symbol 68082 . 68094) (punctuation 68080 . 68081) (symbol 68062 . 68079) (punctuation 68056 . 68057) (semantic-list 68025 . 68056) (punctuation 68023 . 68024) (symbol 68010 . 68022) (punctuation 68008 . 68009) (symbol 67990 . 68007) (punctuation 67984 . 67985) (semantic-list 67952 . 67984) (punctuation 67950 . 67951) (symbol 67937 . 67949) (punctuation 67935 . 67936) (symbol 67917 . 67934) (punctuation 67911 . 67912) (semantic-list 67870 . 67911) (punctuation 67868 . 67869) (symbol 67856 . 67867) (punctuation 67854 . 67855) (symbol 67822 . 67847) (punctuation 67816 . 67817) (semantic-list 67779 . 67816) (punctuation 67777 . 67778) (symbol 67765 . 67776) (punctuation 67763 . 67764) (symbol 67741 . 67762) (punctuation 67735 . 67736) (semantic-list 67704 . 67735) (punctuation 67702 . 67703) (symbol 67690 . 67701) (punctuation 67688 . 67689) (symbol 67670 . 67687) (punctuation 67664 . 67665) (semantic-list 67610 . 67664) (punctuation 67608 . 67609) (symbol 67580 . 67601) (punctuation 67574 . 67575) (semantic-list 67542 . 67574) (punctuation 67540 . 67541) (symbol 67527 . 67539) (punctuation 67525 . 67526) (symbol 67507 . 67524) (open-paren 67501 . 67502) (symbol 67484 . 67498) (ENUM 67479 . 67483) (punctuation 67476 . 67477) (close-paren 67475 . 67476) (number 67473 . 67474) (punctuation 67471 . 67472) (symbol 67456 . 67470) (punctuation 67454 . 67455) (symbol 67437 . 67453) (punctuation 67435 . 67436) (symbol 67420 . 67434) (open-paren 67418 . 67419) (ENUM 67413 . 67417) (punctuation 67334 . 67335) (close-paren 67333 . 67334) (number 67331 . 67332) (punctuation 67329 . 67330) (symbol 67312 . 67328) (open-paren 67310 . 67311) (ENUM 67305 . 67309) (punctuation 67235 . 67236) (close-paren 67234 . 67235) (number 67232 . 67233) (punctuation 67230 . 67231) (symbol 67215 . 67229) (open-paren 67213 . 67214) (ENUM 67208 . 67212) (punctuation 67142 . 67143) (close-paren 67141 . 67142) (symbol 67127 . 67138) (punctuation 67121 . 67122) (symbol 67109 . 67121) (punctuation 67103 . 67104) (symbol 67087 . 67103) (punctuation 67081 . 67082) (symbol 67069 . 67081) (punctuation 67063 . 67064) (symbol 67052 . 67063) (open-paren 67046 . 67047) (ENUM 67039 . 67043) (punctuation 66973 . 66974) (close-paren 66972 . 66973) (open-paren 66751 . 66752) (symbol 66252 . 66264) (STRUCT 66245 . 66251) (punctuation 66139 . 66140) (close-paren 66138 . 66139) (open-paren 64403 . 64404) (symbol 64391 . 64402) (STRUCT 64384 . 64390) (punctuation 64381 . 64382) (close-paren 64380 . 64381) (open-paren 64268 . 64269) (symbol 64217 . 64230) (STRUCT 64210 . 64216) (close-paren 64149 . 64150) (punctuation 64147 . 64148) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 64140 . 64147) (punctuation 64138 . 64139) (semantic-list 64092 . 64137) (RETURN 64085 . 64091) (open-paren 64081 . 64082) (close-paren 64079 . 64080) (symbol 64078 . 64079) (symbol 64067 . 64077) (open-paren 64066 . 64067) (symbol 64052 . 64065) (symbol 64041 . 64051) (symbol 64034 . 64040) (close-paren 63972 . 63973) (punctuation 63967 . 63968) (semantic-list 63935 . 63966) (punctuation 63933 . 63934) (semantic-list 63924 . 63932) (RETURN 63917 . 63923) (open-paren 63913 . 63914) (close-paren 63911 . 63912) (symbol 63910 . 63911) (symbol 63899 . 63909) (punctuation 63897 . 63898) (symbol 63896 . 63897) (symbol 63885 . 63895) (open-paren 63884 . 63885) (symbol 63869 . 63883) (symbol 63858 . 63868) (symbol 63851 . 63857) (punctuation 63409 . 63410) (close-paren 63408 . 63409) (number 63405 . 63407) (punctuation 63403 . 63404) (symbol 63385 . 63402) (open-paren 63383 . 63384) (symbol 63365 . 63382) (ENUM 63360 . 63364) (close-paren 63302 . 63303) (punctuation 63294 . 63295) (punctuation 63293 . 63294) (RETURN 63278 . 63284) (open-paren 63274 . 63275) (close-paren 63272 . 63273) (symbol 63271 . 63272) (punctuation 63270 . 63271) (symbol 63254 . 63269) (STRUCT 63247 . 63253) (open-paren 63246 . 63247) (symbol 63230 . 63245) (symbol 63220 . 63229) (symbol 63213 . 63219) (close-paren 63168 . 63169) (punctuation 63154 . 63155) (punctuation 63153 . 63154) (RETURN 63139 . 63145) (open-paren 63135 . 63136) (close-paren 63133 . 63134) (symbol 63130 . 63133) (symbol 63120 . 63129) (punctuation 63118 . 63119) (symbol 63117 . 63118) (punctuation 63116 . 63117) (symbol 63100 . 63115) (STRUCT 63093 . 63099) (open-paren 63092 . 63093) (symbol 63081 . 63091) (symbol 63069 . 63080) (symbol 63062 . 63068) (close-paren 62920 . 62921) (punctuation 62907 . 62908) (punctuation 62906 . 62907) (RETURN 62892 . 62898) (open-paren 62888 . 62889) (close-paren 62886 . 62887) (symbol 62883 . 62886) (symbol 62873 . 62882) (punctuation 62871 . 62872) (symbol 62870 . 62871) (punctuation 62869 . 62870) (symbol 62853 . 62868) (STRUCT 62846 . 62852) (open-paren 62845 . 62846) (symbol 62835 . 62844) (symbol 62823 . 62834) (symbol 62816 . 62822) (close-paren 62743 . 62744) (punctuation 62730 . 62731) (punctuation 62729 . 62730) (RETURN 62715 . 62721) (open-paren 62711 . 62712) (close-paren 62709 . 62710) (symbol 62706 . 62709) (symbol 62696 . 62705) (punctuation 62694 . 62695) (symbol 62693 . 62694) (punctuation 62692 . 62693) (symbol 62676 . 62691) (STRUCT 62669 . 62675) (open-paren 62668 . 62669) (symbol 62658 . 62667) (symbol 62646 . 62657) (symbol 62639 . 62645) (close-paren 62547 . 62548) (number 62543 . 62544) (punctuation 62541 . 62542) (punctuation 62535 . 62536) (number 62533 . 62534) (punctuation 62517 . 62518) (punctuation 62516 . 62517) (RETURN 62502 . 62508) (open-paren 62498 . 62499) (close-paren 62496 . 62497) (symbol 62493 . 62496) (symbol 62483 . 62492) (punctuation 62481 . 62482) (symbol 62480 . 62481) (punctuation 62479 . 62480) (symbol 62463 . 62478) (STRUCT 62456 . 62462) (open-paren 62455 . 62456) (symbol 62444 . 62454) (symbol 62432 . 62443) (symbol 62425 . 62431) (close-paren 62361 . 62362) (punctuation 62353 . 62354) (number 62351 . 62352) (punctuation 62335 . 62336) (punctuation 62334 . 62335) (RETURN 62320 . 62326) (open-paren 62316 . 62317) (close-paren 62314 . 62315) (symbol 62311 . 62314) (symbol 62301 . 62310) (punctuation 62299 . 62300) (symbol 62298 . 62299) (punctuation 62297 . 62298) (symbol 62281 . 62296) (STRUCT 62274 . 62280) (open-paren 62273 . 62274) (symbol 62264 . 62272) (symbol 62252 . 62263) (symbol 62245 . 62251) (close-paren 62094 . 62095) (RETURN 62058 . 62064) (punctuation 62054 . 62055) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 62037 . 62049)))) 62028 . 62054) (open-paren 62024 . 62025) (close-paren 62022 . 62023) (symbol 62021 . 62022) (symbol 62009 . 62020) (open-paren 62008 . 62009) (symbol 61996 . 62007) (punctuation 61994 . 61995) (symbol 61978 . 61993) (STRUCT 61971 . 61977) (symbol 61964 . 61970) (close-paren 61961 . 61962) (RETURN 61918 . 61924) (open-paren 61914 . 61915) (close-paren 61912 . 61913) (symbol 61911 . 61912) (symbol 61899 . 61910) (open-paren 61898 . 61899) (symbol 61885 . 61897) (BOOL 61880 . 61884) (symbol 61873 . 61879) (punctuation 61869 . 61870) (close-paren 61868 . 61869) (open-paren 59952 . 59953) (symbol 59936 . 59951) (STRUCT 59929 . 59935) (punctuation 59926 . 59927) (close-paren 59925 . 59926) (open-paren 59459 . 59460) (symbol 59443 . 59458) (STRUCT 59436 . 59442) (close-paren 59070 . 59071) (punctuation 59068 . 59069) (semantic-list #("(XSYMBOL (sym)->constant)" 0 1 (macros (("sym" symbol "sym" 59064 . 59067)))) 59038 . 59068) (RETURN 59031 . 59037) (open-paren 59027 . 59028) (close-paren 59025 . 59026) (symbol 59022 . 59025) (symbol 59010 . 59021) (open-paren 59009 . 59010) (close-paren 59007 . 59008) (symbol 58990 . 59007) (open-paren 58989 . 58990) (INT 58985 . 58988) (symbol 58978 . 58984) (close-paren 58776 . 58777) (punctuation 58738 . 58739) (punctuation 58737 . 58738) (symbol 58728 . 58736) (punctuation 58727 . 58728) (punctuation 58726 . 58727) (semantic-list 58721 . 58726) (symbol 58713 . 58720) (RETURN 58706 . 58712) (open-paren 58702 . 58703) (close-paren 58700 . 58701) (symbol 58697 . 58700) (symbol 58685 . 58696) (open-paren 58684 . 58685) (symbol 58647 . 58683) (BOOL 58642 . 58646) (symbol 58635 . 58641) (close-paren 58571 . 58572) (punctuation 58550 . 58551) (punctuation 58549 . 58550) (symbol 58540 . 58548) (punctuation 58539 . 58540) (punctuation 58538 . 58539) (semantic-list 58533 . 58538) (symbol 58525 . 58532) (RETURN 58518 . 58524) (open-paren 58514 . 58515) (close-paren 58512 . 58513) (symbol 58509 . 58512) (symbol 58497 . 58508) (open-paren 58496 . 58497) (symbol 58478 . 58495) (BOOL 58473 . 58477) (symbol 58466 . 58472) (close-paren 58411 . 58412) (punctuation 58404 . 58405) (punctuation 58403 . 58404) (semantic-list 58398 . 58403) (symbol 58390 . 58397) (RETURN 58383 . 58389) (open-paren 58379 . 58380) (close-paren 58377 . 58378) (symbol 58374 . 58377) (symbol 58362 . 58373) (open-paren 58361 . 58362) (symbol 58349 . 58360) (symbol 58337 . 58348) (symbol 58330 . 58336) (close-paren 58327 . 58328) (punctuation 58317 . 58318) (symbol 58314 . 58317) (punctuation 58313 . 58314) (punctuation 58312 . 58313) (symbol 58309 . 58312) (punctuation 58305 . 58306) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 58271 . 58274)))) 58262 . 58305) (open-paren 58258 . 58259) (close-paren 58256 . 58257) (symbol 58255 . 58256) (punctuation 58254 . 58255) (symbol 58245 . 58253) (UNION 58239 . 58244) (punctuation 58237 . 58238) (symbol 58234 . 58237) (punctuation 58233 . 58234) (symbol 58221 . 58232) (STRUCT 58214 . 58220) (open-paren 58213 . 58214) (symbol 58198 . 58212) (VOID 58193 . 58197) (symbol 58186 . 58192) (close-paren 58184 . 58185) (punctuation 58174 . 58175) (symbol 58171 . 58174) (punctuation 58170 . 58171) (punctuation 58169 . 58170) (symbol 58166 . 58169) (punctuation 58162 . 58163) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 58128 . 58131)))) 58119 . 58162) (open-paren 58115 . 58116) (close-paren 58113 . 58114) (symbol 58112 . 58113) (punctuation 58111 . 58112) (symbol 58087 . 58110) (STRUCT 58080 . 58086) (punctuation 58078 . 58079) (symbol 58075 . 58078) (punctuation 58074 . 58075) (symbol 58062 . 58073) (STRUCT 58055 . 58061) (open-paren 58054 . 58055) (symbol 58039 . 58053) (VOID 58034 . 58038) (symbol 58027 . 58033) (close-paren 58025 . 58026) (punctuation 58013 . 58014) (symbol 58010 . 58013) (punctuation 58009 . 58010) (punctuation 58008 . 58009) (symbol 58005 . 58008) (punctuation 58001 . 58002) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57968 . 57971)))) 57959 . 58001) (open-paren 57955 . 57956) (close-paren 57953 . 57954) (symbol 57952 . 57953) (punctuation 57951 . 57952) (symbol 57939 . 57950) (STRUCT 57932 . 57938) (punctuation 57930 . 57931) (symbol 57927 . 57930) (punctuation 57926 . 57927) (symbol 57914 . 57925) (STRUCT 57907 . 57913) (open-paren 57906 . 57907) (symbol 57889 . 57905) (VOID 57884 . 57888) (symbol 57877 . 57883) (close-paren 57874 . 57875) (punctuation 57872 . 57873) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 0 1 (macros (("v" symbol "v" 57870 . 57871) ("sym" symbol "sym" 57865 . 57868)))) 57842 . 57872) (open-paren 57838 . 57839) (close-paren 57836 . 57837) (symbol 57835 . 57836) (symbol 57823 . 57834) (punctuation 57821 . 57822) (symbol 57818 . 57821) (punctuation 57817 . 57818) (symbol 57805 . 57816) (STRUCT 57798 . 57804) (open-paren 57797 . 57798) (close-paren 57795 . 57796) (symbol 57781 . 57795) (open-paren 57780 . 57781) (VOID 57775 . 57779) (symbol 57768 . 57774) (close-paren 57765 . 57766) (punctuation 57759 . 57760) (symbol 57756 . 57759) (punctuation 57755 . 57756) (punctuation 57754 . 57755) (symbol 57751 . 57754) (RETURN 57744 . 57750) (punctuation 57740 . 57741) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57706 . 57709)))) 57697 . 57740) (open-paren 57693 . 57694) (close-paren 57691 . 57692) (symbol 57688 . 57691) (punctuation 57687 . 57688) (symbol 57675 . 57686) (STRUCT 57668 . 57674) (open-paren 57667 . 57668) (symbol 57656 . 57666) (punctuation 57654 . 57655) (symbol 57645 . 57653) (UNION 57639 . 57644) (symbol 57632 . 57638) (close-paren 57630 . 57631) (punctuation 57624 . 57625) (symbol 57621 . 57624) (punctuation 57620 . 57621) (punctuation 57619 . 57620) (symbol 57616 . 57619) (RETURN 57609 . 57615) (punctuation 57605 . 57606) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57571 . 57574)))) 57562 . 57605) (open-paren 57558 . 57559) (close-paren 57556 . 57557) (symbol 57553 . 57556) (punctuation 57552 . 57553) (symbol 57540 . 57551) (STRUCT 57533 . 57539) (open-paren 57532 . 57533) (symbol 57521 . 57531) (punctuation 57519 . 57520) (symbol 57495 . 57518) (STRUCT 57488 . 57494) (symbol 57481 . 57487) (close-paren 57479 . 57480) (punctuation 57471 . 57472) (symbol 57468 . 57471) (punctuation 57467 . 57468) (punctuation 57466 . 57467) (symbol 57463 . 57466) (RETURN 57456 . 57462) (punctuation 57452 . 57453) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57419 . 57422)))) 57410 . 57452) (open-paren 57406 . 57407) (close-paren 57404 . 57405) (symbol 57401 . 57404) (punctuation 57400 . 57401) (symbol 57388 . 57399) (STRUCT 57381 . 57387) (open-paren 57380 . 57381) (symbol 57367 . 57379) (punctuation 57365 . 57366) (symbol 57353 . 57364) (STRUCT 57346 . 57352) (symbol 57339 . 57345) (close-paren 57336 . 57337) (punctuation 57334 . 57335) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 0 1 (macros (("sym" symbol "sym" 57330 . 57333)))) 57311 . 57334) (RETURN 57304 . 57310) (open-paren 57300 . 57301) (close-paren 57298 . 57299) (symbol 57295 . 57298) (punctuation 57294 . 57295) (symbol 57282 . 57293) (STRUCT 57275 . 57281) (open-paren 57274 . 57275) (close-paren 57272 . 57273) (symbol 57262 . 57272) (open-paren 57261 . 57262) (symbol 57249 . 57260) (symbol 57242 . 57248) (punctuation 57040 . 57041) (close-paren 57039 . 57040) (semantic-list 56946 . 57039) (punctuation 56944 . 56945) (punctuation 56943 . 56944) (semantic-list 56903 . 56941) (symbol 56894 . 56902) (open-paren 56893 . 56894) (symbol 56886 . 56892) (close-paren 56807 . 56808) (punctuation 56805 . 56806) (semantic-list 56730 . 56805) (RETURN 56723 . 56729) (open-paren 56719 . 56720) (close-paren 56717 . 56718) (symbol 56715 . 56717) (punctuation 56714 . 56715) (symbol 56698 . 56713) (STRUCT 56691 . 56697) (open-paren 56690 . 56691) (symbol 56667 . 56689) (INT 56663 . 56666) (symbol 56656 . 56662) (punctuation 56588 . 56589) (close-paren 56587 . 56588) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 56554 . 56573) ("type" STRUCT "struct" 56547 . 56553)))) 56532 . 56584) (punctuation 56530 . 56531) (symbol 56508 . 56529) (punctuation 56361 . 56362) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 56337 . 56352) ("type" STRUCT "struct" 56330 . 56336)))) 56315 . 56361) (punctuation 56313 . 56314) (symbol 56287 . 56312) (open-paren 56115 . 56116) (symbol 56093 . 56112) (ENUM 56088 . 56092) (punctuation 56085 . 56086) (close-paren 56084 . 56085) (open-paren 55095 . 55096) (symbol 55083 . 55092) (STRUCT 55076 . 55082) (close-paren 54935 . 54936) (ELSE 54895 . 54899) (punctuation 54874 . 54875) (punctuation 54873 . 54874) (semantic-list 54869 . 54873) (semantic-list 54757 . 54823) (IF 54754 . 54756) (open-paren 54750 . 54751) (close-paren 54748 . 54749) (symbol 54745 . 54748) (symbol 54733 . 54744) (punctuation 54731 . 54732) (symbol 54728 . 54731) (INT 54724 . 54727) (punctuation 54722 . 54723) (symbol 54720 . 54722) (symbol 54708 . 54719) (open-paren 54707 . 54708) (symbol 54692 . 54706) (VOID 54687 . 54691) (symbol 54680 . 54686) (close-paren 54543 . 54544) (punctuation 54541 . 54542) (semantic-list 54455 . 54541) (RETURN 54448 . 54454) (open-paren 54444 . 54445) (close-paren 54442 . 54443) (symbol 54439 . 54442) (INT 54435 . 54438) (punctuation 54433 . 54434) (symbol 54431 . 54433) (symbol 54419 . 54430) (open-paren 54418 . 54419) (symbol 54403 . 54417) (symbol 54391 . 54402) (symbol 54384 . 54390) (close-paren 54264 . 54265) (RETURN 54252 . 54258) (punctuation 54247 . 54248) (semantic-list 54211 . 54247) (WHILE 54205 . 54210) (semantic-list 53977 . 54202) (DO 53970 . 53972) (open-paren 53909 . 53910) (close-paren 53907 . 53908) (symbol 53904 . 53907) (symbol 53894 . 53903) (punctuation 53892 . 53893) (symbol 53890 . 53892) (symbol 53878 . 53889) (open-paren 53877 . 53878) (symbol 53856 . 53876) (symbol 53844 . 53855) (symbol 53837 . 53843) (punctuation 53834 . 53835) (close-paren 53833 . 53834) (open-paren 53071 . 53072) (symbol 53049 . 53068) (STRUCT 53042 . 53048) (punctuation 53039 . 53040) (close-paren 53038 . 53039) (open-paren 51987 . 51988) (symbol 51969 . 51984) (STRUCT 51962 . 51968) (punctuation 51959 . 51960) (close-paren 51958 . 51959) (number 51957 . 51958) (open-paren 51956 . 51957) (symbol 51944 . 51956) (INT 51940 . 51943) (CONST 51934 . 51939) (EXTERN 51927 . 51933) (punctuation 51924 . 51925) (close-paren 51923 . 51924) (number 51919 . 51920) (punctuation 51917 . 51918) (symbol 51897 . 51916) (punctuation 51891 . 51892) (number 51890 . 51891) (punctuation 51888 . 51889) (symbol 51868 . 51887) (punctuation 51862 . 51863) (number 51861 . 51862) (punctuation 51859 . 51860) (symbol 51839 . 51858) (punctuation 51833 . 51834) (number 51832 . 51833) (punctuation 51830 . 51831) (symbol 51810 . 51829) (open-paren 51804 . 51805) (symbol 51784 . 51801) (ENUM 51779 . 51783) (close-paren 49913 . 49914) (number 49901 . 49902) (punctuation 49816 . 49817) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 49804 . 49805)))) 49795 . 49816) (open-paren 49791 . 49792) (close-paren 49789 . 49790) (symbol 49783 . 49789) (symbol 49773 . 49782) (punctuation 49771 . 49772) (symbol 49770 . 49771) (punctuation 49769 . 49770) (VOID 49764 . 49768) (open-paren 49763 . 49764) (symbol 49754 . 49762) (VOID 49749 . 49753) (symbol 49742 . 49748) (punctuation 49614 . 49615) (close-paren 49613 . 49614) (number 49611 . 49612) (punctuation 49609 . 49610) (punctuation 49608 . 49609) (semantic-list #("(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 0 1 (macros (("ptr" semantic-list "(iname)" 14 . 20) ("tag" symbol "Lisp_Symbol" 1 . 12)))) 49580 . 49607) (punctuation 49578 . 49579) (symbol 49566 . 49577) (open-paren 49564 . 49565) (ENUM 49559 . 49563) (close-paren 49340 . 49341) (punctuation 49318 . 49319) (punctuation 49317 . 49318) (semantic-list 49310 . 49317) (symbol 49302 . 49309) (punctuation 49298 . 49299) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 49263 . 49264)))) 49254 . 49298) (open-paren 49110 . 49111) (close-paren 49108 . 49109) (symbol 49105 . 49108) (symbol 49093 . 49104) (punctuation 49091 . 49092) (symbol 49088 . 49091) (symbol 49078 . 49087) (punctuation 49076 . 49077) (symbol 49071 . 49076) (symbol 49059 . 49070) (open-paren 49058 . 49059) (symbol 49050 . 49057) (VOID 49045 . 49049) (symbol 49038 . 49044) (close-paren 49035 . 49036) (punctuation 49013 . 49014) (punctuation 49012 . 49013) (semantic-list 49005 . 49012) (symbol 48997 . 49004) (punctuation 48993 . 48994) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 48961 . 48962)))) 48952 . 48993) (open-paren 48948 . 48949) (close-paren 48946 . 48947) (symbol 48943 . 48946) (symbol 48931 . 48942) (punctuation 48929 . 48930) (symbol 48926 . 48929) (symbol 48916 . 48925) (punctuation 48914 . 48915) (symbol 48909 . 48914) (symbol 48897 . 48908) (open-paren 48896 . 48897) (symbol 48891 . 48895) (VOID 48886 . 48890) (symbol 48879 . 48885) (close-paren 48876 . 48877) (punctuation 48858 . 48859) (punctuation 48856 . 48857) (symbol 48851 . 48855) (punctuation 48850 . 48851) (symbol 48844 . 48850) (punctuation 48843 . 48844) (punctuation 48842 . 48843) (semantic-list 48835 . 48842) (symbol 48827 . 48834) (RETURN 48820 . 48826) (open-paren 48748 . 48749) (close-paren 48746 . 48747) (symbol 48741 . 48746) (symbol 48729 . 48740) (open-paren 48728 . 48729) (symbol 48719 . 48727) (symbol 48709 . 48718) (symbol 48702 . 48708) (close-paren 48699 . 48700) (RETURN 48686 . 48692) (open-paren 48610 . 48611) (close-paren 48608 . 48609) (symbol 48603 . 48608) (symbol 48591 . 48602) (open-paren 48590 . 48591) (symbol 48584 . 48589) (symbol 48574 . 48583) (symbol 48567 . 48573) (close-paren 48564 . 48565) (punctuation 48548 . 48549) (punctuation 48547 . 48548) (semantic-list 48540 . 48547) (symbol 48532 . 48539) (punctuation 48530 . 48531) (RETURN 48523 . 48529) (open-paren 48519 . 48520) (close-paren 48517 . 48518) (symbol 48514 . 48517) (symbol 48504 . 48513) (punctuation 48502 . 48503) (symbol 48497 . 48502) (symbol 48485 . 48496) (open-paren 48484 . 48485) (symbol 48474 . 48483) (punctuation 48472 . 48473) (symbol 48460 . 48471) (symbol 48453 . 48459) (close-paren 48450 . 48451) (punctuation 48434 . 48435) (punctuation 48433 . 48434) (semantic-list 48426 . 48433) (symbol 48418 . 48425) (RETURN 48411 . 48417) (open-paren 48407 . 48408) (close-paren 48405 . 48406) (symbol 48402 . 48405) (symbol 48392 . 48401) (punctuation 48390 . 48391) (symbol 48385 . 48390) (symbol 48373 . 48384) (open-paren 48372 . 48373) (symbol 48367 . 48371) (symbol 48355 . 48366) (symbol 48348 . 48354) (punctuation 48294 . 48295) (close-paren 48293 . 48294) (semantic-list 48277 . 48290) (SIZEOF 48270 . 48276) (punctuation 48268 . 48269) (symbol 48258 . 48267) (punctuation 48252 . 48253) (semantic-list 48221 . 48252) (symbol 48212 . 48220) (punctuation 48210 . 48211) (symbol 48193 . 48209) (punctuation 48187 . 48188) (semantic-list 48157 . 48187) (symbol 48148 . 48156) (punctuation 48146 . 48147) (symbol 48134 . 48145) (open-paren 48128 . 48129) (ENUM 48121 . 48125) (close-paren 48020 . 48021) (punctuation 48018 . 48019) (semantic-list 47980 . 48018) (punctuation 47978 . 47979) (punctuation 47976 . 47977) (punctuation 47975 . 47976) (symbol 47970 . 47974) (punctuation 47969 . 47970) (ELSE 47960 . 47964) (punctuation 47956 . 47957) (semantic-list 47925 . 47956) (punctuation 47923 . 47924) (punctuation 47922 . 47923) (number 47920 . 47921) (punctuation 47918 . 47919) (punctuation 47917 . 47918) (symbol 47912 . 47916) (punctuation 47911 . 47912) (semantic-list 47903 . 47906) (IF 47900 . 47902) (punctuation 47895 . 47896) (punctuation 47837 . 47838) (punctuation 47835 . 47836) (symbol 47830 . 47834) (open-paren 47754 . 47755) (close-paren 47752 . 47753) (symbol 47751 . 47752) (BOOL 47746 . 47750) (punctuation 47744 . 47745) (symbol 47743 . 47744) (symbol 47733 . 47742) (punctuation 47731 . 47732) (symbol 47730 . 47731) (symbol 47718 . 47729) (open-paren 47717 . 47718) (symbol 47701 . 47716) (VOID 47696 . 47700) (symbol 47689 . 47695) (close-paren 47656 . 47657) (punctuation 47648 . 47649) (symbol 47645 . 47647) (punctuation 47643 . 47644) (semantic-list 47636 . 47642) (symbol 47617 . 47635) (RETURN 47610 . 47616) (open-paren 47606 . 47607) (close-paren 47604 . 47605) (symbol 47603 . 47604) (symbol 47593 . 47602) (punctuation 47591 . 47592) (symbol 47590 . 47591) (symbol 47578 . 47589) (open-paren 47577 . 47578) (symbol 47561 . 47576) (symbol 47549 . 47560) (symbol 47542 . 47548) (close-paren 47539 . 47540) (punctuation 47537 . 47538) (semantic-list 47431 . 47537) (punctuation 47429 . 47430) (punctuation 47428 . 47429) (RETURN 47421 . 47427) (open-paren 47369 . 47370) (close-paren 47367 . 47368) (symbol 47366 . 47367) (symbol 47356 . 47365) (punctuation 47354 . 47355) (symbol 47353 . 47354) (symbol 47341 . 47352) (open-paren 47340 . 47341) (symbol 47321 . 47339) (BOOL 47316 . 47320) (symbol 47309 . 47315) (close-paren 47270 . 47271) (punctuation 47241 . 47242) (semantic-list 47202 . 47240) (RETURN 47195 . 47201) (open-paren 47116 . 47117) (close-paren 47114 . 47115) (symbol 47110 . 47114) (symbol 47100 . 47109) (open-paren 47099 . 47100) (symbol 47081 . 47098) (symbol 47071 . 47080) (symbol 47064 . 47070) (close-paren 47061 . 47062) (punctuation 47039 . 47040) (semantic-list 47007 . 47038) (RETURN 47000 . 47006) (open-paren 46921 . 46922) (close-paren 46919 . 46920) (symbol 46915 . 46919) (symbol 46905 . 46914) (open-paren 46904 . 46905) (symbol 46886 . 46903) (symbol 46876 . 46885) (symbol 46869 . 46875) (close-paren 46790 . 46791) (semantic-list 46750 . 46767) (RETURN 46743 . 46749) (open-paren 46739 . 46740) (close-paren 46737 . 46738) (symbol 46736 . 46737) (symbol 46724 . 46735) (open-paren 46723 . 46724) (symbol 46700 . 46722) (punctuation 46698 . 46699) (CHAR 46693 . 46697) (UNSIGNED 46684 . 46692) (symbol 46677 . 46683) (close-paren 46674 . 46675) (punctuation 46667 . 46668) (punctuation 46666 . 46667) (semantic-list 46663 . 46666) (symbol 46650 . 46662) (RETURN 46643 . 46649) (open-paren 46639 . 46640) (close-paren 46637 . 46638) (symbol 46636 . 46637) (symbol 46624 . 46635) (open-paren 46623 . 46624) (symbol 46606 . 46622) (punctuation 46604 . 46605) (symbol 46594 . 46603) (symbol 46587 . 46593) (close-paren 46584 . 46585) (RETURN 46571 . 46577) (open-paren 46501 . 46502) (close-paren 46499 . 46500) (symbol 46498 . 46499) (symbol 46486 . 46497) (open-paren 46485 . 46486) (symbol 46468 . 46484) (symbol 46458 . 46467) (symbol 46451 . 46457) (punctuation 46448 . 46449) (close-paren 46447 . 46448) (open-paren 45973 . 45974) (symbol 45954 . 45970) (STRUCT 45947 . 45953) (punctuation 45869 . 45870) (close-paren 45868 . 45869) (semantic-list 45811 . 45865) (symbol 45803 . 45810) (punctuation 45801 . 45802) (symbol 45768 . 45794) (open-paren 45762 . 45763) (ENUM 45755 . 45759) (punctuation 45677 . 45678) (close-paren 45676 . 45677) (open-paren 45586 . 45587) (symbol 45572 . 45583) (STRUCT 45565 . 45571) (punctuation 45489 . 45490) (close-paren 45488 . 45489) (open-paren 44342 . 44343) (symbol 44322 . 44339) (STRUCT 44315 . 44321) (close-paren 43859 . 43860) (punctuation 43842 . 43843) (punctuation 43841 . 43842) (semantic-list 43833 . 43841) (symbol 43825 . 43832) (open-paren 43821 . 43822) (close-paren 43819 . 43820) (symbol 43812 . 43819) (symbol 43802 . 43811) (punctuation 43800 . 43801) (symbol 43794 . 43800) (symbol 43782 . 43793) (open-paren 43781 . 43782) (symbol 43764 . 43780) (VOID 43759 . 43763) (symbol 43752 . 43758) (close-paren 43750 . 43751) (semantic-list 43739 . 43747) (RETURN 43710 . 43716) (open-paren 43706 . 43707) (close-paren 43704 . 43705) (symbol 43698 . 43704) (symbol 43686 . 43697) (open-paren 43685 . 43686) (symbol 43678 . 43684) (symbol 43668 . 43677) (symbol 43661 . 43667) (close-paren 43658 . 43659) (punctuation 43639 . 43640) (punctuation 43638 . 43639) (symbol 43637 . 43638) (punctuation 43635 . 43636) (symbol 43630 . 43634) (punctuation 43629 . 43630) (punctuation 43628 . 43629) (symbol 43627 . 43628) (punctuation 43625 . 43626) (number 43623 . 43624) (punctuation 43621 . 43622) (symbol 43611 . 43620) (punctuation 43610 . 43611) (punctuation 43609 . 43610) (symbol 43608 . 43609) (RETURN 43601 . 43607) (open-paren 43535 . 43536) (close-paren 43533 . 43534) (symbol 43532 . 43533) (punctuation 43531 . 43532) (symbol 43519 . 43530) (STRUCT 43512 . 43518) (open-paren 43511 . 43512) (symbol 43498 . 43510) (symbol 43488 . 43497) (symbol 43481 . 43487) (close-paren 43388 . 43389) (punctuation 43381 . 43382) (punctuation 43380 . 43381) (semantic-list 43372 . 43380) (symbol 43364 . 43371) (RETURN 43357 . 43363) (open-paren 43353 . 43354) (close-paren 43351 . 43352) (symbol 43345 . 43351) (symbol 43333 . 43344) (open-paren 43332 . 43333) (symbol 43325 . 43331) (symbol 43315 . 43324) (symbol 43308 . 43314) (close-paren 43306 . 43307) (punctuation 43304 . 43305) (NEW 43301 . 43304) (punctuation 43299 . 43300) (open-paren 43273 . 43274) (close-paren 43271 . 43272) (NEW 43268 . 43271) (CHAR 43263 . 43267) (UNSIGNED 43254 . 43262) (punctuation 43252 . 43253) (symbol 43247 . 43252) (symbol 43237 . 43246) (punctuation 43235 . 43236) (symbol 43229 . 43235) (symbol 43217 . 43228) (open-paren 43216 . 43217) (symbol 43211 . 43215) (VOID 43206 . 43210) (symbol 43199 . 43205) (close-paren 43197 . 43198) (punctuation 43195 . 43196) (RETURN 43167 . 43173) (open-paren 43163 . 43164) (close-paren 43161 . 43162) (symbol 43156 . 43161) (symbol 43146 . 43155) (punctuation 43144 . 43145) (symbol 43138 . 43144) (symbol 43126 . 43137) (open-paren 43125 . 43126) (symbol 43120 . 43124) (CHAR 43115 . 43119) (UNSIGNED 43106 . 43114) (symbol 43099 . 43105) (close-paren 43097 . 43098) (semantic-list 43072 . 43080) (RETURN 43065 . 43071) (open-paren 43019 . 43020) (close-paren 43017 . 43018) (symbol 43011 . 43017) (symbol 42999 . 43010) (open-paren 42998 . 42999) (symbol 42991 . 42997) (punctuation 42989 . 42990) (CHAR 42984 . 42988) (symbol 42977 . 42983) (close-paren 42975 . 42976) (punctuation 42968 . 42969) (punctuation 42967 . 42968) (semantic-list 42959 . 42967) (symbol 42951 . 42958) (RETURN 42944 . 42950) (open-paren 42940 . 42941) (close-paren 42938 . 42939) (symbol 42932 . 42938) (symbol 42920 . 42931) (open-paren 42919 . 42920) (symbol 42913 . 42918) (punctuation 42911 . 42912) (CHAR 42906 . 42910) (UNSIGNED 42897 . 42905) (symbol 42890 . 42896) (close-paren 41423 . 41424) (punctuation 41411 . 41412) (punctuation 41410 . 41411) (semantic-list 41405 . 41410) (symbol 41397 . 41404) (punctuation 41395 . 41396) (punctuation 41394 . 41395) (number 41392 . 41393) (RETURN 41385 . 41391) (open-paren 41381 . 41382) (close-paren 41379 . 41380) (symbol 41376 . 41379) (symbol 41364 . 41375) (open-paren 41363 . 41364) (symbol 41346 . 41362) (BOOL 41341 . 41345) (symbol 41334 . 41340) (punctuation 41289 . 41290) (close-paren 41288 . 41289) (open-paren 41150 . 41151) (symbol 41136 . 41147) (STRUCT 41119 . 41125) (close-paren 41038 . 41039) (punctuation 41030 . 41031) (semantic-list 41026 . 41029) (symbol 41021 . 41025) (punctuation 41019 . 41020) (semantic-list 41015 . 41018) (symbol 41009 . 41014) (RETURN 41002 . 41008) (open-paren 40998 . 40999) (close-paren 40996 . 40997) (symbol 40995 . 40996) (symbol 40983 . 40994) (open-paren 40982 . 40983) (symbol 40973 . 40981) (symbol 40961 . 40972) (symbol 40954 . 40960) (close-paren 40952 . 40953) (punctuation 40944 . 40945) (semantic-list 40940 . 40943) (symbol 40935 . 40939) (punctuation 40933 . 40934) (semantic-list 40929 . 40932) (symbol 40923 . 40928) (RETURN 40916 . 40922) (open-paren 40912 . 40913) (close-paren 40910 . 40911) (symbol 40909 . 40910) (symbol 40897 . 40908) (open-paren 40896 . 40897) (symbol 40887 . 40895) (symbol 40875 . 40886) (symbol 40868 . 40874) (close-paren 40800 . 40801) (punctuation 40798 . 40799) (semantic-list 40718 . 40798) (RETURN 40711 . 40717) (open-paren 40707 . 40708) (close-paren 40705 . 40706) (symbol 40704 . 40705) (symbol 40692 . 40703) (open-paren 40691 . 40692) (symbol 40687 . 40690) (symbol 40675 . 40686) (symbol 40668 . 40674) (close-paren 40666 . 40667) (punctuation 40664 . 40665) (semantic-list 40584 . 40664) (RETURN 40577 . 40583) (open-paren 40573 . 40574) (close-paren 40571 . 40572) (symbol 40570 . 40571) (symbol 40558 . 40569) (open-paren 40557 . 40558) (symbol 40553 . 40556) (symbol 40541 . 40552) (symbol 40534 . 40540) (close-paren 40466 . 40467) (punctuation 40461 . 40462) (semantic-list 40457 . 40460) (symbol 40447 . 40456) (punctuation 40446 . 40447) (open-paren 40442 . 40443) (close-paren 40440 . 40441) (symbol 40439 . 40440) (symbol 40427 . 40438) (punctuation 40425 . 40426) (symbol 40424 . 40425) (symbol 40412 . 40423) (open-paren 40411 . 40412) (symbol 40403 . 40410) (VOID 40398 . 40402) (symbol 40391 . 40397) (close-paren 40389 . 40390) (punctuation 40384 . 40385) (semantic-list 40380 . 40383) (symbol 40370 . 40379) (punctuation 40369 . 40370) (open-paren 40365 . 40366) (close-paren 40363 . 40364) (symbol 40362 . 40363) (symbol 40350 . 40361) (punctuation 40348 . 40349) (symbol 40347 . 40348) (symbol 40335 . 40346) (open-paren 40334 . 40335) (symbol 40326 . 40333) (VOID 40321 . 40325) (symbol 40314 . 40320) (close-paren 40143 . 40144) (punctuation "." 40126 . 40141) (symbol "u" 40126 . 40141) (punctuation ">" 40126 . 40141) (punctuation "-" 40126 . 40141) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40139 . 40140)))) 40126 . 40141) (symbol "XCONS" 40126 . 40141) (RETURN 40119 . 40125) (open-paren 40115 . 40116) (close-paren 40113 . 40114) (symbol 40112 . 40113) (symbol 40100 . 40111) (open-paren 40099 . 40100) (close-paren 40097 . 40098) (symbol 40093 . 40097) (open-paren 40092 . 40093) (symbol 40080 . 40091) (symbol 40073 . 40079) (close-paren 40070 . 40071) (punctuation ">" 40053 . 40068) (punctuation "-" 40053 . 40068) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40066 . 40067)))) 40053 . 40068) (symbol "XCONS" 40053 . 40068) (RETURN 40046 . 40052) (open-paren 40042 . 40043) (close-paren 40040 . 40041) (symbol 40039 . 40040) (symbol 40027 . 40038) (open-paren 40026 . 40027) (close-paren 40024 . 40025) (symbol 40020 . 40024) (open-paren 40019 . 40020) (symbol 40007 . 40018) (symbol 40000 . 40006) (close-paren 39961 . 39962) (punctuation 39955 . 39956) (symbol 39954 . 39955) (punctuation 39953 . 39954) (punctuation 39952 . 39953) (semantic-list 39949 . 39952) (symbol 39943 . 39948) (punctuation 39942 . 39943) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39928 . 39929) (symbol 39916 . 39927) (open-paren 39915 . 39916) (symbol 39905 . 39914) (punctuation 39903 . 39904) (symbol 39891 . 39902) (symbol 39884 . 39890) (close-paren 39882 . 39883) (punctuation 39876 . 39877) (punctuation 39875 . 39876) (semantic-list 39872 . 39875) (symbol 39866 . 39871) (punctuation 39865 . 39866) (RETURN 39858 . 39864) (open-paren 39854 . 39855) (close-paren 39852 . 39853) (symbol 39851 . 39852) (symbol 39839 . 39850) (open-paren 39838 . 39839) (symbol 39828 . 39837) (punctuation 39826 . 39827) (symbol 39814 . 39825) (symbol 39807 . 39813) (punctuation 39347 . 39348) (close-paren 39346 . 39347) (open-paren 39120 . 39121) (symbol 39108 . 39117) (STRUCT 39091 . 39097) (close-paren 39013 . 39014) (punctuation 39011 . 39012) (semantic-list #("((ok) ? (void) 0 : (void) wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 39009 . 39010) ("predicate" symbol "predicate" 38998 . 39007) ("ok" symbol "ok" 38994 . 38996)))) 38975 . 39011) (open-paren 38971 . 38972) (close-paren 38969 . 38970) (symbol 38968 . 38969) (symbol 38956 . 38967) (punctuation 38954 . 38955) (symbol 38945 . 38954) (symbol 38933 . 38944) (punctuation 38931 . 38932) (symbol 38929 . 38931) (INT 38925 . 38928) (open-paren 38924 . 38925) (close-paren 38922 . 38923) (symbol 38912 . 38922) (open-paren 38911 . 38912) (VOID 38906 . 38910) (symbol 38899 . 38905) (close-paren 38873 . 38874) (RETURN 38863 . 38869) (punctuation 38859 . 38860) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "INTEGERP" 38826 . 38834)))) 38817 . 38859) (open-paren 38765 . 38766) (close-paren 38763 . 38764) (symbol 38762 . 38763) (punctuation 38761 . 38762) (VOID 38756 . 38760) (open-paren 38755 . 38756) (symbol 38734 . 38754) (symbol 38722 . 38733) (symbol 38715 . 38721) (close-paren 38712 . 38713) (RETURN 38682 . 38688) (open-paren 38678 . 38679) (close-paren 38676 . 38677) (symbol 38675 . 38676) (symbol 38663 . 38674) (open-paren 38662 . 38663) (symbol 38654 . 38661) (punctuation 38652 . 38653) (VOID 38647 . 38651) (symbol 38640 . 38646) (close-paren 36349 . 36350) (punctuation 36339 . 36340) (RETURN 36306 . 36312) (open-paren 36302 . 36303) (close-paren 36300 . 36301) (symbol 36295 . 36300) (INT 36291 . 36294) (open-paren 36290 . 36291) (symbol 36270 . 36289) (symbol 36258 . 36269) (symbol 36251 . 36257) (close-paren 36248 . 36249) (RETURN 36238 . 36244) (punctuation 36234 . 36235) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 36215 . 36222)))) 36206 . 36234) (open-paren 36129 . 36130) (close-paren 36127 . 36128) (symbol 36124 . 36127) (punctuation 36123 . 36124) (symbol 36111 . 36122) (STRUCT 36104 . 36110) (open-paren 36103 . 36104) (symbol 36086 . 36102) (symbol 36074 . 36085) (symbol 36067 . 36073) (close-paren 36064 . 36065) (RETURN 36054 . 36060) (punctuation 36050 . 36051) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XTYPE" 36005 . 36010)))) 35996 . 36050) (open-paren 35947 . 35948) (close-paren 35945 . 35946) (symbol 35941 . 35945) (symbol 35931 . 35940) (ENUM 35926 . 35930) (punctuation 35924 . 35925) (symbol 35921 . 35924) (punctuation 35920 . 35921) (VOID 35915 . 35919) (open-paren 35914 . 35915) (symbol 35900 . 35913) (symbol 35888 . 35899) (symbol 35881 . 35887) (close-paren 35821 . 35822) (RETURN 35785 . 35791) (punctuation 35781 . 35782) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 35763 . 35776)))) 35754 . 35781) (open-paren 35750 . 35751) (close-paren 35748 . 35749) (symbol 35747 . 35748) (symbol 35735 . 35746) (open-paren 35734 . 35735) (symbol 35721 . 35733) (punctuation 35719 . 35720) (symbol 35702 . 35718) (STRUCT 35695 . 35701) (symbol 35688 . 35694) (close-paren 35685 . 35686) (RETURN 35649 . 35655) (punctuation 35645 . 35646) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 35624 . 35640)))) 35615 . 35645) (open-paren 35611 . 35612) (close-paren 35609 . 35610) (symbol 35608 . 35609) (symbol 35596 . 35607) (open-paren 35595 . 35596) (symbol 35579 . 35594) (punctuation 35577 . 35578) (symbol 35557 . 35576) (STRUCT 35550 . 35556) (symbol 35543 . 35549) (close-paren 35540 . 35541) (RETURN 35504 . 35510) (punctuation 35500 . 35501) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 35483 . 35495)))) 35474 . 35500) (open-paren 35470 . 35471) (close-paren 35468 . 35469) (symbol 35467 . 35468) (symbol 35455 . 35466) (open-paren 35454 . 35455) (symbol 35442 . 35453) (punctuation 35440 . 35441) (symbol 35424 . 35439) (STRUCT 35417 . 35423) (symbol 35410 . 35416) (close-paren 35407 . 35408) (RETURN 35371 . 35377) (punctuation 35367 . 35368) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFERP" 35355 . 35362)))) 35346 . 35367) (open-paren 35342 . 35343) (close-paren 35340 . 35341) (symbol 35339 . 35340) (symbol 35327 . 35338) (open-paren 35326 . 35327) (symbol 35318 . 35325) (punctuation 35316 . 35317) (symbol 35309 . 35315) (STRUCT 35302 . 35308) (symbol 35295 . 35301) (close-paren 35292 . 35293) (RETURN 35256 . 35262) (punctuation 35252 . 35253) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 35242 . 35247)))) 35233 . 35252) (open-paren 35229 . 35230) (close-paren 35227 . 35228) (symbol 35226 . 35227) (symbol 35214 . 35225) (open-paren 35213 . 35214) (symbol 35207 . 35212) (punctuation 35205 . 35206) (symbol 35195 . 35204) (STRUCT 35188 . 35194) (symbol 35181 . 35187) (close-paren 35178 . 35179) (RETURN 35142 . 35148) (punctuation 35138 . 35139) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TERMINALP" 35124 . 35133)))) 35115 . 35138) (open-paren 35111 . 35112) (close-paren 35109 . 35110) (symbol 35108 . 35109) (symbol 35096 . 35107) (open-paren 35095 . 35096) (symbol 35085 . 35094) (punctuation 35083 . 35084) (symbol 35074 . 35082) (STRUCT 35067 . 35073) (symbol 35060 . 35066) (close-paren 35057 . 35058) (RETURN 35021 . 35027) (punctuation 35017 . 35018) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "WINDOWP" 35005 . 35012)))) 34996 . 35017) (open-paren 34992 . 34993) (close-paren 34990 . 34991) (symbol 34989 . 34990) (symbol 34977 . 34988) (open-paren 34976 . 34977) (symbol 34968 . 34975) (punctuation 34966 . 34967) (symbol 34959 . 34965) (STRUCT 34952 . 34958) (symbol 34945 . 34951) (close-paren 34942 . 34943) (RETURN 34906 . 34912) (punctuation 34902 . 34903) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "PROCESSP" 34889 . 34897)))) 34880 . 34902) (open-paren 34876 . 34877) (close-paren 34874 . 34875) (symbol 34873 . 34874) (symbol 34861 . 34872) (open-paren 34860 . 34861) (symbol 34851 . 34859) (punctuation 34849 . 34850) (symbol 34836 . 34848) (STRUCT 34829 . 34835) (symbol 34822 . 34828) (close-paren 34791 . 34792) (RETURN 34760 . 34766) (punctuation 34756 . 34757) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 34745 . 34751)))) 34736 . 34756) (open-paren 34732 . 34733) (close-paren 34730 . 34731) (symbol 34729 . 34730) (symbol 34717 . 34728) (open-paren 34716 . 34717) (symbol 34709 . 34715) (punctuation 34707 . 34708) (symbol 34696 . 34706) (STRUCT 34689 . 34695) (symbol 34682 . 34688) (close-paren 34549 . 34550) (RETURN 34517 . 34523) (punctuation 34513 . 34514) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 34501 . 34508)))) 34492 . 34513) (open-paren 34488 . 34489) (close-paren 34486 . 34487) (symbol 34485 . 34486) (symbol 34473 . 34484) (open-paren 34472 . 34473) (symbol 34464 . 34471) (punctuation 34462 . 34463) (symbol 34450 . 34461) (STRUCT 34443 . 34449) (symbol 34436 . 34442) (close-paren 34433 . 34434) (RETURN 34397 . 34403) (punctuation 34393 . 34394) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 34377 . 34388)))) 34368 . 34393) (open-paren 34364 . 34365) (close-paren 34362 . 34363) (symbol 34361 . 34362) (symbol 34349 . 34360) (open-paren 34348 . 34349) (symbol 34340 . 34347) (punctuation 34338 . 34339) (symbol 34326 . 34337) (STRUCT 34319 . 34325) (symbol 34312 . 34318) (close-paren 34309 . 34310) (punctuation 34307 . 34308) (semantic-list #("(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 0 1 (macros (("a" symbol "a" 34305 . 34306)))) 34291 . 34307) (RETURN 34284 . 34290) (open-paren 34280 . 34281) (close-paren 34278 . 34279) (symbol 34277 . 34278) (symbol 34265 . 34276) (open-paren 34264 . 34265) (close-paren 34262 . 34263) (symbol 34257 . 34262) (open-paren 34256 . 34257) (punctuation 34254 . 34255) (symbol 34244 . 34253) (STRUCT 34237 . 34243) (symbol 34230 . 34236) (close-paren 34170 . 34171) (punctuation 34161 . 34162) (symbol 34157 . 34160) (punctuation 34155 . 34156) (symbol 34149 . 34154) (punctuation 34147 . 34148) (punctuation 34146 . 34147) (symbol 34142 . 34145) (punctuation 34140 . 34141) (symbol 34134 . 34139) (punctuation 34132 . 34133) (symbol 34126 . 34131) (punctuation 34124 . 34125) (symbol 34120 . 34123) (RETURN 34113 . 34119) (open-paren 34109 . 34110) (close-paren 34107 . 34108) (symbol 34102 . 34107) (symbol 34092 . 34101) (punctuation 34090 . 34091) (symbol 34087 . 34090) (symbol 34077 . 34086) (punctuation 34075 . 34076) (symbol 34070 . 34075) (symbol 34060 . 34069) (open-paren 34059 . 34060) (symbol 34044 . 34058) (symbol 34034 . 34043) (symbol 34027 . 34033) (close-paren 33757 . 33758) (punctuation 33755 . 33756) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 33753 . 33754) ("x" symbol "x" 33750 . 33751)))) 33739 . 33755) (RETURN 33732 . 33738) (open-paren 33728 . 33729) (close-paren 33726 . 33727) (symbol 33725 . 33726) (symbol 33713 . 33724) (punctuation 33711 . 33712) (symbol 33710 . 33711) (symbol 33698 . 33709) (open-paren 33697 . 33698) (close-paren 33695 . 33696) (symbol 33693 . 33695) (open-paren 33692 . 33693) (BOOL 33687 . 33691) (symbol 33680 . 33686) (close-paren 33625 . 33626) (semantic-list 33605 . 33622) (punctuation 33603 . 33604) (punctuation 33594 . 33595) (semantic-list 33590 . 33593) (symbol 33578 . 33589) (punctuation 33576 . 33577) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 33564 . 33575) (RETURN 33557 . 33563) (punctuation 33523 . 33524) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 33487 . 33488)))) 33478 . 33523) (open-paren 33474 . 33475) (close-paren 33472 . 33473) (symbol 33471 . 33472) (symbol 33461 . 33470) (open-paren 33460 . 33461) (symbol 33448 . 33459) (symbol 33436 . 33447) (symbol 33429 . 33435) (close-paren 33345 . 33346) (RETURN 33320 . 33326) (open-paren 33316 . 33317) (close-paren 33314 . 33315) (symbol 33313 . 33314) (symbol 33301 . 33312) (open-paren 33300 . 33301) (close-paren 33298 . 33299) (symbol 33293 . 33298) (open-paren 33292 . 33293) (symbol 33282 . 33291) (symbol 33275 . 33281) (close-paren 33117 . 33118) (punctuation 33115 . 33116) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 33108 . 33115) (punctuation 33106 . 33107) (symbol 33104 . 33105) (punctuation 33102 . 33103) (symbol 33090 . 33101) (punctuation 33088 . 33089) (punctuation 33087 . 33088) (symbol 33085 . 33086) (punctuation 33083 . 33084) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 33071 . 33082) (RETURN 33064 . 33070) (open-paren 33034 . 33035) (close-paren 33032 . 33033) (symbol 33031 . 33032) (symbol 33019 . 33030) (open-paren 33018 . 33019) (symbol 33012 . 33017) (symbol 33001 . 33011) (symbol 32994 . 33000) (close-paren 32914 . 32915) (semantic-list 32902 . 32910) (RETURN 32895 . 32901) (punctuation 32891 . 32892) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 32884 . 32891) (punctuation 32882 . 32883) (semantic-list 32878 . 32881) (symbol 32874 . 32877) (punctuation 32872 . 32873) (symbol 32867 . 32871) (punctuation 32865 . 32866) (semantic-list 32861 . 32864) (symbol 32857 . 32860) (punctuation 32855 . 32856) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 32843 . 32854) (punctuation 32841 . 32842) (symbol 32839 . 32840) (symbol 32830 . 32838) (open-paren 32826 . 32827) (close-paren 32824 . 32825) (symbol 32820 . 32824) (INT 32816 . 32819) (punctuation 32814 . 32815) (symbol 32813 . 32814) (symbol 32801 . 32812) (open-paren 32800 . 32801) (symbol 32793 . 32799) (punctuation 32791 . 32792) (VOID 32786 . 32790) (symbol 32779 . 32785) (close-paren 32715 . 32716) (RETURN 32705 . 32711) (punctuation 32616 . 32617) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 32604 . 32611)))) 32595 . 32616) (open-paren 32591 . 32592) (close-paren 32589 . 32590) (symbol 32588 . 32589) (symbol 32576 . 32587) (open-paren 32575 . 32576) (symbol 32567 . 32574) (punctuation 32565 . 32566) (symbol 32553 . 32564) (STRUCT 32546 . 32552) (symbol 32539 . 32545) (close-paren 32498 . 32499) (punctuation 32487 . 32488) (punctuation 32486 . 32487) (symbol 32484 . 32485) (punctuation 32482 . 32483) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 32474 . 32481) (punctuation 32473 . 32474) (punctuation 32471 . 32472) (symbol 32469 . 32470) (punctuation 32467 . 32468) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 32455 . 32466) (RETURN 32448 . 32454) (open-paren 32418 . 32419) (close-paren 32416 . 32417) (symbol 32415 . 32416) (symbol 32403 . 32414) (open-paren 32402 . 32403) (symbol 32396 . 32401) (symbol 32386 . 32395) (ENUM 32381 . 32385) (symbol 32374 . 32380) (close-paren 32346 . 32347) (RETURN 32336 . 32342) (punctuation 32312 . 32313) (semantic-list 32295 . 32312) (punctuation 32293 . 32294) (semantic-list 32289 . 32292) (symbol 32285 . 32288) (punctuation 32283 . 32284) (semantic-list 32279 . 32282) (symbol 32274 . 32278) (punctuation 32272 . 32273) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 32260 . 32271) (punctuation 32258 . 32259) (symbol 32256 . 32257) (symbol 32246 . 32255) (open-paren 32212 . 32213) (close-paren 32210 . 32211) (symbol 32209 . 32210) (symbol 32197 . 32208) (open-paren 32196 . 32197) (symbol 32187 . 32195) (symbol 32177 . 32186) (symbol 32170 . 32176) (close-paren 31996 . 31997) (punctuation 31981 . 31982) (punctuation 31980 . 31981) (symbol 31978 . 31979) (RETURN 31971 . 31977) (semantic-list 31909 . 31968) (semantic-list 31889 . 31904) (IF 31886 . 31888) (open-paren 31857 . 31858) (close-paren 31855 . 31856) (symbol 31854 . 31855) (symbol 31842 . 31853) (open-paren 31841 . 31842) (symbol 31836 . 31840) (symbol 31826 . 31835) (symbol 31819 . 31825) (close-paren 31770 . 31771) (RETURN 31754 . 31760) (semantic-list 31694 . 31751) (ELSE 31685 . 31689) (semantic-list 31606 . 31682) (semantic-list 31588 . 31601) (IF 31585 . 31587) (open-paren 31551 . 31552) (close-paren 31549 . 31550) (symbol 31548 . 31549) (symbol 31538 . 31547) (open-paren 31537 . 31538) (symbol 31525 . 31536) (symbol 31513 . 31524) (symbol 31506 . 31512) (punctuation ";" 30378 . 30409) (symbol "EXTERNALLY_VISIBLE" 30270 . 30314) (symbol "VALMASK" 30270 . 30314) (CONST "const" 30270 . 30314) (symbol "EMACS_INT" 30270 . 30314) (EXTERN "extern" 30270 . 30314) (punctuation 29969 . 29970) (close-paren 29968 . 29969) (symbol 29943 . 29965) (punctuation 29941 . 29942) (punctuation 29940 . 29941) (number 29935 . 29939) (punctuation 29933 . 29934) (symbol 29918 . 29932) (punctuation 29912 . 29913) (symbol 29890 . 29912) (punctuation 29888 . 29889) (symbol 29865 . 29887) (punctuation 29863 . 29864) (symbol 29840 . 29862) (punctuation 29772 . 29773) (semantic-list 29700 . 29772) (punctuation 29698 . 29699) (symbol 29675 . 29697) (punctuation 29669 . 29670) (number 29667 . 29669) (punctuation 29665 . 29666) (symbol 29642 . 29664) (punctuation 29490 . 29491) (number 29489 . 29490) (punctuation 29487 . 29488) (semantic-list 29457 . 29486) (punctuation 29455 . 29456) (symbol 29432 . 29454) (punctuation 29426 . 29427) (number 29424 . 29426) (punctuation 29422 . 29423) (symbol 29399 . 29421) (open-paren 29026 . 29027) (symbol 29009 . 29023) (ENUM 29004 . 29008) (punctuation 29001 . 29002) (close-paren 29000 . 29001) (symbol 28930 . 28939) (punctuation 28926 . 28927) (symbol 28907 . 28926) (punctuation 28903 . 28904) (symbol 28888 . 28903) (punctuation 28884 . 28885) (symbol 28871 . 28884) (punctuation 28802 . 28803) (symbol 28785 . 28802) (punctuation 28781 . 28782) (symbol 28769 . 28781) (punctuation 28765 . 28766) (symbol 28755 . 28765) (punctuation 28751 . 28752) (symbol 28742 . 28751) (punctuation 28738 . 28739) (symbol 28713 . 28738) (punctuation 28709 . 28710) (symbol 28696 . 28709) (punctuation 28692 . 28693) (symbol 28677 . 28692) (punctuation 28673 . 28674) (symbol 28662 . 28673) (punctuation 28658 . 28659) (symbol 28642 . 28658) (punctuation 28638 . 28639) (symbol 28627 . 28638) (punctuation 28623 . 28624) (symbol 28613 . 28623) (punctuation 28609 . 28610) (symbol 28597 . 28609) (punctuation 28593 . 28594) (symbol 28584 . 28593) (punctuation 28580 . 28581) (symbol 28562 . 28580) (open-paren 28558 . 28559) (symbol 28548 . 28557) (ENUM 28543 . 28547) (punctuation ";" 28301 . 28342) (symbol "EXTERNALLY_VISIBLE" 28187 . 28241) (symbol "PSEUDOVECTOR_FLAG" 28187 . 28241) (CONST "const" 28187 . 28241) (symbol "ptrdiff_t" 28187 . 28241) (EXTERN "extern" 28187 . 28241) (punctuation ";" 28036 . 28075) (symbol "EXTERNALLY_VISIBLE" 27946 . 27998) (symbol "ARRAY_MARK_FLAG" 27946 . 27998) (CONST "const" 27946 . 27998) (symbol "ptrdiff_t" 27946 . 27998) (EXTERN "extern" 27946 . 27998) (close-paren 27862 . 27863) (punctuation 27860 . 27861) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 27858 . 27859)))) 27846 . 27860) (RETURN 27839 . 27845) (open-paren 27835 . 27836) (close-paren 27833 . 27834) (symbol 27832 . 27833) (symbol 27822 . 27831) (open-paren 27821 . 27822) (close-paren 27819 . 27820) (symbol 27816 . 27819) (open-paren 27815 . 27816) (symbol 27803 . 27814) (symbol 27796 . 27802) (close-paren 27793 . 27794) (punctuation 27791 . 27792) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 27789 . 27790)))) 27777 . 27791) (RETURN 27770 . 27776) (open-paren 27766 . 27767) (close-paren 27764 . 27765) (symbol 27763 . 27764) (symbol 27751 . 27762) (open-paren 27750 . 27751) (close-paren 27748 . 27749) (symbol 27745 . 27748) (open-paren 27744 . 27745) (symbol 27734 . 27743) (symbol 27727 . 27733) (punctuation 24774 . 24775) (close-paren 24773 . 24774) (open-paren 23227 . 23228) (symbol 23215 . 23226) (STRUCT 23208 . 23214) (punctuation 23205 . 23206) (close-paren 23204 . 23205) (number 23202 . 23203) (punctuation 23200 . 23201) (symbol 23183 . 23199) (punctuation 23179 . 23180) (number 23178 . 23179) (punctuation 23176 . 23177) (symbol 23159 . 23175) (punctuation 23155 . 23156) (number 23154 . 23155) (punctuation 23152 . 23153) (symbol 23135 . 23150) (punctuation 23131 . 23132) (number 23130 . 23131) (punctuation 23128 . 23129) (symbol 23111 . 23126) (open-paren 23107 . 23108) (symbol 23091 . 23106) (ENUM 23086 . 23090) (punctuation 23083 . 23084) (close-paren 23082 . 23083) (number 23080 . 23081) (punctuation 23078 . 23079) (symbol 23043 . 23077) (punctuation 23039 . 23040) (number 23038 . 23039) (punctuation 23036 . 23037) (symbol 23020 . 23035) (punctuation 23016 . 23017) (number 23015 . 23016) (punctuation 23013 . 23014) (symbol 22995 . 23012) (open-paren 22991 . 22992) (symbol 22975 . 22990) (ENUM 22970 . 22974) (punctuation 22929 . 22930) (close-paren 22928 . 22929) (symbol 22917 . 22928) (open-paren 22916 . 22917) (symbol 22902 . 22915) (DOUBLE 22895 . 22901) (EXTERN 22888 . 22894) (punctuation 22666 . 22667) (close-paren 22665 . 22666) (symbol 22654 . 22665) (punctuation 22652 . 22653) (symbol 22641 . 22652) (open-paren 22640 . 22641) (symbol 22627 . 22639) (VOID 22622 . 22626) (EXTERN 22605 . 22611) (punctuation 22603 . 22604) (close-paren 22602 . 22603) (symbol 22591 . 22602) (punctuation 22589 . 22590) (symbol 22578 . 22589) (open-paren 22577 . 22578) (symbol 22557 . 22576) (symbol 22545 . 22556) (EXTERN 22528 . 22534) (punctuation 22499 . 22500) (close-paren 22498 . 22499) (symbol 22487 . 22498) (punctuation 22485 . 22486) (INT 22482 . 22485) (punctuation 22480 . 22481) (symbol 22469 . 22480) (open-paren 22468 . 22469) (symbol 22453 . 22467) (VOID 22448 . 22452) (EXTERN 22441 . 22447) (punctuation 22439 . 22440) (close-paren 22438 . 22439) (INT 22435 . 22438) (punctuation 22433 . 22434) (symbol 22422 . 22433) (open-paren 22421 . 22422) (symbol 22406 . 22420) (symbol 22394 . 22405) (EXTERN 22387 . 22393) (punctuation 22355 . 22356) (close-paren 22354 . 22355) (INT 22351 . 22354) (punctuation 22349 . 22350) (symbol 22338 . 22349) (open-paren 22337 . 22338) (close-paren 22335 . 22336) (symbol 22329 . 22335) (open-paren 22328 . 22329) (punctuation 22327 . 22328) (VOID 22322 . 22326) (symbol 22315 . 22321) (punctuation 22313 . 22314) (close-paren 22312 . 22313) (symbol 22301 . 22312) (open-paren 22300 . 22301) (close-paren 22298 . 22299) (symbol 22291 . 22298) (open-paren 22290 . 22291) (punctuation 22289 . 22290) (symbol 22277 . 22288) (STRUCT 22270 . 22276) (symbol 22263 . 22269) (punctuation 22261 . 22262) (close-paren 22260 . 22261) (symbol 22249 . 22260) (open-paren 22248 . 22249) (symbol 22237 . 22247) (punctuation 22236 . 22237) (symbol 22221 . 22235) (STRUCT 22214 . 22220) (symbol 22207 . 22213) (punctuation 22205 . 22206) (close-paren 22204 . 22205) (symbol 22193 . 22204) (open-paren 22192 . 22193) (symbol 22180 . 22191) (punctuation 22179 . 22180) (symbol 22163 . 22178) (STRUCT 22156 . 22162) (symbol 22149 . 22155) (punctuation 22147 . 22148) (close-paren 22146 . 22147) (symbol 22135 . 22146) (open-paren 22134 . 22135) (symbol 22124 . 22133) (BOOL 22119 . 22123) (symbol 22112 . 22118) (punctuation 22110 . 22111) (close-paren 22109 . 22110) (symbol 22098 . 22109) (open-paren 22097 . 22098) (symbol 22089 . 22096) (BOOL 22084 . 22088) (symbol 22077 . 22083) (punctuation 22075 . 22076) (close-paren 22074 . 22075) (symbol 22063 . 22074) (open-paren 22062 . 22063) (close-paren 22060 . 22061) (symbol 22049 . 22060) (open-paren 22048 . 22049) (BOOL 22043 . 22047) (symbol 22036 . 22042) (punctuation 22034 . 22035) (close-paren 22033 . 22034) (symbol 22022 . 22033) (open-paren 22021 . 22022) (close-paren 22019 . 22020) (symbol 22012 . 22019) (open-paren 22011 . 22012) (BOOL 22006 . 22010) (symbol 21999 . 22005) (punctuation 21997 . 21998) (close-paren 21996 . 21997) (symbol 21985 . 21996) (open-paren 21984 . 21985) (symbol 21978 . 21983) (BOOL 21973 . 21977) (symbol 21966 . 21972) (punctuation 21964 . 21965) (close-paren 21963 . 21964) (symbol 21952 . 21963) (open-paren 21951 . 21952) (symbol 21934 . 21950) (BOOL 21929 . 21933) (symbol 21922 . 21928) (punctuation 21920 . 21921) (close-paren 21919 . 21920) (symbol 21908 . 21919) (open-paren 21907 . 21908) (symbol 21899 . 21906) (BOOL 21894 . 21898) (symbol 21887 . 21893) (punctuation 21885 . 21886) (close-paren 21884 . 21885) (symbol 21873 . 21884) (punctuation 21860 . 21861) (symbol 21851 . 21860) (punctuation 21849 . 21850) (symbol 21838 . 21849) (open-paren 21837 . 21838) (symbol 21809 . 21836) (VOID 21804 . 21808) (symbol 21797 . 21803) (punctuation 21673 . 21674) (close-paren 21672 . 21673) (symbol 21661 . 21672) (open-paren 21660 . 21661) (symbol 21649 . 21659) (BOOL 21644 . 21648) (symbol 21637 . 21643) (punctuation 21635 . 21636) (close-paren 21634 . 21635) (symbol 21623 . 21634) (open-paren 21622 . 21623) (symbol 21610 . 21621) (BOOL 21605 . 21609) (symbol 21598 . 21604) (punctuation 21596 . 21597) (close-paren 21595 . 21596) (INT 21592 . 21595) (punctuation 21590 . 21591) (symbol 21579 . 21590) (open-paren 21578 . 21579) (symbol 21564 . 21577) (BOOL 21559 . 21563) (symbol 21552 . 21558) (punctuation 21550 . 21551) (close-paren 21549 . 21550) (symbol 21538 . 21549) (open-paren 21537 . 21538) (symbol 21528 . 21536) (BOOL 21523 . 21527) (symbol 21516 . 21522) (punctuation 21514 . 21515) (close-paren 21513 . 21514) (symbol 21502 . 21513) (open-paren 21501 . 21502) (symbol 21492 . 21500) (BOOL 21487 . 21491) (symbol 21480 . 21486) (punctuation 21478 . 21479) (close-paren 21477 . 21478) (symbol 21466 . 21477) (open-paren 21465 . 21466) (close-paren 21463 . 21464) (symbol 21459 . 21463) (open-paren 21458 . 21459) (BOOL 21453 . 21457) (symbol 21446 . 21452) (punctuation 21444 . 21445) (close-paren 21443 . 21444) (symbol 21432 . 21443) (open-paren 21431 . 21432) (close-paren 21429 . 21430) (symbol 21424 . 21429) (open-paren 21423 . 21424) (BOOL 21418 . 21422) (symbol 21411 . 21417) (punctuation 21409 . 21410) (close-paren 21408 . 21409) (symbol 21397 . 21408) (open-paren 21396 . 21397) (close-paren 21394 . 21395) (symbol 21387 . 21394) (open-paren 21386 . 21387) (BOOL 21381 . 21385) (symbol 21374 . 21380) (punctuation 21372 . 21373) (close-paren 21371 . 21372) (symbol 21360 . 21371) (open-paren 21359 . 21360) (close-paren 21357 . 21358) (symbol 21349 . 21357) (open-paren 21348 . 21349) (BOOL 21343 . 21347) (symbol 21336 . 21342) (punctuation 21334 . 21335) (close-paren 21333 . 21334) (symbol 21322 . 21333) (open-paren 21321 . 21322) (symbol 21311 . 21320) (BOOL 21306 . 21310) (symbol 21299 . 21305) (punctuation 21297 . 21298) (close-paren 21296 . 21297) (symbol 21285 . 21296) (open-paren 21284 . 21285) (close-paren 21282 . 21283) (symbol 21276 . 21282) (open-paren 21275 . 21276) (BOOL 21270 . 21274) (symbol 21263 . 21269) (punctuation 21261 . 21262) (close-paren 21260 . 21261) (symbol 21249 . 21260) (open-paren 21248 . 21249) (close-paren 21246 . 21247) (symbol 21241 . 21246) (open-paren 21240 . 21241) (BOOL 21235 . 21239) (symbol 21228 . 21234) (punctuation 21226 . 21227) (close-paren 21225 . 21226) (symbol 21216 . 21225) (punctuation 21214 . 21215) (symbol 21203 . 21214) (open-paren 21202 . 21203) (symbol 21181 . 21201) (symbol 21169 . 21180) (symbol 21162 . 21168) (punctuation 21160 . 21161) (close-paren 21159 . 21160) (symbol 21148 . 21159) (open-paren 21147 . 21148) (symbol 21134 . 21146) (BOOL 21129 . 21133) (symbol 21122 . 21128) (punctuation 21120 . 21121) (close-paren 21119 . 21120) (symbol 21108 . 21119) (open-paren 21107 . 21108) (symbol 21099 . 21106) (BOOL 21094 . 21098) (symbol 21087 . 21093) (punctuation 21085 . 21086) (close-paren 21084 . 21085) (punctuation 21083 . 21084) (symbol 21074 . 21082) (UNION 21068 . 21073) (open-paren 21067 . 21068) (symbol 21052 . 21066) (BOOL 21047 . 21051) (symbol 21040 . 21046) (punctuation 21038 . 21039) (close-paren 21037 . 21038) (symbol 21026 . 21037) (open-paren 21025 . 21026) (symbol 21011 . 21024) (BOOL 21006 . 21010) (symbol 20999 . 21005) (UNION 20983 . 20988) (punctuation 20836 . 20837) (close-paren 20835 . 20836) (symbol 20829 . 20834) (punctuation 20827 . 20828) (symbol 20804 . 20826) (open-paren 20802 . 20803) (symbol 20779 . 20801) (ENUM 20774 . 20778) (punctuation 17523 . 17524) (close-paren 17522 . 17523) (symbol 17453 . 17472) (punctuation 17401 . 17402) (symbol 17382 . 17401) (punctuation 17335 . 17336) (symbol 17323 . 17335) (punctuation 17285 . 17286) (symbol 17272 . 17285) (punctuation 17231 . 17232) (symbol 17219 . 17231) (open-paren 17213 . 17214) (symbol 17197 . 17210) (ENUM 17192 . 17196) (punctuation 17031 . 17032) (close-paren 17030 . 17031) (symbol 17012 . 17027) (punctuation 16943 . 16944) (symbol 16928 . 16943) (punctuation 16761 . 16762) (symbol 16742 . 16761) (punctuation 16736 . 16737) (symbol 16716 . 16736) (punctuation 16710 . 16711) (symbol 16693 . 16710) (punctuation 16687 . 16688) (symbol 16671 . 16687) (punctuation 16665 . 16666) (number 16659 . 16665) (punctuation 16657 . 16658) (symbol 16642 . 16656) (open-paren 16636 . 16637) (symbol 16619 . 16633) (ENUM 16614 . 16618) (punctuation 16290 . 16291) (close-paren 16289 . 16290) (number 16285 . 16286) (punctuation 16283 . 16284) (symbol 16272 . 16282) (punctuation 16265 . 16266) (number 16264 . 16265) (punctuation 16262 . 16263) (number 16260 . 16261) (punctuation 16258 . 16259) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 16246 . 16257) (punctuation 16244 . 16245) (symbol 16234 . 16243) (punctuation 16164 . 16165) (number 16163 . 16164) (punctuation 16161 . 16162) (symbol 16145 . 16160) (punctuation 15881 . 15882) (number 15880 . 15881) (punctuation 15878 . 15879) (symbol 15866 . 15877) (punctuation 15719 . 15720) (number 15718 . 15719) (punctuation 15716 . 15717) (number 15714 . 15715) (punctuation 15712 . 15713) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 15700 . 15711) (punctuation 15698 . 15699) (symbol 15688 . 15697) (punctuation 15682 . 15683) (number 15681 . 15682) (punctuation 15679 . 15680) (symbol 15669 . 15678) (punctuation 15608 . 15609) (number 15607 . 15608) (punctuation 15605 . 15606) (symbol 15595 . 15604) (punctuation 15468 . 15469) (number 15467 . 15468) (punctuation 15465 . 15466) (symbol 15453 . 15464) (open-paren 15378 . 15379) (symbol 15366 . 15375) (ENUM 15361 . 15365) (close-paren 13107 . 13108) (semantic-list 13075 . 13107) (punctuation 13073 . 13074) (punctuation 13071 . 13072) (punctuation 13070 . 13071) (symbol 13045 . 13062) (symbol 13037 . 13044) (punctuation 13035 . 13036) (punctuation 13033 . 13034) (punctuation 13032 . 13033) (symbol 13019 . 13031) (symbol 13011 . 13018) (punctuation 13009 . 13010) (punctuation 13007 . 13008) (punctuation 13006 . 13007) (punctuation 9401 . 9402) (punctuation 9400 . 9401) (symbol 9394 . 9399) (string 9332 . 9393) (string 9263 . 9328) (symbol 9257 . 9262) (symbol 9255 . 9256) (punctuation ";" 9174 . 9209) (symbol "EXTERNALLY_VISIBLE" 9083 . 9126) (CONST "const" 9083 . 9126) (symbol "USE_LSB_TAG" 9083 . 9126) (EXTERN "extern" 9083 . 9126) (string 8370 . 8415) (symbol 8364 . 8369) (symbol 8362 . 8363) (spp-macro-def 8001 . 8012) (semantic-list 4101 . 4112) (SIZEOF 4094 . 4100) (punctuation 4092 . 4093) (semantic-list 4046 . 4056) (SIZEOF 4039 . 4045) (punctuation 4037 . 4038) (semantic-list 3994 . 4001) (SIZEOF 3987 . 3993) (punctuation 3985 . 3986) (number 3849 . 3850) (punctuation 3847 . 3848) (punctuation 3846 . 3847) (semantic-list 3821 . 3845) (punctuation 3819 . 3820) (punctuation 3818 . 3819) (semantic-list 3615 . 3626) (SIZEOF 3608 . 3614) (punctuation 3606 . 3607) (number "8" 3230 . 3255) (spp-macro-def 3194 . 3219) (punctuation 3184 . 3185) (LONG 2873 . 2877) (UNSIGNED 2864 . 2872) (TYPEDEF 2856 . 2863) (LONG 2831 . 2835) (TYPEDEF 2823 . 2830) (string 2436 . 2462) (symbol 2430 . 2435) (symbol 2427 . 2428) (punctuation ";" 2123 . 2157) (symbol "EXTERNALLY_VISIBLE" 2060 . 2101) (CONST "const" 2060 . 2101) (symbol "GCTYPEBITS" 2060 . 2101) (EXTERN "extern" 2060 . 2101) (symbol 1032 . 1051))
      :lexical-table 
        '(("pMd" . ((symbol "pI" 4618 . 4620) (string "\"d\"" 4620 . 4623)))
          ("LISP_INITIALLY_ZERO" . ((symbol "LISP_INITIALLY" 20903 . 20917) (semantic-list "(0)" 20918 . 20921)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 25333 . 25339)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 28024 . 28035)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 30332 . 30377)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 38092 . 38098) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 38099 . 38137)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 91749 . 91768) . 
              ((DO "do" 91774 . 91776) (semantic-list "{						\\
    static struct Lisp_Intfwd i_fwd;		\\
    defvar_int (&i_fwd, lname, &globals.f_ ## vname);		\\
  }" 91777 . 91886) (WHILE "while" 91887 . 91892) (semantic-list "(false)" 91893 . 91900)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 92880 . 92886) . ((symbol "longjmp" 92887 . 92894) (semantic-list "(j, v)" 92895 . 92901)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 148146 . 148161) . 
              ((symbol "Lisp_Object" 148170 . 148181) (symbol "name" 148182 . 148186) (punctuation "=" 148187 . 148188) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 148189 . 148302)))
          ("GCALIGNMENT" . ((number "8" 8013 . 8014)))
          ("EMACS_LISP_H")
          ("max" (spp-arg-list ("a" "b") 1846 . 1852) . ((semantic-list "((a) > (b) ? (a) : (b))" 1853 . 1876)))
          ("pD" . ((string "\"ll\"" 5114 . 5118)))
          ("case_Lisp_Int" . 
              ((CASE "case" 14962 . 14966) (symbol "Lisp_Int0" 14967 . 14976) (punctuation ":" 14976 . 14977) (CASE "case" 14978 . 14982) (symbol "Lisp_Int1" 14983 . 14992)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 25242 . 25268)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 25361 . 25374)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 34668 . 34673) . ((symbol "i##sym" 34674 . 34680)))
          ("XSETCONS" (spp-arg-list ("a" "b") 36464 . 36470) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 36471 . 36507)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 88974 . 89028) . 
              ((STATIC "static" 89034 . 89040) (STRUCT "struct" 89041 . 89047) (symbol "Lisp_Subr" 89048 . 89057) (symbol "alignas" 89058 . 89065) (semantic-list "(GCALIGNMENT)" 89066 . 89079) (symbol "sname" 89080 . 89085) (punctuation "=" 89086 . 89087) (semantic-list "{ { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, intspec, 0}" 89096 . 89228) (punctuation ";" 89228 . 89229) (symbol "Lisp_Object" 89238 . 89249) (symbol "fnname" 89250 . 89256)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 143786 . 143811) . 
              ((DO "do" 143819 . 143821) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	sa_must_free = true;					 \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 143822 . 144162) (WHILE "while" 144163 . 144168) (semantic-list "(false)" 144169 . 144176)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 148321 . 148339) . 
              ((symbol "Lisp_Object" 148350 . 148361) (symbol "name" 148362 . 148366) (punctuation "=" 148381 . 148382) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 148383 . 148520)))
          ("min" (spp-arg-list ("a" "b") 1888 . 1894) . ((semantic-list "((a) < (b) ? (a) : (b))" 1895 . 1918)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 3560 . 3568)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9147 . 9173)))
          ("lisp_h_CHECK_LIST_CONS" (spp-arg-list ("x" "y") 10940 . 10946) . ((symbol "CHECK_TYPE" 10947 . 10957) (semantic-list "(CONSP (x), Qlistp, y)" 10958 . 10980)))
          ("lisp_h_MARKERP" (spp-arg-list ("x") 11480 . 11483) . ((semantic-list "(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 11484 . 11532)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 12030 . 12033) . 
              ((symbol "XCONS" 12034 . 12039) (semantic-list "(c)" 12040 . 12043) (punctuation "-" 12043 . 12044) (punctuation ">" 12044 . 12045) (symbol "car" 12045 . 12048)))
          ("lisp_h_check_cons_list" (spp-arg-list nil 12276 . 12278) . ((semantic-list "((void) 0)" 12279 . 12289)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 25396 . 25422)))
          ("TAG_SYMOFFSET" (spp-arg-list ("offset") 26588 . 26596) . ((symbol "TAG_PTR" 26597 . 26604) (semantic-list "(Lisp_Symbol, offset)" 26605 . 26626)))
          ("CHECK_RANGED_INTEGER" (spp-arg-list ("x" "lo" "hi") 85346 . 85357) . 
              ((DO "do" 85366 . 85368) (semantic-list "{									\\
    CHECK_NUMBER (x);							\\
    if (! ((lo) <= XINT (x) && XINT (x) <= (hi)))			\\
      args_out_of_range_3						\\
	(x,								\\
	 make_number ((lo) < 0 && (lo) < MOST_NEGATIVE_FIXNUM		\\
		      ? MOST_NEGATIVE_FIXNUM				\\
		      : (lo)),						\\
	 make_number (min (hi, MOST_POSITIVE_FIXNUM)));			\\
  }" 85369 . 85686) (WHILE "while" 85687 . 85692) (semantic-list "(false)" 85693 . 85700)))
          ("DEFVAR_BUFFER_DEFAULTS" (spp-arg-list ("lname" "vname" "doc") 91932 . 91951) . 
              ((DO "do" 91957 . 91959) (semantic-list "{								\\
    static struct Lisp_Objfwd o_fwd;				\\
    defvar_lisp_nopro (&o_fwd, lname, &BVAR (&buffer_defaults, vname));	\\
  }" 91960 . 92090) (WHILE "while" 92091 . 92096) (semantic-list "(false)" 92097 . 92104)))
          ("verify_ascii" (spp-arg-list ("str") 148715 . 148720) . ((semantic-list "(str)" 148721 . 148726)))
          ("FOR_EACH_TAIL" (spp-arg-list ("hare" "list" "tortoise" "n") 149487 . 149512) . ((FOR "for" 149517 . 149520) (semantic-list "((tortoise) = (hare) = (list), (n) = true;		\\
       CONSP (hare);						\\
       (hare = XCDR (hare), (n) = !(n),				\\
   	((n)							\\
   	 ? (EQ (hare, tortoise)					\\
	    ? xsignal1 (Qcircular_list, list)			\\
	    : (void) 0)						\\
	 /* Move tortoise before the next iteration, in case */ \\
	 /* the next iteration does an Fsetcdr.  */		\\
   	 : (void) ((tortoise) = XCDR (tortoise)))))" 149521 . 149912)))
          ("eassume" (spp-arg-list ("cond") 6502 . 6508) . ((symbol "assume" 6509 . 6515) (semantic-list "(cond)" 6516 . 6522)))
          ("lisp_h_CHECK_NUMBER" (spp-arg-list ("x") 11008 . 11011) . ((symbol "CHECK_TYPE" 11012 . 11022) (semantic-list "(INTEGERP (x), Qintegerp, x)" 11023 . 11051)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 11298 . 11304) . ((semantic-list "(XLI (x) == XLI (y))" 11305 . 11325)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 13143 . 13147)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 15335 . 15341) . ((ENUM "enum" 15342 . 15346) (symbol "TYPE" 15347 . 15351)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 25444 . 25483)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 26292 . 26302) . ((semantic-list "(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 26307 . 26425)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 28269 . 28300)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 37898 . 37904) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 37905 . 37945)))
          ("XSETCOMPILED" (spp-arg-list ("a" "b") 38026 . 38032) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_COMPILED))" 38033 . 38073)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 42323 . 42328) . 
              ((DO "do" 42336 . 42338) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = -1;			\\
  }" 42339 . 42487) (WHILE "while" 42488 . 42493) (semantic-list "(false)" 42494 . 42501)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "nonlispfield") 50358 . 50378) . ((semantic-list "((offsetof (type, nonlispfield) - header_size) / word_size)" 50385 . 50444)))
          ("UNSIGNED_CMP" (spp-arg-list ("a" "op" "b") 50790 . 50800) . ((semantic-list "(max (sizeof ((a) + 0), sizeof ((b) + 0)) <= sizeof (unsigned)	\\
   ? ((a) + (unsigned) 0) op ((b) + (unsigned) 0)			\\
   : ((a) + (uintmax_t) 0) op ((b) + (uintmax_t) 0))" 50810 . 50981)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 119091 . 119094)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 147453 . 147459) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 147464 . 147515)))
          ("pMu" . ((symbol "pI" 4637 . 4639) (string "\"u\"" 4639 . 4642)))
          ("lisp_h_XLI" (spp-arg-list ("o") 10868 . 10871) . ((semantic-list "(o)" 10872 . 10875)))
          ("lisp_h_INTEGERP" (spp-arg-list ("x") 11400 . 11403) . ((semantic-list "((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 11404 . 11457)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 25505 . 25557)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 27561 . 27565)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 33939 . 33942) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 33947 . 34025)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 36658 . 36664) . ((semantic-list "((a) = make_lisp_symbol (b))" 36665 . 36693)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 36985 . 37014) . ((semantic-list "((v)->header.size = (PSEUDOVECTOR_FLAG			\\
		       | ((code) << PSEUDOVECTOR_AREA_BITS)	\\
		       | ((restsize) << PSEUDOVECTOR_SIZE_BITS) \\
		       | (lispsize)))" 37020 . 37186)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 59197 . 59208))
          ("TYPE_RANGED_INTEGERP" (spp-arg-list ("type" "x") 80488 . 80497) . ((semantic-list "(INTEGERP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XINT (x) : 0 <= XINT (x)) \\
   && XINT (x) <= TYPE_MAXIMUM (type))" 80502 . 80643)))
          ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" (spp-arg-list ("x") 86422 . 86425) . 
              ((DO "do" 86433 . 86435) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (NUMBERP (x), Qnumber_or_marker_p, x);			\\
  }" 86436 . 86607) (WHILE "while" 86608 . 86613) (semantic-list "(false)" 86614 . 86621)))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 98898 . 98942)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 116158 . 116176) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 116189 . 116321)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 134520 . 134530)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 144742 . 144753) . 
              ((DO "do" 144767 . 144769) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	Lisp_Object arg_;				       \\
	(buf) = xmalloc (alloca_nbytes);		       \\
	arg_ = make_save_memory (buf, nelt);		       \\
	sa_must_free = true;				       \\
	record_unwind_protect (free_save_value, arg_);	       \\
      }							       \\
  }" 144770 . 145367) (WHILE "while" 145368 . 145373) (semantic-list "(false)" 145374 . 145381)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1755 . 1760) . ((punctuation ";" 1761 . 1762)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 25579 . 25650)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 30634 . 30661)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 42633 . 42638) . 
              ((DO "do" 42645 . 42647) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = XSTRING (STR)->size;	\\
  }" 42648 . 42813) (WHILE "while" 42814 . 42819) (semantic-list "(false)" 42820 . 42827)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 62120 . 62130) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 62138 . 62184)))
          ("CALLMANY" (spp-arg-list ("f" "array") 89662 . 89672) . ((semantic-list "(f)" 89673 . 89676) (semantic-list "(ARRAYELTS (array), array)" 89677 . 89703)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 92127 . 92146) . 
              ((DO "do" 92153 . 92155) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd ko_fwd;			\\
    defvar_kboard (&ko_fwd, lname, offsetof (KBOARD, vname ## _)); \\
  }" 92156 . 92288) (WHILE "while" 92289 . 92294) (semantic-list "(false)" 92295 . 92302)))
          ("QUIT" . 
              ((DO "do" 98656 . 98658) (semantic-list "{							\\
    if (!NILP (Vquit_flag) && NILP (Vinhibit_quit))	\\
      process_quit_flag ();				\\
    else if (pending_signals)				\\
      process_pending_signals ();			\\
  }" 98659 . 98832) (WHILE "while" 98833 . 98838) (semantic-list "(false)" 98839 . 98846)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 115815 . 115833) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 115847 . 115992)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_pipe[1] >= 0)" 133482 . 133503)))
          ("eabs" (spp-arg-list ("x") 142698 . 142701) . ((semantic-list "((x) < 0 ? -(x) : (x))" 142710 . 142732)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 143444 . 143450) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : (sa_must_free = true, record_xmalloc (size)))" 143451 . 143561)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 149021 . 149032) . 
              ((symbol "Lisp_Object" 149042 . 149053) (symbol "name" 149054 . 149058) (punctuation "=" 149059 . 149060) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(union Aligned_String)					\\
	  {{strlen (str), -1, 0, (unsigned char *) verify_ascii (str)}}.s), \\
	  Lisp_String))							\\
     : build_string (verify_ascii (str)))" 149073 . 149299)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1680 . 1690) . 
              ((EXTERN "extern" 1691 . 1697) (symbol "DECLARE_GDB_SYM" 1698 . 1713) (semantic-list "(type, id)" 1714 . 1724)))
          ("ARRAYELTS" (spp-arg-list ("arr") 1976 . 1981) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 1982 . 2014)))
          ("pI" . ((string "\"ll\"" 2946 . 2950)))
          ("eassert" (spp-arg-list ("cond") 6424 . 6430) . ((semantic-list "((void) (false && (cond)))" 6431 . 6457)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 11079 . 11082) . ((symbol "CHECK_TYPE" 11083 . 11093) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 11094 . 11120)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 25672 . 25756)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 27076 . 27082) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 27087 . 27110) (semantic-list "(Lisp_Object, name)" 27111 . 27130) (symbol "DEFINE_GDB_SYMBOL_END" 27135 . 27156) (semantic-list "(LISP_INITIALLY (XLI_BUILTIN_LISPSYM (i##name)))" 27157 . 27205)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 37684 . 37690) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 37695 . 37747)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 37767 . 37773) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 37774 . 37813)))
          ("CHECK_NUMBER_COERCE_MARKER" (spp-arg-list ("x") 86005 . 86008) . 
              ((DO "do" 86017 . 86019) (semantic-list "{									\\
    if (MARKERP ((x)))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (INTEGERP (x), Qinteger_or_marker_p, x);		\\
  }" 86020 . 86194) (WHILE "while" 86195 . 86200) (semantic-list "(false)" 86201 . 86208)))
          ("sys_setjmp" (spp-arg-list ("j") 92845 . 92848) . ((symbol "setjmp" 92849 . 92855) (semantic-list "(j)" 92856 . 92859)))
          ("INTEGER_TO_CONS" (spp-arg-list ("i") 102421 . 102424) . ((semantic-list "(! FIXNUM_OVERFLOW_P (i)					    \\
   ? make_number (i)						    \\
   : EXPR_SIGNED (i) ? intbig_to_lisp (i) : uintbig_to_lisp (i))" 102437 . 102568)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 143211 . 143220) (symbol "sa_avail" 143221 . 143229) (punctuation "=" 143230 . 143231) (symbol "MAX_ALLOCA" 143232 . 143242) (punctuation ";" 143242 . 143243) (symbol "ptrdiff_t" 143248 . 143257) (symbol "sa_count" 143258 . 143266) (punctuation "=" 143267 . 143268) (symbol "SPECPDL_INDEX" 143269 . 143282) (semantic-list "()" 143283 . 143285) (punctuation ";" 143285 . 143286) (BOOL "bool" 143287 . 143291) (symbol "sa_must_free" 143292 . 143304) (punctuation "=" 143305 . 143306) (symbol "false" 143307 . 143312)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 2923 . 2932)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 8693 . 8728)))
          ("lisp_h_MISCP" (spp-arg-list ("x") 11553 . 11556) . ((semantic-list "(XTYPE (x) == Lisp_Misc)" 11557 . 11581)))
          ("LISP_INITIALLY" (spp-arg-list ("i") 20766 . 20769) . ((semantic-list "(i)" 20770 . 20773)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 25778 . 25875)))
          ("XLI_BUILTIN_LISPSYM" (spp-arg-list ("iname") 26818 . 26825) . ((symbol "TAG_SYMOFFSET" 26826 . 26839) (semantic-list "((iname) * sizeof *lispsym)" 26840 . 26867)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 30574 . 30604)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "true" 146227 . 146231)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 12109 . 12112) . ((semantic-list "(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 12118 . 12183)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 12204 . 12207) . ((symbol "XUINT" 12208 . 12213) (semantic-list "(a)" 12214 . 12217)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 25897 . 26007)))
          ("XSETINT" (spp-arg-list ("a" "b") 36367 . 36373) . ((semantic-list "((a) = make_number (b))" 36374 . 36397)))
          ("XSETMISC" (spp-arg-list ("a" "b") 36772 . 36778) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Misc))" 36779 . 36815)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 37282 . 37294) . ((symbol "XSETTYPED_PSEUDOVECTOR" 37299 . 37321) (semantic-list "(a, b,					\\
			  (((struct vectorlike_header *)	\\
			    XUNTAG (a, Lisp_Vectorlike))	\\
			   ->size),				\\
			  code)" 37322 . 37441)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 37962 . 37968) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 37969 . 38005)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 42185 . 42258)))
          ("_UCHAR_T")
          ("CALLN" (spp-arg-list ("f" "...") 90012 . 90020) . ((symbol "CALLMANY" 90021 . 90029) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 90030 . 90067)))
          ("GCALIGNED")
          ("XSETFLOAT" (spp-arg-list ("a" "b") 36711 . 36717) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 36718 . 36755)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 36865 . 36874) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 36884 . 36960)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 37472 . 37490) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 37497 . 37650)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 37832 . 37838) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 37839 . 37877)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 38233 . 38239) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 38240 . 38283)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 91223 . 91242) . 
              ((DO "do" 91248 . 91250) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp (&o_fwd, lname, &globals.f_ ## vname);		\\
  }" 91251 . 91361) (WHILE "while" 91362 . 91367) (semantic-list "(false)" 91368 . 91375)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 144268 . 144281) . 
              ((DO "do" 144288 . 144290) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 144291 . 144411) (WHILE "while" 144412 . 144417) (semantic-list "(false)" 144418 . 144425)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1467 . 1477) . 
              ((symbol "type" 1478 . 1482) (CONST "const" 1483 . 1488) (symbol "id" 1489 . 1491) (symbol "EXTERNALLY_VISIBLE" 1492 . 1510)))
          ("GCTYPEBITS" . ((number "3" 2121 . 2122)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 11146 . 11164) . ((semantic-list "((ok) ? (void) 0 : (void) wrong_type_argument (predicate, x))" 11170 . 11231)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 11821 . 11826) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 11832 . 11896)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 25036 . 25053) . 
              ((EXTERN "extern" 25058 . 25064) (symbol "Lisp_Object" 25065 . 25076) (symbol "fnname" 25077 . 25083) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 25084 . 25095) (symbol "maxargs" 25099 . 25106)) 25084 . 25106)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 36594 . 36600) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 36601 . 36639)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 102892 . 102909) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 102916 . 103083)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 143334 . 143340) . ((semantic-list "(sa_avail -= (size), alloca (size))" 143341 . 143376)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 147352 . 147358) . ((symbol "make_lisp_ptr" 147363 . 147376) (semantic-list "(&(union Aligned_Cons) { { a, { b } } }.s, Lisp_Cons)" 147377 . 147430)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 3220 . 3221)))
          ("lisp_h_XIL" (spp-arg-list ("i") 10895 . 10898) . ((semantic-list "(i)" 10899 . 10902)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 11347 . 11350) . ((semantic-list "(XTYPE (x) == Lisp_Float)" 11351 . 11376)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 12068 . 12071) . 
              ((symbol "XCONS" 12072 . 12077) (semantic-list "(c)" 12078 . 12081) (punctuation "-" 12081 . 12082) (punctuation ">" 12082 . 12083) (symbol "u" 12083 . 12084) (punctuation "." 12084 . 12085) (symbol "cdr" 12085 . 12088)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 14903 . 14939)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 36417 . 36423) . ((semantic-list "((a) = make_natnum (b))" 36424 . 36447)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 38160 . 38166) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 38167 . 38209)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 38310 . 38316) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 38317 . 38363)))
          ("VECSIZE" (spp-arg-list ("type") 50067 . 50073) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 50083 . 50142)))
          ("ASCII_CHAR_P" (spp-arg-list ("c") 51044 . 51047) . ((symbol "UNSIGNED_CMP" 51048 . 51060) (semantic-list "(c, <, 0x80)" 51061 . 51073)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 91401 . 91420) . 
              ((DO "do" 91425 . 91427) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp_nopro (&o_fwd, lname, &globals.f_ ## vname);	\\
  }" 91428 . 91543) (WHILE "while" 91544 . 91549) (semantic-list "(false)" 91550 . 91557)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 91577 . 91596) . 
              ((DO "do" 91602 . 91604) (semantic-list "{						\\
    static struct Lisp_Boolfwd b_fwd;		\\
    defvar_bool (&b_fwd, lname, &globals.f_ ## vname);		\\
  }" 91605 . 91716) (WHILE "while" 91717 . 91722) (semantic-list "(false)" 91723 . 91730)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 147883 . 147892) . 
              ((symbol "Lisp_Object" 147902 . 147913) (symbol "name" 147914 . 147918) (punctuation "=" 147919 . 147920) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 147921 . 147972)))
          ("lisp_h_CONSP" (spp-arg-list ("x") 11252 . 11255) . ((semantic-list "(XTYPE (x) == Lisp_Cons)" 11256 . 11280)))
          ("lisp_h_NILP" (spp-arg-list ("x") 11601 . 11604) . ((symbol "EQ" 11605 . 11607) (semantic-list "(x, Qnil)" 11608 . 11617)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 11647 . 11655) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 11661 . 11731)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 11764 . 11769) . ((semantic-list "(XSYMBOL (sym)->constant)" 11770 . 11795)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 11919 . 11922) . ((semantic-list "(XTYPE (x) == Lisp_Symbol)" 11923 . 11949)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 11976 . 11979) . ((semantic-list "(XTYPE (x) == Lisp_Vectorlike)" 11980 . 12010)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 25298 . 25311)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 36526 . 36532) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 36533 . 36575)))
          ("CHECK_TYPE_RANGED_INTEGER" (spp-arg-list ("type" "x") 85734 . 85743) . 
              ((DO "do" 85748 . 85750) (semantic-list "{									\\
    if (TYPE_SIGNED (type))						\\
      CHECK_RANGED_INTEGER (x, TYPE_MINIMUM (type), TYPE_MAXIMUM (type)); \\
    else								\\
      CHECK_RANGED_INTEGER (x, 0, TYPE_MAXIMUM (type));			\\
  }" 85751 . 85955) (WHILE "while" 85956 . 85961) (semantic-list "(false)" 85962 . 85969)))
          ("IS_DAEMON" . ((semantic-list "(daemon_pipe[1] != 0)" 133437 . 133458)))
          ("make_fixnum_or_float" (spp-arg-list ("val") 142847 . 142852) . ((semantic-list "(FIXNUM_OVERFLOW_P (val) ? make_float (val) : make_number (val))" 142858 . 142922)))
          ("SAFE_FREE" (spp-arg-list nil 144511 . 144513) . 
              ((DO "do" 144520 . 144522) (semantic-list "{					\\
    if (sa_must_free) {			\\
      sa_must_free = false;		\\
      unbind_to (sa_count, Qnil);	\\
    }					\\
  }" 144523 . 144641) (WHILE "while" 144642 . 144647) (semantic-list "(false)" 144648 . 144655)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 147811 . 147823) . 
              ((symbol "Lisp_Object" 147824 . 147835) (symbol "name" 147836 . 147840) (punctuation "=" 147841 . 147842) (symbol "AUTO_CONS_EXPR" 147843 . 147857) (semantic-list "(a, b)" 147858 . 147864)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 147991 . 148003) . 
              ((symbol "Lisp_Object" 148013 . 148024) (symbol "name" 148025 . 148029) (punctuation "=" 148030 . 148031) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 148032 . 148127)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 149985 . 150016) . ((FOR "for" 150022 . 150025) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 150026 . 150172)))
          )
))
  :file "!work!emacs!emacs-25!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
