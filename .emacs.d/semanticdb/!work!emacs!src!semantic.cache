;; Object semanticdb-project-database-file-15866022ceda
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-15866022ceda"
  :tables
  (list
    (semanticdb-table "semanticdb-table-15865ff7e948"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [768 787])
            ("limits.h" include (:system-flag t) nil [788 807])
            ("stdlib.h" include (:system-flag t) nil [808 827])
            ("lisp.h" include nil nil [828 845])
            ("blockinput.h" include nil nil [846 869])
            ("commands.h" include nil nil [870 891])
            ("keyboard.h" include nil nil [892 913])
            ("dispextern.h" include nil nil [914 937])
            ("buffer.h" include nil nil [938 957])
            ("pdumper.h" include nil nil [958 978])
            ("atimer.h" include nil nil [979 998])
            ("CACHEABLE" variable (:constant-flag t) nil [1208 1217])
            ("Vautoload_queue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1525 1553])
            ("Vrun_hooks" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1690 1713])
            ("Vsignaling_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1846 1878])
            ("redisplay_deep_handler" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2137 2183])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [2301 2320])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [2371 2390])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [2444 2463])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [2520 2539])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [2580 2599])
            ("funcall_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2636 2648])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2649 2659])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2660 2674]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2601 2675])
            ("apply_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2709 2721])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2722 2734])
                    ("" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2735 2747]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2676 2748])
            ("lambda_arity" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2782 2794]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2749 2795])
            ("specpdl_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [2832 2855]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2797 2923])
            ("specpdl_kind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [2964 2987]))                  
                :type ("specbind_tag" type (:type "enum") nil nil))
                nil [2925 3053])
            ("specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3093 3116]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3055 3187])
            ("set_specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3224 3247])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3248 3264]))                  
                :type "void")
                nil [3189 3334])
            ("specpdl_where" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3370 3393]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3336 3459])
            ("specpdl_arg" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3493 3516]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3461 3587])
            ("backtrace_function" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3621 3644]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3589 3719])
            ("backtrace_nargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3755 3778]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3721 3850])
            ("backtrace_args" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3882 3905]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3852 3976])
            ("set_backtrace_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4066 4089])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4090 4108])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4109 4125]))                  
                :type "void")
                nil [4034 4221])
            ("set_backtrace_debug_on_exit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4264 4287])
                    ("doe" variable (:type "bool") (reparse-symbol arg-sub-list) [4288 4297]))                  
                :type "void")
                nil [4223 4376])
            ("backtrace_p" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4444 4467]))                  
                :type "bool")
                nil [4426 4512])
            ("backtrace_thread_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4546 4574])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4575 4598]))                  
                :type "bool")
                nil [4514 4635])
            ("backtrace_top" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4672 4677]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [4637 5041])
            ("backtrace_thread_top" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5092 5120]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5043 5280])
            ("backtrace_next" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5318 5341]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5282 5441])
            ("init_eval_once_for_pdumper" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5483 5488]))                  
                :type "void")
                nil [5443 5489])
            ("backtrace_thread_next" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5541 5569])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5570 5593]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5491 5708])
            ("init_eval_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5731 5736]))                  
                :type "void")
                nil [5710 5913])
            ("init_eval_once_for_pdumper" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5955 5960]))                  
                :type "void")
                nil [5915 6125])
            ("init_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6143 6148]))                  
                :type "void")
                nil [6127 6931])
            ("max_ensure_room" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("m" variable
                       (:pointer 1
                        :type ("intmax_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7054 7066])
                    ("a" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7067 7078])
                    ("b" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7079 7090]))                  
                :type "void")
                nil [7025 7180])
            ("restore_stack_limits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7271 7288]))                  
                :type "void")
                nil [7237 7342])
            ("call_debugger" function
               (:arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7427 7443]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [7400 9357])
            ("do_debug_on_call" function
               (:arguments 
                  ( ("code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9382 9399])
                    ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9400 9418]))                  
                :type "void")
                nil [9359 9546])
            ("Sor" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,
       doc: /* Eval args until one of them yields non-nil, then return that value.
The remaining args are not evalled at all.
If all args return nil, return nil.
usage: (or CONDITIONS...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [9550 9782])
            ("For" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9786 9803]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9550 10006])
            ("Sand" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"and\", Fand, Sand, 0, UNEVALLED, 0,
       doc: /* Eval args until one of them yields nil, then return nil.
The remaining args are not evalled at all.
If no arg yields nil, return the last arg's value.
usage: (and CONDITIONS...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [10008 10248])
            ("Fand" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10252 10269]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10008 10469])
            ("Sif" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"if\", Fif, Sif, 2, UNEVALLED, 0,
       doc: /* If COND yields non-nil, do THEN, else do ELSE...
Returns the value of THEN or the value of the last of the ELSE's.
THEN must be one expression, but ELSE... can be zero or more expressions.
If COND yields nil, and there are no ELSE's, the value is nil.
usage: (if COND THEN ELSE...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [10471 10812])
            ("Fif" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10816 10833]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10471 10992])
            ("Scond" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"cond\", Fcond, Scond, 0, UNEVALLED, 0,
       doc: /* Try each clause until one succeeds.
Each clause looks like (CONDITION BODY...).  CONDITION is evaluated
and, if the value is non-nil, this clause succeeds:
then the expressions in BODY are evaluated and the last one's
value is the value of the cond-form.
If a clause has one element, as in (CONDITION), then the cond-form
returns CONDITION's value, if that is non-nil.
If no clause succeeds, cond returns nil.
usage: (cond CLAUSES...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [10994 11494])
            ("Fcond" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11498 11515]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10994 11804])
            ("Sprogn" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"progn\", Fprogn, Sprogn, 0, UNEVALLED, 0,
       doc: /* Eval BODY forms sequentially and return value of last one.
usage: (progn BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [11806 11956])
            ("Fprogn" function
               (:arguments 
                  ( ("body" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11960 11977]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11806 12161])
            ("prog_ignore" function
               (:arguments 
                  ( ("body" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12239 12256]))                  
                :type "void")
                nil [12221 12277])
            ("Sprog1" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"prog1\", Fprog1, Sprog1, 1, UNEVALLED, 0,
       doc: /* Eval FIRST and BODY sequentially; return value from FIRST.
The value of FIRST is saved during the evaluation of the remaining args,
whose values are discarded.
usage: (prog1 FIRST BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [12279 12536])
            ("Fprog1" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12540 12557]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12279 12648])
            ("Ssetq" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"setq\", Fsetq, Ssetq, 0, UNEVALLED, 0,
       doc: /* Set each SYM to the value of its VAL.
The symbols SYM are variables; they are literal (not evaluated).
The values VAL are expressions; they are evaluated.
Thus, (setq x (1+ y)) sets `x' to the value of `(1+ y)'.
The second VAL is not computed until after the first SYM is set, and so on;
each VAL can use the new value of variables set earlier in the `setq'.
The return value of the `setq' form is the value of the last VAL.
usage: (setq [SYM VAL]...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [12650 13167])
            ("Fsetq" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13171 13188]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12650 14020])
            ("Squote" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"quote\", Fquote, Squote, 1, UNEVALLED, 0,
       doc: /* Return the argument, without evaluating it.  `(quote x)' yields `x'.
Warning: `quote' does not construct its return value, but just returns
the value that was pre-constructed by the Lisp reader (see info node
`(elisp)Printed Representation').
This means that \\\\='(a . b) is not identical to (cons \\\\='a \\\\='b): the former
does not cons.  Quoting should be reserved for constants that will
never be modified by side-effects, unless you like self-modifying code.
See the common pitfall in info node `(elisp)Rearrangement' for an example
of unexpected results when a quoted object is modified.
usage: (quote ARG)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [14022 14700])
            ("Fquote" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14704 14721]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [14022 14841])
            ("Sfunction" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"function\", Ffunction, Sfunction, 1, UNEVALLED, 0,
       doc: /* Like `quote', but preferred for objects which are functions.
In byte compilation, `function' causes its argument to be handled by
the byte compiler.  Similarly, when expanding macros and expressions,
ARG can be examined and possibly expanded.  If `quote' is used
instead, this doesn't happen.

usage: (function ARG)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [14843 15236])
            ("Ffunction" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15240 15257]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [14843 16451])
            ("Sdefvaralias" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"defvaralias\", Fdefvaralias, Sdefvaralias, 2, 3, 0,
       doc: /* Make NEW-ALIAS a variable alias for symbol BASE-VARIABLE.
Aliased variables always have the same value; setting one sets the other.
Third arg DOCSTRING, if non-nil, is documentation for NEW-ALIAS.  If it is
omitted or nil, NEW-ALIAS gets the documentation string of BASE-VARIABLE,
or of the variable at the end of the chain of aliases, if BASE-VARIABLE is
itself an alias.  If NEW-ALIAS is bound, and BASE-VARIABLE is not,
then the value of BASE-VARIABLE is set to that of NEW-ALIAS.
The return value is BASE-VARIABLE.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [16454 17051])
            ("Fdefvaralias" function
               (:arguments 
                  ( ("new_alias" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17055 17077])
                    ("base_variable" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17078 17104])
                    ("docstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17105 17127]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16454 19472])
            ("default_toplevel_binding" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19527 19546]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [19474 19852])
            ("lexbound_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20086 20105]))                  
                :type "bool")
                nil [20062 20520])
            ("Sdefault_toplevel_value" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"default-toplevel-value\", Fdefault_toplevel_value, Sdefault_toplevel_value, 1, 1, 0,
       doc: /* Return SYMBOL's toplevel default value.
\"Toplevel\" means outside of any let binding.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [20522 20718])
            ("Fdefault_toplevel_value" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20722 20741]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [20522 20991])
            ("Sset_default_toplevel_value" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"set-default-toplevel-value\", Fset_default_toplevel_value,
       Sset_default_toplevel_value, 2, 2, 0,
       doc: /* Set SYMBOL's toplevel default value to VALUE.
\"Toplevel\" means outside of any let binding.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [20993 21214])
            ("Fset_default_toplevel_value" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21221 21240])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21241 21259]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [20993 21444])
            ("Sinternal__define_uninitialized_variable" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"internal--define-uninitialized-variable\",
       Finternal__define_uninitialized_variable,
       Sinternal__define_uninitialized_variable, 1, 2, 0,
       doc: /* Define SYMBOL as a variable, with DOC as its docstring.
This is like `defvar' and `defconst' but without affecting the variable's
value.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [21446 21759])
            ("Finternal__define_uninitialized_variable" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21763 21782])
                    ("doc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21783 21799]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21446 22558])
            ("defvar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22587 22603])
                    ("initvalue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22604 22626])
                    ("docstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22627 22649])
                    ("eval" variable (:type "bool") (reparse-symbol arg-sub-list) [22650 22660]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [22560 23370])
            ("Sdefvar" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"defvar\", Fdefvar, Sdefvar, 1, UNEVALLED, 0,
       doc: /* Define SYMBOL as a variable, and return SYMBOL.
You are not required to define a variable in order to use it, but
defining it lets you supply an initial value and documentation, which
can be referred to by the Emacs help facilities and other programming
tools.  The `defvar' form also declares the variable as \\\"special\\\",
so that it is always dynamically bound even if `lexical-binding' is t.

If SYMBOL's value is void and the optional argument INITVALUE is
provided, INITVALUE is evaluated and the result used to set SYMBOL's
value.  If SYMBOL is buffer-local, its default value is what is set;
buffer-local values are not affected.  If INITVALUE is missing,
SYMBOL's value is not set.

If SYMBOL is let-bound, then this form does not affect the local let
binding but the toplevel default binding instead, like
`set-toplevel-default-binding`.
(`defcustom' behaves similarly in this respect.)

The optional argument DOCSTRING is a documentation string for the
variable.

To define a user option, use `defcustom' instead of `defvar'.

To define a buffer-local variable, use `defvar-local'.
usage: (defvar SYMBOL &optional INITVALUE DOCSTRING)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [23372 24587])
            ("Fdefvar" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24591 24608]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [23372 25567])
            ("Sdefvar_1" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"defvar-1\", Fdefvar_1, Sdefvar_1, 2, 3, 0,
       doc: /* Like `defvar' but as a function.
More specifically behaves like (defvar SYM 'INITVALUE DOCSTRING).  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [25569 25737])
            ("Fdefvar_1" function
               (:arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25741 25757])
                    ("initvalue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25758 25780])
                    ("docstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25781 25803]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [25569 25859])
            ("Sdefconst" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"defconst\", Fdefconst, Sdefconst, 2, UNEVALLED, 0,
       doc: /* Define SYMBOL as a constant variable.
This declares that neither programs nor users should ever change the
value.  This constancy is not actually enforced by Emacs Lisp, but
SYMBOL is marked as a special variable so that it is never lexically
bound.

The `defconst' form always sets the value of SYMBOL to the result of
evalling INITVALUE.  If SYMBOL is buffer-local, its default value is
what is set; buffer-local values are not affected.  If SYMBOL has a
local binding, then this form sets the local binding's value.
However, you should normally not make local bindings for variables
defined with this form.

The optional DOCSTRING specifies the variable's documentation string.
usage: (defconst SYMBOL INITVALUE [DOCSTRING])  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [25861 26666])
            ("Fdefconst" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26670 26687]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [25861 27041])
            ("Sdefconst_1" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"defconst-1\", Fdefconst_1, Sdefconst_1, 2, 3, 0,
       doc: /* Like `defconst' but as a function.
More specifically, behaves like (defconst SYM 'INITVALUE DOCSTRING).  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [27043 27222])
            ("Fdefconst_1" function
               (:arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27226 27242])
                    ("initvalue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27243 27265])
                    ("docstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27266 27288]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27043 27608])
            ("Smake_var_non_special" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"internal-make-var-non-special\", Fmake_var_non_special,
       Smake_var_non_special, 1, 1, 0,
       doc: /* Internal function.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [27647 27787])
            ("Fmake_var_non_special" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27794 27813]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27647 27907])
            ("SletX" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"let*\", FletX, SletX, 1, UNEVALLED, 0,
       doc: /* Bind variables according to VARLIST then eval BODY.
The value of the last form in BODY is returned.
Each element of VARLIST is a symbol (which is bound to nil)
or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).
Each VALUEFORM can refer to the symbols already bound by this VARLIST.
usage: (let* VARLIST BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [27911 28314])
            ("FletX" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28318 28335]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27911 29632])
            ("Slet" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"let\", Flet, Slet, 1, UNEVALLED, 0,
       doc: /* Bind variables according to VARLIST then eval BODY.
The value of the last form in BODY is returned.
Each element of VARLIST is a symbol (which is bound to nil)
or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).
All the VALUEFORMs are evalled before any symbols are bound.
usage: (let VARLIST BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [29634 30023])
            ("Flet" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30027 30044]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29634 31719])
            ("Swhile" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"while\", Fwhile, Swhile, 1, UNEVALLED, 0,
       doc: /* If TEST yields non-nil, eval BODY... and repeat.
The order of execution is thus TEST, BODY, TEST, BODY and so on
until TEST returns nil.

The value of a `while' form is always nil.

usage: (while TEST BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [31721 31999])
            ("Fwhile" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32003 32020]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [31721 32204])
            ("with_delayed_message_display" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("atimer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32248 32269]))                  
                :type "void")
                nil [32206 32321])
            ("with_delayed_message_cancel" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [32364 32376]))                  
                :type "void")
                nil [32323 32455])
            ("Sfuncall_with_delayed_message" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"funcall-with-delayed-message\",
       Ffuncall_with_delayed_message, Sfuncall_with_delayed_message,
       3, 3, 0,
       doc: /* Like `funcall', but display MESSAGE if FUNCTION takes longer than TIMEOUT.
TIMEOUT is a number of seconds, and can be an integer or a floating
point number.

If FUNCTION takes less time to execute than TIMEOUT seconds, MESSAGE
is not displayed.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [32457 32845])
            ("Ffuncall_with_delayed_message" function
               (:arguments 
                  ( ("timeout" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32849 32869])
                    ("message" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32870 32890])
                    ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32891 32912]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32457 33404])
            ("Smacroexpand" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"macroexpand\", Fmacroexpand, Smacroexpand, 1, 2, 0,
       doc: /* Return result of expanding macros at top level of FORM.
If FORM is not a macro call, it is returned unchanged.
Otherwise, the macro is expanded and the expansion is considered
in place of FORM.  When a non-macro-call results, it is returned.

The second optional arg ENVIRONMENT specifies an environment of macro
definitions to shadow the loaded ones for use in file byte-compilation.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [33406 33869])
            ("Fmacroexpand" function
               (:arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33873 33890])
                    ("environment" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33891 33915]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33406 35301])
            ("Scatch" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"catch\", Fcatch, Scatch, 1, UNEVALLED, 0,
       doc: /* Eval BODY allowing nonlocal exits using `throw'.
TAG is evalled to get the tag to use; it must not be nil.

Then the BODY is executed.
Within BODY, a call to `throw' with the same TAG exits BODY and this `catch'.
If no throw happens, `catch' returns the value of the last BODY form.
If a throw happens, it specifies the value to return from `catch'.
usage: (catch TAG BODY...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [35304 35749])
            ("Fcatch" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35753 35770]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35304 35870])
            ("clobbered_eassert" variable (:constant-flag t) nil [36037 36054])
            ("internal_catch" function
               (:arguments 
                  ( ("tag" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36268 36284])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36308 36320]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36322 36338]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36240 36852])
            ("unwind_to_catch" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37619 37640])
                    ("type" variable (:type ("nonlocal_exit" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [37642 37666])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37684 37702]))                  
                :type "void")
                nil [37596 38682])
            ("Sthrow" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"throw\", Fthrow, Sthrow, 2, 2, 0,
       doc: /* Throw to the catch for TAG and return VALUE from it.
Both TAG and VALUE are evalled.  */
       attributes: noreturn)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [38684 38857])
            ("Fthrow" function
               (:arguments 
                  ( ("tag" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38861 38886])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38887 38905]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [38684 39255])
            ("Sunwind_protect" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"unwind-protect\", Funwind_protect, Sunwind_protect, 1, UNEVALLED, 0,
       doc: /* Do BODYFORM, protecting with UNWINDFORMS.
If BODYFORM completes normally, its value is returned
after executing the UNWINDFORMS.
If BODYFORM exits nonlocally, the UNWINDFORMS are executed anyway.
usage: (unwind-protect BODYFORM UNWINDFORMS...)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [39258 39597])
            ("Funwind_protect" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39601 39618]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39258 39799])
            ("Scondition_case" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"condition-case\", Fcondition_case, Scondition_case, 2, UNEVALLED, 0,
       doc: /* Regain control when an error is signaled.
Executes BODYFORM and returns its value if no error happens.
Each element of HANDLERS looks like (CONDITION-NAME BODY...)
or (:success BODY...), where the BODY is made of Lisp expressions.

A handler is applicable to an error if CONDITION-NAME is one of the
error's condition names.  Handlers may also apply when non-error
symbols are signaled (e.g., `quit').  A CONDITION-NAME of t applies to
any symbol, including non-error symbols.  If multiple handlers are
applicable, only the first one runs.

The car of a handler may be a list of condition names instead of a
single condition name; then it handles all of them.  If the special
condition name `debug' is present in this list, it allows another
condition in the list to run the debugger if `debug-on-error' and the
other usual mechanisms say it should (otherwise, `condition-case'
suppresses the debugger).

When a handler handles an error, control returns to the `condition-case'
and it executes the handler's BODY...
with VAR bound to (ERROR-SYMBOL . SIGNAL-DATA) from the error.
\\(If VAR is nil, the handler can't access that information.)
Then the value of the last BODY form is returned from the `condition-case'
expression.

The special handler (:success BODY...) is invoked if BODYFORM terminated
without signalling an error.  BODY is then evaluated with VAR bound to
the value returned by BODYFORM.

See also the function `signal' for more info.
usage: (condition-case VAR BODYFORM &rest HANDLERS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [39802 41400])
            ("Fcondition_case" function
               (:arguments 
                  ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41404 41421]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39802 41614])
            ("internal_lisp_condition_case" function
               (:arguments 
                  ( ("var" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41768 41784])
                    ("bodyform" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41785 41806])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41816 41837]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41726 44939])
            ("internal_condition_case" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [45409 45414]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45416 45437])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45463 45475]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45351 45865])
            ("internal_condition_case_1" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46004 46016]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46018 46034])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46041 46062])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46090 46102]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45944 46495])
            ("internal_condition_case_2" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46650 46662])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46663 46675]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46683 46700])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46707 46724])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46731 46752])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46780 46792]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [46590 47192])
            ("internal_condition_case_n" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47358 47368])
                            ("" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [47369 47383]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47391 47407])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47414 47432])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47439 47460])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("err" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47488 47504])
                            ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47511 47527])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [47534 47552]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [47298 48155])
            ("Qcatch_all_memory_full" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48157 48199])
            ("internal_catch_all" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [48462 48469]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("argument" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [48471 48486])
                    ("handler" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("nonlocal_exit" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [48531 48550])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48551 48563]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48405 49052])
            ("push_handler" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49085 49108])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [49109 49138]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49054 49264])
            ("push_handler_nosignal" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49306 49329])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [49330 49359]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49266 50049])
            ("signal_or_quit" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50088 50100])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50101 50113])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [50114 50119]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [50053 50120])
            ("find_handler_clause" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50161 50173])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50174 50186]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [50121 50187])
            ("maybe_call_debugger" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50221 50244])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50245 50261])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50267 50284]))                  
                :type "bool")
                nil [50188 50285])
            ("process_quit_flag" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [50318 50323]))                  
                :type "void")
                nil [50287 50520])
            ("probably_quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [50542 50547]))                  
                :type "void")
                nil [50522 50773])
            ("Ssignal" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"signal\", Fsignal, Ssignal, 2, 2, 0,
       doc: /* Signal an error.  Args are ERROR-SYMBOL and associated DATA.
This function does not return.

An error symbol is a symbol with an `error-conditions' property
that is a list of condition names.  The symbol should be non-nil.
A handler for any of those names will get to handle this signal.
The symbol `error' should normally be one of them.

DATA should be a list.  Its elements are printed as part of the error message.
See Info anchor `(elisp)Definition of signal' for some details on how this
error message is constructed.
If the signal is handled, DATA is made available to the handler.
See also the function `condition-case'.  */
       attributes: noreturn)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [50775 51495])
            ("Fsignal" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51499 51524])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51525 51542]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [50775 51759])
            ("quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [51832 51837]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [51814 51886])
            ("backtrace_yet" variable
               (:default-value "false"
                :type "bool")
                nil [52032 52059])
            ("signal_or_quit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52362 52387])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52388 52405])
                    ("keyboard_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [52406 52425]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52327 58017])
            ("xsignal0" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58104 58129]))                  
                :type "void")
                nil [58089 58165])
            ("xsignal1" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58182 58207])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58208 58224]))                  
                :type "void")
                nil [58167 58267])
            ("xsignal2" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58284 58309])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58310 58327])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58328 58345]))                  
                :type "void")
                nil [58269 58395])
            ("xsignal3" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58412 58437])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58438 58455])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58456 58473])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58474 58491]))                  
                :type "void")
                nil [58397 58547])
            ("signal_error" function
               (:arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [58691 58705])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58706 58722]))                  
                :type "void")
                nil [58672 58836])
            ("overflow_error" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [58964 58969]))                  
                :type "void")
                nil [58943 59003])
            ("wants_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("listn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59123 59140])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59141 59164]))                  
                :type "bool")
                nil [59095 59491])
            ("skip_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59686 59709])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59710 59727]))                  
                :type "bool")
                nil [59659 60329])
            ("signal_quit_p" function
               (:arguments 
                  ( ("signal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60419 60438]))                  
                :type "bool")
                nil [60399 60611])
            ("maybe_call_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60956 60979])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60980 60996])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60997 61014]))                  
                :type "bool")
                nil [60923 61727])
            ("find_handler_clause" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61769 61790])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61791 61814]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [61729 62381])
            ("vformat_string" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [62468 62482])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62483 62494]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [62440 62814])
            ("verror" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [62880 62894])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62895 62906]))                  
                :type "void")
                nil [62867 62955])
            ("error" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [63021 63035])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [63036 63040]))                  
                :type "void")
                nil [63009 63096])
            ("Scommandp" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"commandp\", Fcommandp, Scommandp, 1, 2, 0,
       doc: /* Non-nil if FUNCTION makes provisions for interactive calling.
This means it contains a description for how to read arguments to give it.
The value is nil for an invalid function or a symbol with no function
definition.

Interactively callable functions include strings and vectors (treated
as keyboard macros), lambda-expressions that contain a top-level call
to `interactive', autoload definitions made by `autoload' with non-nil
fourth argument, and some of the built-in functions of Lisp.

Also, a symbol satisfies `commandp' if its function definition does so.

If the optional argument FOR-CALL-INTERACTIVELY is non-nil,
then strings and vectors are not accepted.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [63099 63837])
            ("Fcommandp" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63841 63862])
                    ("for_call_interactively" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63863 63898]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [63099 66663])
            ("Sautoload" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"autoload\", Fautoload, Sautoload, 2, 5, 0,
       doc: /* Define FUNCTION to autoload from FILE.
FUNCTION is a symbol; FILE is a file name string to pass to `load'.

Third arg DOCSTRING is documentation for the function.

Fourth arg INTERACTIVE if non-nil says function can be called
interactively.  If INTERACTIVE is a list, it is interpreted as a list
of modes the function is applicable for.

Fifth arg TYPE indicates the type of the object:
   nil or omitted says FUNCTION is a function,
   `keymap' says FUNCTION is really a keymap, and
   `macro' or t says FUNCTION is really a macro.

Third through fifth args give info about the real definition.
They default to nil.

If FUNCTION is already defined other than as an autoload,
this does nothing and returns nil.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [66665 67445])
            ("Fautoload" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67449 67470])
                    ("file" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67471 67488])
                    ("docstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67489 67511])
                    ("interactive" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67512 67536])
                    ("type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67537 67554]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [66665 68323])
            ("un_autoload" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("oldqueue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68350 68371]))                  
                :type "void")
                nil [68325 68844])
            ("load_with_autoload_queue" function
               (:arguments 
                  ( ("file" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68886 68903])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68904 68924])
                    ("nomessage" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68925 68947])
                    ("nosuffix" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68951 68972])
                    ("must_suffix" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68973 68997]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68846 69789])
            ("Sautoload_do_load" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"autoload-do-load\", Fautoload_do_load, Sautoload_do_load, 1, 3, 0,
       doc: /* Load FUNDEF which should be an autoload.
If non-nil, FUNNAME should be the symbol whose function value is FUNDEF,
in which case the function returns the new autoloaded function value.
If equal to `macro', MACRO-ONLY specifies that FUNDEF should only be loaded if
it defines a macro.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [69930 70306])
            ("Fautoload_do_load" function
               (:arguments 
                  ( ("fundef" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70310 70329])
                    ("funname" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70330 70350])
                    ("macro_only" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70351 70374]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69930 71754])
            ("Seval" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"eval\", Feval, Seval, 1, 2, 0,
       doc: /* Evaluate FORM and return its value.
If LEXICAL is t, evaluate using lexical scoping.
LEXICAL can also be an actual lexical environment, in the form of an
alist mapping symbols to their value.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [71758 72007])
            ("Feval" function
               (:arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72011 72028])
                    ("lexical" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72029 72049]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [71758 72249])
            ("grow_specpdl_allocation" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [72281 72286]))                  
                :type "void")
                nil [72251 72823])
            ("eval_sub" function
               (:arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72939 72956]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [72917 79048])
            ("Sapply" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"apply\", Fapply, Sapply, 1, MANY, 0,
       doc: /* Call FUNCTION with our remaining args, using our last arg as list of args.
Then return the value FUNCTION returns.
With a single argument, call the argument's first element using the
other elements as args.
Thus, (apply \\\\='+ 1 2 \\\\='(3 4)) returns 10.
usage: (apply FUNCTION &rest ARGUMENTS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [79051 79407])
            ("Fapply" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79411 79427])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79428 79446]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79051 81266])
            ("funcall_nil" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81345 81361])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81362 81380]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81313 81425])
            ("Srun_hooks" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"run-hooks\", Frun_hooks, Srun_hooks, 0, MANY, 0,
       doc: /* Run each hook in HOOKS.
Each argument should be a symbol, a hook variable.
These symbols are processed in the order specified.
If a hook symbol has a non-nil value, that value may be a function
or a list of functions to be called to run the hook.
If the value is a function, it is called with no arguments.
If it is a list, the elements are called, in order, with no arguments.

Major modes should not use this function directly to run their mode
hook; they should use `run-mode-hooks' instead.

Do not use `make-local-variable' to make a hook variable buffer-local.
Instead, use `add-hook' and specify t for the LOCAL argument.
usage: (run-hooks &rest HOOKS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [81427 82162])
            ("Frun_hooks" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82166 82182])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82183 82201]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81427 82291])
            ("Srun_hook_with_args" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"run-hook-with-args\", Frun_hook_with_args,
       Srun_hook_with_args, 1, MANY, 0,
       doc: /* Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  The value of HOOK
may be nil, a function, or a list of functions.  Call each
function in order with arguments ARGS.  The final return value
is unspecified.

Do not use `make-local-variable' to make a hook variable buffer-local.
Instead, use `add-hook' and specify t for the LOCAL argument.
usage: (run-hook-with-args HOOK &rest ARGS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [82293 82823])
            ("Frun_hook_with_args" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82827 82843])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82844 82862]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82293 82922])
            ("Srun_hook_with_args_until_success" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"run-hook-with-args-until-success\", Frun_hook_with_args_until_success,
       Srun_hook_with_args_until_success, 1, MANY, 0,
       doc: /* Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  The value of HOOK
may be nil, a function, or a list of functions.  Call each
function in order with arguments ARGS, stopping at the first
one that returns non-nil, and return that value.  Otherwise (if
all functions return nil, or if there are no functions to call),
return nil.

Do not use `make-local-variable' to make a hook variable buffer-local.
Instead, use `add-hook' and specify t for the LOCAL argument.
usage: (run-hook-with-args-until-success HOOK &rest ARGS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [83096 83805])
            ("Frun_hook_with_args_until_success" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83809 83825])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83826 83844]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83096 83901])
            ("funcall_not" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83935 83951])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83952 83970]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83903 84026])
            ("Srun_hook_with_args_until_failure" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"run-hook-with-args-until-failure\", Frun_hook_with_args_until_failure,
       Srun_hook_with_args_until_failure, 1, MANY, 0,
       doc: /* Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  The value of HOOK
may be nil, a function, or a list of functions.  Call each
function in order with arguments ARGS, stopping at the first
one that returns nil, and return nil.  Otherwise (if all functions
return non-nil, or if there are no functions to call), return non-nil
\\(do not rely on the precise return value in this case).

Do not use `make-local-variable' to make a hook variable buffer-local.
Instead, use `add-hook' and specify t for the LOCAL argument.
usage: (run-hook-with-args-until-failure HOOK &rest ARGS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [84028 84790])
            ("Frun_hook_with_args_until_failure" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84794 84810])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84811 84829]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [84028 84908])
            ("run_hook_wrapped_funcall" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84955 84971])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84972 84990]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [84910 85150])
            ("Srun_hook_wrapped" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"run-hook-wrapped\", Frun_hook_wrapped, Srun_hook_wrapped, 2, MANY, 0,
       doc: /* Run HOOK, passing each function through WRAP-FUNCTION.
I.e. instead of calling each function FUN directly with arguments ARGS,
it calls WRAP-FUNCTION with arguments FUN and ARGS.
As soon as a call to WRAP-FUNCTION returns non-nil, `run-hook-wrapped'
aborts and returns that value.
usage: (run-hook-wrapped HOOK WRAP-FUNCTION &rest ARGS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [85152 85585])
            ("Frun_hook_wrapped" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85592 85608])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85609 85627]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [85152 85700])
            ("run_hook_with_args" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85968 85984])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85985 86003])
                    ("funcall" function
                       (:function-pointer t
                        :arguments 
                          ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86034 86050])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [86051 86069]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [85936 87438])
            ("run_hook" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87512 87529]))                  
                :type "void")
                nil [87497 87567])
            ("run_hook_with_args_2" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87672 87689])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87690 87707])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87708 87725]))                  
                :type "void")
                nil [87645 87778])
            ("apply1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87824 87839])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87840 87856]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87804 87927])
            ("Sfunctionp" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"functionp\", Ffunctionp, Sfunctionp, 1, 1, 0,
       doc: /* Return t if OBJECT is a function.

An object is a function if it is callable via `funcall'; this includes
symbols with function bindings, but excludes macros and special forms.

Ordinarily return nil if OBJECT is not a function, although t might be
returned in rare cases.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [87929 88274])
            ("Ffunctionp" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88281 88300]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87929 88360])
            ("FUNCTIONP" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88378 88397]))                  
                :type "bool")
                nil [88362 89110])
            ("funcall_general" function
               (:arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89141 89157])
                    ("numargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89158 89176])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [89177 89195]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [89112 90184])
            ("Sfuncall" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"funcall\", Ffuncall, Sfuncall, 1, MANY, 0,
       doc: /* Call first argument as a function, passing remaining arguments to it.
Return the value that function returns.
Thus, (funcall \\\\='cons \\\\='x \\\\='y) returns (x . y).
usage: (funcall FUNCTION &rest ARGUMENTS)  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [90186 90461])
            ("Ffuncall" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90465 90481])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90482 90500]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [90186 91127])
            ("funcall_subr" function
               (:arguments 
                  ( ("subr" variable
                       (:pointer 1
                        :type ("Lisp_Subr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [91280 91303])
                    ("numargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91304 91322])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91323 91341]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [91254 93088])
            ("fetch_and_exec_byte_code" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93284 93300])
                    ("args_template" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93301 93325])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93331 93347])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93348 93366]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [93239 93502])
            ("apply_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93537 93553])
                    ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93554 93571])
                    ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93572 93590]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [93504 94311])
            ("funcall_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94561 94577])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94578 94594])
                    ("arg_vector" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94597 94630]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [94526 97897])
            ("Sfunc_arity" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"func-arity\", Ffunc_arity, Sfunc_arity, 1, 1, 0,
       doc: /* Return minimum and maximum number of args allowed for FUNCTION.
FUNCTION must be a function of some kind.
The returned value is a cons cell (MIN . MAX).  MIN is the minimum number
of args.  MAX is the maximum number, or the symbol `many', for a
function with `&rest' args, or `unevalled' for a special form.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [97899 98282])
            ("Ffunc_arity" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98286 98307]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97899 99539])
            ("lambda_arity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99647 99663]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99614 100763])
            ("Sfetch_bytecode" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"fetch-bytecode\", Ffetch_bytecode, Sfetch_bytecode,
       1, 1, 0,
       doc: /* If byte-compiled OBJECT is lazy-loaded, fetch it now.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [100765 100913])
            ("Ffetch_bytecode" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100917 100936]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [100765 101976])
            ("let_shadows_buffer_binding_p" function
               (:arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [102125 102152]))                  
                :type "bool")
                nil [102090 102538])
            ("do_specbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [102565 102589])
                    ("bind" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [102590 102614])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102628 102646])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [102647 102679]))                  
                :type "void")
                nil [102540 103282])
            ("specbind" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103934 103953])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103954 103972]))                  
                :type "void")
                nil [103919 105681])
            ("record_unwind_protect" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105783 105795]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105797 105813]))                  
                :type "void")
                nil [105737 106005])
            ("record_unwind_protect_array" function
               (:arguments 
                  ( ("array" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [106041 106060])
                    ("nelts" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106061 106077]))                  
                :type "void")
                nil [106007 106243])
            ("record_unwind_protect_ptr" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [106295 106302]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [106304 106314]))                  
                :type "void")
                nil [106245 106509])
            ("record_unwind_protect_ptr_mark" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [106696 106703]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [106705 106715])
                    ("mark" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [106734 106741]))                          
                        :type "void")
                        nil nil))                  
                :type "void")
                nil [106641 106937])
            ("record_unwind_protect_int" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [106989 106993]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type "int") (reparse-symbol arg-sub-list) [106995 107003]))                  
                :type "void")
                nil [106939 107159])
            ("record_unwind_protect_intmax" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107214 107223]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107225 107238]))                  
                :type "void")
                nil [107161 107406])
            ("record_unwind_protect_excursion" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [107446 107451]))                  
                :type "void")
                nil [107408 107576])
            ("record_unwind_protect_void" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [107629 107634]))                          
                        :type "void")
                        nil nil))                  
                :type "void")
                nil [107578 107757])
            ("record_unwind_protect_module" function
               (:arguments 
                  ( ("kind" variable (:type ("specbind_tag" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [107794 107817])
                    ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [107818 107828]))                  
                :type "void")
                nil [107759 107994])
            ("do_one_unbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("this_binding" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [108023 108055])
                    ("unwinding" variable (:type "bool") (reparse-symbol arg-sub-list) [108056 108071])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [108087 108119]))                  
                :type "void")
                nil [107996 110728])
            ("do_nothing" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [110754 110759]))                  
                :type "void")
                nil [110730 110762])
            ("record_unwind_protect_nothing" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [110914 110919]))                  
                :type "void")
                nil [110878 110966])
            ("clear_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111109 111127]))                  
                :type "void")
                nil [111082 111265])
            ("set_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111469 111487])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111502 111514]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111522 111538]))                  
                :type "void")
                nil [111444 111720])
            ("set_unwind_protect_ptr" function
               (:arguments 
                  ( ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111751 111769])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [111784 111791]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [111793 111803]))                  
                :type "void")
                nil [111722 111988])
            ("unbind_to" function
               (:arguments 
                  ( ("count" variable (:type ("specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112127 112145])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112146 112164]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112104 112801])
            ("Sspecial_variable_p" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"special-variable-p\", Fspecial_variable_p, Sspecial_variable_p, 1, 1, 0,
       doc: /* Return non-nil if SYMBOL's global binding has been declared special.
A special variable is one that will be bound dynamically, even in a
context where binding is lexical by default.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [112803 113084])
            ("Fspecial_variable_p" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113088 113107]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112803 113199])
            ("get_backtrace_starting_at" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113257 113274]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [113203 113587])
            ("get_backtrace_frame" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113637 113657])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113658 113675]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [113589 113937])
            ("backtrace_frame_apply" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113981 114002])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [114003 114026]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113939 114483])
            ("Sbacktrace_debug" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"backtrace-debug\", Fbacktrace_debug, Sbacktrace_debug, 2, 2, 0,
       doc: /* Set the debug-on-exit flag of eval frame LEVEL levels down to FLAG.
The debugger is entered when that frame exits, if the flag is non-nil.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [114485 114714])
            ("Fbacktrace_debug" function
               (:arguments 
                  ( ("level" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114718 114736])
                    ("flag" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114737 114754]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [114485 114938])
            ("Smapbacktrace" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"mapbacktrace\", Fmapbacktrace, Smapbacktrace, 1, 2, 0,
       doc: /* Call FUNCTION for each frame in backtrace.
If BASE is non-nil, it should be a function and iteration will start
from its nearest activation frame.
FUNCTION is called with 4 arguments: EVALD, FUNC, ARGS, and FLAGS.  If
a frame has not evaluated its arguments yet or is a special form,
EVALD is nil and ARGS is a list of forms.  If a frame has evaluated
its arguments and called its function already, EVALD is t and ARGS is
a list of values.
FLAGS is a plist of properties of the current frame: currently, the
only supported property is :debug-on-exit.  `mapbacktrace' always
returns nil.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [114940 115608])
            ("Fmapbacktrace" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115615 115636])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115637 115654]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [114940 116080])
            ("Sbacktrace_frame_internal" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"backtrace-frame--internal\", Fbacktrace_frame_internal,
       Sbacktrace_frame_internal, 3, 3, NULL,
       doc: /* Call FUNCTION on stack frame NFRAMES away from BASE.
Return the result of FUNCTION, or nil if no matching frame could be found. */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [116082 116337])
            ("Fbacktrace_frame_internal" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116344 116365])
                    ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116366 116386])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116387 116404]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116082 116488])
            ("Sbacktrace_frames_from_thread" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"backtrace--frames-from-thread\", Fbacktrace_frames_from_thread,
       Sbacktrace_frames_from_thread, 1, 1, NULL,
       doc: /* Return the list of backtrace frames from current execution point in THREAD.
If a frame has not evaluated the arguments yet (or is a special form),
the value of the list element is (nil FUNCTION ARG-FORMS...).
If a frame has evaluated its arguments and called its function already,
the value of the list element is (t FUNCTION ARG-VALUES...).
A &rest arg is represented as the tail of the list ARG-VALUES.
FUNCTION is whatever was supplied as car of evaluated list,
or a lambda expression for macro calls.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [116490 117135])
            ("Fbacktrace_frames_from_thread" function
               (:arguments 
                  ( ("thread" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117142 117161]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116490 117814])
            ("specpdl_unrewind" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [118477 118500])
                    ("distance" variable (:type "int") (reparse-symbol arg-sub-list) [118501 118514])
                    ("vars_only" variable (:type "bool") (reparse-symbol arg-sub-list) [118515 118530]))                  
                :type "void")
                nil [118454 121422])
            ("backtrace_eval_unrewind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("distance" variable (:type "int") (reparse-symbol arg-sub-list) [121461 121474]))                  
                :type "void")
                nil [121424 121529])
            ("Sbacktrace_eval" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"backtrace-eval\", Fbacktrace_eval, Sbacktrace_eval, 2, 3, NULL,
       doc: /* Evaluate EXP in the context of some activation frame.
NFRAMES and BASE specify the activation frame to use, as in `backtrace-frame'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [121531 121754])
            ("Fbacktrace_eval" function
               (:arguments 
                  ( ("exp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121761 121777])
                    ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121778 121798])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121799 121816]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121531 122386])
            ("Sbacktrace__locals" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"backtrace--locals\", Fbacktrace__locals, Sbacktrace__locals, 1, 2, NULL,
       doc: /* Return names and values of local variables of a stack frame.
NFRAMES and BASE specify the activation frame to use, as in `backtrace-frame'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [122388 122627])
            ("Fbacktrace__locals" function
               (:arguments 
                  ( ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122631 122651])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122652 122669]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [122388 124566])
            ("mark_specpdl" function
               (:arguments 
                  ( ("first" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [124589 124614])
                    ("ptr" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [124615 124638]))                  
                :type "void")
                nil [124570 126169])
            ("get_backtrace" function
               (:arguments 
                  ( ("array" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126191 126209]))                  
                :type "void")
                nil [126171 126560])
            ("backtrace_top_function" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [126598 126603]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [126562 126716])
            ("syms_of_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [126737 126742]))                  
                :type "void")
                nil [126718 136364]))          
      :file "eval.c"
      :pointmax 136365
      :fsize 136364
      :lastmodtime '(25407 39374 738833 971000)
      :unmatched-syntax '((semantic-list "(\".subrs\")" 122388 . 122627) (symbol "ATTRIBUTE_SECTION" 122388 . 122627) (semantic-list "(\".subrs\")" 121531 . 121754) (symbol "ATTRIBUTE_SECTION" 121531 . 121754) (semantic-list "(\".subrs\")" 116490 . 117135) (symbol "ATTRIBUTE_SECTION" 116490 . 117135) (semantic-list "(\".subrs\")" 116082 . 116337) (symbol "ATTRIBUTE_SECTION" 116082 . 116337) (semantic-list "(\".subrs\")" 114940 . 115608) (symbol "ATTRIBUTE_SECTION" 114940 . 115608) (semantic-list "(\".subrs\")" 114485 . 114714) (symbol "ATTRIBUTE_SECTION" 114485 . 114714) (semantic-list "(\".subrs\")" 112803 . 113084) (symbol "ATTRIBUTE_SECTION" 112803 . 113084) (semantic-list "(\".subrs\")" 100765 . 100913) (symbol "ATTRIBUTE_SECTION" 100765 . 100913) (semantic-list "(\".subrs\")" 97899 . 98282) (symbol "ATTRIBUTE_SECTION" 97899 . 98282) (semantic-list "(\".subrs\")" 90186 . 90461) (symbol "ATTRIBUTE_SECTION" 90186 . 90461) (semantic-list "(\".subrs\")" 87929 . 88274) (symbol "ATTRIBUTE_SECTION" 87929 . 88274) (semantic-list "(\".subrs\")" 85152 . 85585) (symbol "ATTRIBUTE_SECTION" 85152 . 85585) (semantic-list "(\".subrs\")" 84028 . 84790) (symbol "ATTRIBUTE_SECTION" 84028 . 84790) (semantic-list "(\".subrs\")" 83096 . 83805) (symbol "ATTRIBUTE_SECTION" 83096 . 83805) (semantic-list "(\".subrs\")" 82293 . 82823) (symbol "ATTRIBUTE_SECTION" 82293 . 82823) (semantic-list "(\".subrs\")" 81427 . 82162) (symbol "ATTRIBUTE_SECTION" 81427 . 82162) (semantic-list "(\".subrs\")" 79051 . 79407) (symbol "ATTRIBUTE_SECTION" 79051 . 79407) (semantic-list "(\".subrs\")" 71758 . 72007) (symbol "ATTRIBUTE_SECTION" 71758 . 72007) (semantic-list "(\".subrs\")" 69930 . 70306) (symbol "ATTRIBUTE_SECTION" 69930 . 70306) (semantic-list "(\".subrs\")" 66665 . 67445) (symbol "ATTRIBUTE_SECTION" 66665 . 67445) (semantic-list "(\".subrs\")" 63099 . 63837) (symbol "ATTRIBUTE_SECTION" 63099 . 63837) (semantic-list #("(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 0 1 (macros (("...")))) 59135 . 59140) (semantic-list "(\".subrs\")" 50775 . 51495) (symbol "ATTRIBUTE_SECTION" 50775 . 51495) (semantic-list "(\".subrs\")" 39802 . 41400) (symbol "ATTRIBUTE_SECTION" 39802 . 41400) (semantic-list "(\".subrs\")" 39258 . 39597) (symbol "ATTRIBUTE_SECTION" 39258 . 39597) (semantic-list "(\".subrs\")" 38684 . 38857) (symbol "ATTRIBUTE_SECTION" 38684 . 38857) (CATCH 37635 . 37640) (symbol "ATTRIBUTE_COLD" 37596 . 37601) (STATIC 37589 . 37595) (semantic-list "(\".subrs\")" 35304 . 35749) (symbol "ATTRIBUTE_SECTION" 35304 . 35749) (semantic-list "(\".subrs\")" 33406 . 33869) (symbol "ATTRIBUTE_SECTION" 33406 . 33869) (semantic-list "(\".subrs\")" 32457 . 32845) (symbol "ATTRIBUTE_SECTION" 32457 . 32845) (semantic-list "(\".subrs\")" 31721 . 31999) (symbol "ATTRIBUTE_SECTION" 31721 . 31999) (semantic-list "(\".subrs\")" 29634 . 30023) (symbol "ATTRIBUTE_SECTION" 29634 . 30023) (semantic-list "(\".subrs\")" 27911 . 28314) (symbol "ATTRIBUTE_SECTION" 27911 . 28314) (semantic-list "(\".subrs\")" 27647 . 27787) (symbol "ATTRIBUTE_SECTION" 27647 . 27787) (semantic-list "(\".subrs\")" 27043 . 27222) (symbol "ATTRIBUTE_SECTION" 27043 . 27222) (semantic-list "(\".subrs\")" 25861 . 26666) (symbol "ATTRIBUTE_SECTION" 25861 . 26666) (semantic-list "(\".subrs\")" 25569 . 25737) (symbol "ATTRIBUTE_SECTION" 25569 . 25737) (semantic-list "(\".subrs\")" 23372 . 24587) (symbol "ATTRIBUTE_SECTION" 23372 . 24587) (semantic-list "(\".subrs\")" 21446 . 21759) (symbol "ATTRIBUTE_SECTION" 21446 . 21759) (semantic-list "(\".subrs\")" 20993 . 21214) (symbol "ATTRIBUTE_SECTION" 20993 . 21214) (semantic-list "(\".subrs\")" 20522 . 20718) (symbol "ATTRIBUTE_SECTION" 20522 . 20718) (semantic-list "(\".subrs\")" 16454 . 17051) (symbol "ATTRIBUTE_SECTION" 16454 . 17051) (semantic-list "(\".subrs\")" 14843 . 15236) (symbol "ATTRIBUTE_SECTION" 14843 . 15236) (semantic-list "(\".subrs\")" 14022 . 14700) (symbol "ATTRIBUTE_SECTION" 14022 . 14700) (semantic-list "(\".subrs\")" 12650 . 13167) (symbol "ATTRIBUTE_SECTION" 12650 . 13167) (semantic-list "(\".subrs\")" 12279 . 12536) (symbol "ATTRIBUTE_SECTION" 12279 . 12536) (semantic-list "(\".subrs\")" 11806 . 11956) (symbol "ATTRIBUTE_SECTION" 11806 . 11956) (semantic-list "(\".subrs\")" 10994 . 11494) (symbol "ATTRIBUTE_SECTION" 10994 . 11494) (semantic-list "(\".subrs\")" 10471 . 10812) (symbol "ATTRIBUTE_SECTION" 10471 . 10812) (semantic-list "(\".subrs\")" 10008 . 10248) (symbol "ATTRIBUTE_SECTION" 10008 . 10248) (semantic-list "(\".subrs\")" 9550 . 9782) (symbol "ATTRIBUTE_SECTION" 9550 . 9782) (semantic-list 2573 . 2579) (symbol 2559 . 2572) (punctuation 2558 . 2559) (symbol 2546 . 2557) (UNION 2540 . 2545) (semantic-list 2498 . 2519) (symbol 2483 . 2497) (punctuation 2482 . 2483) (symbol 2470 . 2481) (UNION 2464 . 2469) (semantic-list 2422 . 2443) (symbol 2403 . 2421) (symbol 2391 . 2402) (semantic-list 2349 . 2370) (symbol 2334 . 2348) (punctuation 2333 . 2334) (symbol 2321 . 2332) (semantic-list 2279 . 2300) (symbol 2267 . 2278) (BOOL 2262 . 2266))
      :lexical-table 
        '(("clobbered_eassert" (spp-arg-list ("E") 36054 . 36057) . ((symbol "verify" 36058 . 36064) (semantic-list "(sizeof (E) != 0)" 36065 . 36082)))
          ("CACHEABLE" . ((VOLATILE "volatile" 1218 . 1226)))
          )
)
    (semanticdb-table "semanticdb-table-15865fefb852"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [832 844])
            ("alloca.h" include (:system-flag t) nil [846 865])
            ("setjmp.h" include (:system-flag t) nil [866 885])
            ("stdalign.h" include (:system-flag t) nil [886 907])
            ("stdarg.h" include (:system-flag t) nil [908 927])
            ("stddef.h" include (:system-flag t) nil [928 947])
            ("string.h" include (:system-flag t) nil [948 967])
            ("float.h" include (:system-flag t) nil [968 986])
            ("inttypes.h" include (:system-flag t) nil [987 1008])
            ("limits.h" include (:system-flag t) nil [1009 1028])
            ("attribute.h" include (:system-flag t) nil [1030 1052])
            ("intprops.h" include (:system-flag t) nil [1053 1074])
            ("verify.h" include (:system-flag t) nil [1075 1094])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1516 1531])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1721 1744])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1798 1819])
            ("max" variable (:constant-flag t) nil [1907 1910])
            ("min" variable (:constant-flag t) nil [1949 1952])
            ("ARRAYELTS" variable (:constant-flag t) nil [2031 2040])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2174 2184])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2631 2653])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2654 2686])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2712 2721)
                        :type "int")
                        (reparse-symbol enumsubparts) [2694 2721])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2742 2752)
                        :type "int")
                        (reparse-symbol enumsubparts) [2723 2752]))                  
                :type "enum")
                nil [2687 2755])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2766 2779])
            ("pI" variable (:constant-flag t) nil [2798 2800])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2861 2888])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2889 2922])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2948 2958)
                        :type "int")
                        (reparse-symbol enumsubparts) [2930 2958])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2979 2990)
                        :type "int")
                        (reparse-symbol enumsubparts) [2960 2990]))                  
                :type "enum")
                nil [2923 2993])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3004 3017])
            ("pI" variable (:constant-flag t) nil [3037 3039])
            ("EMACS_INT" variable (:type "long int") nil [3088 3107])
            ("EMACS_UINT" variable (:type "long int") nil [3130 3150])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3176 3187)
                        :type "int")
                        (reparse-symbol enumsubparts) [3158 3187])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3208 3220)
                        :type "int")
                        (reparse-symbol enumsubparts) [3189 3220]))                  
                :type "enum")
                nil [3151 3223])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3234 3247])
            ("pI" variable (:constant-flag t) nil [3808 3810])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4032 4059]))                  
                :type "enum")
                nil [4024 4132])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4418 4443])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [4453 4466])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (4504 4514)
                        :type "int")
                        (reparse-symbol enumsubparts) [4483 4514]))                  
                :type "enum")
                nil [4476 4517])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4692 4707]))                  
                :type "int")
                nil [4684 4740])
            ("pD" variable (:constant-flag t) nil [5098 5100])
            ("AVOID" variable (:constant-flag t) nil [5185 5190])
            ("eassert" variable (:constant-flag t) nil [6490 6497])
            ("eassume" variable (:constant-flag t) nil [6568 6575])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (7983 8011)
                        :type "int")
                        (reparse-symbol enumsubparts) [7973 8011])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8099 8110)
                        :type "int")
                        (reparse-symbol enumsubparts) [8085 8110]))                  
                :type "enum")
                nil [7878 8115])
            ("INTTYPEBITS" variable (:constant-flag t) nil [8227 8238])
            ("VAL_MAX" variable (:constant-flag t) nil [8554 8561])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9004 9015])
            ("VALMASK" variable (:constant-flag t) nil [9208 9215])
            ("GCALIGNMENT" variable (:constant-flag t) nil [9904 9915])
            ("GCALIGNED_UNION_MEMBER" variable (:constant-flag t) nil [10997 11019])
            ("GCALIGNED_STRUCT" variable (:constant-flag t) nil [11173 11189])
            ("GCALIGNED" variable (:constant-flag t) nil [11205 11214])
            ("LISP_WORDS_ARE_POINTERS" variable (:constant-flag t) nil [11510 11533])
            ("Lisp_Word" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [11632 11660])
            ("lisp_h_XLI" variable (:constant-flag t) nil [13178 13188])
            ("lisp_h_XIL" variable (:constant-flag t) nil [13206 13216])
            ("lisp_h_XLP" variable (:constant-flag t) nil [13234 13244])
            ("lisp_h_Qnil" variable (:constant-flag t) nil [13292 13303])
            ("lisp_h_PSEUDOVECTORP" variable (:constant-flag t) nil [13669 13689])
            ("lisp_h_CHECK_FIXNUM" variable (:constant-flag t) nil [14006 14025])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [14075 14094])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [14144 14161])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [14248 14260])
            ("lisp_h_BASE_EQ" variable (:constant-flag t) nil [14295 14309])
            ("lisp_h_BASE2_EQ" variable (:constant-flag t) nil [14345 14360])
            ("lisp_h_EQ" variable (:constant-flag t) nil [14696 14705])
            ("lisp_h_FIXNUMP" variable (:constant-flag t) nil [15449 15463])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [15624 15637])
            ("lisp_h_NILP" variable (:constant-flag t) nil [15673 15684])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [15715 15736])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [15843 15867])
            ("lisp_h_SYMBOL_TRAPPED_WRITE_P" variable (:constant-flag t) nil [15939 15968])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [16017 16034])
            ("lisp_h_SYMBOL_WITH_POS_P" variable (:constant-flag t) nil [16126 16150])
            ("lisp_h_BARE_SYMBOL_P" variable (:constant-flag t) nil [16204 16224])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [16263 16277])
            ("lisp_h_TAGGEDP" variable (:constant-flag t) nil [16416 16430])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [16569 16587])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [16628 16639])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [16670 16681])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [16714 16726])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [16806 16818])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [17959 17983])
            ("INTMASK" variable (:constant-flag t) nil [19698 19705])
            ("case_Lisp_Int" variable (:constant-flag t) nil [19751 19764])
            ("ENUM_BF" variable (:constant-flag t) nil [20081 20088])
            ("Lisp_Object" type
               (:typedef ("Lisp_Word" type (:type "class") nil nil)
                :type "typedef")
                nil [24211 24241])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [24251 24265])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [24688 24704])
            ("ATTRIBUTE_PURE" variable (:type "int") nil [24938 24953])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [25541 25565])
            ("gflags" variable (:type "int") nil [26326 26333])
            ("false" variable (:type "int") nil [26451 26457])
            ("false" variable (:type "int") nil [26594 26600])
            ("false" variable (:type "int") nil [26730 26736])
            ("false" variable (:type "int") nil [26860 26866])
            ("false" variable (:type "int") nil [26996 27002])
            ("false" variable (:type "int") nil [27126 27132])
            ("true" variable (:type "int") nil [27467 27472])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [28158 28181])
            ("VALBITS" variable (:type "int") nil [28225 28233])
            ("XUNTAG" variable (:constant-flag t) nil [28669 28675])
            ("fwdptr" variable
               (:pointer 1
                :type "void")
                nil [29059 29078])
            ("lispfwd" variable (:type "int") nil [29081 29089])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("gcmarkbit" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [29533 29555])
                                ("redirect" variable
                                   (:suffix ":3"
                                    :type ("symbol_redirect" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [29864 29903])
                                ("trapped_write" variable
                                   (:suffix ":2"
                                    :type ("symbol_trapped_write" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [30058 30107])
                                ("interned" variable
                                   (:suffix ":2"
                                    :type "unsigned int")
                                    (reparse-symbol classsubparts) [30210 30232])
                                ("declared_special" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [30377 30406])
                                ("pinned" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [30486 30505])
                                ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30563 30580])
                                ("val" variable (:type ("" type
                                     (:members 
                                        ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30735 30753])
                                          ("alias" variable
                                             (:pointer 1
                                              :type ("Lisp_Symbol" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [30755 30781])
                                          ("blv" variable
                                             (:pointer 1
                                              :type ("Lisp_Buffer_Local_Value" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [30783 30819])
                                          ("fwd" variable (:type ("lispfwd" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30821 30833]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [30726 30846])
                                ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30920 30941])
                                ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30990 31008])
                                ("next" variable
                                   (:pointer 1
                                    :type ("Lisp_Symbol" type
                                         (:prototype t
                                          :type "struct")
                                          nil nil))
                                    (reparse-symbol classsubparts) [31087 31112]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [29514 31121])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [31126 31148]))                    
                  :type "union")
                  nil nil)) nil [29500 31155])
            ("EXFUN" variable (:constant-flag t) nil [31455 31460])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [31649 31664])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [31701 31721])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [31744 31756])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [31772 31784])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [31807 31819])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [31855 31867])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [31916 31928])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [31990 32002])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [32083 32095])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [32189 32201])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [32308 32320])
            ("untagged_ptr" type
               (:typedef ("uintptr_t" type (:type "class") nil nil)
                :type "typedef")
                nil [33028 33059])
            ("Lisp_Word_tag" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [33060 33093])
            ("LISP_WORD_TAG" variable (:constant-flag t) nil [33174 33187])
            ("TAG_PTR" variable (:constant-flag t) nil [33335 33342])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [33579 33596])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [33967 33985])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [34198 34210])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [34547 34577])
            ("POWER_OF_2" variable (:constant-flag t) nil [34657 34667])
            ("ROUNDUP" variable (:constant-flag t) nil [34935 34942])
            ("globals.h" include (:system-flag t) nil [35097 35117])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [36897 36912])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [36951 36982])
            ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [36985 37001])
            ("pos" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [37032 37048])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [37241 37256])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [37484 37501])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [39924 39944])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [39984 40004])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [40188 40213])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("PVEC_SYMBOL_WITH_POS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [40276 40305])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol, struct Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [40688 40756])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [40759 40790])
            ("p" variable (:type "int") nil [40800 40802])
            ("XBARE_SYMBOL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41000 41002]))                  
                :type "int")
                nil [40986 41003])
            ("XBARE_SYMBOL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSYMBOL_WITH_POS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41027 41047])
                    ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41049 41053]))                  
                :type "int")
                nil [41013 41054])
            ("symoffset" variable
               (:pointer 1
                :default-value "(char *) ((char *) sym - (char *) lispsym)"
                :type "char")
                nil [41227 41288])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Symbol, symoffset)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41291 41340])
            ("a" variable (:type "int") nil [41382 41384])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41469 41483]))                  
                :type "int")
                nil [41450 41485])
            ("bp" variable
               (:pointer 1
                :default-value "(char *) lispsym"
                :type "char")
                nil [41542 41570])
            ("sp" variable
               (:pointer 1
                :default-value "(char *) sym"
                :type "char")
                nil [41573 41597])
            ("lispsym" variable (:type "int") nil [41670 41678])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [41835 41859])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [41944 41961])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [42777 42804])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42988 42990]))                  
                :type "int")
                nil [42983 42991])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [43238 43260])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [43462 43489])
            ("VALBITS" variable (:type "int") nil [43614 43622])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43637 43639]))                  
                :type "int")
                nil [43632 43640])
            ("XFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43834 43836]))                  
                :type "int")
                nil [43821 43837])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [43965 43988])
            ("XUFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44139 44141]))                  
                :type "int")
                nil [44125 44142])
            ("XUFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [44256 44273])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [44462 44489])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44536 44539]))                  
                :type "int")
                nil [44531 44559])
            ("upper" variable (:type "int") nil [45258 45264])
            ("a" variable
               (:default-value "TAG_PTR (type, ptr)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45396 45432])
            ("a" variable (:type "int") nil [45506 45508])
            ("XSETINT" variable (:constant-flag t) nil [45520 45527])
            ("XSETFASTINT" variable (:constant-flag t) nil [45566 45577])
            ("XSETCONS" variable (:constant-flag t) nil [45622 45630])
            ("XSETVECTOR" variable (:constant-flag t) nil [45682 45692])
            ("XSETSTRING" variable (:constant-flag t) nil [45750 45760])
            ("XSETSYMBOL" variable (:constant-flag t) nil [45814 45824])
            ("XSETFLOAT" variable (:constant-flag t) nil [45868 45877])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46133 46138])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46139 46151]))                  
                :type "int")
                nil [46118 46152])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [46192 46204])
            ("PVECHEADERSIZE" variable (:constant-flag t) nil [46308 46322])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [46477 46493])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [46669 46685])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [46848 46870])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [47058 47082])
            ("XSETPROCESS" variable (:constant-flag t) nil [47154 47165])
            ("XSETWINDOW" variable (:constant-flag t) nil [47220 47230])
            ("XSETTERMINAL" variable (:constant-flag t) nil [47284 47296])
            ("XSETSUBR" variable (:constant-flag t) nil [47352 47360])
            ("XSETBUFFER" variable (:constant-flag t) nil [47412 47422])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [47476 47490])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [47548 47563])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [47622 47640])
            ("XSETTHREAD" variable (:constant-flag t) nil [47702 47712])
            ("XSETMUTEX" variable (:constant-flag t) nil [47766 47775])
            ("XSETCONDVAR" variable (:constant-flag t) nil [47828 47839])
            ("XSETNATIVE_COMP_UNIT" variable (:constant-flag t) nil [47894 47914])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Int0, p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48385 48424])
            ("a" variable (:type "int") nil [48434 48436])
            ("a" variable
               (:default-value "make_pointer_integer_unsafe (p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48494 48542])
            ("a" variable (:type "int") nil [48600 48602])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [48645 48679])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [48771 48787])
                                ("u" variable (:type ("" type
                                     (:members 
                                        ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [48841 48857])
                                          ("chain" variable
                                             (:pointer 1
                                              :type ("Lisp_Cons" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [48905 48929]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [48795 48940]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [48716 48949])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [48954 48976]))                    
                  :type "union")
                  nil nil)) nil [48702 48983])
            ("BASE_EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [49073 49089])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Cons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [49140 49157])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49216 49225])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49227 49234])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49235 49237]))                  
                :type "int")
                nil [49204 49238])
            ("car" variable (:type "int") nil [49855 49859])
            ("cdr" variable (:type "int") nil [49938 49942])
            ("car" variable (:type "int") nil [50035 50051])
            ("cdr" variable (:type "int") nil [50108 50124])
            ("n" variable (:type "int") nil [50368 50370])
            ("n" variable (:type "int") nil [50445 50447])
            ("XCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50591 50593]))                  
                :type "int")
                nil [50585 50594])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50637 50644])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50645 50647]))                  
                :type "int")
                nil [50616 50648])
            ("Qnil" variable (:type "int") nil [50658 50663])
            ("XCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50741 50743]))                  
                :type "int")
                nil [50735 50744])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50787 50794])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50795 50797]))                  
                :type "int")
                nil [50766 50798])
            ("Qnil" variable (:type "int") nil [50808 50813])
            ("Qnil" variable (:type "int") nil [50960 50965])
            ("Qnil" variable (:type "int") nil [51046 51051])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [51187 51202])
                                ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [51254 51274])
                                ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [51395 51414])
                                ("data" variable
                                   (:pointer 1
                                    :type "unsigned char")
                                    (reparse-symbol classsubparts) [51460 51480]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [51168 51489])
                      ("next" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [51494 51519])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [51524 51546]))                    
                  :type "union")
                  nil nil)) nil [51154 51553])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51655 51657])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51658 51670]))                  
                :type "int")
                nil [51646 51671])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51732 51743])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51745 51754])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51755 51757]))                  
                :type "int")
                nil [51720 51758])
            ("size_byte" variable (:type "int") nil [52022 52032])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [52771 52789])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [52915 52933])
            ("size_byte" variable
               (:default-value "XSTRING (str)->u.s.size;"
                :type "int")
                nil [53410 53446])
            ("data" variable (:type "int") nil [54023 54028])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54142 54149]))                  
                :type "int")
                nil [54135 54150])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54235 54242]))                  
                :type "int")
                nil [54228 54249])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54338 54345]))                  
                :type "int")
                nil [54331 54352])
            ("nchars" variable
               (:default-value "XSTRING (string)->u.s.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [54411 54457])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [54460 54482])
            ("nchars" variable (:type "int") nil [54492 54499])
            ("size_byte" variable (:type "int") nil [54788 54798])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [54808 54830])
            ("nbytes" variable (:type "int") nil [54840 54847])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54921 54937]))                  
                :type "int")
                nil [54907 54939])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [55263 55278])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("memchr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55355 55402])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55406 55411])
                    ("" variable (:type ("Qfilenamep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55419 55430])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55431 55438]))                  
                :type "int")
                nil [55343 55439])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [55709 55740])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [55745 55789])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [55866 55889])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [56084 56130])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [56133 56153])
            ("size" variable (:type "int") nil [56163 56168])
            ("PTRDIFF_MIN" variable (:type "int") nil [56329 56345])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [56412 56437])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56602 56613])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56615 56624])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56625 56627]))                  
                :type "int")
                nil [56590 56628])
            ("size" variable
               (:default-value "v->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [56783 56815])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [57541 57572])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [57614 57629])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [57847 57885])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [58840 58912])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [58956 58975])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [59035 59107])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [59158 59184])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59256 59258])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59259 59276]))                  
                :type "int")
                nil [59241 59277])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59343 59360])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59362 59377])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59378 59380]))                  
                :type "int")
                nil [59331 59381])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [59600 59640])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [59643 59663])
            ("size" variable (:type "int") nil [59673 59678])
            ("data" variable (:type "int") nil [59763 59768])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59881 59883]))                  
                :type "int")
                nil [59863 59884])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [59988 60005])
            ("Qnil" variable (:type "int") nil [60275 60280])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [60383 60400])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60493 60495]))                  
                :type "int")
                nil [60469 60526])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [60839 60853])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [61002 61016])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [61155 61175])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [61460 61480])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62102 62114]))                  
                :type "int")
                nil [62094 62115])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62172 62174])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62178 62185]))                  
                :type "int")
                nil [62164 62186])
            ("VECSIZE" variable (:constant-flag t) nil [62334 62341])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [62619 62632])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [64068 64099])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [64219 64238])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [64421 64440])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [64539 64559])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [64700 64718])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64724 64773])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64835 64877])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64968 64970])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64971 64987]))                  
                :type "int")
                nil [64953 64988])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [65319 65350])
            ("depth" variable (:type "int") nil [65741 65751])
            ("min_char" variable (:type "int") nil [65817 65830])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65892 65936])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66031 66033])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66034 66054]))                  
                :type "int")
                nil [66016 66055])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67236 67252])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67254 67260])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67261 67265])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67266 67270]))                  
                :type "int")
                nil [67207 67271])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67299 67302])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67303 67307])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67308 67312]))                  
                :type "int")
                nil [67283 67313])
            ("comp.h" include nil nil [67317 67334])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [67499 67530])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [67568 67573]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67549 67574])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67600 67612]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67581 67613])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67639 67651])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67652 67664]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67620 67665])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67691 67703])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67704 67716])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67717 67729]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67672 67730])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67756 67768])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67769 67781])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67782 67794])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67795 67807]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67737 67808])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67834 67846])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67847 67859])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67860 67872])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67873 67885])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67886 67898]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67815 67899])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67925 67937])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67938 67950])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67951 67963])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67964 67976])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67977 67989])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67990 68002]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [67906 68003])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68029 68041])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68042 68054])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68055 68067])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68068 68080])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68081 68093])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68094 68106])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68107 68119]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [68010 68120])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68146 68158])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68159 68171])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68172 68184])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68185 68197])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68198 68210])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68211 68223])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68224 68236])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68237 68249]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [68127 68250])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68284 68301]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [68257 68302])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68331 68341])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [68342 68356]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [68309 68357]))                    
                  :type "union")
                  nil nil)) nil [67535 68373])
            ("min_args" variable (:type "short") nil [68378 68403])
            ("max_args" variable (:type "short") nil [68378 68403])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [68408 68432])
            ("intspec" variable (:type ("" type
                 (:members 
                    ( ("string" variable
                         (:pointer 1
                          :constant-flag t
                          :type "char")
                          (reparse-symbol classsubparts) [68451 68470])
                      ("native" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68477 68496]))                    
                  :type "union")
                  nil nil)) nil [68437 68511])
            ("command_modes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68516 68542])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [68547 68561])
            ("s" variable (:type ("Lisp_Subr" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [68754 68773])
            ("gcaligned" variable (:type "int") nil [68778 68800])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68913 68915])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68916 68926]))                  
                :type "int")
                nil [68898 68927])
            ("s" variable (:type "int") nil [69068 69070])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [71032 71060])
            ("sys_setjmp" variable (:constant-flag t) nil [71070 71080])
            ("sys_longjmp" variable (:constant-flag t) nil [71104 71115])
            ("thread.h" include nil nil [71145 71164])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [71533 71602])
            ("alias" variable (:type "int") nil [71625 71631])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [71715 71783])
            ("blv" variable (:type "int") nil [71806 71810])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [71869 71944])
            ("fwd" variable (:type "int") nil [71967 71971])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [72166 72218])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [72234 72244])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [72339 72392])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [72408 72416])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [72491 72544])
            ("fwdptr" variable
               (:default-value "v"
                :type "int")
                nil [72564 72575])
            ("name" variable (:type "int") nil [72658 72663])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [72809 72827])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [73001 73036])
            ("DEFSYM" variable (:constant-flag t) nil [73750 73756])
            ("Lisp_Hash_Table" type
               (:prototype t
                :type "struct")
                nil [73995 74018])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74099 74116])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74166 74197])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74257 74287])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74354 74366])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74367 74379])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [74380 74405]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74332 74406])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74475 74487])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [74488 74513]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74452 74514])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [74673 74704])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74806 74823])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74957 74974])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [75222 75239])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [75486 75504])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [75756 75772])
            ("next_free" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [75840 75860])
            ("purecopy" variable (:type "bool") nil [75956 75970])
            ("rehash_threshold" variable (:type "float") nil [76271 76294])
            ("rehash_size" variable (:type "float") nil [76630 76648])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [76895 76921])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [76969 76997])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [77186 77220])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77416 77418])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77419 77435]))                  
                :type "int")
                nil [77401 77436])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [77605 77620])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77839 77841])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77842 77856])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77861 77865]))                  
                :type "int")
                nil [77833 77866])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78027 78029])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78030 78044])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78049 78054]))                  
                :type "int")
                nil [78021 78058])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78227 78229])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78230 78235])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78236 78240]))                  
                :type "int")
                nil [78221 78241])
            ("size" variable
               (:default-value "ASIZE (h->next)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [78358 78391])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [78394 78413])
            ("size" variable (:type "int") nil [78423 78428])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8125"
                :type "float")
                nil [78746 78799])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5 - 1"
                :type "float")
                nil [78880 78929])
            ("y" variable (:type "int") nil [79133 79135])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [79336 79367])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [79934 79956])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [80128 80156])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [80269 80296])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [80758 80783])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [80846 80864])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [81104 81122])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [81759 81790])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81795 81813])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81818 81834])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81839 81857])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [81862 81888])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [81941 81972])
            ("pointer" variable
               (:pointer 1
                :type "void")
                nil [81977 81991])
            ("val" variable
               (:default-value "TAG_PTR (Lisp_Int0, a)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82955 82996])
            ("make_misc_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83068 83070]))                  
                :type "int")
                nil [83053 83071])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83154 83156])
                    ("" variable (:type ("PVEC_MISC_PTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83157 83171]))                  
                :type "int")
                nil [83139 83172])
            ("XFIXNUMPTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83291 83293]))                  
                :type "int")
                nil [83279 83294])
            ("pointer" variable (:type "int") nil [83355 83363])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [83390 83421])
            ("db" variable
               (:pointer 1
                :type "void")
                nil [83424 83433])
            ("stmt" variable
               (:pointer 1
                :type "void")
                nil [83436 83447])
            ("name" variable
               (:pointer 1
                :type "char")
                nil [83450 83461])
            ("finalizer" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [83483 83490]))                  
                :type "void")
                nil [83464 83491])
            ("eof" variable (:type "bool") nil [83494 83503])
            ("is_statement" variable (:type "bool") nil [83506 83524])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [83571 83602])
            ("finalizer" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [83624 83631]))                  
                :type "void")
                nil [83605 83632])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [83635 83643])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [83724 83755])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [83964 83985])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84047 84075])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84080 84108])
            ("finalizers" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84132 84172])
            ("doomed_finalizers" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84173 84220])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84287 84289])
                    ("" variable (:type ("PVEC_FINALIZER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84290 84305]))                  
                :type "int")
                nil [84272 84306])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84524 84526])
                    ("" variable (:type ("PVEC_MARKER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84527 84539]))                  
                :type "int")
                nil [84509 84540])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84747 84749])
                    ("" variable (:type ("PVEC_OVERLAY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84750 84763]))                  
                :type "int")
                nil [84732 84764])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qsymbol_with_pos_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85024 85043])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85044 85046]))                  
                :type "int")
                nil [85003 85047])
            ("sym" variable (:type "int") nil [85079 85083])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qsymbol_with_pos_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85199 85218])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85219 85221]))                  
                :type "int")
                nil [85178 85222])
            ("pos" variable (:type "int") nil [85254 85258])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85326 85328])
                    ("" variable (:type ("PVEC_USER_PTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85329 85343]))                  
                :type "int")
                nil [85311 85344])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85558 85560])
                    ("" variable (:type ("PVEC_SQLITE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85561 85573]))                  
                :type "int")
                nil [85543 85574])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85639 85641])
                    ("" variable (:type ("PVEC_SQLITE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85642 85654]))                  
                :type "int")
                nil [85624 85655])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SQLITE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85716 85726])
                    ("" variable (:type ("Qsqlitep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85728 85737])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85738 85740]))                  
                :type "int")
                nil [85704 85741])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85947 85949])
                    ("" variable (:type ("PVEC_BIGNUM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85950 85962]))                  
                :type "int")
                nil [85932 85963])
            ("BIGNUMP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86039 86041]))                  
                :type "int")
                nil [86030 86042])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86207 86209]))                  
                :type "int")
                nil [86194 86210])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86323 86325]))                  
                :type "int")
                nil [86310 86326])
            ("INT_TO_INTEGER" variable (:constant-flag t) nil [86409 86423])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [86710 86734])
            ("intvar" variable
               (:pointer 1
                :type ("intmax_t" type (:type "class") nil nil))
                nil [86760 86777])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [87004 87028])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [87055 87069])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [87294 87318])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87344 87364])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [87533 87557])
            ("offset" variable (:type "int") nil [87590 87601])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [87682 87704])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [88934 88959])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [89077 89095])
            ("fwd" variable (:type ("lispfwd" type (:type "class") nil nil)) nil [89179 89191])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [89305 89323])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [89431 89451])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [89732 89752])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [89877 89901])
            ("offset" variable (:type "int") nil [89934 89945])
            ("p" variable
               (:pointer 1
                :default-value "a.fwdptr;"
                :type ("Lisp_Fwd_Type" type (:type "enum") nil nil))
                nil [90003 90042])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [90052 90055])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [90125 90145])
            ("fwdptr" variable (:type "int") nil [90262 90269])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [90351 90363])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [90370 90395])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [90402 90424]))                    
                  :type "union")
                  nil nil)) nil [90333 90433])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [90528 90546])
            ("data" variable (:type "int") nil [90748 90753])
            ("IEEE_FLOATING_POINT" variable (:constant-flag t) nil [91209 91228])
            ("XFIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92273 92275]))                  
                :type "int")
                nil [92264 92276])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [92418 92445])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [92526 92548])
            ("result" variable (:type "int") nil [92558 92565])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92640 92642]))                  
                :type "int")
                nil [92632 92643])
            ("hi" variable (:type "int") nil [92778 92781])
            ("TYPE_RANGED_FIXNUMP" variable (:constant-flag t) nil [92793 92812])
            ("EQ" variable (:type "int") nil [93037 93064])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93191 93193])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93194 93220]))                  
                :type "int")
                nil [93176 93221])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93289 93291])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93292 93306]))                  
                :type "int")
                nil [93274 93307])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93372 93374])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93375 93386]))                  
                :type "int")
                nil [93357 93387])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93453 93455])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93456 93468]))                  
                :type "int")
                nil [93438 93469])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("RECORDP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93530 93541])
                    ("" variable (:type ("Qrecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93543 93552])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93553 93555]))                  
                :type "int")
                nil [93518 93556])
            ("EQ" variable (:type "int") nil [93654 93678])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93813 93815]))                  
                :type "int")
                nil [93798 93816])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93876 93885])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93889 93897])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93899 93906])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93907 93909]))                  
                :type "int")
                nil [93864 93910])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93988 93996])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93998 94005])
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94006 94008]))                  
                :type "int")
                nil [93976 94009])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qfixnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [94060 94084])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94149 94167])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94169 94178])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94179 94187]))                  
                :type "int")
                nil [94137 94189])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94356 94358]))                  
                :type "int")
                nil [94349 94359])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94398 94400]))                  
                :type "int")
                nil [94390 94401])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94425 94433])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94434 94436]))                  
                :type "int")
                nil [94404 94437])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94519 94529])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94531 94541])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94542 94544]))                  
                :type "int")
                nil [94507 94545])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNATP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94605 94616])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94618 94629])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94630 94632]))                  
                :type "int")
                nil [94593 94633])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94837 94848])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94850 94859])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94860 94862]))                  
                :type "int")
                nil [94825 94863])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94925 94937])
                    ("" variable (:type ("Qintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94939 94949])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94950 94952]))                  
                :type "int")
                nil [94913 94953])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SUBRP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95012 95021])
                    ("" variable (:type ("Qsubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95023 95030])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95031 95033]))                  
                :type "int")
                nil [95000 95034])
            ("SUBR_SECTION_ATTRIBUTE" variable (:constant-flag t) nil [95343 95365])
            ("DEFUN" variable (:constant-flag t) nil [96925 96930])
            ("CALLMANY" variable (:constant-flag t) nil [97600 97608])
            ("CALLN" variable (:constant-flag t) nil [98042 98047])
            ("Ffuncall" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98212 98215]))                  
                :type "int")
                nil [98198 98216])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [101413 101424])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [101613 101630])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [101824 101835])
            ("DEFVAR_INT" variable (:constant-flag t) nil [102026 102036])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [102226 102239])
            ("CHAR_BIT" variable (:type "int") nil [104516 104525])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [104575 104584])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104605 104617]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [104591 104618])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [104625 104641])
                      ("eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [104648 104669]))                    
                  :type "struct")
                  nil nil)) nil [104530 104683])
            ("unwind_array" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [104733 104742])
                      ("nelts" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [104749 104765])
                      ("array" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [104772 104791]))                    
                  :type "struct")
                  nil nil)) nil [104688 104811])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [104861 104870])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [104891 104898]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [104877 104899])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [104930 104940])
                      ("mark" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [104961 104968]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [104947 104969]))                    
                  :type "struct")
                  nil nil)) nil [104816 105026])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105076 105085])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [105106 105110]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [105092 105111])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [105118 105126]))                    
                  :type "struct")
                  nil nil)) nil [105031 105144])
            ("unwind_intmax" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105194 105203])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105224 105233]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [105210 105234])
                      ("arg" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105241 105254]))                    
                  :type "struct")
                  nil nil)) nil [105149 105275])
            ("unwind_excursion" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105325 105334])
                      ("marker" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105341 105368])
                      ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105341 105368]))                    
                  :type "struct")
                  nil nil)) nil [105280 105392])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105442 105451])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [105472 105477]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [105458 105478]))                    
                  :type "struct")
                  nil nil)) nil [105397 105497])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105547 105556])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105624 105661])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105624 105661])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105624 105661]))                    
                  :type "struct")
                  nil nil)) nil [105502 105672])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [105722 105731])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [105738 105764])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105771 105792])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [105799 105817])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [105824 105840]))                    
                  :type "struct")
                  nil nil)) nil [105677 105850])
            ("specpdl_ref" type
               (:typedef ("ptrdiff_t" type (:type "class") nil nil)
                :type "typedef")
                nil [106333 106363])
            ("bytes" variable (:type "int") nil [106533 106539])
            ("ref" variable (:type "int") nil [106691 106695])
            ("wrap_specpdl_ref" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [106793 106807]))                  
                :type "int")
                nil [106775 106829])
            ("unwrap_specpdl_ref" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107131 107133]))                  
                :type "int")
                nil [107111 107134])
            ("unwrap_specpdl_ref" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107308 107310]))                  
                :type "int")
                nil [107288 107311])
            ("wrap_specpdl_ref" function
               (:prototype-flag t
                :type "int")
                nil [107472 107494])
            ("wrap_specpdl_ref" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("unwrap_specpdl_ref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107705 107729])
                    ("" variable
                       (:pointer 1
                        :type ("delta" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107738 107752]))                  
                :type "int")
                nil [107687 107774])
            ("wrap_specpdl_ref" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("specpdl_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108060 108073])
                    ("" variable (:type ("specpdl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108082 108090]))                  
                :type "int")
                nil [108034 108091])
            ("debug_on_exit" variable (:type "int") nil [108219 108233])
            ("grow_specpdl_allocation" function
               (:prototype-flag t
                :type "int")
                nil [108802 108829])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("specpdl_ref" type (:type "class") nil nil))
                nil [108935 108972])
            ("kind" variable
               (:default-value "SPECPDL_BACKTRACE"
                :type "int")
                nil [109024 109049])
            ("debug_on_exit" variable
               (:default-value "false"
                :type "int")
                nil [109068 109090])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [109109 109129])
            ("args" variable
               (:default-value "args"
                :type "int")
                nil [109176 109188])
            ("nargs" variable
               (:default-value "nargs"
                :type "int")
                nil [109207 109221])
            ("grow_specpdl" function
               (:prototype-flag t
                :type "int")
                nil [109224 109240])
            ("count" variable (:type "int") nil [109251 109257])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [110713 110735])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [110738 110760])
            ("nonlocal_exit" variable (:type ("nonlocal_exit" type (:type "enum") nil nil)) nil [110814 110847])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [110850 110866])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [110870 110891])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [110894 110919])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111252 111278])
            ("bytecode_dest" variable (:type "int") nil [111281 111299])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [111444 111460])
            ("f_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [111463 111491])
            ("pdlcount" variable (:type ("specpdl_ref" type (:type "class") nil nil)) nil [111494 111515])
            ("act_rec" variable
               (:pointer 1
                :type ("bc_frame" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [111518 111543])
            ("poll_suppress_count" variable (:type "int") nil [111546 111570])
            ("interrupt_input_blocked" variable (:type "int") nil [111573 111601])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111665 111703])
            ("QUITP" variable (:constant-flag t) nil [111748 111753])
            ("pending_signals" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [111800 111837])
            ("probably_quit" function
               (:prototype-flag t
                :type "int")
                nil [112624 112641])
            ("maybe_quit" function
               (:prototype-flag t
                :type "int")
                nil [112884 112898])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112903 112944])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112945 112983])
            ("staticidx" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [113162 113183])
            ("window" type
               (:prototype t
                :type "struct")
                nil [113231 113245])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [113246 113259])
            ("v" variable
               (:pointer 1
                :default-value "XVECTOR (a)"
                :type "void")
                nil [113862 113884])
            ("p" variable
               (:pointer 1
                :default-value "v"
                :type "char")
                nil [113887 113899])
            ("word_size" variable
               (:pointer 1
                :type ("i" type (:type "class") nil nil))
                nil [113930 113944])
            ("w" variable (:type "int") nil [113954 113956])
            ("xvector_contents_addr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114099 114101]))                  
                :type "int")
                nil [114076 114105])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("xvector_contents_addr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114373 114406])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114408 114413])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114414 114428])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114430 114435]))                  
                :type "int")
                nil [114365 114436])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114584 114586])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114587 114601])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114606 114610])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114611 114615]))                  
                :type "int")
                nil [114575 114616])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114725 114727])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114728 114742])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114747 114752])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114756 114760]))                  
                :type "int")
                nil [114716 114761])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [114950 114970])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [115063 115077])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [115176 115188])
            ("trapped_write" variable
               (:default-value "SYMBOL_NOWRITE"
                :type "int")
                nil [115266 115297])
            ("found" variable (:type "int") nil [115490 115496])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [115632 115646])
            ("intervals" variable (:type "int") nil [115761 115771])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [115896 115910])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [116116 116129])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [116229 116243])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [116488 116506])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [116681 116701])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [116826 116846])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [117036 117052])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [117102 117118])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [117170 117186])
            ("modiff_count" type
               (:typedef ("intmax_t" type (:type "class") nil nil)
                :type "typedef")
                nil [118332 118362])
            ("a0" variable
               (:default-value "*a"
                :type ("modiff_count" type (:type "class") nil nil))
                nil [118433 118454])
            ("incr" variable
               (:default-value "len ? 1 : 0"
                :type "int")
                nil [118455 118478])
            ("modiff_overflow" variable
               (:default-value "INT_ADD_WRAPV (a0, incr, a)"
                :type "bool")
                nil [118676 118727])
            ("a0" variable (:type "int") nil [118790 118793])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [118855 118894])
            ("make_int" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118914 118916]))                  
                :type "int")
                nil [118904 118917])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [119690 119705])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [121538 121553])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [121811 121827])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122617 122695])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122617 122695])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122617 122695])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [127560 127594])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [127676 127716])
            ("__builtin_unwind_init" variable (:constant-flag t) nil [131046 131067])
            ("flush_stack_call_func1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131224 131229])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131230 131234]))                  
                :type "int")
                nil [131200 131235])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [131379 131421])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131422 131453])
            ("consing_until_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [131454 131488])
            ("list" variable (:constant-flag t) nil [132010 132014])
            ("pure_list" variable (:constant-flag t) nil [132098 132107])
            ("visit" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [132356 132376])
                    ("" variable (:type ("gc_root_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [132377 132395])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [132396 132403]))                  
                :type "void")
                nil [132341 132404])
            ("data" variable
               (:pointer 1
                :type "void")
                nil [132407 132418])
            ("list1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132603 132615]))                  
                :type "int")
                nil [132596 132617])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132690 132702])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132704 132716]))                  
                :type "int")
                nil [132683 132718])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132803 132815])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132817 132829])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132831 132843]))                  
                :type "int")
                nil [132796 132845])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132942 132954])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132956 132968])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132970 132982])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132984 132996]))                  
                :type "int")
                nil [132935 132998])
            ("vectorlike_nbytes" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133552 133554])
                    ("" variable (:type ("header" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133555 133562]))                  
                :type "int")
                nil [133532 133563])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133728 133732])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133733 133745]))                  
                :type "int")
                nil [133707 133747])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134539 134543])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134544 134556]))                  
                :type "int")
                nil [134519 134558])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134730 134734])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134735 134747]))                  
                :type "int")
                nil [134717 134749])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [134928 134954])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [135365 135391])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("allocate_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135474 135496])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135498 135514]))                  
                :type "int")
                nil [135459 135515])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [135648 135704])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [135707 135750])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [135826 135840])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [135864 135884])
            ("v" variable (:type "int") nil [135894 135896])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("allocate_nil_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136097 136123])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136125 136141]))                  
                :type "int")
                nil [136082 136142])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [136237 136263])
            ("ALLOCATE_PLAIN_PSEUDOVECTOR" variable (:constant-flag t) nil [136344 136371])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [136601 136622])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [136937 136965])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137130 137157])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [137628 137654])
            ("__malloc_extra_blocks" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [137812 137848])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [139140 139183])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [139222 139241])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [139295 139318])
            ("Lisp_Object" function (:type "int") nil [139489 139518])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [139542 139565])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [140617 140668])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141421 141425])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141426 141438]))                  
                :type "int")
                nil [141411 141440])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141527 141531])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141532 141544]))                  
                :type "int")
                nil [141508 141546])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [141576 141611])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [141612 141642])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [141643 141682])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [141683 141720])
            ("backtrace_yet" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [141762 141788])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142205 142213]))                  
                :type "int")
                nil [142191 142261])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142375 142388])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142389 142394]))                  
                :type "int")
                nil [142366 142395])
            ("Lisp_Object" function (:type "int") nil [143004 143033])
            ("Lisp_Object" function (:type "int") nil [143182 143204])
            ("Lisp_Object" function (:type "int") nil [143219 143248])
            ("Lisp_Object" function (:type "int") nil [143297 143326])
            ("Lisp_Object" function (:type "int") nil [143354 143383])
            ("Lisp_Object" function (:type "int") nil [143432 143474])
            ("Lisp_Object" function (:type "int") nil [143515 143544])
            ("Lisp_Object" function (:type "int") nil [143597 143639])
            ("Lisp_Object" function (:type "int") nil [143685 143740])
            ("Lisp_Object" function (:type "int") nil [143782 143806])
            ("Lisp_Object" function (:type "int") nil [143816 143865])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [143938 143964])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146771 146773])
                    ("" variable (:type ("PVEC_MODULE_FUNCTION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146774 146795]))                  
                :type "int")
                nil [146756 146796])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [150646 150672])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [150760 150786])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152324 152331])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152332 152339])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152340 152345]))                  
                :type "int")
                nil [152296 152346])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152477 152484])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152485 152492])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152493 152512]))                  
                :type "int")
                nil [152449 152513])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [153506 153542])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [153543 153582])
            ("minibuf_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [153753 153784])
            ("command_loop_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [154281 154317])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [154318 154357])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [154358 154392])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [154428 154454])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [154845 154881])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [156273 156300])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [156301 156325])
            ("emacs_wd" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [156326 156354])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [156508 156572])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [156508 156572])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [157010 157036])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157163 157190])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157255 157280])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157342 157368])
            ("daemon_type" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [157453 157476])
            ("IS_DAEMON" variable (:constant-flag t) nil [157485 157494])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [157522 157536])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157776 157812])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157882 157916])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [157975 158007])
            ("Lisp_Process" type
               (:prototype t
                :type "struct")
                nil [158038 158058])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [158569 158585])
            ("CHILD_SETUP_ERROR_DESC" variable (:constant-flag t) nil [159134 159156])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [159403 159429])
            ("fp" variable (:type "int") nil [160255 160258])
            ("fp" variable
               (:default-value "act_rec"
                :type "int")
                nil [160349 160362])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [161164 161188])
            ("argc" variable (:type "int") nil [161411 161416])
            ("NO_INLINE" variable (:type "int") nil [162293 162303])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [163841 163873])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [164894 164949])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [164950 165007])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [166065 166101])
            ("false" variable (:type "int") nil [166884 166890])
            ("false" variable (:type "int") nil [166959 166965])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [167056 167086])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167148 167174])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167235 167261])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167330 167356])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167462 167488])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167574 167600])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [167679 167705])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type ("ATTRIBUTE_MALLOC" type (:type "class") nil nil)) nil [167745 167788])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type ("ATTRIBUTE_MALLOC" type (:type "class") nil nil)) nil [167830 167873])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [168139 168171])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168182 168187])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168188 168202])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168204 168209]))                  
                :type "int")
                nil [168174 168213])
            ("len" variable (:type "int") nil [168230 168234])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168698 168702])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168703 168715]))                  
                :type "int")
                nil [168680 168717])
            ("eabs" variable (:constant-flag t) nil [169078 169082])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [169375 169401])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [169411 169426])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [169519 169531])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [169630 169641])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [169948 169960])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [170395 170413])
            ("SAFE_FREE" variable (:constant-flag t) nil [170635 170644])
            ("SAFE_FREE_UNBIND_TO" variable (:constant-flag t) nil [171373 171392])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171620 171626])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171627 171631]))                  
                :type "int")
                nil [171609 171632])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [171759 171781])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [172611 172627])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [173426 173448])
            ("STACK_CONS" variable (:constant-flag t) nil [174281 174291])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [174372 174386])
            ("AUTO_CONS" variable (:constant-flag t) nil [174735 174744])
            ("AUTO_LIST1" variable (:constant-flag t) nil [174806 174816])
            ("AUTO_LIST2" variable (:constant-flag t) nil [174914 174924])
            ("AUTO_LIST3" variable (:constant-flag t) nil [175069 175079])
            ("AUTO_LIST4" variable (:constant-flag t) nil [175244 175254])
            ("AUTO_STRING" variable (:constant-flag t) nil [175811 175822])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [176263 176283])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [177110 177123])
            ("FOR_EACH_TAIL_SAFE" variable (:constant-flag t) nil [177330 177348])
            ("tortoise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [177524 177545])
            ("n" variable (:type "int") nil [177562 177564])
            ("q" variable (:type "unsigned short int") nil [177567 177588])
            ("FOR_EACH_TAIL_INTERNAL" variable (:constant-flag t) nil [178290 178312])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [178774 178794]))          
      :file "lisp.h"
      :pointmax 179177
      :fsize 179182
      :lastmodtime '(25377 16807 342851 215000)
      :unmatched-syntax '((symbol 179132 . 179149) (close-paren 179129 . 179130) (punctuation 179127 . 179128) (close-paren 179126 . 179127) (open-paren 179125 . 179126) (symbol 179103 . 179124) (close-paren 179097 . 179098) (number 179096 . 179097) (punctuation 179094 . 179095) (symbol 179077 . 179093) (open-paren 179076 . 179077) (IF 179073 . 179075) (open-paren 179069 . 179070) (close-paren 179067 . 179068) (VOID 179063 . 179067) (open-paren 179062 . 179063) (symbol 179053 . 179061) (VOID 179048 . 179052) (symbol 179041 . 179047) (punctuation 177590 . 177591) (close-paren 177589 . 177590) (semantic-list #("((a) > (b) ? (a) : (b))" 0 1 (macros (("b") ("a")))) 177557 . 177561) (symbol 177548 . 177556) (open-paren 177520 . 177521) (symbol 177497 . 177519) (STRUCT 177490 . 177496) (punctuation 176717 . 176718) (close-paren 176716 . 176717) (number 176712 . 176715) (punctuation 176710 . 176711) (symbol 176691 . 176709) (open-paren 176689 . 176690) (ENUM 176684 . 176688) (punctuation 174072 . 174073) (close-paren 174071 . 174072) (close-paren 174067 . 174068) (symbol 174038 . 174067) (punctuation 174037 . 174038) (punctuation 174035 . 174036) (punctuation 174034 . 174035) (symbol 174016 . 174030) (open-paren 174015 . 174016) (punctuation 174013 . 174014) (symbol 173996 . 174012) (punctuation 173990 . 173991) (symbol "false" 173968 . 173990) (punctuation 173966 . 173967) (symbol 173951 . 173965) (open-paren 173945 . 173946) (ENUM 173938 . 173942) (punctuation 173666 . 173667) (close-paren 173665 . 173666) (symbol 173659 . 173664) (punctuation 173657 . 173658) (symbol 173627 . 173656) (open-paren 173625 . 173626) (ENUM 173620 . 173624) (close-paren 173337 . 173338) (close-paren 173336 . 173337) (number 173335 . 173336) (punctuation 173333 . 173334) (number 173332 . 173333) (punctuation 173330 . 173331) (number 173329 . 173330) (open-paren 173328 . 173329) (symbol 173316 . 173327) (punctuation 173314 . 173315) (punctuation 173312 . 173313) (punctuation 173311 . 173312) (symbol 173301 . 173310) (symbol 173293 . 173300) (punctuation 173292 . 173293) (punctuation 173290 . 173291) (punctuation 173289 . 173290) (symbol "11" 173280 . 173288) (symbol 173272 . 173279) (punctuation 173270 . 173271) (punctuation 173269 . 173270) (close-paren 171633 . 171634) (RETURN 171602 . 171608) (punctuation 171598 . 171599) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "specpdl_ref_lt" 171565 . 171579)))) 171555 . 171598) (open-paren 171551 . 171552) (close-paren 171549 . 171550) (symbol 171546 . 171549) (symbol 171534 . 171545) (punctuation 171532 . 171533) (symbol 171524 . 171532) (symbol 171512 . 171523) (punctuation 171510 . 171511) (symbol 171505 . 171510) (symbol 171493 . 171504) (open-paren 171492 . 171493) (symbol 171472 . 171491) (symbol 171460 . 171471) (symbol 171453 . 171459) (close-paren 171070 . 171071) (semantic-list 170775 . 171069) (semantic-list 170724 . 170770) (WHILE 170718 . 170723) (open-paren 170714 . 170715) (close-paren 170712 . 170713) (symbol 170704 . 170712) (symbol 170692 . 170703) (open-paren 170691 . 170692) (symbol 170681 . 170690) (VOID 170676 . 170680) (symbol 170669 . 170675) (close-paren 169373 . 169374) (semantic-list 169370 . 169373) (open-paren 169369 . 169370) (symbol 169348 . 169368) (close-paren 169344 . 169345) (symbol 169338 . 169344) (open-paren 169337 . 169338) (symbol 169322 . 169336) (punctuation 169321 . 169322) (VOID 169316 . 169320) (EXTERN 169309 . 169315) (punctuation 169306 . 169307) (close-paren 169305 . 169306) (number 169300 . 169304) (punctuation 169298 . 169299) (number 169295 . 169297) (punctuation 169293 . 169294) (symbol 169282 . 169292) (open-paren 169280 . 169281) (symbol 169269 . 169279) (ENUM 169264 . 169268) (punctuation 168812 . 168813) (close-paren 168811 . 168812) (VOID 168807 . 168811) (open-paren 168806 . 168807) (symbol 168789 . 168805) (VOID 168784 . 168788) (EXTERN 168777 . 168783) (close-paren 168718 . 168719) (semantic-list 168710 . 168715) (RETURN 168673 . 168679) (open-paren 168600 . 168601) (close-paren 168598 . 168599) (symbol 168595 . 168598) (punctuation 168594 . 168595) (CHAR 168589 . 168593) (CONST 168583 . 168588) (open-paren 168582 . 168583) (symbol 168574 . 168581) (punctuation 168572 . 168573) (CHAR 168567 . 168571) (symbol 168560 . 168566) (punctuation 168557 . 168558) (close-paren 168556 . 168557) (symbol 168547 . 168556) (punctuation 168545 . 168546) (punctuation 168544 . 168545) (CHAR 168539 . 168543) (CONST 168533 . 168538) (open-paren 168532 . 168533) (symbol 168515 . 168531) (punctuation 168514 . 168515) (CHAR 168509 . 168513) (EXTERN 168502 . 168508) (punctuation 168499 . 168500) (close-paren 168498 . 168499) (punctuation 168497 . 168498) (CHAR 168492 . 168496) (CONST 168486 . 168491) (open-paren 168485 . 168486) (symbol 168477 . 168484) (VOID 168472 . 168476) (EXTERN 168465 . 168471) (close-paren 168455 . 168456) (open-paren 168453 . 168454) (close-paren 168451 . 168452) (symbol 168450 . 168451) (punctuation 168449 . 168450) (CONST 168443 . 168448) (VOID 168438 . 168442) (open-paren 168437 . 168438) (symbol 168416 . 168436) (VOID 168411 . 168415) (symbol 168404 . 168410) (close-paren 168235 . 168236) (punctuation 168228 . 168229) (symbol 168223 . 168227) (RETURN 168216 . 168222) (number 168210 . 168211) (punctuation 168208 . 168209) (semantic-list 168194 . 168202) (open-paren 168135 . 168136) (close-paren 168133 . 168134) (symbol 168127 . 168133) (symbol 168115 . 168126) (punctuation 168113 . 168114) (symbol 168109 . 168113) (punctuation 168108 . 168109) (CHAR 168103 . 168107) (open-paren 168102 . 168103) (symbol 168091 . 168101) (punctuation 168089 . 168090) (CHAR 168084 . 168088) (symbol 168077 . 168083) (punctuation 167919 . 167920) (close-paren 167918 . 167919) (punctuation 167917 . 167918) (CONST 167911 . 167916) (CHAR 167906 . 167910) (punctuation 167904 . 167905) (punctuation 167903 . 167904) (punctuation 167902 . 167903) (CHAR 167897 . 167901) (open-paren 167896 . 167897) (symbol 167886 . 167895) (VOID 167881 . 167885) (EXTERN 167874 . 167880) (close-paren 167826 . 167827) (symbol 167815 . 167826) (open-paren 167814 . 167815) (symbol 167802 . 167813) (punctuation 167801 . 167802) (CHAR 167796 . 167800) (EXTERN 167789 . 167795) (close-paren 167741 . 167742) (punctuation 167740 . 167741) (CONST 167734 . 167739) (CHAR 167729 . 167733) (open-paren 167728 . 167729) (symbol 167720 . 167727) (punctuation 167719 . 167720) (CHAR 167714 . 167718) (EXTERN 167707 . 167713) (close-paren 167675 . 167676) (symbol 167666 . 167675) (punctuation 167664 . 167665) (symbol 167655 . 167664) (punctuation 167653 . 167654) (symbol 167644 . 167653) (punctuation 167642 . 167643) (punctuation 167641 . 167642) (symbol 167631 . 167640) (punctuation 167629 . 167630) (punctuation 167628 . 167629) (VOID 167623 . 167627) (open-paren 167622 . 167623) (symbol 167614 . 167621) (punctuation 167613 . 167614) (VOID 167608 . 167612) (EXTERN 167601 . 167607) (close-paren 167572 . 167573) (semantic-list 167567 . 167572) (open-paren 167566 . 167567) (symbol 167545 . 167565) (close-paren 167541 . 167542) (symbol 167532 . 167541) (punctuation 167530 . 167531) (symbol 167521 . 167530) (punctuation 167519 . 167520) (punctuation 167518 . 167519) (VOID 167513 . 167517) (open-paren 167512 . 167513) (symbol 167502 . 167511) (punctuation 167501 . 167502) (VOID 167496 . 167500) (EXTERN 167489 . 167495) (close-paren 167460 . 167461) (semantic-list 167455 . 167460) (open-paren 167454 . 167455) (symbol 167432 . 167453) (close-paren 167428 . 167429) (symbol 167419 . 167428) (punctuation 167417 . 167418) (symbol 167408 . 167417) (open-paren 167407 . 167408) (symbol 167398 . 167406) (punctuation 167397 . 167398) (VOID 167392 . 167396) (EXTERN 167385 . 167391) (punctuation 167383 . 167384) (close-paren 167382 . 167383) (punctuation 167381 . 167382) (VOID 167376 . 167380) (open-paren 167375 . 167376) (symbol 167369 . 167374) (VOID 167364 . 167368) (EXTERN 167357 . 167363) (close-paren 167328 . 167329) (semantic-list 167325 . 167328) (open-paren 167324 . 167325) (symbol 167303 . 167323) (close-paren 167299 . 167300) (symbol 167293 . 167299) (punctuation 167291 . 167292) (punctuation 167290 . 167291) (VOID 167285 . 167289) (open-paren 167284 . 167285) (symbol 167275 . 167283) (punctuation 167274 . 167275) (VOID 167269 . 167273) (EXTERN 167262 . 167268) (close-paren 167233 . 167234) (semantic-list 167230 . 167233) (open-paren 167229 . 167230) (symbol 167207 . 167228) (close-paren 167203 . 167204) (symbol 167197 . 167203) (open-paren 167196 . 167197) (symbol 167188 . 167195) (punctuation 167187 . 167188) (VOID 167182 . 167186) (EXTERN 167175 . 167181) (close-paren 167146 . 167147) (semantic-list 167143 . 167146) (open-paren 167142 . 167143) (symbol 167120 . 167141) (close-paren 167116 . 167117) (symbol 167110 . 167116) (open-paren 167109 . 167110) (symbol 167101 . 167108) (punctuation 167100 . 167101) (VOID 167095 . 167099) (EXTERN 167088 . 167094) (punctuation 167054 . 167055) (close-paren 167053 . 167054) (open-paren 167052 . 167053) (symbol 167043 . 167052) (CHAR 167038 . 167042) (EXTERN 167031 . 167037) (punctuation 167029 . 167030) (close-paren 167028 . 167029) (open-paren 167027 . 167028) (symbol 167019 . 167027) (CHAR 167014 . 167018) (EXTERN 167007 . 167013) (close-paren 166966 . 166967) (RETURN 166952 . 166958) (open-paren 166948 . 166949) (close-paren 166946 . 166947) (symbol 166945 . 166946) (symbol 166933 . 166944) (open-paren 166932 . 166933) (symbol 166906 . 166931) (BOOL 166901 . 166905) (symbol 166894 . 166900) (close-paren 166891 . 166892) (RETURN 166877 . 166883) (open-paren 166873 . 166874) (close-paren 166871 . 166872) (symbol 166870 . 166871) (symbol 166858 . 166869) (open-paren 166857 . 166858) (symbol 166835 . 166856) (BOOL 166830 . 166834) (symbol 166823 . 166829) (punctuation 166172 . 166173) (close-paren 166171 . 166172) (VOID 166167 . 166171) (open-paren 166166 . 166167) (symbol 166149 . 166165) (VOID 166144 . 166148) (EXTERN 166137 . 166143) (punctuation 166135 . 166136) (close-paren 166134 . 166135) (symbol 166128 . 166134) (open-paren 166127 . 166128) (symbol 166114 . 166126) (VOID 166109 . 166113) (EXTERN 166102 . 166108) (punctuation 165607 . 165608) (close-paren 165606 . 165607) (VOID 165602 . 165606) (open-paren 165601 . 165602) (symbol 165589 . 165600) (VOID 165584 . 165588) (EXTERN 165577 . 165583) (punctuation 165073 . 165074) (close-paren 165072 . 165073) (VOID 165068 . 165072) (open-paren 165067 . 165068) (symbol 165055 . 165066) (VOID 165050 . 165054) (EXTERN 165043 . 165049) (punctuation 165041 . 165042) (close-paren 165040 . 165041) (VOID 165036 . 165040) (open-paren 165035 . 165036) (symbol 165020 . 165034) (VOID 165015 . 165019) (EXTERN 165008 . 165014) (punctuation 164182 . 164183) (close-paren 164181 . 164182) (VOID 164177 . 164181) (open-paren 164176 . 164177) (symbol 164166 . 164175) (VOID 164161 . 164165) (EXTERN 164154 . 164160) (punctuation 164152 . 164153) (close-paren 164151 . 164152) (VOID 164147 . 164151) (open-paren 164146 . 164147) (symbol 164133 . 164145) (VOID 164128 . 164132) (EXTERN 164121 . 164127) (punctuation 164092 . 164093) (close-paren 164091 . 164092) (symbol 164080 . 164091) (open-paren 164079 . 164080) (symbol 164065 . 164078) (punctuation 164063 . 164064) (CHAR 164058 . 164062) (EXTERN 164051 . 164057) (punctuation 164049 . 164050) (close-paren 164048 . 164049) (VOID 164044 . 164048) (open-paren 164043 . 164044) (symbol 164026 . 164042) (VOID 164021 . 164025) (EXTERN 164014 . 164020) (punctuation 163981 . 163982) (close-paren 163980 . 163981) (number 163979 . 163980) (punctuation 163977 . 163978) (number 163976 . 163977) (open-paren 163975 . 163976) (symbol 163951 . 163974) (close-paren 163949 . 163950) (punctuation 163948 . 163949) (punctuation 163947 . 163948) (punctuation 163946 . 163947) (punctuation 163944 . 163945) (symbol 163939 . 163944) (punctuation 163938 . 163939) (CHAR 163933 . 163937) (CONST 163927 . 163932) (open-paren 163926 . 163927) (symbol 163920 . 163925) (VOID "void" 163914 . 163919) (symbol "ATTRIBUTE_COLD" 163914 . 163919) (EXTERN 163907 . 163913) (punctuation 163905 . 163906) (close-paren 163904 . 163905) (VOID 163900 . 163904) (open-paren 163899 . 163900) (symbol 163886 . 163898) (VOID 163881 . 163885) (EXTERN 163874 . 163880) (punctuation 163812 . 163813) (close-paren 163811 . 163812) (symbol 163800 . 163811) (punctuation 163798 . 163799) (symbol 163787 . 163798) (punctuation 163785 . 163786) (BOOL 163781 . 163785) (punctuation 163734 . 163735) (symbol 163723 . 163734) (punctuation 163721 . 163722) (symbol 163710 . 163721) (punctuation 163663 . 163664) (symbol 163652 . 163663) (punctuation 163650 . 163651) (symbol 163639 . 163650) (open-paren 163638 . 163639) (symbol 163613 . 163637) (symbol 163601 . 163612) (EXTERN 163594 . 163600) (punctuation 163592 . 163593) (close-paren 163591 . 163592) (VOID 163587 . 163591) (open-paren 163586 . 163587) (symbol 163572 . 163585) (VOID 163567 . 163571) (EXTERN 163560 . 163566) (punctuation 163530 . 163531) (close-paren 163529 . 163530) (VOID 163525 . 163529) (open-paren 163524 . 163525) (symbol 163512 . 163523) (VOID 163507 . 163511) (EXTERN 163500 . 163506) (punctuation 163472 . 163473) (close-paren 163471 . 163472) (VOID 163467 . 163471) (open-paren 163466 . 163467) (symbol 163449 . 163465) (VOID 163444 . 163448) (EXTERN 163437 . 163443) (punctuation 163435 . 163436) (close-paren 163434 . 163435) (INT 163431 . 163434) (open-paren 163430 . 163431) (symbol 163412 . 163429) (symbol 163400 . 163411) (EXTERN 163393 . 163399) (punctuation 163391 . 163392) (close-paren 163390 . 163391) (VOID 163386 . 163390) (open-paren 163385 . 163386) (symbol 163366 . 163384) (VOID 163361 . 163365) (EXTERN 163354 . 163360) (punctuation 163321 . 163322) (close-paren 163320 . 163321) (VOID 163316 . 163320) (open-paren 163315 . 163316) (symbol 163301 . 163314) (VOID 163296 . 163300) (EXTERN 163289 . 163295) (punctuation 163259 . 163260) (close-paren 163258 . 163259) (VOID 163254 . 163258) (open-paren 163253 . 163254) (symbol 163236 . 163252) (VOID 163231 . 163235) (EXTERN 163224 . 163230) (punctuation 163222 . 163223) (close-paren 163221 . 163222) (punctuation 163220 . 163221) (symbol 163213 . 163219) (STRUCT 163206 . 163212) (open-paren 163205 . 163206) (symbol 163191 . 163204) (VOID 163186 . 163190) (EXTERN 163179 . 163185) (punctuation 163177 . 163178) (close-paren 163176 . 163177) (VOID 163172 . 163176) (open-paren 163171 . 163172) (symbol 163154 . 163170) (VOID 163149 . 163153) (EXTERN 163142 . 163148) (punctuation 163109 . 163110) (close-paren 163108 . 163109) (VOID 163104 . 163108) (open-paren 163103 . 163104) (symbol 163088 . 163102) (VOID 163083 . 163087) (EXTERN 163076 . 163082) (punctuation 163074 . 163075) (close-paren 163073 . 163074) (symbol 163062 . 163073) (punctuation 163060 . 163061) (symbol 163049 . 163060) (punctuation 163047 . 163048) (symbol 163036 . 163047) (punctuation 163034 . 163035) (symbol 163023 . 163034) (open-paren 163022 . 163023) (symbol 163010 . 163021) (INT 163006 . 163009) (EXTERN 162999 . 163005) (punctuation 162997 . 162998) (close-paren 162996 . 162997) (punctuation 162995 . 162996) (CONST 162989 . 162994) (CHAR 162984 . 162988) (punctuation 162982 . 162983) (INT 162979 . 162982) (punctuation 162977 . 162978) (punctuation 162976 . 162977) (CONST 162970 . 162975) (CHAR 162965 . 162969) (punctuation 162963 . 162964) (INT 162960 . 162963) (open-paren 162959 . 162960) (symbol 162940 . 162958) (INT 162936 . 162939) (EXTERN 162929 . 162935) (punctuation 162927 . 162928) (close-paren 162926 . 162927) (punctuation 162925 . 162926) (CONST 162919 . 162924) (CHAR 162914 . 162918) (open-paren 162913 . 162914) (symbol 162900 . 162912) (VOID 162895 . 162899) (EXTERN 162888 . 162894) (punctuation 162886 . 162887) (close-paren 162885 . 162886) (symbol 162876 . 162885) (punctuation 162874 . 162875) (punctuation 162873 . 162874) (CONST 162867 . 162872) (VOID 162862 . 162866) (punctuation 162860 . 162861) (INT 162857 . 162860) (open-paren 162856 . 162857) (symbol 162839 . 162855) (symbol 162829 . 162838) (EXTERN 162822 . 162828) (punctuation 162820 . 162821) (close-paren 162819 . 162820) (symbol 162810 . 162819) (punctuation 162808 . 162809) (punctuation 162807 . 162808) (CONST 162801 . 162806) (VOID 162796 . 162800) (punctuation 162794 . 162795) (INT 162791 . 162794) (open-paren 162790 . 162791) (symbol 162774 . 162789) (symbol 162764 . 162773) (EXTERN 162757 . 162763) (punctuation 162755 . 162756) (close-paren 162754 . 162755) (symbol 162745 . 162754) (punctuation 162743 . 162744) (punctuation 162742 . 162743) (CONST 162736 . 162741) (VOID 162731 . 162735) (punctuation 162729 . 162730) (INT 162726 . 162729) (open-paren 162725 . 162726) (symbol 162713 . 162724) (symbol 162703 . 162712) (EXTERN 162696 . 162702) (punctuation 162694 . 162695) (close-paren 162693 . 162694) (symbol 162684 . 162693) (punctuation 162682 . 162683) (punctuation 162681 . 162682) (VOID 162676 . 162680) (punctuation 162674 . 162675) (INT 162671 . 162674) (open-paren 162670 . 162671) (symbol 162654 . 162669) (symbol 162644 . 162653) (EXTERN 162637 . 162643) (punctuation 162635 . 162636) (close-paren 162634 . 162635) (symbol 162625 . 162634) (punctuation 162623 . 162624) (punctuation 162622 . 162623) (VOID 162617 . 162621) (punctuation 162615 . 162616) (INT 162612 . 162615) (open-paren 162611 . 162612) (symbol 162600 . 162610) (symbol 162590 . 162599) (EXTERN 162583 . 162589) (punctuation 162581 . 162582) (close-paren 162580 . 162581) (INT 162577 . 162580) (open-paren 162576 . 162577) (symbol 162564 . 162575) (INT 162560 . 162563) (EXTERN 162553 . 162559) (punctuation 162551 . 162552) (close-paren 162550 . 162551) (semantic-list 162547 . 162550) (INT 162544 . 162547) (open-paren 162543 . 162544) (symbol 162532 . 162542) (INT 162528 . 162531) (EXTERN 162521 . 162527) (punctuation 162519 . 162520) (close-paren 162518 . 162519) (INT 162515 . 162518) (punctuation 162513 . 162514) (INT 162510 . 162513) (punctuation 162508 . 162509) (punctuation 162507 . 162508) (CHAR 162502 . 162506) (CONST 162496 . 162501) (open-paren 162495 . 162496) (symbol 162477 . 162494) (INT 162473 . 162476) (EXTERN 162466 . 162472) (punctuation 162464 . 162465) (close-paren 162463 . 162464) (INT 162460 . 162463) (punctuation 162458 . 162459) (INT 162455 . 162458) (punctuation 162453 . 162454) (punctuation 162452 . 162453) (CHAR 162447 . 162451) (CONST 162441 . 162446) (open-paren 162440 . 162441) (symbol 162429 . 162439) (INT 162425 . 162428) (EXTERN 162418 . 162424) (punctuation 162416 . 162417) (close-paren 162415 . 162416) (INT 162412 . 162415) (punctuation 162410 . 162411) (INT 162407 . 162410) (punctuation 162405 . 162406) (punctuation 162404 . 162405) (CONST 162398 . 162403) (CHAR 162393 . 162397) (punctuation 162391 . 162392) (INT 162388 . 162391) (open-paren 162387 . 162388) (symbol 162374 . 162386) (INT 162370 . 162373) (EXTERN 162363 . 162369) (punctuation 162361 . 162362) (close-paren 162360 . 162361) (INT 162357 . 162360) (punctuation 162355 . 162356) (punctuation 162354 . 162355) (VOID 162349 . 162353) (punctuation 162347 . 162348) (punctuation 162346 . 162347) (CONST 162340 . 162345) (CHAR 162335 . 162339) (punctuation 162333 . 162334) (INT 162330 . 162333) (open-paren 162329 . 162330) (symbol 162315 . 162328) (INT 162311 . 162314) (EXTERN 162304 . 162310) (close-paren 162291 . 162292) (VOID 162287 . 162291) (open-paren 162286 . 162287) (symbol 162274 . 162285) (VOID "void" 162268 . 162273) (symbol "ATTRIBUTE_COLD" 162268 . 162273) (EXTERN 162261 . 162267) (punctuation 162259 . 162260) (close-paren 162258 . 162259) (INT 162255 . 162258) (open-paren 162254 . 162255) (symbol 162238 . 162253) (VOID 162233 . 162237) (EXTERN 162226 . 162232) (punctuation 162224 . 162225) (close-paren 162223 . 162224) (VOID 162219 . 162223) (open-paren 162218 . 162219) (symbol 162206 . 162217) (VOID 162201 . 162205) (EXTERN 162194 . 162200) (punctuation 162192 . 162193) (close-paren 162191 . 162192) (symbol 162182 . 162191) (punctuation 162180 . 162181) (punctuation 162179 . 162180) (VOID 162174 . 162178) (open-paren 162173 . 162174) (symbol 162161 . 162172) (VOID 162156 . 162160) (EXTERN 162149 . 162155) (punctuation 162147 . 162148) (close-paren 162146 . 162147) (VOID 162142 . 162146) (open-paren 162141 . 162142) (symbol 162124 . 162140) (INT 162120 . 162123) (LONG 162115 . 162119) (UNSIGNED 162106 . 162114) (EXTERN 162099 . 162105) (punctuation 162097 . 162098) (close-paren 162096 . 162097) (VOID 162092 . 162096) (open-paren 162091 . 162092) (symbol 162080 . 162090) (symbol 162070 . 162079) (EXTERN 162063 . 162069) (punctuation 162061 . 162062) (close-paren 162060 . 162061) (INT 162057 . 162060) (punctuation 162055 . 162056) (INT 162052 . 162055) (punctuation 162050 . 162051) (INT 162047 . 162050) (open-paren 162046 . 162047) (symbol 162030 . 162045) (INT 162026 . 162029) (EXTERN 162019 . 162025) (punctuation 162017 . 162018) (close-paren 162016 . 162017) (INT 162013 . 162016) (open-paren 162012 . 162013) (symbol 162002 . 162011) (VOID 161997 . 162001) (EXTERN 161990 . 161996) (punctuation 161988 . 161989) (close-paren 161987 . 161988) (INT 161984 . 161987) (open-paren 161983 . 161984) (symbol 161967 . 161982) (VOID 161962 . 161966) (EXTERN 161955 . 161961) (punctuation 161953 . 161954) (close-paren 161952 . 161953) (VOID 161948 . 161952) (open-paren 161947 . 161948) (symbol 161927 . 161946) (VOID 161922 . 161926) (EXTERN 161915 . 161921) (punctuation 161913 . 161914) (close-paren 161912 . 161913) (VOID 161908 . 161912) (open-paren 161907 . 161908) (symbol 161888 . 161906) (VOID 161883 . 161887) (EXTERN 161876 . 161882) (punctuation 161874 . 161875) (close-paren 161873 . 161874) (punctuation 161872 . 161873) (symbol 161855 . 161871) (STRUCT 161848 . 161854) (open-paren 161847 . 161848) (symbol 161831 . 161846) (VOID 161826 . 161830) (EXTERN 161819 . 161825) (punctuation 161817 . 161818) (close-paren 161816 . 161817) (punctuation 161815 . 161816) (symbol 161798 . 161814) (STRUCT 161791 . 161797) (open-paren 161790 . 161791) (symbol 161775 . 161789) (VOID 161770 . 161774) (EXTERN 161763 . 161769) (punctuation 161761 . 161762) (close-paren 161760 . 161761) (VOID 161756 . 161760) (open-paren 161755 . 161756) (symbol 161737 . 161754) (VOID 161732 . 161736) (EXTERN 161725 . 161731) (punctuation 161723 . 161724) (close-paren 161722 . 161723) (VOID 161718 . 161722) (open-paren 161717 . 161718) (symbol 161705 . 161716) (VOID 161700 . 161704) (EXTERN 161693 . 161699) (punctuation 161691 . 161692) (close-paren 161690 . 161691) (VOID 161686 . 161690) (open-paren 161685 . 161686) (symbol 161672 . 161684) (VOID 161667 . 161671) (EXTERN 161660 . 161666) (punctuation 161658 . 161659) (close-paren 161657 . 161658) (VOID 161653 . 161657) (open-paren 161652 . 161653) (symbol 161630 . 161651) (VOID 161625 . 161629) (EXTERN 161618 . 161624) (punctuation 161616 . 161617) (close-paren 161615 . 161616) (symbol 161614 . 161615) (CHAR 161609 . 161613) (open-paren 161608 . 161609) (symbol 161597 . 161607) (VOID 161592 . 161596) (EXTERN 161585 . 161591) (punctuation 161583 . 161584) (close-paren 161582 . 161583) (VOID 161578 . 161582) (open-paren 161577 . 161578) (symbol 161550 . 161576) (punctuation 161549 . 161550) (CHAR 161544 . 161548) (EXTERN 161537 . 161543) (punctuation 161535 . 161536) (close-paren 161534 . 161535) (VOID 161530 . 161534) (open-paren 161529 . 161530) (symbol 161511 . 161528) (VOID 161506 . 161510) (EXTERN 161499 . 161505) (punctuation 161497 . 161498) (close-paren 161496 . 161497) (punctuation 161495 . 161496) (CONST 161489 . 161494) (punctuation 161488 . 161489) (CHAR 161483 . 161487) (punctuation 161481 . 161482) (punctuation 161480 . 161481) (CONST 161474 . 161479) (punctuation 161473 . 161474) (CHAR 161468 . 161472) (punctuation 161466 . 161467) (punctuation 161465 . 161466) (CONST 161459 . 161464) (CHAR 161454 . 161458) (open-paren 161453 . 161454) (symbol 161437 . 161452) (INT 161433 . 161436) (EXTERN 161426 . 161432) (close-paren 161417 . 161418) (RETURN 161404 . 161410) (open-paren 161400 . 161401) (close-paren 161398 . 161399) (symbol 161394 . 161398) (punctuation 161393 . 161394) (punctuation 161392 . 161393) (CHAR 161387 . 161391) (punctuation 161385 . 161386) (symbol 161381 . 161385) (INT 161377 . 161380) (open-paren 161376 . 161377) (symbol 161340 . 161375) (INT 161336 . 161339) (symbol 161329 . 161335) (punctuation 161131 . 161132) (close-paren 161130 . 161131) (VOID 161126 . 161130) (open-paren 161125 . 161126) (symbol 161111 . 161124) (VOID 161106 . 161110) (EXTERN 161099 . 161105) (punctuation 161069 . 161070) (close-paren 161068 . 161069) (VOID 161064 . 161068) (open-paren 161063 . 161064) (symbol 161050 . 161062) (VOID 161045 . 161049) (EXTERN 161038 . 161044) (punctuation 161009 . 161010) (close-paren 161008 . 161009) (symbol 160997 . 161008) (punctuation 160995 . 160996) (symbol 160984 . 160995) (open-paren 160983 . 160984) (symbol 160954 . 160982) (VOID 160949 . 160953) (EXTERN 160942 . 160948) (punctuation 160909 . 160910) (close-paren 160908 . 160909) (VOID 160904 . 160908) (open-paren 160903 . 160904) (symbol 160890 . 160902) (VOID 160885 . 160889) (EXTERN 160878 . 160884) (punctuation 160876 . 160877) (close-paren 160875 . 160876) (symbol 160864 . 160875) (punctuation 160826 . 160827) (symbol 160815 . 160826) (punctuation 160813 . 160814) (symbol 160802 . 160813) (punctuation 160792 . 160793) (symbol 160783 . 160792) (punctuation 160781 . 160782) (symbol 160772 . 160781) (open-paren 160771 . 160772) (symbol 160748 . 160770) (VOID 160743 . 160747) (EXTERN 160736 . 160742) (punctuation 160734 . 160735) (close-paren 160733 . 160734) (symbol 160724 . 160733) (punctuation 160722 . 160723) (symbol 160713 . 160722) (open-paren 160712 . 160713) (symbol 160698 . 160711) (VOID 160693 . 160697) (EXTERN 160686 . 160692) (punctuation 160684 . 160685) (close-paren 160683 . 160684) (VOID 160679 . 160683) (open-paren 160678 . 160679) (symbol 160658 . 160677) (VOID 160653 . 160657) (EXTERN 160646 . 160652) (punctuation 160644 . 160645) (close-paren 160643 . 160644) (BOOL 160639 . 160643) (punctuation 160637 . 160638) (symbol 160626 . 160637) (punctuation 160624 . 160625) (symbol 160615 . 160624) (open-paren 160614 . 160615) (symbol 160600 . 160613) (VOID 160595 . 160599) (EXTERN 160588 . 160594) (punctuation 160586 . 160587) (close-paren 160585 . 160586) (symbol 160576 . 160585) (punctuation 160574 . 160575) (symbol 160565 . 160574) (open-paren 160564 . 160565) (symbol 160550 . 160563) (VOID 160545 . 160549) (EXTERN 160538 . 160544) (punctuation 160536 . 160537) (close-paren 160535 . 160536) (punctuation 160534 . 160535) (symbol 160527 . 160533) (STRUCT 160520 . 160526) (open-paren 160519 . 160520) (symbol 160500 . 160518) (VOID 160495 . 160499) (EXTERN 160488 . 160494) (punctuation 160459 . 160460) (close-paren 160458 . 160459) (VOID 160454 . 160458) (open-paren 160453 . 160454) (symbol 160438 . 160452) (VOID 160433 . 160437) (EXTERN 160426 . 160432) (punctuation 160424 . 160425) (close-paren 160423 . 160424) (VOID 160419 . 160423) (open-paren 160418 . 160419) (symbol 160406 . 160417) (VOID 160401 . 160405) (EXTERN 160394 . 160400) (close-paren 160363 . 160364) (punctuation 160348 . 160349) (symbol 160346 . 160348) (punctuation 160345 . 160346) (punctuation 160344 . 160345) (symbol 160342 . 160344) (open-paren 160338 . 160339) (close-paren 160336 . 160337) (symbol 160329 . 160336) (punctuation 160328 . 160329) (symbol 160319 . 160327) (STRUCT 160312 . 160318) (punctuation 160310 . 160311) (symbol 160308 . 160310) (punctuation 160307 . 160308) (symbol 160294 . 160306) (STRUCT 160287 . 160293) (open-paren 160286 . 160287) (symbol 160274 . 160285) (VOID 160269 . 160273) (symbol 160262 . 160268) (close-paren 160259 . 160260) (punctuation 160254 . 160255) (symbol 160252 . 160254) (punctuation 160251 . 160252) (punctuation 160250 . 160251) (symbol 160248 . 160250) (RETURN 160241 . 160247) (open-paren 160237 . 160238) (close-paren 160235 . 160236) (symbol 160233 . 160235) (punctuation 160232 . 160233) (symbol 160219 . 160231) (STRUCT 160212 . 160218) (open-paren 160211 . 160212) (symbol 160199 . 160210) (punctuation 160197 . 160198) (symbol 160188 . 160196) (STRUCT 160181 . 160187) (symbol 160174 . 160180) (punctuation 160171 . 160172) (close-paren 160170 . 160171) (symbol 160168 . 160170) (punctuation 160167 . 160168) (symbol 160151 . 160166) (STRUCT 160144 . 160150) (open-paren 160143 . 160144) (symbol 160129 . 160142) (VOID 160124 . 160128) (EXTERN 160117 . 160123) (punctuation 160115 . 160116) (close-paren 160114 . 160115) (symbol 160112 . 160114) (punctuation 160111 . 160112) (symbol 160095 . 160110) (STRUCT 160088 . 160094) (open-paren 160087 . 160088) (symbol 160072 . 160086) (VOID 160067 . 160071) (EXTERN 160060 . 160066) (punctuation 160058 . 160059) (close-paren 160057 . 160058) (symbol 160055 . 160057) (punctuation 160054 . 160055) (symbol 160038 . 160053) (STRUCT 160031 . 160037) (open-paren 160030 . 160031) (symbol 160015 . 160029) (VOID 160010 . 160014) (EXTERN 160003 . 160009) (punctuation 160001 . 160002) (close-paren 160000 . 160001) (symbol 159989 . 160000) (open-paren 159988 . 159989) (symbol 159968 . 159987) (symbol 159956 . 159967) (EXTERN 159949 . 159955) (punctuation 159947 . 159948) (close-paren 159946 . 159947) (punctuation 159945 . 159946) (symbol 159933 . 159944) (punctuation 159931 . 159932) (symbol 159922 . 159931) (punctuation 159913 . 159914) (symbol 159904 . 159913) (punctuation 159902 . 159903) (symbol 159891 . 159902) (open-paren 159890 . 159891) (symbol 159875 . 159889) (symbol 159863 . 159874) (EXTERN 159856 . 159862) (punctuation 159854 . 159855) (close-paren 159853 . 159854) (VOID 159849 . 159853) (open-paren 159848 . 159849) (symbol 159831 . 159847) (VOID 159826 . 159830) (EXTERN 159819 . 159825) (punctuation 159786 . 159787) (close-paren 159785 . 159786) (BOOL 159781 . 159785) (open-paren 159780 . 159781) (symbol 159761 . 159779) (INT 159757 . 159760) (EXTERN 159750 . 159756) (punctuation 159748 . 159749) (close-paren 159747 . 159748) (VOID 159743 . 159747) (open-paren 159742 . 159743) (symbol 159730 . 159741) (VOID 159725 . 159729) (EXTERN 159718 . 159724) (punctuation 159716 . 159717) (close-paren 159715 . 159716) (BOOL 159711 . 159715) (punctuation 159709 . 159710) (BOOL 159705 . 159709) (punctuation 159703 . 159704) (symbol 159692 . 159703) (open-paren 159691 . 159692) (symbol 159676 . 159690) (symbol 159664 . 159675) (EXTERN 159657 . 159663) (punctuation 159655 . 159656) (close-paren 159654 . 159655) (symbol 159643 . 159654) (open-paren 159642 . 159643) (symbol 159626 . 159641) (symbol 159614 . 159625) (EXTERN 159607 . 159613) (punctuation 159579 . 159580) (close-paren 159578 . 159579) (VOID 159574 . 159578) (open-paren 159573 . 159574) (symbol 159556 . 159572) (VOID 159551 . 159555) (EXTERN 159544 . 159550) (punctuation 159542 . 159543) (close-paren 159541 . 159542) (VOID 159537 . 159541) (open-paren 159536 . 159537) (symbol 159512 . 159535) (VOID 159507 . 159511) (EXTERN 159500 . 159506) (punctuation 159498 . 159499) (close-paren 159497 . 159498) (VOID 159493 . 159497) (open-paren 159492 . 159493) (symbol 159478 . 159491) (VOID 159473 . 159477) (EXTERN 159466 . 159472) (punctuation 159464 . 159465) (close-paren 159463 . 159464) (VOID 159459 . 159463) (open-paren 159458 . 159459) (symbol 159442 . 159457) (VOID 159437 . 159441) (EXTERN 159430 . 159436) (close-paren 159401 . 159402) (symbol 159390 . 159401) (open-paren 159389 . 159390) (symbol 159366 . 159388) (punctuation 159365 . 159366) (punctuation 159364 . 159365) (CHAR 159359 . 159363) (EXTERN 159352 . 159358) (punctuation 159350 . 159351) (close-paren 159349 . 159350) (punctuation 159348 . 159349) (symbol 159339 . 159347) (CONST 159333 . 159338) (punctuation 159307 . 159308) (BOOL 159303 . 159307) (punctuation 159301 . 159302) (BOOL 159297 . 159301) (punctuation 159295 . 159296) (punctuation 159294 . 159295) (CHAR 159289 . 159293) (CONST 159283 . 159288) (punctuation 159281 . 159282) (punctuation 159280 . 159281) (CHAR 159275 . 159279) (CONST 159269 . 159274) (punctuation 159243 . 159244) (punctuation 159242 . 159243) (punctuation 159241 . 159242) (CHAR 159236 . 159240) (punctuation 159234 . 159235) (punctuation 159233 . 159234) (punctuation 159232 . 159233) (CHAR 159227 . 159231) (punctuation 159225 . 159226) (INT 159222 . 159225) (punctuation 159220 . 159221) (INT 159217 . 159220) (punctuation 159215 . 159216) (INT 159212 . 159215) (punctuation 159210 . 159211) (punctuation 159209 . 159210) (symbol 159203 . 159208) (open-paren 159202 . 159203) (symbol 159190 . 159201) (INT 159186 . 159189) (EXTERN 159179 . 159185) (punctuation 159015 . 159016) (close-paren 159014 . 159015) (symbol 159003 . 159014) (open-paren 159002 . 159003) (symbol 158973 . 159001) (VOID 158968 . 158972) (EXTERN 158961 . 158967) (punctuation 158959 . 158960) (close-paren 158958 . 158959) (VOID 158954 . 158958) (open-paren 158953 . 158954) (symbol 158937 . 158952) (VOID 158932 . 158936) (EXTERN 158925 . 158931) (punctuation 158923 . 158924) (close-paren 158922 . 158923) (INT 158919 . 158922) (open-paren 158918 . 158919) (symbol 158899 . 158917) (VOID 158894 . 158898) (EXTERN 158887 . 158893) (punctuation 158773 . 158774) (close-paren 158772 . 158773) (INT 158769 . 158772) (open-paren 158768 . 158769) (symbol 158736 . 158767) (VOID 158731 . 158735) (EXTERN 158724 . 158730) (punctuation 158722 . 158723) (close-paren 158721 . 158722) (INT 158718 . 158721) (open-paren 158717 . 158718) (symbol 158688 . 158716) (VOID 158683 . 158687) (EXTERN 158676 . 158682) (punctuation 158219 . 158220) (close-paren 158218 . 158219) (INT 158215 . 158218) (punctuation 158213 . 158214) (punctuation 158212 . 158213) (symbol 158199 . 158211) (STRUCT 158192 . 158198) (punctuation 158185 . 158186) (symbol 158174 . 158185) (punctuation 158172 . 158173) (BOOL 158168 . 158172) (punctuation 158166 . 158167) (INT 158163 . 158166) (punctuation 158161 . 158162) (INT 158158 . 158161) (punctuation 158156 . 158157) (symbol 158148 . 158156) (open-paren 158147 . 158148) (symbol 158119 . 158146) (INT 158115 . 158118) (EXTERN 158108 . 158114) (punctuation 158106 . 158107) (close-paren 158105 . 158106) (symbol 158094 . 158105) (open-paren 158093 . 158094) (symbol 158071 . 158092) (VOID 158066 . 158070) (EXTERN 158059 . 158065) (punctuation 157083 . 157084) (close-paren 157082 . 157083) (symbol 157071 . 157082) (punctuation 157069 . 157070) (INT 157066 . 157069) (open-paren 157065 . 157066) (symbol 157049 . 157064) (VOID 157044 . 157048) (EXTERN 157037 . 157043) (close-paren 157008 . 157009) (INT 157005 . 157008) (open-paren 157004 . 157005) (symbol 156989 . 157003) (punctuation 156988 . 156989) (CHAR 156983 . 156987) (EXTERN 156976 . 156982) (close-paren 156967 . 156968) (open-paren 156966 . 156967) (close-paren 156964 . 156965) (VOID 156960 . 156964) (open-paren 156959 . 156960) (symbol 156928 . 156958) (VOID 156923 . 156927) (symbol 156916 . 156922) (close-paren 156914 . 156915) (open-paren 156913 . 156914) (close-paren 156911 . 156912) (VOID 156907 . 156911) (open-paren 156906 . 156907) (symbol 156871 . 156905) (VOID 156866 . 156870) (symbol 156859 . 156865) (close-paren 156857 . 156858) (open-paren 156856 . 156857) (close-paren 156854 . 156855) (VOID 156850 . 156854) (open-paren 156849 . 156850) (symbol 156836 . 156848) (VOID 156831 . 156835) (symbol 156824 . 156830) (punctuation 156620 . 156621) (close-paren 156619 . 156620) (INT 156616 . 156619) (punctuation 156614 . 156615) (INT 156611 . 156614) (open-paren 156610 . 156611) (symbol 156586 . 156609) (VOID "void" 156580 . 156585) (symbol "ATTRIBUTE_COLD" 156580 . 156585) (EXTERN 156573 . 156579) (punctuation 156506 . 156507) (close-paren 156505 . 156506) (BOOL 156501 . 156505) (punctuation 156499 . 156500) (punctuation 156498 . 156499) (CHAR 156493 . 156497) (CONST 156487 . 156492) (punctuation 156485 . 156486) (punctuation 156484 . 156485) (CHAR 156479 . 156483) (CONST 156473 . 156478) (open-paren 156472 . 156473) (symbol 156456 . 156471) (symbol 156444 . 156455) (EXTERN 156437 . 156443) (punctuation 156243 . 156244) (close-paren 156242 . 156243) (VOID 156238 . 156242) (open-paren 156237 . 156238) (symbol 156223 . 156236) (VOID 156218 . 156222) (EXTERN 156211 . 156217) (punctuation 156209 . 156210) (close-paren 156208 . 156209) (VOID 156204 . 156208) (open-paren 156203 . 156204) (symbol 156187 . 156202) (VOID 156182 . 156186) (EXTERN 156175 . 156181) (punctuation 156173 . 156174) (close-paren 156172 . 156173) (symbol 156161 . 156172) (open-paren 156160 . 156161) (symbol 156138 . 156159) (VOID 156133 . 156137) (EXTERN 156126 . 156132) (punctuation 156124 . 156125) (close-paren 156123 . 156124) (symbol 156112 . 156123) (punctuation 156110 . 156111) (punctuation 156109 . 156110) (symbol 156103 . 156108) (STRUCT 156096 . 156102) (open-paren 156095 . 156096) (symbol 156079 . 156094) (symbol 156067 . 156078) (EXTERN 156060 . 156066) (punctuation 156058 . 156059) (close-paren 156057 . 156058) (symbol 156046 . 156057) (punctuation 156044 . 156045) (INT 156041 . 156044) (punctuation 156039 . 156040) (symbol 156028 . 156039) (open-paren 156027 . 156028) (symbol 156011 . 156026) (symbol 155999 . 156010) (EXTERN 155992 . 155998) (punctuation 155990 . 155991) (close-paren 155989 . 155990) (symbol 155978 . 155989) (punctuation 155976 . 155977) (symbol 155965 . 155976) (punctuation 155963 . 155964) (punctuation 155962 . 155963) (symbol 155950 . 155961) (open-paren 155949 . 155950) (symbol 155934 . 155948) (VOID 155929 . 155933) (EXTERN 155922 . 155928) (punctuation 155920 . 155921) (close-paren 155919 . 155920) (symbol 155908 . 155919) (punctuation 155906 . 155907) (symbol 155895 . 155906) (punctuation 155893 . 155894) (punctuation 155892 . 155893) (symbol 155886 . 155891) (STRUCT 155879 . 155885) (open-paren 155878 . 155879) (symbol 155860 . 155877) (VOID 155855 . 155859) (EXTERN 155848 . 155854) (punctuation 155818 . 155819) (close-paren 155817 . 155818) (VOID 155813 . 155817) (open-paren 155812 . 155813) (symbol 155797 . 155811) (VOID 155792 . 155796) (EXTERN 155785 . 155791) (punctuation 155783 . 155784) (close-paren 155782 . 155783) (symbol 155773 . 155782) (punctuation 155771 . 155772) (symbol 155762 . 155771) (punctuation 155760 . 155761) (symbol 155751 . 155760) (open-paren 155750 . 155751) (symbol 155732 . 155749) (BOOL 155727 . 155731) (EXTERN 155720 . 155726) (punctuation 155718 . 155719) (close-paren 155717 . 155718) (VOID 155713 . 155717) (open-paren 155712 . 155713) (symbol 155686 . 155711) (VOID 155681 . 155685) (EXTERN 155674 . 155680) (punctuation 155672 . 155673) (close-paren 155671 . 155672) (VOID 155667 . 155671) (open-paren 155666 . 155667) (symbol 155651 . 155665) (symbol 155641 . 155650) (EXTERN 155634 . 155640) (punctuation 155603 . 155604) (close-paren 155602 . 155603) (VOID 155598 . 155602) (open-paren 155597 . 155598) (symbol 155580 . 155596) (VOID 155575 . 155579) (EXTERN 155568 . 155574) (punctuation 155566 . 155567) (close-paren 155565 . 155566) (VOID 155561 . 155565) (open-paren 155560 . 155561) (symbol 155543 . 155559) (VOID 155538 . 155542) (EXTERN 155531 . 155537) (punctuation 155529 . 155530) (close-paren 155528 . 155529) (VOID 155524 . 155528) (open-paren 155523 . 155524) (symbol 155509 . 155522) (VOID 155504 . 155508) (EXTERN 155497 . 155503) (punctuation 155495 . 155496) (close-paren 155494 . 155495) (VOID 155490 . 155494) (open-paren 155489 . 155490) (symbol 155468 . 155488) (VOID 155463 . 155467) (EXTERN 155456 . 155462) (punctuation 155454 . 155455) (close-paren 155453 . 155454) (VOID 155449 . 155453) (open-paren 155448 . 155449) (symbol 155431 . 155447) (VOID 155426 . 155430) (EXTERN 155419 . 155425) (punctuation 155417 . 155418) (close-paren 155416 . 155417) (VOID 155412 . 155416) (open-paren 155411 . 155412) (symbol 155394 . 155410) (symbol 155382 . 155393) (EXTERN 155375 . 155381) (punctuation 155373 . 155374) (close-paren 155372 . 155373) (VOID 155368 . 155372) (open-paren 155367 . 155368) (symbol 155349 . 155366) (symbol 155337 . 155348) (EXTERN 155330 . 155336) (punctuation 155328 . 155329) (close-paren 155327 . 155328) (symbol 155316 . 155327) (open-paren 155315 . 155316) (symbol 155300 . 155314) (symbol 155288 . 155299) (EXTERN 155281 . 155287) (punctuation 155279 . 155280) (close-paren 155278 . 155279) (punctuation 155277 . 155278) (CHAR 155272 . 155276) (CONST 155266 . 155271) (punctuation 155264 . 155265) (symbol 155253 . 155264) (open-paren 155252 . 155253) (symbol 155233 . 155251) (VOID 155228 . 155232) (EXTERN 155221 . 155227) (punctuation 155219 . 155220) (close-paren 155218 . 155219) (symbol 155207 . 155218) (punctuation 155205 . 155206) (symbol 155194 . 155205) (punctuation 155192 . 155193) (symbol 155181 . 155192) (open-paren 155180 . 155181) (symbol 155163 . 155179) (VOID 155158 . 155162) (EXTERN 155151 . 155157) (punctuation 155149 . 155150) (close-paren 155148 . 155149) (punctuation 155147 . 155148) (symbol 155140 . 155146) (STRUCT 155133 . 155139) (punctuation 155131 . 155132) (symbol 155120 . 155131) (open-paren 155119 . 155120) (symbol 155089 . 155118) (VOID 155084 . 155088) (EXTERN 155077 . 155083) (punctuation 155075 . 155076) (close-paren 155074 . 155075) (symbol 155063 . 155074) (open-paren 155062 . 155063) (symbol 155047 . 155061) (VOID 155042 . 155046) (EXTERN 155035 . 155041) (punctuation 155033 . 155034) (close-paren 155032 . 155033) (BOOL 155028 . 155032) (open-paren 155027 . 155028) (symbol 154995 . 155026) (BOOL 154990 . 154994) (EXTERN 154983 . 154989) (punctuation 154981 . 154982) (close-paren 154980 . 154981) (VOID 154976 . 154980) (open-paren 154975 . 154976) (symbol 154935 . 154974) (BOOL 154930 . 154934) (EXTERN 154923 . 154929) (punctuation 154921 . 154922) (close-paren 154920 . 154921) (VOID 154916 . 154920) (open-paren 154915 . 154916) (symbol 154894 . 154914) (BOOL 154889 . 154893) (EXTERN 154882 . 154888) (punctuation 154739 . 154740) (close-paren 154738 . 154739) (VOID 154734 . 154738) (open-paren 154733 . 154734) (symbol 154712 . 154732) (VOID 154707 . 154711) (EXTERN 154700 . 154706) (punctuation 154698 . 154699) (close-paren 154697 . 154698) (punctuation 154696 . 154697) (INT 154692 . 154695) (punctuation 154690 . 154691) (symbol 154679 . 154690) (open-paren 154678 . 154679) (symbol 154663 . 154677) (symbol 154651 . 154662) (EXTERN 154644 . 154650) (punctuation 154642 . 154643) (close-paren 154641 . 154642) (punctuation 154640 . 154641) (INT 154636 . 154639) (punctuation 154634 . 154635) (symbol 154623 . 154634) (open-paren 154622 . 154623) (symbol 154608 . 154621) (symbol 154596 . 154607) (EXTERN 154589 . 154595) (punctuation 154587 . 154588) (close-paren 154586 . 154587) (symbol 154575 . 154586) (open-paren 154574 . 154575) (symbol 154559 . 154573) (symbol 154547 . 154558) (EXTERN 154540 . 154546) (punctuation 154426 . 154427) (close-paren 154425 . 154426) (VOID 154421 . 154425) (open-paren 154420 . 154421) (symbol 154405 . 154419) (VOID 154400 . 154404) (EXTERN 154393 . 154399) (punctuation 154247 . 154248) (close-paren 154246 . 154247) (VOID 154242 . 154246) (open-paren 154241 . 154242) (symbol 154225 . 154240) (VOID 154220 . 154224) (EXTERN 154213 . 154219) (punctuation 154211 . 154212) (close-paren 154210 . 154211) (VOID 154206 . 154210) (open-paren 154205 . 154206) (symbol 154187 . 154204) (VOID 154182 . 154186) (EXTERN 154175 . 154181) (punctuation 154142 . 154143) (close-paren 154141 . 154142) (VOID 154137 . 154141) (open-paren 154136 . 154137) (symbol 154117 . 154135) (VOID 154112 . 154116) (EXTERN 154105 . 154111) (punctuation 154069 . 154070) (close-paren 154068 . 154069) (VOID 154064 . 154068) (open-paren 154063 . 154064) (symbol 154047 . 154062) (VOID 154042 . 154046) (EXTERN 154035 . 154041) (punctuation 154002 . 154003) (close-paren 154001 . 154002) (VOID 153997 . 154001) (open-paren 153996 . 153997) (symbol 153966 . 153995) (VOID 153961 . 153965) (EXTERN 153954 . 153960) (punctuation 153952 . 153953) (close-paren 153951 . 153952) (VOID 153947 . 153951) (open-paren 153946 . 153947) (symbol 153930 . 153945) (VOID 153925 . 153929) (EXTERN 153918 . 153924) (punctuation 153916 . 153917) (close-paren 153915 . 153916) (VOID 153911 . 153915) (open-paren 153910 . 153911) (symbol 153882 . 153909) (VOID 153877 . 153881) (EXTERN 153870 . 153876) (punctuation 153868 . 153869) (close-paren 153867 . 153868) (VOID 153863 . 153867) (open-paren 153862 . 153863) (symbol 153844 . 153861) (VOID 153839 . 153843) (EXTERN 153832 . 153838) (punctuation 153830 . 153831) (close-paren 153829 . 153830) (symbol 153820 . 153829) (open-paren 153819 . 153820) (symbol 153804 . 153818) (symbol 153792 . 153803) (EXTERN 153785 . 153791) (punctuation 153751 . 153752) (close-paren 153750 . 153751) (symbol 153739 . 153750) (open-paren 153738 . 153739) (symbol 153716 . 153737) (symbol 153706 . 153715) (EXTERN 153699 . 153705) (punctuation 153697 . 153698) (close-paren 153696 . 153697) (symbol 153685 . 153696) (punctuation 153683 . 153684) (symbol 153674 . 153683) (open-paren 153673 . 153674) (symbol 153659 . 153672) (BOOL 153654 . 153658) (EXTERN 153647 . 153653) (punctuation 153645 . 153646) (close-paren 153644 . 153645) (BOOL 153640 . 153644) (punctuation 153638 . 153639) (punctuation 153637 . 153638) (symbol 153631 . 153636) (STRUCT 153624 . 153630) (open-paren 153623 . 153624) (symbol 153595 . 153622) (VOID 153590 . 153594) (EXTERN 153583 . 153589) (punctuation 153473 . 153474) (close-paren 153472 . 153473) (VOID 153468 . 153472) (open-paren 153467 . 153468) (symbol 153448 . 153466) (VOID 153443 . 153447) (EXTERN 153436 . 153442) (punctuation 153434 . 153435) (close-paren 153433 . 153434) (VOID 153429 . 153433) (open-paren 153428 . 153429) (symbol 153413 . 153427) (VOID 153408 . 153412) (EXTERN 153401 . 153407) (punctuation 153399 . 153400) (close-paren 153398 . 153399) (punctuation 153397 . 153398) (symbol 153387 . 153396) (punctuation 153385 . 153386) (symbol 153376 . 153385) (punctuation 153366 . 153367) (symbol 153357 . 153366) (punctuation 153355 . 153356) (symbol 153346 . 153355) (open-paren 153345 . 153346) (symbol 153320 . 153344) (symbol 153310 . 153319) (EXTERN 153303 . 153309) (punctuation 153301 . 153302) (close-paren 153300 . 153301) (punctuation 153299 . 153300) (symbol 153289 . 153298) (punctuation 153287 . 153288) (symbol 153278 . 153287) (punctuation 153265 . 153266) (symbol 153256 . 153265) (punctuation 153254 . 153255) (symbol 153245 . 153254) (open-paren 153244 . 153245) (symbol 153223 . 153243) (symbol 153213 . 153222) (EXTERN 153206 . 153212) (punctuation 153204 . 153205) (close-paren 153203 . 153204) (punctuation 153202 . 153203) (symbol 153192 . 153201) (punctuation 153190 . 153191) (punctuation 153189 . 153190) (symbol 153179 . 153188) (punctuation 153177 . 153178) (symbol 153168 . 153177) (open-paren 153167 . 153168) (symbol 153143 . 153166) (symbol 153133 . 153142) (EXTERN 153126 . 153132) (punctuation 153124 . 153125) (close-paren 153123 . 153124) (BOOL 153119 . 153123) (punctuation 153117 . 153118) (symbol 153108 . 153117) (punctuation 153101 . 153102) (symbol 153092 . 153101) (punctuation 153090 . 153091) (symbol 153081 . 153090) (punctuation 153079 . 153080) (symbol 153070 . 153079) (punctuation 153068 . 153069) (symbol 153059 . 153068) (open-paren 153058 . 153059) (symbol 153045 . 153057) (VOID 153040 . 153044) (EXTERN 153033 . 153039) (punctuation 153031 . 153032) (close-paren 153030 . 153031) (BOOL 153026 . 153030) (punctuation 153024 . 153025) (punctuation 153023 . 153024) (symbol 153013 . 153022) (punctuation 153011 . 153012) (punctuation 153010 . 153011) (symbol 153000 . 153009) (punctuation 152998 . 152999) (symbol 152989 . 152998) (punctuation 152977 . 152978) (symbol 152968 . 152977) (punctuation 152966 . 152967) (symbol 152957 . 152966) (punctuation 152955 . 152956) (symbol 152946 . 152955) (punctuation 152944 . 152945) (symbol 152935 . 152944) (open-paren 152934 . 152935) (symbol 152921 . 152933) (symbol 152911 . 152920) (EXTERN 152904 . 152910) (punctuation 152902 . 152903) (close-paren 152901 . 152902) (BOOL 152897 . 152901) (punctuation 152895 . 152896) (punctuation 152894 . 152895) (symbol 152884 . 152893) (punctuation 152882 . 152883) (punctuation 152881 . 152882) (symbol 152871 . 152880) (punctuation 152869 . 152870) (symbol 152860 . 152869) (punctuation 152827 . 152828) (symbol 152818 . 152827) (punctuation 152816 . 152817) (symbol 152807 . 152816) (punctuation 152805 . 152806) (symbol 152796 . 152805) (punctuation 152794 . 152795) (symbol 152785 . 152794) (open-paren 152784 . 152785) (symbol 152770 . 152783) (symbol 152760 . 152769) (EXTERN 152753 . 152759) (punctuation 152751 . 152752) (close-paren 152750 . 152751) (symbol 152739 . 152750) (punctuation 152737 . 152738) (symbol 152728 . 152737) (punctuation 152726 . 152727) (symbol 152717 . 152726) (punctuation 152681 . 152682) (symbol 152672 . 152681) (punctuation 152670 . 152671) (symbol 152661 . 152670) (punctuation 152659 . 152660) (symbol 152648 . 152659) (open-paren 152647 . 152648) (symbol 152631 . 152646) (symbol 152621 . 152630) (EXTERN 152614 . 152620) (punctuation 152612 . 152613) (close-paren 152611 . 152612) (symbol 152602 . 152611) (punctuation 152592 . 152593) (punctuation 152591 . 152592) (CHAR 152586 . 152590) (CONST 152580 . 152585) (punctuation 152578 . 152579) (symbol 152567 . 152578) (open-paren 152566 . 152567) (symbol 152534 . 152565) (symbol 152524 . 152533) (EXTERN 152517 . 152523) (close-paren 152514 . 152515) (RETURN 152442 . 152448) (open-paren 152438 . 152439) (close-paren 152436 . 152437) (symbol 152430 . 152436) (symbol 152418 . 152429) (punctuation 152416 . 152417) (symbol 152410 . 152416) (symbol 152398 . 152409) (open-paren 152397 . 152398) (symbol 152367 . 152396) (symbol 152357 . 152366) (symbol 152350 . 152356) (close-paren 152347 . 152348) (RETURN 152289 . 152295) (open-paren 152285 . 152286) (close-paren 152283 . 152284) (symbol 152277 . 152283) (symbol 152265 . 152276) (punctuation 152263 . 152264) (symbol 152257 . 152263) (symbol 152245 . 152256) (open-paren 152244 . 152245) (symbol 152226 . 152243) (symbol 152216 . 152225) (symbol 152209 . 152215) (punctuation 152206 . 152207) (close-paren 152205 . 152206) (symbol 152194 . 152205) (punctuation 152182 . 152183) (symbol 152171 . 152182) (punctuation 152169 . 152170) (symbol 152158 . 152169) (open-paren 152157 . 152158) (symbol 152130 . 152156) (symbol 152120 . 152129) (EXTERN 152113 . 152119) (punctuation 152111 . 152112) (close-paren 152110 . 152111) (VOID 152106 . 152110) (open-paren 152105 . 152106) (symbol 152075 . 152104) (VOID 152070 . 152074) (EXTERN 152063 . 152069) (punctuation 152061 . 152062) (close-paren 152060 . 152061) (symbol 152054 . 152060) (symbol 152044 . 152053) (punctuation 152042 . 152043) (symbol 152036 . 152042) (symbol 152026 . 152035) (punctuation 151992 . 151993) (symbol 151984 . 151992) (symbol 151974 . 151983) (open-paren 151973 . 151974) (symbol 151954 . 151972) (VOID 151949 . 151953) (EXTERN 151942 . 151948) (punctuation 151940 . 151941) (close-paren 151939 . 151940) (VOID 151935 . 151939) (open-paren 151934 . 151935) (symbol 151914 . 151933) (VOID 151909 . 151913) (EXTERN 151902 . 151908) (punctuation 151900 . 151901) (close-paren 151899 . 151900) (VOID 151895 . 151899) (open-paren 151894 . 151895) (symbol 151874 . 151893) (VOID 151869 . 151873) (EXTERN 151862 . 151868) (punctuation 151831 . 151832) (close-paren 151830 . 151831) (VOID 151826 . 151830) (open-paren 151825 . 151826) (symbol 151810 . 151824) (VOID 151805 . 151809) (EXTERN 151798 . 151804) (punctuation 151796 . 151797) (close-paren 151795 . 151796) (VOID 151791 . 151795) (open-paren 151790 . 151791) (symbol 151778 . 151789) (VOID 151773 . 151777) (EXTERN 151766 . 151772) (punctuation 151764 . 151765) (close-paren 151763 . 151764) (punctuation 151762 . 151763) (symbol 151755 . 151761) (STRUCT 151748 . 151754) (open-paren 151747 . 151748) (symbol 151719 . 151746) (symbol 151707 . 151718) (EXTERN 151700 . 151706) (punctuation 151698 . 151699) (close-paren 151697 . 151698) (symbol 151686 . 151697) (open-paren 151685 . 151686) (symbol 151657 . 151684) (BOOL 151652 . 151656) (EXTERN 151645 . 151651) (punctuation 151643 . 151644) (close-paren 151642 . 151643) (symbol 151631 . 151642) (open-paren 151630 . 151631) (symbol 151613 . 151629) (BOOL 151608 . 151612) (EXTERN 151601 . 151607) (punctuation 151599 . 151600) (close-paren 151598 . 151599) (punctuation 151597 . 151598) (CONST 151591 . 151596) (CHAR 151586 . 151590) (punctuation 151584 . 151585) (symbol 151573 . 151584) (punctuation 151571 . 151572) (INT 151568 . 151571) (open-paren 151567 . 151568) (symbol 151544 . 151566) (symbol 151532 . 151543) (EXTERN 151525 . 151531) (punctuation 151523 . 151524) (close-paren 151522 . 151523) (symbol 151511 . 151522) (open-paren 151510 . 151511) (symbol 151489 . 151509) (BOOL 151484 . 151488) (EXTERN 151477 . 151483) (punctuation 151475 . 151476) (close-paren 151474 . 151475) (INT 151471 . 151474) (punctuation 151469 . 151470) (symbol 151458 . 151469) (open-paren 151457 . 151458) (symbol 151436 . 151456) (symbol 151424 . 151435) (EXTERN 151417 . 151423) (punctuation 151415 . 151416) (close-paren 151414 . 151415) (symbol 151403 . 151414) (punctuation 151401 . 151402) (punctuation 151400 . 151401) (CHAR 151395 . 151399) (CONST 151389 . 151394) (open-paren 151388 . 151389) (symbol 151363 . 151387) (VOID "void" 151357 . 151362) (symbol "ATTRIBUTE_COLD" 151357 . 151362) (EXTERN 151350 . 151356) (punctuation 151348 . 151349) (close-paren 151347 . 151348) (symbol 151336 . 151347) (punctuation 151334 . 151335) (punctuation 151333 . 151334) (CHAR 151328 . 151332) (CONST 151322 . 151327) (open-paren 151321 . 151322) (symbol 151303 . 151320) (VOID "void" 151297 . 151302) (symbol "ATTRIBUTE_COLD" 151297 . 151302) (EXTERN 151290 . 151296) (punctuation 151288 . 151289) (close-paren 151287 . 151288) (INT 151284 . 151287) (punctuation 151282 . 151283) (symbol 151271 . 151282) (punctuation 151269 . 151270) (punctuation 151268 . 151269) (CHAR 151263 . 151267) (CONST 151257 . 151262) (open-paren 151256 . 151257) (symbol 151238 . 151255) (VOID "void" 151232 . 151237) (symbol "ATTRIBUTE_COLD" 151232 . 151237) (EXTERN 151225 . 151231) (punctuation 151223 . 151224) (close-paren 151222 . 151223) (INT 151219 . 151222) (punctuation 151217 . 151218) (symbol 151206 . 151217) (punctuation 151204 . 151205) (punctuation 151203 . 151204) (CHAR 151198 . 151202) (CONST 151192 . 151197) (open-paren 151191 . 151192) (symbol 151171 . 151190) (symbol 151159 . 151170) (EXTERN 151152 . 151158) (punctuation 151150 . 151151) (close-paren 151149 . 151150) (INT 151146 . 151149) (punctuation 151144 . 151145) (punctuation 151143 . 151144) (CONST 151137 . 151142) (CHAR 151132 . 151136) (open-paren 151131 . 151132) (symbol 151117 . 151130) (BOOL 151112 . 151116) (EXTERN 151105 . 151111) (punctuation 151103 . 151104) (close-paren 151102 . 151103) (symbol 151091 . 151102) (open-paren 151090 . 151091) (symbol 151069 . 151089) (VOID 151064 . 151068) (EXTERN 151057 . 151063) (punctuation 151055 . 151056) (close-paren 151054 . 151055) (punctuation 151053 . 151054) (VOID 151048 . 151052) (open-paren 151047 . 151048) (symbol 151033 . 151046) (VOID 151028 . 151032) (EXTERN 151021 . 151027) (punctuation 151019 . 151020) (close-paren 151018 . 151019) (INT 151015 . 151018) (open-paren 151014 . 151015) (symbol 150996 . 151013) (VOID 150991 . 150995) (EXTERN 150984 . 150990) (punctuation 150982 . 150983) (close-paren 150981 . 150982) (INT 150978 . 150981) (punctuation 150976 . 150977) (symbol 150965 . 150976) (punctuation 150958 . 150959) (symbol 150947 . 150958) (punctuation 150945 . 150946) (symbol 150934 . 150945) (punctuation 150932 . 150933) (symbol 150921 . 150932) (punctuation 150914 . 150915) (symbol 150903 . 150914) (punctuation 150901 . 150902) (symbol 150890 . 150901) (punctuation 150888 . 150889) (symbol 150877 . 150888) (open-paren 150876 . 150877) (symbol 150863 . 150875) (symbol 150851 . 150862) (EXTERN 150844 . 150850) (punctuation 150842 . 150843) (close-paren 150841 . 150842) (symbol 150830 . 150841) (open-paren 150829 . 150830) (symbol 150806 . 150828) (symbol 150794 . 150805) (EXTERN 150787 . 150793) (close-paren 150758 . 150759) (VOID 150754 . 150758) (open-paren 150753 . 150754) (symbol 150741 . 150752) (punctuation 150740 . 150741) (CONST 150734 . 150739) (CHAR 150729 . 150733) (EXTERN 150722 . 150728) (punctuation 150720 . 150721) (close-paren 150719 . 150720) (punctuation 150718 . 150719) (CHAR 150713 . 150717) (CONST 150707 . 150712) (open-paren 150706 . 150707) (symbol 150685 . 150705) (BOOL 150680 . 150684) (EXTERN 150673 . 150679) (close-paren 150642 . 150643) (punctuation 150641 . 150642) (CONST 150635 . 150640) (CHAR 150630 . 150634) (punctuation 150628 . 150629) (punctuation 150627 . 150628) (CONST 150621 . 150626) (CHAR 150616 . 150620) (punctuation 150614 . 150615) (punctuation 150613 . 150614) (CHAR 150608 . 150612) (open-paren 150607 . 150608) (symbol 150591 . 150606) (punctuation 150590 . 150591) (CHAR 150585 . 150589) (EXTERN 150578 . 150584) (punctuation 150546 . 150547) (close-paren 150545 . 150546) (VOID 150541 . 150545) (open-paren 150540 . 150541) (symbol 150525 . 150539) (VOID 150520 . 150524) (EXTERN 150513 . 150519) (punctuation 150511 . 150512) (close-paren 150510 . 150511) (symbol 150501 . 150510) (punctuation 150499 . 150500) (symbol 150490 . 150499) (punctuation 150488 . 150489) (punctuation 150487 . 150488) (symbol 150480 . 150486) (STRUCT 150473 . 150479) (open-paren 150472 . 150473) (symbol 150459 . 150471) (symbol 150447 . 150458) (EXTERN 150440 . 150446) (punctuation 150438 . 150439) (close-paren 150437 . 150438) (symbol 150428 . 150437) (punctuation 150426 . 150427) (symbol 150417 . 150426) (punctuation 150368 . 150369) (symbol 150357 . 150368) (punctuation 150355 . 150356) (symbol 150344 . 150355) (open-paren 150343 . 150344) (symbol 150316 . 150342) (symbol 150304 . 150315) (EXTERN 150297 . 150303) (punctuation 150295 . 150296) (close-paren 150294 . 150295) (symbol 150285 . 150294) (punctuation 150283 . 150284) (symbol 150274 . 150283) (punctuation 150272 . 150273) (symbol 150261 . 150272) (punctuation 150259 . 150260) (symbol 150248 . 150259) (open-paren 150247 . 150248) (symbol 150231 . 150246) (symbol 150219 . 150230) (EXTERN 150212 . 150218) (punctuation 150210 . 150211) (close-paren 150209 . 150210) (symbol 150198 . 150209) (punctuation 150196 . 150197) (symbol 150185 . 150196) (punctuation 150183 . 150184) (symbol 150172 . 150183) (open-paren 150171 . 150172) (symbol 150149 . 150170) (symbol 150137 . 150148) (EXTERN 150130 . 150136) (punctuation 150128 . 150129) (close-paren 150127 . 150128) (punctuation 150126 . 150127) (symbol 150114 . 150125) (STRUCT 150107 . 150113) (open-paren 150106 . 150107) (symbol 150091 . 150105) (VOID 150086 . 150090) (EXTERN 150079 . 150085) (punctuation 150077 . 150078) (close-paren 150076 . 150077) (symbol 150065 . 150076) (open-paren 150064 . 150065) (symbol 150050 . 150063) (VOID 150045 . 150049) (EXTERN 150038 . 150044) (punctuation 150036 . 150037) (close-paren 150035 . 150036) (symbol 150026 . 150035) (punctuation 150024 . 150025) (punctuation 150023 . 150024) (symbol 150016 . 150022) (STRUCT 150009 . 150015) (open-paren 150008 . 150009) (symbol 149985 . 150007) (symbol 149975 . 149984) (EXTERN 149968 . 149974) (punctuation 149966 . 149967) (close-paren 149965 . 149966) (symbol 149956 . 149965) (punctuation 149954 . 149955) (punctuation 149953 . 149954) (symbol 149946 . 149952) (STRUCT 149939 . 149945) (open-paren 149938 . 149939) (symbol 149915 . 149937) (symbol 149905 . 149914) (EXTERN 149898 . 149904) (punctuation 149896 . 149897) (close-paren 149895 . 149896) (punctuation 149894 . 149895) (symbol 149887 . 149893) (STRUCT 149880 . 149886) (open-paren 149879 . 149880) (symbol 149859 . 149878) (VOID 149854 . 149858) (EXTERN 149847 . 149853) (punctuation 149845 . 149846) (close-paren 149844 . 149845) (symbol 149833 . 149844) (open-paren 149832 . 149833) (symbol 149811 . 149831) (symbol 149801 . 149810) (EXTERN 149794 . 149800) (punctuation 149792 . 149793) (close-paren 149791 . 149792) (symbol 149780 . 149791) (open-paren 149779 . 149780) (symbol 149763 . 149778) (symbol 149753 . 149762) (EXTERN 149746 . 149752) (punctuation 149714 . 149715) (close-paren 149713 . 149714) (VOID 149709 . 149713) (open-paren 149708 . 149709) (symbol 149693 . 149707) (VOID 149688 . 149692) (EXTERN 149681 . 149687) (punctuation 149679 . 149680) (close-paren 149678 . 149679) (VOID 149674 . 149678) (open-paren 149673 . 149674) (symbol 149661 . 149672) (VOID 149656 . 149660) (EXTERN 149649 . 149655) (punctuation 149647 . 149648) (close-paren 149646 . 149647) (VOID 149642 . 149646) (open-paren 149641 . 149642) (symbol 149624 . 149640) (VOID 149619 . 149623) (EXTERN 149612 . 149618) (punctuation 149610 . 149611) (close-paren 149609 . 149610) (symbol 149598 . 149609) (open-paren 149597 . 149598) (symbol 149577 . 149596) (symbol 149565 . 149576) (EXTERN 149558 . 149564) (punctuation 149556 . 149557) (close-paren 149555 . 149556) (symbol 149544 . 149555) (open-paren 149543 . 149544) (symbol 149523 . 149542) (symbol 149511 . 149522) (EXTERN 149504 . 149510) (punctuation 149502 . 149503) (close-paren 149501 . 149502) (symbol 149492 . 149501) (open-paren 149491 . 149492) (symbol 149473 . 149490) (BOOL 149468 . 149472) (EXTERN 149461 . 149467) (punctuation 149459 . 149460) (close-paren 149458 . 149459) (symbol 149447 . 149458) (punctuation 149445 . 149446) (symbol 149434 . 149445) (punctuation 149432 . 149433) (symbol 149421 . 149432) (punctuation 149378 . 149379) (BOOL 149374 . 149378) (punctuation 149372 . 149373) (symbol 149361 . 149372) (punctuation 149359 . 149360) (symbol 149348 . 149359) (open-paren 149347 . 149348) (symbol 149319 . 149346) (VOID 149314 . 149318) (EXTERN 149307 . 149313) (punctuation 149305 . 149306) (close-paren 149304 . 149305) (symbol 149295 . 149304) (punctuation 149293 . 149294) (symbol 149284 . 149293) (open-paren 149283 . 149284) (symbol 149257 . 149282) (VOID 149252 . 149256) (EXTERN 149245 . 149251) (punctuation 149243 . 149244) (close-paren 149242 . 149243) (symbol 149233 . 149242) (punctuation 149231 . 149232) (symbol 149222 . 149231) (open-paren 149221 . 149222) (symbol 149194 . 149220) (VOID 149189 . 149193) (EXTERN 149182 . 149188) (punctuation 149180 . 149181) (close-paren 149179 . 149180) (symbol 149170 . 149179) (punctuation 149168 . 149169) (symbol 149159 . 149168) (open-paren 149158 . 149159) (symbol 149131 . 149157) (VOID 149126 . 149130) (EXTERN 149119 . 149125) (punctuation 149117 . 149118) (close-paren 149116 . 149117) (symbol 149105 . 149116) (open-paren 149104 . 149105) (symbol 149095 . 149103) (VOID "void" 149089 . 149094) (symbol "ATTRIBUTE_COLD" 149089 . 149094) (EXTERN 149082 . 149088) (punctuation 149080 . 149081) (close-paren 149079 . 149080) (VOID 149075 . 149079) (open-paren 149074 . 149075) (symbol 149038 . 149073) (symbol 149026 . 149037) (EXTERN 149019 . 149025) (punctuation 149017 . 149018) (close-paren 149016 . 149017) (symbol 149005 . 149016) (open-paren 149004 . 149005) (symbol 148976 . 149003) (BOOL 148971 . 148975) (EXTERN 148964 . 148970) (punctuation 148933 . 148934) (close-paren 148932 . 148933) (VOID 148928 . 148932) (open-paren 148927 . 148928) (symbol 148911 . 148926) (VOID 148906 . 148910) (EXTERN 148899 . 148905) (punctuation 148897 . 148898) (close-paren 148896 . 148897) (VOID 148892 . 148896) (open-paren 148891 . 148892) (symbol 148878 . 148890) (VOID 148873 . 148877) (EXTERN 148866 . 148872) (punctuation 148864 . 148865) (close-paren 148863 . 148864) (BOOL 148859 . 148863) (punctuation 148857 . 148858) (symbol 148846 . 148857) (punctuation 148844 . 148845) (symbol 148833 . 148844) (open-paren 148832 . 148833) (symbol 148806 . 148831) (symbol 148794 . 148805) (EXTERN 148787 . 148793) (punctuation 148785 . 148786) (close-paren 148784 . 148785) (BOOL 148780 . 148784) (punctuation 148778 . 148779) (symbol 148769 . 148778) (punctuation 148758 . 148759) (symbol 148749 . 148758) (punctuation 148747 . 148748) (symbol 148738 . 148747) (punctuation 148736 . 148737) (symbol 148727 . 148736) (open-paren 148726 . 148727) (symbol 148702 . 148725) (symbol 148690 . 148701) (EXTERN 148683 . 148689) (punctuation 148681 . 148682) (close-paren 148680 . 148681) (BOOL 148676 . 148680) (punctuation 148674 . 148675) (symbol 148665 . 148674) (punctuation 148663 . 148664) (symbol 148654 . 148663) (open-paren 148653 . 148654) (symbol 148634 . 148652) (symbol 148622 . 148633) (EXTERN 148615 . 148621) (punctuation 148613 . 148614) (close-paren 148612 . 148613) (symbol 148601 . 148612) (open-paren 148600 . 148601) (symbol 148575 . 148599) (VOID 148570 . 148574) (EXTERN 148563 . 148569) (punctuation 148561 . 148562) (close-paren 148560 . 148561) (VOID 148556 . 148560) (open-paren 148555 . 148556) (symbol 148533 . 148554) (symbol 148521 . 148532) (EXTERN 148514 . 148520) (punctuation 148512 . 148513) (close-paren 148511 . 148512) (symbol 148500 . 148511) (punctuation 148498 . 148499) (symbol 148487 . 148498) (open-paren 148486 . 148487) (symbol 148463 . 148485) (VOID 148458 . 148462) (EXTERN 148451 . 148457) (punctuation 148449 . 148450) (close-paren 148448 . 148449) (punctuation 148447 . 148448) (symbol 148435 . 148446) (UNION 148429 . 148434) (open-paren 148428 . 148429) (symbol 148408 . 148427) (VOID 148403 . 148407) (EXTERN 148396 . 148402) (punctuation 148394 . 148395) (close-paren 148393 . 148394) (symbol 148382 . 148393) (open-paren 148381 . 148382) (symbol 148373 . 148380) (VOID 148368 . 148372) (EXTERN 148361 . 148367) (punctuation 148329 . 148330) (close-paren 148328 . 148329) (VOID 148324 . 148328) (open-paren 148323 . 148324) (symbol 148304 . 148322) (VOID 148299 . 148303) (EXTERN 148292 . 148298) (punctuation 148290 . 148291) (close-paren 148289 . 148290) (VOID 148285 . 148289) (open-paren 148284 . 148285) (symbol 148271 . 148283) (VOID 148266 . 148270) (EXTERN 148259 . 148265) (close-paren 146973 . 146974) (punctuation 146971 . 146972) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 146943 . 146949) ("type" symbol "Lisp_Vectorlike" 146926 . 146941) ("a" symbol "o" 146923 . 146924)))) 146915 . 146971) (RETURN 146908 . 146914) (punctuation 146904 . 146905) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MODULE_FUNCTIONP" 146883 . 146899)))) 146874 . 146904) (open-paren 146870 . 146871) (close-paren 146868 . 146869) (symbol 146867 . 146868) (symbol 146855 . 146866) (open-paren 146854 . 146855) (symbol 146837 . 146853) (punctuation 146835 . 146836) (symbol 146814 . 146834) (STRUCT 146807 . 146813) (symbol 146800 . 146806) (close-paren 146797 . 146798) (RETURN 146749 . 146755) (open-paren 146745 . 146746) (close-paren 146743 . 146744) (symbol 146742 . 146743) (symbol 146730 . 146741) (open-paren 146729 . 146730) (symbol 146712 . 146728) (BOOL 146707 . 146711) (symbol 146700 . 146706) (punctuation 146314 . 146315) (close-paren 146313 . 146314) (symbol 146309 . 146313) (punctuation 146308 . 146309) (symbol 146296 . 146307) (punctuation 146294 . 146295) (symbol 146287 . 146294) (symbol 146277 . 146286) (punctuation 146267 . 146268) (symbol 146264 . 146267) (symbol 146252 . 146263) (open-paren 146251 . 146252) (symbol 146235 . 146250) (symbol 146223 . 146234) (punctuation 146221 . 146222) (close-paren 146220 . 146221) (symbol 146215 . 146220) (symbol 146203 . 146214) (punctuation 146201 . 146202) (symbol 146197 . 146201) (symbol 146185 . 146196) (open-paren 146184 . 146185) (symbol 146167 . 146183) (VOID 146162 . 146166) (punctuation 146160 . 146161) (close-paren 146159 . 146160) (symbol 146153 . 146159) (punctuation 146152 . 146153) (symbol 146140 . 146151) (STRUCT 146133 . 146139) (open-paren 146132 . 146133) (symbol 146103 . 146131) (BOOL 146098 . 146102) (EXTERN 146091 . 146097) (punctuation 146089 . 146090) (close-paren 146088 . 146089) (VOID 146084 . 146088) (open-paren 146083 . 146084) (symbol 146060 . 146082) (symbol 146048 . 146059) (punctuation 146046 . 146047) (close-paren 146045 . 146046) (symbol 146040 . 146045) (symbol 146028 . 146039) (open-paren 146027 . 146028) (symbol 146013 . 146026) (VOID 146008 . 146012) (EXTERN 146001 . 146007) (punctuation 145999 . 146000) (close-paren 145998 . 145999) (symbol 145995 . 145998) (punctuation 145994 . 145995) (symbol 145982 . 145993) (UNION 145976 . 145981) (punctuation 145974 . 145975) (symbol 145969 . 145974) (punctuation 145968 . 145969) (symbol 145956 . 145967) (UNION 145950 . 145955) (open-paren 145949 . 145950) (symbol 145936 . 145948) (VOID 145931 . 145935) (EXTERN 145924 . 145930) (punctuation 145922 . 145923) (close-paren 145921 . 145922) (symbol 145910 . 145921) (open-paren 145909 . 145910) (symbol 145897 . 145908) (VOID 145892 . 145896) (EXTERN 145885 . 145891) (punctuation 145883 . 145884) (close-paren 145882 . 145883) (VOID 145878 . 145882) (open-paren 145877 . 145878) (symbol 145864 . 145876) (VOID 145859 . 145863) (EXTERN 145852 . 145858) (punctuation 145850 . 145851) (close-paren 145849 . 145850) (VOID 145845 . 145849) (open-paren 145844 . 145845) (symbol 145834 . 145843) (VOID 145829 . 145833) (EXTERN 145822 . 145828) (punctuation 145820 . 145821) (close-paren 145819 . 145820) (symbol 145808 . 145819) (punctuation 145806 . 145807) (symbol 145795 . 145806) (punctuation 145793 . 145794) (symbol 145782 . 145793) (open-paren 145781 . 145782) (symbol 145770 . 145780) (symbol 145758 . 145769) (EXTERN 145751 . 145757) (punctuation 145749 . 145750) (close-paren 145748 . 145749) (symbol 145737 . 145748) (punctuation 145735 . 145736) (symbol 145724 . 145735) (open-paren 145723 . 145724) (symbol 145712 . 145722) (symbol 145700 . 145711) (EXTERN 145693 . 145699) (punctuation 145691 . 145692) (close-paren 145690 . 145691) (punctuation 145689 . 145690) (punctuation 145688 . 145689) (punctuation 145687 . 145688) (punctuation 145685 . 145686) (symbol 145674 . 145685) (punctuation 145672 . 145673) (symbol 145663 . 145672) (open-paren 145662 . 145663) (symbol 145652 . 145661) (symbol 145640 . 145651) (EXTERN 145633 . 145639) (punctuation 145631 . 145632) (close-paren 145630 . 145631) (VOID 145626 . 145630) (open-paren 145625 . 145626) (symbol 145610 . 145624) (VOID 145605 . 145609) (EXTERN 145598 . 145604) (punctuation 145596 . 145597) (close-paren 145595 . 145596) (symbol 145592 . 145595) (symbol 145580 . 145591) (open-paren 145579 . 145580) (symbol 145565 . 145578) (symbol 145553 . 145564) (EXTERN 145546 . 145552) (punctuation 145544 . 145545) (close-paren 145543 . 145544) (symbol 145532 . 145543) (symbol 145520 . 145531) (punctuation 145518 . 145519) (symbol 145510 . 145518) (symbol 145498 . 145509) (punctuation 145484 . 145485) (symbol 145475 . 145484) (symbol 145463 . 145474) (punctuation 145461 . 145462) (symbol 145454 . 145461) (symbol 145442 . 145453) (punctuation 145440 . 145441) (symbol 145436 . 145440) (symbol 145424 . 145435) (open-paren 145423 . 145424) (symbol 145387 . 145411) (symbol 145375 . 145386) (EXTERN 145368 . 145374) (punctuation 145366 . 145367) (close-paren 145365 . 145366) (number 145364 . 145365) (punctuation 145362 . 145363) (number 145361 . 145362) (open-paren 145360 . 145361) (symbol 145336 . 145359) (close-paren 145332 . 145333) (symbol 145325 . 145332) (punctuation 145323 . 145324) (punctuation 145322 . 145323) (CHAR 145317 . 145321) (CONST 145311 . 145316) (open-paren 145310 . 145311) (symbol 145295 . 145309) (symbol 145283 . 145294) (EXTERN 145276 . 145282) (punctuation 145274 . 145275) (close-paren 145273 . 145274) (number 145272 . 145273) (punctuation 145270 . 145271) (number 145269 . 145270) (open-paren 145268 . 145269) (symbol 145244 . 145267) (close-paren 145240 . 145241) (symbol 145233 . 145240) (punctuation 145231 . 145232) (punctuation 145230 . 145231) (CHAR 145225 . 145229) (CONST 145219 . 145224) (open-paren 145218 . 145219) (symbol 145211 . 145217) (VOID "void" 145205 . 145210) (symbol "ATTRIBUTE_COLD" 145205 . 145210) (EXTERN 145198 . 145204) (punctuation 145196 . 145197) (close-paren 145195 . 145196) (number 145194 . 145195) (punctuation 145192 . 145193) (number 145191 . 145192) (open-paren 145190 . 145191) (symbol 145166 . 145189) (close-paren 145164 . 145165) (punctuation 145163 . 145164) (punctuation 145162 . 145163) (punctuation 145161 . 145162) (punctuation 145159 . 145160) (punctuation 145158 . 145159) (CHAR 145153 . 145157) (CONST 145147 . 145152) (open-paren 145146 . 145147) (symbol 145140 . 145145) (VOID "void" 145134 . 145139) (symbol "ATTRIBUTE_COLD" 145134 . 145139) (EXTERN 145127 . 145133) (punctuation 145125 . 145126) (close-paren 145124 . 145125) (symbol 145115 . 145124) (BOOL 145110 . 145114) (punctuation 145108 . 145109) (symbol 145100 . 145108) (INT 145096 . 145099) (punctuation 145094 . 145095) (symbol 145091 . 145094) (punctuation 145090 . 145091) (symbol 145078 . 145089) (UNION 145072 . 145077) (open-paren 145071 . 145072) (symbol 145054 . 145070) (VOID 145049 . 145053) (punctuation 145047 . 145048) (close-paren 145046 . 145047) (symbol 145035 . 145046) (punctuation 145033 . 145034) (symbol 145022 . 145033) (open-paren 145021 . 145022) (symbol 145011 . 145020) (symbol 144999 . 145010) (EXTERN 144992 . 144998) (punctuation 144990 . 144991) (close-paren 144989 . 144990) (punctuation 144988 . 144989) (VOID 144983 . 144987) (punctuation 144981 . 144982) (semantic-list 144973 . 144981) (semantic-list 144969 . 144972) (VOID 144964 . 144968) (punctuation 144962 . 144963) (symbol 144951 . 144962) (open-paren 144950 . 144951) (symbol 144927 . 144949) (VOID 144922 . 144926) (EXTERN 144915 . 144921) (punctuation 144913 . 144914) (close-paren 144912 . 144913) (symbol 144901 . 144912) (punctuation 144895 . 144896) (semantic-list 144882 . 144895) (semantic-list 144878 . 144881) (VOID 144873 . 144877) (punctuation 144871 . 144872) (symbol 144860 . 144871) (open-paren 144859 . 144860) (symbol 144840 . 144858) (VOID 144835 . 144839) (EXTERN 144828 . 144834) (punctuation 144826 . 144827) (close-paren 144825 . 144826) (symbol 144814 . 144825) (open-paren 144813 . 144814) (symbol 144792 . 144812) (VOID 144787 . 144791) (EXTERN 144780 . 144786) (punctuation 144778 . 144779) (close-paren 144777 . 144778) (punctuation 144776 . 144777) (VOID 144771 . 144775) (punctuation 144769 . 144770) (symbol 144757 . 144769) (ENUM 144752 . 144756) (open-paren 144751 . 144752) (symbol 144722 . 144750) (VOID 144717 . 144721) (EXTERN 144710 . 144716) (punctuation 144708 . 144709) (close-paren 144707 . 144708) (VOID 144703 . 144707) (open-paren 144702 . 144703) (symbol 144672 . 144701) (VOID 144667 . 144671) (EXTERN 144660 . 144666) (punctuation 144658 . 144659) (close-paren 144657 . 144658) (VOID 144653 . 144657) (open-paren 144652 . 144653) (symbol 144620 . 144651) (VOID 144615 . 144619) (EXTERN 144608 . 144614) (punctuation 144606 . 144607) (close-paren 144605 . 144606) (semantic-list 144599 . 144605) (semantic-list 144595 . 144598) (VOID 144590 . 144594) (open-paren 144589 . 144590) (symbol 144562 . 144588) (VOID 144557 . 144561) (EXTERN 144550 . 144556) (punctuation 144548 . 144549) (close-paren 144547 . 144548) (symbol 144539 . 144547) (punctuation 144537 . 144538) (semantic-list 144527 . 144537) (semantic-list 144523 . 144526) (VOID 144518 . 144522) (open-paren 144517 . 144518) (symbol 144488 . 144516) (VOID 144483 . 144487) (EXTERN 144476 . 144482) (punctuation 144474 . 144475) (close-paren 144473 . 144474) (INT 144470 . 144473) (punctuation 144468 . 144469) (semantic-list 144463 . 144468) (semantic-list 144459 . 144462) (VOID 144454 . 144458) (open-paren 144453 . 144454) (symbol 144427 . 144452) (VOID 144422 . 144426) (EXTERN 144415 . 144421) (punctuation 144413 . 144414) (close-paren 144412 . 144413) (semantic-list 144404 . 144412) (semantic-list 144396 . 144403) (VOID 144391 . 144395) (punctuation 144389 . 144390) (symbol 144386 . 144389) (punctuation 144385 . 144386) (VOID 144380 . 144384) (punctuation 144369 . 144370) (semantic-list 144361 . 144369) (semantic-list 144349 . 144360) (VOID 144344 . 144348) (open-paren 144343 . 144344) (symbol 144312 . 144342) (VOID 144307 . 144311) (EXTERN 144300 . 144306) (punctuation 144298 . 144299) (close-paren 144297 . 144298) (punctuation 144296 . 144297) (VOID 144291 . 144295) (punctuation 144289 . 144290) (semantic-list 144281 . 144289) (semantic-list 144277 . 144280) (VOID 144272 . 144276) (open-paren 144271 . 144272) (symbol 144245 . 144270) (VOID 144240 . 144244) (EXTERN 144233 . 144239) (punctuation 144231 . 144232) (close-paren 144230 . 144231) (symbol 144221 . 144230) (punctuation 144219 . 144220) (punctuation 144218 . 144219) (symbol 144206 . 144217) (open-paren 144205 . 144206) (symbol 144177 . 144204) (VOID 144172 . 144176) (EXTERN 144165 . 144171) (punctuation 144163 . 144164) (close-paren 144162 . 144163) (symbol 144151 . 144162) (punctuation 144149 . 144150) (semantic-list 144136 . 144149) (semantic-list 144132 . 144135) (VOID 144127 . 144131) (open-paren 144126 . 144127) (symbol 144104 . 144125) (VOID 144099 . 144103) (EXTERN 144092 . 144098) (punctuation 144090 . 144091) (close-paren 144089 . 144090) (symbol 144078 . 144089) (punctuation 144076 . 144077) (symbol 144065 . 144076) (open-paren 144064 . 144065) (symbol 144055 . 144063) (VOID 144050 . 144054) (EXTERN 144043 . 144049) (punctuation 144041 . 144042) (close-paren 144040 . 144041) (symbol 144029 . 144040) (ENUM 144024 . 144028) (punctuation 144022 . 144023) (symbol 144011 . 144022) (open-paren 144010 . 144011) (symbol 143988 . 144009) (punctuation 143987 . 143988) (symbol 143979 . 143986) (STRUCT 143972 . 143978) (EXTERN 143965 . 143971) (close-paren 143934 . 143935) (symbol 143923 . 143934) (ENUM 143918 . 143922) (punctuation 143916 . 143917) (symbol 143905 . 143916) (open-paren 143904 . 143905) (symbol 143891 . 143903) (punctuation 143890 . 143891) (symbol 143882 . 143889) (STRUCT 143875 . 143881) (EXTERN 143868 . 143874) (punctuation 143866 . 143867) (close-paren 143865 . 143866) (punctuation 143829 . 143830) (punctuation 143814 . 143815) (punctuation 143813 . 143814) (VOID 143808 . 143812) (punctuation 143806 . 143807) (punctuation 143795 . 143796) (open-paren 143781 . 143782) (symbol 143762 . 143780) (symbol 143750 . 143761) (EXTERN 143743 . 143749) (punctuation 143741 . 143742) (close-paren 143740 . 143741) (punctuation 143698 . 143699) (punctuation 143683 . 143684) (symbol 143672 . 143683) (punctuation 143665 . 143666) (punctuation 143664 . 143665) (symbol 143652 . 143663) (punctuation 143650 . 143651) (symbol 143641 . 143650) (punctuation 143639 . 143640) (punctuation 143610 . 143611) (open-paren 143596 . 143597) (symbol 143566 . 143591) (symbol 143554 . 143565) (EXTERN 143547 . 143553) (punctuation 143545 . 143546) (close-paren 143544 . 143545) (punctuation 143528 . 143529) (punctuation 143513 . 143514) (symbol 143502 . 143513) (punctuation 143500 . 143501) (symbol 143489 . 143500) (punctuation 143487 . 143488) (symbol 143476 . 143487) (punctuation 143474 . 143475) (punctuation 143445 . 143446) (open-paren 143431 . 143432) (symbol 143405 . 143430) (symbol 143393 . 143404) (EXTERN 143386 . 143392) (punctuation 143384 . 143385) (close-paren 143383 . 143384) (punctuation 143367 . 143368) (punctuation 143352 . 143353) (symbol 143341 . 143352) (punctuation 143339 . 143340) (symbol 143328 . 143339) (punctuation 143326 . 143327) (punctuation 143310 . 143311) (open-paren 143296 . 143297) (symbol 143270 . 143295) (symbol 143258 . 143269) (EXTERN 143251 . 143257) (punctuation 143249 . 143250) (close-paren 143248 . 143249) (punctuation 143232 . 143233) (punctuation 143217 . 143218) (symbol 143206 . 143217) (punctuation 143204 . 143205) (punctuation 143195 . 143196) (open-paren 143181 . 143182) (symbol 143157 . 143180) (symbol 143145 . 143156) (EXTERN 143138 . 143144) (punctuation 143136 . 143137) (close-paren 143135 . 143136) (symbol 143124 . 143135) (punctuation 143122 . 143123) (symbol 143111 . 143122) (punctuation 143109 . 143110) (symbol 143098 . 143109) (open-paren 143097 . 143098) (symbol 143068 . 143096) (symbol 143056 . 143067) (EXTERN 143049 . 143055) (punctuation 143047 . 143048) (close-paren 143046 . 143047) (symbol 143035 . 143046) (punctuation 143033 . 143034) (punctuation 143017 . 143018) (punctuation 143002 . 143003) (symbol 142991 . 143002) (open-paren 142990 . 142991) (symbol 142975 . 142989) (symbol 142963 . 142974) (EXTERN 142956 . 142962) (punctuation 142954 . 142955) (close-paren 142953 . 142954) (symbol 142942 . 142953) (punctuation 142940 . 142941) (symbol 142929 . 142940) (open-paren 142928 . 142929) (symbol 142921 . 142927) (symbol 142909 . 142920) (EXTERN 142902 . 142908) (punctuation 142900 . 142901) (close-paren 142899 . 142900) (symbol 142895 . 142899) (symbol 142883 . 142894) (open-paren 142882 . 142883) (symbol 142873 . 142881) (symbol 142861 . 142872) (EXTERN 142854 . 142860) (punctuation 142852 . 142853) (close-paren 142851 . 142852) (symbol 142841 . 142851) (punctuation 142840 . 142841) (symbol 142828 . 142839) (punctuation 142826 . 142827) (symbol 142819 . 142826) (symbol 142809 . 142818) (punctuation 142807 . 142808) (symbol 142803 . 142807) (punctuation 142802 . 142803) (symbol 142792 . 142801) (STRUCT 142785 . 142791) (open-paren 142784 . 142785) (symbol 142771 . 142783) (symbol 142759 . 142770) (EXTERN 142752 . 142758) (punctuation 142750 . 142751) (close-paren 142749 . 142750) (symbol 142738 . 142749) (open-paren 142737 . 142738) (symbol 142727 . 142736) (BOOL 142722 . 142726) (EXTERN 142715 . 142721) (punctuation 142713 . 142714) (close-paren 142712 . 142713) (VOID 142708 . 142712) (open-paren 142707 . 142708) (symbol 142692 . 142706) (VOID "void" 142686 . 142691) (symbol "ATTRIBUTE_COLD" 142686 . 142691) (EXTERN 142679 . 142685) (punctuation 142677 . 142678) (close-paren 142676 . 142677) (symbol 142665 . 142676) (punctuation 142663 . 142664) (punctuation 142662 . 142663) (CHAR 142657 . 142661) (CONST 142651 . 142656) (open-paren 142650 . 142651) (symbol 142637 . 142649) (VOID "void" 142631 . 142636) (symbol "ATTRIBUTE_COLD" 142631 . 142636) (EXTERN 142624 . 142630) (punctuation 142622 . 142623) (close-paren 142621 . 142622) (symbol 142610 . 142621) (punctuation 142608 . 142609) (symbol 142597 . 142608) (punctuation 142595 . 142596) (symbol 142584 . 142595) (punctuation 142582 . 142583) (symbol 142571 . 142582) (open-paren 142570 . 142571) (symbol 142561 . 142569) (VOID "void" 142555 . 142560) (symbol "ATTRIBUTE_COLD" 142555 . 142560) (EXTERN 142548 . 142554) (punctuation 142546 . 142547) (close-paren 142545 . 142546) (symbol 142534 . 142545) (punctuation 142532 . 142533) (symbol 142521 . 142532) (punctuation 142519 . 142520) (symbol 142508 . 142519) (open-paren 142507 . 142508) (symbol 142498 . 142506) (VOID "void" 142492 . 142497) (symbol "ATTRIBUTE_COLD" 142492 . 142497) (EXTERN 142485 . 142491) (punctuation 142483 . 142484) (close-paren 142482 . 142483) (symbol 142471 . 142482) (punctuation 142469 . 142470) (symbol 142458 . 142469) (open-paren 142457 . 142458) (symbol 142448 . 142456) (VOID "void" 142442 . 142447) (symbol "ATTRIBUTE_COLD" 142442 . 142447) (EXTERN 142435 . 142441) (punctuation 142433 . 142434) (close-paren 142432 . 142433) (symbol 142421 . 142432) (open-paren 142420 . 142421) (symbol 142411 . 142419) (VOID "void" 142405 . 142410) (symbol "ATTRIBUTE_COLD" 142405 . 142410) (EXTERN 142398 . 142404) (close-paren 142396 . 142397) (open-paren 142362 . 142363) (close-paren 142360 . 142361) (symbol 142356 . 142360) (symbol 142344 . 142355) (punctuation 142342 . 142343) (symbol 142330 . 142342) (symbol 142318 . 142329) (open-paren 142317 . 142318) (symbol 142309 . 142316) (VOID "void" 142303 . 142308) (symbol "ATTRIBUTE_COLD" 142303 . 142308) (symbol 142296 . 142302) (punctuation 142294 . 142295) (close-paren 142293 . 142294) (VOID 142289 . 142293) (open-paren 142288 . 142289) (symbol 142283 . 142287) (symbol 142271 . 142282) (EXTERN 142264 . 142270) (punctuation 142262 . 142263) (close-paren 142261 . 142262) (punctuation 142204 . 142205) (punctuation 142178 . 142179) (symbol 142174 . 142178) (punctuation 142173 . 142174) (symbol 142161 . 142172) (punctuation 142159 . 142160) (symbol 142154 . 142159) (symbol 142144 . 142153) (open-paren 142143 . 142144) (symbol 142124 . 142142) (symbol 142112 . 142123) (EXTERN 142105 . 142111) (punctuation 142103 . 142104) (close-paren 142102 . 142103) (symbol 142091 . 142102) (punctuation 142089 . 142090) (symbol 142078 . 142089) (punctuation 142076 . 142077) (symbol 142065 . 142076) (open-paren 142064 . 142065) (symbol 142043 . 142063) (VOID 142038 . 142042) (EXTERN 142031 . 142037) (punctuation 142029 . 142030) (close-paren 142028 . 142029) (symbol 142017 . 142028) (open-paren 142016 . 142017) (symbol 142007 . 142015) (VOID 142002 . 142006) (EXTERN 141995 . 142001) (punctuation 141760 . 141761) (close-paren 141759 . 141760) (symbol 141748 . 141759) (open-paren 141747 . 141748) (symbol 141733 . 141746) (BOOL 141728 . 141732) (EXTERN 141721 . 141727) (close-paren 141547 . 141548) (semantic-list 141539 . 141544) (RETURN 141501 . 141507) (open-paren 141497 . 141498) (close-paren 141495 . 141496) (symbol 141492 . 141495) (punctuation 141491 . 141492) (CHAR 141486 . 141490) (CONST 141480 . 141485) (open-paren 141479 . 141480) (symbol 141463 . 141478) (symbol 141451 . 141462) (symbol 141444 . 141450) (close-paren 141441 . 141442) (semantic-list 141433 . 141438) (RETURN 141404 . 141410) (open-paren 141400 . 141401) (close-paren 141398 . 141399) (symbol 141395 . 141398) (punctuation 141394 . 141395) (CHAR 141389 . 141393) (CONST 141383 . 141388) (open-paren 141382 . 141383) (symbol 141375 . 141381) (symbol 141363 . 141374) (symbol 141356 . 141362) (punctuation 141353 . 141354) (close-paren 141352 . 141353) (VOID 141348 . 141352) (open-paren 141347 . 141348) (symbol 141336 . 141346) (VOID 141331 . 141335) (EXTERN 141324 . 141330) (punctuation 141322 . 141323) (close-paren 141321 . 141322) (VOID 141317 . 141321) (open-paren 141316 . 141317) (symbol 141302 . 141315) (VOID 141297 . 141301) (EXTERN 141290 . 141296) (punctuation 141288 . 141289) (close-paren 141287 . 141288) (VOID 141283 . 141287) (open-paren 141282 . 141283) (symbol 141271 . 141281) (VOID 141266 . 141270) (EXTERN 141259 . 141265) (punctuation 141257 . 141258) (close-paren 141256 . 141257) (VOID 141252 . 141256) (open-paren 141251 . 141252) (symbol 141233 . 141250) (VOID 141228 . 141232) (EXTERN 141221 . 141227) (punctuation 141219 . 141220) (close-paren 141218 . 141219) (symbol 141207 . 141218) (punctuation 141205 . 141206) (punctuation 141204 . 141205) (CHAR 141199 . 141203) (CONST 141193 . 141198) (open-paren 141192 . 141193) (symbol 141180 . 141191) (VOID 141175 . 141179) (EXTERN 141168 . 141174) (punctuation 141166 . 141167) (close-paren 141165 . 141166) (symbol 141154 . 141165) (punctuation 141127 . 141128) (semantic-list 141101 . 141127) (semantic-list 141097 . 141100) (VOID 141092 . 141096) (punctuation 141090 . 141091) (symbol 141079 . 141090) (open-paren 141078 . 141079) (symbol 141066 . 141077) (VOID 141061 . 141065) (EXTERN 141054 . 141060) (punctuation 141052 . 141053) (close-paren 141051 . 141052) (punctuation 141050 . 141051) (symbol 141040 . 141049) (punctuation 141038 . 141039) (INT 141035 . 141038) (punctuation 141033 . 141034) (punctuation 141032 . 141033) (CONST 141026 . 141031) (CHAR 141021 . 141025) (open-paren 141020 . 141021) (symbol 141003 . 141019) (symbol 140991 . 141002) (EXTERN 140984 . 140990) (punctuation 140982 . 140983) (close-paren 140981 . 140982) (number 140979 . 140980) (punctuation 140977 . 140978) (symbol 140957 . 140976) (open-paren 140955 . 140956) (ENUM 140950 . 140954) (punctuation 140948 . 140949) (close-paren 140947 . 140948) (BOOL 140943 . 140947) (punctuation 140941 . 140942) (BOOL 140937 . 140941) (punctuation 140935 . 140936) (symbol 140924 . 140935) (punctuation 140922 . 140923) (punctuation 140921 . 140922) (symbol 140909 . 140920) (punctuation 140889 . 140890) (symbol 140878 . 140889) (punctuation 140876 . 140877) (symbol 140865 . 140876) (punctuation 140863 . 140864) (symbol 140852 . 140863) (open-paren 140851 . 140852) (symbol 140845 . 140850) (INT 140841 . 140844) (EXTERN 140834 . 140840) (punctuation 140832 . 140833) (close-paren 140831 . 140832) (symbol 140820 . 140831) (punctuation 140818 . 140819) (symbol 140807 . 140818) (punctuation 140799 . 140800) (symbol 140788 . 140799) (punctuation 140786 . 140787) (symbol 140775 . 140786) (punctuation 140773 . 140774) (symbol 140762 . 140773) (open-paren 140761 . 140762) (symbol 140740 . 140760) (symbol 140728 . 140739) (EXTERN 140721 . 140727) (punctuation 140719 . 140720) (close-paren 140718 . 140719) (punctuation 140717 . 140718) (CHAR 140712 . 140716) (CONST 140706 . 140711) (punctuation 140704 . 140705) (symbol 140693 . 140704) (open-paren 140692 . 140693) (symbol 140683 . 140691) (BOOL 140678 . 140682) (EXTERN 140671 . 140677) (close-paren 140669 . 140670) (semantic-list 140599 . 140612) (IF 140596 . 140598) (open-paren 140592 . 140593) (close-paren 140590 . 140591) (symbol 140589 . 140590) (symbol 140577 . 140588) (open-paren 140576 . 140577) (symbol 140560 . 140575) (VOID 140555 . 140559) (symbol 140548 . 140554) (punctuation 140546 . 140547) (close-paren 140545 . 140546) (symbol 140536 . 140545) (punctuation 140534 . 140535) (symbol 140525 . 140534) (punctuation 140523 . 140524) (punctuation 140522 . 140523) (CHAR 140517 . 140521) (CONST 140511 . 140516) (punctuation 140509 . 140510) (symbol 140498 . 140509) (open-paren 140497 . 140498) (symbol 140488 . 140496) (symbol 140476 . 140487) (EXTERN 140469 . 140475) (punctuation 140467 . 140468) (close-paren 140466 . 140467) (symbol 140455 . 140466) (punctuation 140453 . 140454) (symbol 140442 . 140453) (open-paren 140441 . 140442) (symbol 140429 . 140440) (VOID 140424 . 140428) (EXTERN 140417 . 140423) (punctuation 140415 . 140416) (close-paren 140414 . 140415) (symbol 140403 . 140414) (punctuation 140401 . 140402) (symbol 140390 . 140401) (punctuation 140388 . 140389) (symbol 140377 . 140388) (open-paren 140376 . 140377) (symbol 140362 . 140375) (symbol 140350 . 140361) (EXTERN 140343 . 140349) (punctuation 140341 . 140342) (close-paren 140340 . 140341) (symbol 140331 . 140340) (punctuation 140329 . 140330) (punctuation 140328 . 140329) (CHAR 140323 . 140327) (CONST 140317 . 140322) (open-paren 140316 . 140317) (symbol 140298 . 140315) (symbol 140286 . 140297) (EXTERN 140279 . 140285) (punctuation 140277 . 140278) (close-paren 140276 . 140277) (symbol 140267 . 140276) (punctuation 140265 . 140266) (punctuation 140264 . 140265) (CHAR 140259 . 140263) (CONST 140253 . 140258) (open-paren 140252 . 140253) (symbol 140243 . 140251) (symbol 140231 . 140242) (EXTERN 140224 . 140230) (punctuation 140222 . 140223) (close-paren 140221 . 140222) (symbol 140210 . 140221) (open-paren 140209 . 140210) (symbol 140195 . 140208) (symbol 140183 . 140194) (EXTERN 140176 . 140182) (punctuation 140146 . 140147) (close-paren 140145 . 140146) (number 140144 . 140145) (punctuation 140142 . 140143) (number 140141 . 140142) (open-paren 140140 . 140141) (symbol 140116 . 140139) (close-paren 140112 . 140113) (symbol 140105 . 140112) (punctuation 140103 . 140104) (punctuation 140102 . 140103) (CONST 140096 . 140101) (CHAR 140091 . 140095) (punctuation 140082 . 140083) (symbol 140073 . 140082) (punctuation 140071 . 140072) (punctuation 140070 . 140071) (CHAR 140065 . 140069) (punctuation 140063 . 140064) (punctuation 140062 . 140063) (symbol 140052 . 140061) (punctuation 140050 . 140051) (punctuation 140049 . 140050) (punctuation 140048 . 140049) (CHAR 140043 . 140047) (open-paren 140042 . 140043) (symbol 140032 . 140041) (symbol 140022 . 140031) (EXTERN 140015 . 140021) (punctuation 140013 . 140014) (close-paren 140012 . 140013) (number 140011 . 140012) (punctuation 140009 . 140010) (number 140008 . 140009) (open-paren 140007 . 140008) (symbol 139983 . 140006) (close-paren 139979 . 139980) (punctuation 139978 . 139979) (punctuation 139977 . 139978) (punctuation 139976 . 139977) (punctuation 139974 . 139975) (punctuation 139973 . 139974) (CONST 139967 . 139972) (CHAR 139962 . 139966) (punctuation 139954 . 139955) (symbol 139945 . 139954) (punctuation 139943 . 139944) (punctuation 139942 . 139943) (CHAR 139937 . 139941) (punctuation 139935 . 139936) (punctuation 139934 . 139935) (symbol 139924 . 139933) (punctuation 139922 . 139923) (punctuation 139921 . 139922) (punctuation 139920 . 139921) (CHAR 139915 . 139919) (open-paren 139914 . 139915) (symbol 139905 . 139913) (symbol 139895 . 139904) (EXTERN 139888 . 139894) (punctuation 139886 . 139887) (close-paren 139885 . 139886) (number 139884 . 139885) (punctuation 139882 . 139883) (number 139881 . 139882) (open-paren 139880 . 139881) (symbol 139856 . 139879) (close-paren 139852 . 139853) (punctuation 139851 . 139852) (punctuation 139850 . 139851) (punctuation 139849 . 139850) (punctuation 139847 . 139848) (punctuation 139846 . 139847) (CONST 139840 . 139845) (CHAR 139835 . 139839) (punctuation 139833 . 139834) (punctuation 139832 . 139833) (CHAR 139827 . 139831) (open-paren 139826 . 139827) (symbol 139817 . 139825) (symbol 139807 . 139816) (EXTERN 139800 . 139806) (punctuation 139798 . 139799) (close-paren 139797 . 139798) (symbol 139790 . 139797) (punctuation 139784 . 139785) (punctuation 139783 . 139784) (CHAR 139778 . 139782) (CONST 139772 . 139777) (punctuation 139770 . 139771) (punctuation 139769 . 139770) (CHAR 139764 . 139768) (CONST 139758 . 139763) (punctuation 139756 . 139757) (symbol 139747 . 139756) (punctuation 139745 . 139746) (punctuation 139744 . 139745) (CHAR 139739 . 139743) (open-paren 139738 . 139739) (symbol 139731 . 139737) (symbol 139721 . 139730) (EXTERN 139714 . 139720) (punctuation 139683 . 139684) (close-paren 139682 . 139683) (VOID 139678 . 139682) (open-paren 139677 . 139678) (symbol 139663 . 139676) (VOID 139658 . 139662) (EXTERN 139651 . 139657) (punctuation 139649 . 139650) (close-paren 139648 . 139649) (VOID 139644 . 139648) (open-paren 139643 . 139644) (symbol 139627 . 139642) (VOID 139622 . 139626) (EXTERN 139615 . 139621) (punctuation 139613 . 139614) (close-paren 139612 . 139613) (DOUBLE 139606 . 139612) (punctuation 139604 . 139605) (punctuation 139603 . 139604) (CHAR 139598 . 139602) (open-paren 139597 . 139598) (symbol 139581 . 139596) (INT 139577 . 139580) (EXTERN 139570 . 139576) (punctuation 139532 . 139533) (close-paren 139531 . 139532) (symbol 139520 . 139531) (punctuation 139518 . 139519) (punctuation 139502 . 139503) (punctuation 139487 . 139488) (punctuation 139486 . 139487) (CHAR 139481 . 139485) (CONST 139475 . 139480) (open-paren 139474 . 139475) (symbol 139430 . 139465) (symbol 139418 . 139429) (EXTERN 139411 . 139417) (punctuation 139409 . 139410) (close-paren 139408 . 139409) (symbol 139397 . 139408) (punctuation 139390 . 139391) (punctuation 139389 . 139390) (CHAR 139384 . 139388) (CONST 139378 . 139383) (punctuation 139376 . 139377) (symbol 139365 . 139376) (punctuation 139363 . 139364) (symbol 139352 . 139363) (open-paren 139351 . 139352) (symbol 139331 . 139350) (VOID 139326 . 139330) (EXTERN 139319 . 139325) (punctuation 139293 . 139294) (close-paren 139292 . 139293) (punctuation 139291 . 139292) (CHAR 139286 . 139290) (CONST 139280 . 139285) (open-paren 139279 . 139280) (symbol 139254 . 139278) (VOID 139249 . 139253) (EXTERN 139242 . 139248) (close-paren 139220 . 139221) (symbol 139209 . 139220) (open-paren 139208 . 139209) (symbol 139196 . 139207) (VOID 139191 . 139195) (EXTERN 139184 . 139190) (punctuation 139110 . 139111) (close-paren 139109 . 139110) (VOID 139105 . 139109) (open-paren 139104 . 139105) (symbol 139088 . 139103) (VOID 139083 . 139087) (EXTERN 139076 . 139082) (punctuation 139074 . 139075) (close-paren 139073 . 139074) (INT 139070 . 139073) (punctuation 139068 . 139069) (symbol 139057 . 139068) (open-paren 139056 . 139057) (symbol 139035 . 139055) (symbol 139023 . 139034) (EXTERN 139016 . 139022) (punctuation 139014 . 139015) (close-paren 139013 . 139014) (symbol 139002 . 139013) (open-paren 139001 . 139002) (symbol 138987 . 139000) (symbol 138975 . 138986) (EXTERN 138968 . 138974) (punctuation 138966 . 138967) (close-paren 138965 . 138966) (UNSIGNED 138957 . 138965) (punctuation 138955 . 138956) (UNSIGNED 138947 . 138955) (punctuation 138940 . 138941) (punctuation 138939 . 138940) (symbol 138931 . 138938) (STRUCT 138924 . 138930) (punctuation 138922 . 138923) (symbol 138911 . 138922) (punctuation 138904 . 138905) (symbol 138893 . 138904) (punctuation 138891 . 138892) (symbol 138880 . 138891) (punctuation 138873 . 138874) (semantic-list 138847 . 138873) (semantic-list 138833 . 138846) (VOID 138828 . 138832) (open-paren 138827 . 138828) (symbol 138800 . 138826) (VOID 138795 . 138799) (EXTERN 138788 . 138794) (punctuation 138786 . 138787) (close-paren 138785 . 138786) (symbol 138774 . 138785) (punctuation 138772 . 138773) (symbol 138761 . 138772) (punctuation 138759 . 138760) (symbol 138748 . 138759) (punctuation 138718 . 138719) (semantic-list 138651 . 138718) (semantic-list 138647 . 138650) (VOID 138642 . 138646) (open-paren 138641 . 138642) (symbol 138626 . 138640) (VOID 138621 . 138625) (EXTERN 138614 . 138620) (punctuation 138612 . 138613) (close-paren 138611 . 138612) (symbol 138600 . 138611) (punctuation 138598 . 138599) (INT 138595 . 138598) (punctuation 138593 . 138594) (INT 138590 . 138593) (punctuation 138588 . 138589) (symbol 138577 . 138588) (open-paren 138576 . 138577) (symbol 138555 . 138575) (VOID 138550 . 138554) (EXTERN 138543 . 138549) (punctuation 138541 . 138542) (close-paren 138540 . 138541) (punctuation 138539 . 138540) (INT 138535 . 138538) (punctuation 138533 . 138534) (punctuation 138532 . 138533) (INT 138528 . 138531) (punctuation 138481 . 138482) (INT 138478 . 138481) (punctuation 138476 . 138477) (symbol 138465 . 138476) (open-paren 138464 . 138465) (symbol 138439 . 138463) (symbol 138427 . 138438) (EXTERN 138420 . 138426) (punctuation 138418 . 138419) (close-paren 138417 . 138418) (symbol 138406 . 138417) (open-paren 138405 . 138406) (symbol 138389 . 138404) (symbol 138377 . 138388) (EXTERN 138370 . 138376) (punctuation 138004 . 138005) (close-paren 138003 . 138004) (VOID 137999 . 138003) (open-paren 137998 . 137999) (symbol 137977 . 137997) (VOID 137972 . 137976) (EXTERN 137965 . 137971) (punctuation 137956 . 137957) (close-paren 137955 . 137956) (semantic-list 137952 . 137955) (open-paren 137951 . 137952) (symbol 137929 . 137950) (close-paren 137927 . 137928) (symbol 137921 . 137927) (punctuation 137919 . 137920) (symbol 137913 . 137919) (open-paren 137912 . 137913) (symbol 137898 . 137911) (punctuation 137897 . 137898) (VOID 137892 . 137896) (EXTERN 137885 . 137891) (punctuation 137699 . 137700) (close-paren 137698 . 137699) (symbol 137687 . 137698) (open-paren 137686 . 137687) (symbol 137666 . 137685) (INT 137662 . 137665) (EXTERN 137655 . 137661) (close-paren 137626 . 137627) (VOID 137622 . 137626) (open-paren 137621 . 137622) (symbol 137605 . 137620) (punctuation 137604 . 137605) (symbol 137597 . 137603) (STRUCT 137590 . 137596) (EXTERN 137583 . 137589) (punctuation 137581 . 137582) (close-paren 137580 . 137581) (VOID 137576 . 137580) (open-paren 137575 . 137576) (symbol 137561 . 137574) (VOID 137556 . 137560) (EXTERN 137549 . 137555) (punctuation 137547 . 137548) (close-paren 137546 . 137547) (VOID 137542 . 137546) (open-paren 137541 . 137542) (symbol 137530 . 137540) (VOID 137525 . 137529) (EXTERN 137518 . 137524) (punctuation 137516 . 137517) (close-paren 137515 . 137516) (VOID 137511 . 137515) (open-paren 137510 . 137511) (symbol 137494 . 137509) (VOID 137489 . 137493) (EXTERN 137482 . 137488) (punctuation 137480 . 137481) (close-paren 137479 . 137480) (punctuation 137478 . 137479) (symbol 137468 . 137477) (STRUCT 137461 . 137467) (open-paren 137460 . 137461) (symbol 137450 . 137459) (VOID 137445 . 137449) (EXTERN 137438 . 137444) (punctuation 137436 . 137437) (close-paren 137435 . 137436) (symbol 137424 . 137435) (punctuation 137422 . 137423) (symbol 137411 . 137422) (punctuation 137409 . 137410) (symbol 137398 . 137409) (open-paren 137397 . 137398) (symbol 137383 . 137396) (symbol 137371 . 137382) (EXTERN 137364 . 137370) (punctuation 137362 . 137363) (close-paren 137361 . 137362) (symbol 137350 . 137361) (punctuation 137348 . 137349) (symbol 137337 . 137348) (open-paren 137336 . 137337) (symbol 137314 . 137335) (symbol 137302 . 137313) (EXTERN 137295 . 137301) (punctuation 137293 . 137294) (close-paren 137292 . 137293) (VOID 137288 . 137292) (open-paren 137287 . 137288) (symbol 137260 . 137286) (symbol 137248 . 137259) (EXTERN 137241 . 137247) (punctuation 137239 . 137240) (close-paren 137238 . 137239) (VOID 137234 . 137238) (open-paren 137233 . 137234) (symbol 137210 . 137232) (VOID 137205 . 137209) (EXTERN 137198 . 137204) (punctuation 137196 . 137197) (close-paren 137195 . 137196) (DOUBLE 137189 . 137195) (open-paren 137188 . 137189) (symbol 137177 . 137187) (symbol 137165 . 137176) (EXTERN 137158 . 137164) (close-paren 136233 . 136234) (symbol 136224 . 136233) (ENUM 136219 . 136223) (punctuation 136209 . 136210) (INT 136206 . 136209) (punctuation 136204 . 136205) (INT 136201 . 136204) (punctuation 136199 . 136200) (INT 136196 . 136199) (open-paren 136195 . 136196) (symbol 136173 . 136194) (punctuation 136172 . 136173) (symbol 136160 . 136171) (STRUCT 136153 . 136159) (EXTERN 136146 . 136152) (close-paren 136143 . 136144) (semantic-list 136117 . 136123) (RETURN 136075 . 136081) (open-paren 136071 . 136072) (close-paren 136069 . 136070) (symbol 136065 . 136069) (symbol 136055 . 136064) (open-paren 136054 . 136055) (symbol 136038 . 136053) (symbol 136026 . 136037) (symbol 136019 . 136025) (close-paren 135897 . 135898) (RETURN 135887 . 135893) (punctuation 135863 . 135864) (punctuation 135862 . 135863) (semantic-list 135859 . 135862) (symbol 135843 . 135858) (punctuation 135825 . 135826) (punctuation 135824 . 135825) (semantic-list 135821 . 135824) (symbol 135805 . 135820) (punctuation 135801 . 135802) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 135776 . 135779) ("v" symbol "XVECTOR" 135768 . 135775)))) 135754 . 135801) (open-paren 135644 . 135645) (close-paren 135642 . 135643) (symbol 135634 . 135642) (INT 135630 . 135633) (punctuation 135628 . 135629) (symbol 135623 . 135628) (INT 135619 . 135622) (open-paren 135618 . 135619) (symbol 135591 . 135617) (symbol 135579 . 135590) (symbol 135572 . 135578) (close-paren 135516 . 135517) (semantic-list 135490 . 135496) (RETURN 135452 . 135458) (open-paren 135448 . 135449) (close-paren 135446 . 135447) (symbol 135442 . 135446) (symbol 135432 . 135441) (open-paren 135431 . 135432) (symbol 135412 . 135430) (symbol 135400 . 135411) (symbol 135393 . 135399) (close-paren 135361 . 135362) (symbol 135352 . 135361) (open-paren 135351 . 135352) (symbol 135335 . 135350) (punctuation 135334 . 135335) (symbol 135322 . 135333) (STRUCT 135315 . 135321) (EXTERN 135308 . 135314) (close-paren 134924 . 134925) (symbol 134915 . 134924) (open-paren 134914 . 134915) (symbol 134894 . 134913) (punctuation 134893 . 134894) (symbol 134881 . 134892) (STRUCT 134874 . 134880) (EXTERN 134867 . 134873) (punctuation 134865 . 134866) (close-paren 134864 . 134865) (symbol 134853 . 134864) (punctuation 134851 . 134852) (symbol 134842 . 134851) (open-paren 134841 . 134842) (symbol 134829 . 134840) (symbol 134817 . 134828) (EXTERN 134810 . 134816) (punctuation 134808 . 134809) (close-paren 134807 . 134808) (symbol 134796 . 134807) (punctuation 134794 . 134795) (symbol 134783 . 134794) (open-paren 134782 . 134783) (symbol 134772 . 134781) (symbol 134760 . 134771) (EXTERN 134753 . 134759) (close-paren 134750 . 134751) (semantic-list 134742 . 134747) (RETURN 134710 . 134716) (open-paren 134706 . 134707) (close-paren 134704 . 134705) (symbol 134701 . 134704) (punctuation 134700 . 134701) (CHAR 134695 . 134699) (CONST 134689 . 134694) (open-paren 134688 . 134689) (symbol 134675 . 134687) (symbol 134663 . 134674) (symbol 134656 . 134662) (close-paren 134559 . 134560) (semantic-list 134551 . 134556) (RETURN 134512 . 134518) (open-paren 134508 . 134509) (close-paren 134506 . 134507) (symbol 134503 . 134506) (punctuation 134502 . 134503) (CHAR 134497 . 134501) (CONST 134491 . 134496) (open-paren 134490 . 134491) (symbol 134470 . 134489) (symbol 134458 . 134469) (symbol 134451 . 134457) (punctuation 134377 . 134378) (close-paren 134376 . 134377) (symbol 134370 . 134376) (symbol 134358 . 134369) (open-paren 134357 . 134358) (symbol 134346 . 134356) (VOID 134341 . 134345) (EXTERN 134334 . 134340) (punctuation 134332 . 134333) (close-paren 134331 . 134332) (symbol 134322 . 134331) (punctuation 134320 . 134321) (punctuation 134319 . 134320) (CHAR 134314 . 134318) (CONST 134308 . 134313) (open-paren 134307 . 134308) (symbol 134288 . 134306) (symbol 134276 . 134287) (EXTERN 134269 . 134275) (punctuation 134267 . 134268) (close-paren 134266 . 134267) (BOOL 134262 . 134266) (punctuation 134260 . 134261) (symbol 134251 . 134260) (punctuation 134249 . 134250) (symbol 134240 . 134249) (punctuation 134238 . 134239) (punctuation 134237 . 134238) (CHAR 134232 . 134236) (CONST 134226 . 134231) (open-paren 134225 . 134226) (symbol 134208 . 134224) (symbol 134196 . 134207) (EXTERN 134189 . 134195) (punctuation 134187 . 134188) (close-paren 134186 . 134187) (BOOL 134182 . 134186) (punctuation 134180 . 134181) (symbol 134171 . 134180) (punctuation 134169 . 134170) (symbol 134160 . 134169) (punctuation 134151 . 134152) (punctuation 134150 . 134151) (CHAR 134145 . 134149) (CONST 134139 . 134144) (open-paren 134138 . 134139) (symbol 134116 . 134137) (symbol 134104 . 134115) (EXTERN 134097 . 134103) (punctuation 134095 . 134096) (close-paren 134094 . 134095) (symbol 134085 . 134094) (punctuation 134083 . 134084) (symbol 134074 . 134083) (punctuation 134072 . 134073) (punctuation 134071 . 134072) (CHAR 134066 . 134070) (CONST 134060 . 134065) (open-paren 134059 . 134060) (symbol 134036 . 134058) (symbol 134024 . 134035) (EXTERN 134017 . 134023) (punctuation 134015 . 134016) (close-paren 134014 . 134015) (symbol 134005 . 134014) (punctuation 134003 . 134004) (symbol 133994 . 134003) (open-paren 133993 . 133994) (symbol 133964 . 133992) (symbol 133952 . 133963) (EXTERN 133945 . 133951) (punctuation 133943 . 133944) (close-paren 133942 . 133943) (symbol 133933 . 133942) (open-paren 133932 . 133933) (symbol 133913 . 133931) (symbol 133901 . 133912) (EXTERN 133894 . 133900) (punctuation 133892 . 133893) (close-paren 133891 . 133892) (punctuation 133890 . 133891) (symbol 133878 . 133889) (punctuation 133876 . 133877) (symbol 133867 . 133876) (open-paren 133866 . 133867) (symbol 133849 . 133865) (symbol 133837 . 133848) (EXTERN 133830 . 133836) (punctuation 133828 . 133829) (close-paren 133827 . 133828) (symbol 133818 . 133827) (punctuation 133816 . 133817) (symbol 133807 . 133816) (punctuation 133805 . 133806) (punctuation 133804 . 133805) (CHAR 133799 . 133803) (CONST 133793 . 133798) (open-paren 133792 . 133793) (symbol 133770 . 133791) (symbol 133758 . 133769) (EXTERN 133751 . 133757) (close-paren 133748 . 133749) (semantic-list 133740 . 133745) (RETURN 133700 . 133706) (open-paren 133696 . 133697) (close-paren 133694 . 133695) (symbol 133691 . 133694) (punctuation 133690 . 133691) (CHAR 133685 . 133689) (CONST 133679 . 133684) (open-paren 133678 . 133679) (symbol 133657 . 133677) (symbol 133645 . 133656) (symbol 133638 . 133644) (close-paren 133564 . 133565) (punctuation 133554 . 133555) (punctuation 133553 . 133554) (punctuation 133551 . 133552) (RETURN 133525 . 133531) (open-paren 133521 . 133522) (close-paren 133519 . 133520) (symbol 133518 . 133519) (punctuation 133517 . 133518) (symbol 133505 . 133516) (STRUCT 133498 . 133504) (CONST 133492 . 133497) (open-paren 133491 . 133492) (symbol 133477 . 133490) (symbol 133467 . 133476) (symbol 133460 . 133466) (punctuation 133457 . 133458) (close-paren 133456 . 133457) (symbol 133453 . 133456) (punctuation 133452 . 133453) (symbol 133434 . 133451) (UNION 133428 . 133433) (CONST 133422 . 133427) (open-paren 133421 . 133422) (symbol 133403 . 133420) (symbol 133393 . 133402) (EXTERN 133386 . 133392) (punctuation 133384 . 133385) (close-paren 133383 . 133384) (symbol 133374 . 133383) (punctuation 133372 . 133373) (punctuation 133371 . 133372) (CHAR 133366 . 133370) (CONST 133360 . 133365) (open-paren 133359 . 133360) (symbol 133339 . 133358) (symbol 133327 . 133338) (EXTERN 133320 . 133326) (punctuation 133318 . 133319) (close-paren 133317 . 133318) (number 133316 . 133317) (punctuation 133314 . 133315) (number 133313 . 133314) (open-paren 133312 . 133313) (symbol 133288 . 133311) (close-paren 133284 . 133285) (punctuation 133283 . 133284) (punctuation 133282 . 133283) (punctuation 133281 . 133282) (punctuation 133279 . 133280) (punctuation 133278 . 133279) (CHAR 133273 . 133277) (CONST 133267 . 133272) (punctuation 133265 . 133266) (punctuation 133264 . 133265) (CHAR 133259 . 133263) (open-paren 133258 . 133259) (symbol 133236 . 133257) (symbol 133224 . 133235) (EXTERN 133217 . 133223) (punctuation 133215 . 133216) (close-paren 133214 . 133215) (symbol 133205 . 133214) (punctuation 133203 . 133204) (punctuation 133202 . 133203) (CHAR 133197 . 133201) (CONST 133191 . 133196) (open-paren 133190 . 133191) (symbol 133178 . 133189) (symbol 133166 . 133177) (EXTERN 133159 . 133165) (punctuation 133157 . 133158) (close-paren 133156 . 133157) (VOID 133152 . 133156) (open-paren 133151 . 133152) (symbol 133135 . 133150) (VOID "void" 133129 . 133134) (symbol "ATTRIBUTE_COLD" 133129 . 133134) (EXTERN 133122 . 133128) (punctuation 133120 . 133121) (close-paren 133119 . 133120) (symbol 133108 . 133119) (punctuation 133106 . 133107) (symbol 133095 . 133106) (open-paren 133094 . 133095) (symbol 133077 . 133093) (symbol 133065 . 133076) (EXTERN 133058 . 133064) (punctuation 133056 . 133057) (close-paren 133055 . 133056) (symbol 133046 . 133055) (open-paren 133045 . 133046) (symbol 133021 . 133044) (symbol 133009 . 133020) (EXTERN 133002 . 133008) (close-paren 132999 . 133000) (semantic-list 132993 . 132996) (semantic-list 132979 . 132982) (semantic-list 132965 . 132968) (semantic-list 132951 . 132954) (RETURN 132928 . 132934) (open-paren 132924 . 132925) (close-paren 132922 . 132923) (symbol 132921 . 132922) (symbol 132912 . 132920) (punctuation 132910 . 132911) (symbol 132909 . 132910) (symbol 132900 . 132908) (punctuation 132898 . 132899) (symbol 132897 . 132898) (symbol 132888 . 132896) (punctuation 132886 . 132887) (symbol 132885 . 132886) (symbol 132876 . 132884) (open-paren 132875 . 132876) (symbol 132868 . 132874) (symbol 132856 . 132867) (symbol 132849 . 132855) (close-paren 132846 . 132847) (semantic-list 132840 . 132843) (semantic-list 132826 . 132829) (semantic-list 132812 . 132815) (RETURN 132789 . 132795) (open-paren 132785 . 132786) (close-paren 132783 . 132784) (symbol 132782 . 132783) (symbol 132773 . 132781) (punctuation 132771 . 132772) (symbol 132770 . 132771) (symbol 132761 . 132769) (punctuation 132759 . 132760) (symbol 132758 . 132759) (symbol 132749 . 132757) (open-paren 132748 . 132749) (symbol 132741 . 132747) (symbol 132729 . 132740) (symbol 132722 . 132728) (close-paren 132719 . 132720) (semantic-list 132713 . 132716) (semantic-list 132699 . 132702) (RETURN 132676 . 132682) (open-paren 132672 . 132673) (close-paren 132670 . 132671) (symbol 132669 . 132670) (symbol 132660 . 132668) (punctuation 132658 . 132659) (symbol 132657 . 132658) (symbol 132648 . 132656) (open-paren 132647 . 132648) (symbol 132640 . 132646) (symbol 132628 . 132639) (symbol 132621 . 132627) (close-paren 132618 . 132619) (semantic-list 132612 . 132615) (RETURN 132589 . 132595) (open-paren 132585 . 132586) (close-paren 132583 . 132584) (symbol 132582 . 132583) (symbol 132573 . 132581) (open-paren 132572 . 132573) (symbol 132565 . 132571) (symbol 132553 . 132564) (symbol 132546 . 132552) (punctuation 132488 . 132489) (close-paren 132487 . 132488) (symbol 132480 . 132487) (symbol 132464 . 132479) (STRUCT 132457 . 132463) (open-paren 132456 . 132457) (symbol 132434 . 132455) (VOID 132429 . 132433) (EXTERN 132422 . 132428) (punctuation 132420 . 132421) (close-paren 132419 . 132420) (open-paren 132337 . 132338) (symbol 132321 . 132336) (STRUCT 132314 . 132320) (punctuation 132311 . 132312) (close-paren 132310 . 132311) (symbol 132293 . 132309) (punctuation 132289 . 132290) (symbol 132264 . 132289) (punctuation 132260 . 132261) (symbol 132232 . 132260) (punctuation 132228 . 132229) (symbol 132211 . 132228) (open-paren 132207 . 132208) (symbol 132194 . 132206) (ENUM 132189 . 132193) (punctuation 132000 . 132001) (close-paren 131999 . 132000) (punctuation 131998 . 131999) (punctuation 131997 . 131998) (punctuation 131996 . 131997) (punctuation 131994 . 131995) (symbol 131983 . 131994) (punctuation 131981 . 131982) (symbol 131972 . 131981) (open-paren 131971 . 131972) (symbol 131960 . 131970) (symbol 131948 . 131959) (EXTERN 131941 . 131947) (punctuation 131939 . 131940) (close-paren 131938 . 131939) (punctuation 131937 . 131938) (punctuation 131936 . 131937) (punctuation 131935 . 131936) (punctuation 131933 . 131934) (symbol 131922 . 131933) (punctuation 131920 . 131921) (symbol 131911 . 131920) (open-paren 131910 . 131911) (symbol 131904 . 131909) (symbol 131892 . 131903) (EXTERN 131885 . 131891) (punctuation 131883 . 131884) (close-paren 131882 . 131883) (symbol 131871 . 131882) (punctuation 131864 . 131865) (symbol 131853 . 131864) (punctuation 131851 . 131852) (symbol 131840 . 131851) (punctuation 131838 . 131839) (symbol 131827 . 131838) (punctuation 131825 . 131826) (symbol 131814 . 131825) (open-paren 131813 . 131814) (symbol 131807 . 131812) (symbol 131795 . 131806) (EXTERN 131788 . 131794) (punctuation 131786 . 131787) (close-paren 131785 . 131786) (symbol 131774 . 131785) (punctuation 131772 . 131773) (symbol 131761 . 131772) (punctuation 131759 . 131760) (symbol 131748 . 131759) (punctuation 131746 . 131747) (symbol 131735 . 131746) (open-paren 131734 . 131735) (symbol 131728 . 131733) (symbol 131716 . 131727) (EXTERN 131709 . 131715) (punctuation 131707 . 131708) (close-paren 131706 . 131707) (symbol 131695 . 131706) (punctuation 131693 . 131694) (symbol 131682 . 131693) (punctuation 131680 . 131681) (symbol 131669 . 131680) (open-paren 131668 . 131669) (symbol 131662 . 131667) (symbol 131650 . 131661) (EXTERN 131643 . 131649) (punctuation 131641 . 131642) (close-paren 131640 . 131641) (symbol 131629 . 131640) (punctuation 131627 . 131628) (symbol 131616 . 131627) (open-paren 131615 . 131616) (symbol 131609 . 131614) (symbol 131597 . 131608) (EXTERN 131590 . 131596) (punctuation 131588 . 131589) (close-paren 131587 . 131588) (symbol 131576 . 131587) (open-paren 131575 . 131576) (symbol 131569 . 131574) (symbol 131557 . 131568) (EXTERN 131550 . 131556) (punctuation 131377 . 131378) (close-paren 131376 . 131377) (symbol 131370 . 131376) (symbol 131360 . 131369) (open-paren 131359 . 131360) (symbol 131329 . 131358) (BOOL 131324 . 131328) (EXTERN 131317 . 131323) (punctuation 131315 . 131316) (close-paren 131314 . 131315) (VOID 131310 . 131314) (open-paren 131309 . 131310) (symbol 131287 . 131308) (VOID 131282 . 131286) (EXTERN 131275 . 131281) (punctuation 131273 . 131274) (close-paren 131272 . 131273) (VOID 131268 . 131272) (open-paren 131267 . 131268) (symbol 131251 . 131266) (VOID 131246 . 131250) (EXTERN 131239 . 131245) (close-paren 131236 . 131237) (punctuation 131196 . 131197) (semantic-list 131194 . 131196) (semantic-list "((void) 0)" 131172 . 131193) (spp-arg-list nil 131172 . 131193) (open-paren 131168 . 131169) (close-paren 131166 . 131167) (symbol 131163 . 131166) (punctuation 131162 . 131163) (VOID 131157 . 131161) (punctuation 131155 . 131156) (semantic-list 131144 . 131155) (semantic-list 131136 . 131143) (VOID 131131 . 131135) (open-paren 131130 . 131131) (symbol 131108 . 131129) (VOID 131103 . 131107) (symbol 131096 . 131102) (punctuation 130276 . 130277) (close-paren 130275 . 130276) (symbol 130272 . 130275) (punctuation 130271 . 130272) (CONST 130265 . 130270) (VOID 130260 . 130264) (punctuation 130258 . 130259) (symbol 130253 . 130258) (punctuation 130252 . 130253) (CONST 130246 . 130251) (VOID 130241 . 130245) (open-paren 130240 . 130241) (symbol 130228 . 130239) (VOID 130223 . 130227) (EXTERN 130216 . 130222) (punctuation 130214 . 130215) (close-paren 130213 . 130214) (symbol 130210 . 130213) (punctuation 130209 . 130210) (VOID 130204 . 130208) (punctuation 130202 . 130203) (semantic-list 130191 . 130202) (semantic-list 130183 . 130190) (VOID 130178 . 130182) (open-paren 130177 . 130178) (symbol 130154 . 130176) (VOID 130149 . 130153) (EXTERN 130142 . 130148) (punctuation 130140 . 130141) (close-paren 130139 . 130140) (punctuation 130138 . 130139) (CONST 130132 . 130137) (CHAR 130127 . 130131) (punctuation 130125 . 130126) (punctuation 130124 . 130125) (CONST 130118 . 130123) (CHAR 130113 . 130117) (open-paren 130112 . 130113) (symbol 130099 . 130111) (VOID 130094 . 130098) (EXTERN 130087 . 130093) (punctuation 130085 . 130086) (close-paren 130084 . 130085) (VOID 130080 . 130084) (open-paren 130079 . 130080) (symbol 130061 . 130078) (VOID 130056 . 130060) (EXTERN 130049 . 130055) (punctuation 130047 . 130048) (close-paren 130046 . 130047) (VOID 130042 . 130046) (open-paren 130041 . 130042) (symbol 130024 . 130040) (VOID 130019 . 130023) (EXTERN 130012 . 130018) (punctuation 129887 . 129888) (close-paren 129886 . 129887) (symbol 129877 . 129886) (punctuation 129875 . 129876) (punctuation 129874 . 129875) (symbol 129862 . 129873) (open-paren 129861 . 129862) (symbol 129848 . 129860) (VOID 129843 . 129847) (EXTERN 129836 . 129842) (punctuation 129834 . 129835) (close-paren 129833 . 129834) (symbol 129822 . 129833) (open-paren 129821 . 129822) (symbol 129809 . 129820) (VOID 129804 . 129808) (EXTERN 129797 . 129803) (punctuation 129795 . 129796) (close-paren 129794 . 129795) (symbol 129783 . 129794) (open-paren 129782 . 129783) (symbol 129768 . 129781) (BOOL 129763 . 129767) (EXTERN 129756 . 129762) (punctuation 129754 . 129755) (close-paren 129753 . 129754) (symbol 129744 . 129753) (open-paren 129743 . 129744) (symbol 129724 . 129742) (VOID "void" 129718 . 129723) (symbol "ATTRIBUTE_COLD" 129718 . 129723) (EXTERN 129711 . 129717) (punctuation 129709 . 129710) (close-paren 129708 . 129709) (symbol 129702 . 129708) (open-paren 129701 . 129702) (symbol 129689 . 129700) (VOID "void" 129683 . 129688) (symbol "ATTRIBUTE_COLD" 129683 . 129688) (EXTERN 129676 . 129682) (punctuation 129674 . 129675) (close-paren 129673 . 129674) (punctuation 129672 . 129673) (CHAR 129667 . 129671) (CONST 129661 . 129666) (open-paren 129660 . 129661) (symbol 129645 . 129659) (VOID 129640 . 129644) (EXTERN 129633 . 129639) (punctuation 129631 . 129632) (close-paren 129630 . 129631) (INT 129627 . 129630) (punctuation 129625 . 129626) (INT 129622 . 129625) (punctuation 129620 . 129621) (symbol 129611 . 129620) (punctuation 129609 . 129610) (symbol 129598 . 129609) (open-paren 129597 . 129598) (symbol 129578 . 129596) (punctuation 129577 . 129578) (CHAR 129572 . 129576) (UNSIGNED 129563 . 129571) (punctuation 129561 . 129562) (close-paren 129560 . 129561) (VOID 129556 . 129560) (open-paren 129555 . 129556) (symbol 129539 . 129554) (VOID 129534 . 129538) (EXTERN 129527 . 129533) (punctuation 129525 . 129526) (close-paren 129524 . 129525) (VOID 129520 . 129524) (open-paren 129519 . 129520) (symbol 129505 . 129518) (punctuation 129504 . 129505) (VOID 129499 . 129503) (EXTERN 129492 . 129498) (punctuation 129462 . 129463) (close-paren 129461 . 129462) (punctuation 129460 . 129461) (symbol 129450 . 129459) (punctuation 129448 . 129449) (punctuation 129447 . 129448) (symbol 129437 . 129446) (punctuation 129427 . 129428) (symbol 129418 . 129427) (punctuation 129416 . 129417) (punctuation 129415 . 129416) (CHAR 129410 . 129414) (UNSIGNED 129401 . 129409) (CONST 129395 . 129400) (open-paren 129394 . 129395) (symbol 129371 . 129393) (VOID 129366 . 129370) (EXTERN 129359 . 129365) (punctuation 129325 . 129326) (close-paren 129324 . 129325) (semantic-list 129310 . 129324) (semantic-list 129299 . 129309) (VOID 129294 . 129298) (punctuation 129292 . 129293) (punctuation 129291 . 129292) (VOID 129286 . 129290) (open-paren 129285 . 129286) (symbol 129269 . 129284) (VOID 129264 . 129268) (EXTERN 129257 . 129263) (punctuation 129224 . 129225) (close-paren 129223 . 129224) (VOID 129219 . 129223) (open-paren 129218 . 129219) (symbol 129200 . 129217) (VOID 129195 . 129199) (EXTERN 129188 . 129194) (punctuation 129154 . 129155) (close-paren 129153 . 129154) (VOID 129149 . 129153) (open-paren 129148 . 129149) (symbol 129133 . 129147) (VOID 129128 . 129132) (EXTERN 129121 . 129127) (punctuation 129090 . 129091) (close-paren 129089 . 129090) (punctuation 129088 . 129089) (INT 129084 . 129087) (punctuation 129082 . 129083) (punctuation 129081 . 129082) (INT 129077 . 129080) (punctuation 129075 . 129076) (punctuation 129074 . 129075) (INT 129070 . 129073) (punctuation 129068 . 129069) (punctuation 129067 . 129068) (INT 129063 . 129066) (punctuation 129061 . 129062) (punctuation 129060 . 129061) (INT 129056 . 129059) (punctuation 129048 . 129049) (punctuation 129047 . 129048) (INT 129043 . 129046) (punctuation 129041 . 129042) (symbol 129032 . 129041) (punctuation 129030 . 129031) (punctuation 129029 . 129030) (symbol 129022 . 129028) (STRUCT 129015 . 129021) (open-paren 129014 . 129015) (symbol 129000 . 129013) (BOOL 128995 . 128999) (EXTERN 128988 . 128994) (punctuation 128986 . 128987) (close-paren 128985 . 128986) (symbol 128974 . 128985) (open-paren 128973 . 128974) (symbol 128963 . 128972) (symbol 128951 . 128962) (EXTERN 128944 . 128950) (punctuation 128942 . 128943) (close-paren 128941 . 128942) (VOID 128937 . 128941) (open-paren 128936 . 128937) (symbol 128925 . 128935) (VOID 128920 . 128924) (EXTERN 128913 . 128919) (punctuation 128911 . 128912) (close-paren 128910 . 128911) (VOID 128906 . 128910) (open-paren 128905 . 128906) (symbol 128891 . 128904) (VOID 128886 . 128890) (EXTERN 128879 . 128885) (punctuation 128877 . 128878) (close-paren 128876 . 128877) (symbol 128865 . 128876) (punctuation 128863 . 128864) (punctuation 128862 . 128863) (symbol 128856 . 128861) (STRUCT 128849 . 128855) (open-paren 128848 . 128849) (symbol 128825 . 128847) (VOID 128820 . 128824) (punctuation 128817 . 128818) (close-paren 128816 . 128817) (symbol 128808 . 128816) (symbol 128798 . 128807) (punctuation 128796 . 128797) (symbol 128786 . 128796) (symbol 128776 . 128785) (open-paren 128775 . 128776) (symbol 128763 . 128774) (symbol 128753 . 128762) (EXTERN 128746 . 128752) (punctuation 128744 . 128745) (close-paren 128743 . 128744) (VOID 128739 . 128743) (open-paren 128738 . 128739) (symbol 128728 . 128737) (VOID 128723 . 128727) (EXTERN 128716 . 128722) (punctuation 128714 . 128715) (close-paren 128713 . 128714) (symbol 128704 . 128713) (open-paren 128703 . 128704) (symbol 128684 . 128702) (VOID 128679 . 128683) (EXTERN 128672 . 128678) (punctuation 128670 . 128671) (close-paren 128669 . 128670) (VOID 128665 . 128669) (open-paren 128664 . 128665) (symbol 128647 . 128663) (VOID 128642 . 128646) (EXTERN 128635 . 128641) (punctuation 128633 . 128634) (close-paren 128632 . 128633) (VOID 128628 . 128632) (open-paren 128627 . 128628) (symbol 128601 . 128626) (VOID 128596 . 128600) (EXTERN 128589 . 128595) (punctuation 128587 . 128588) (close-paren 128586 . 128587) (BOOL 128582 . 128586) (punctuation 128580 . 128581) (symbol 128569 . 128580) (punctuation 128567 . 128568) (punctuation 128566 . 128567) (CHAR 128561 . 128565) (CONST 128555 . 128560) (open-paren 128554 . 128555) (symbol 128534 . 128553) (VOID 128529 . 128533) (EXTERN 128522 . 128528) (punctuation 128520 . 128521) (close-paren 128519 . 128520) (BOOL 128515 . 128519) (punctuation 128513 . 128514) (BOOL 128509 . 128513) (punctuation 128507 . 128508) (symbol 128498 . 128507) (punctuation 128496 . 128497) (punctuation 128495 . 128496) (CHAR 128490 . 128494) (CONST 128484 . 128489) (open-paren 128483 . 128484) (symbol 128469 . 128482) (VOID 128464 . 128468) (EXTERN 128457 . 128463) (punctuation 128455 . 128456) (close-paren 128454 . 128455) (symbol 128443 . 128454) (open-paren 128442 . 128443) (symbol 128427 . 128441) (VOID 128422 . 128426) (EXTERN 128415 . 128421) (punctuation 128413 . 128414) (close-paren 128412 . 128413) (symbol 128401 . 128412) (open-paren 128400 . 128401) (symbol 128391 . 128399) (VOID 128386 . 128390) (EXTERN 128379 . 128385) (punctuation 128377 . 128378) (close-paren 128376 . 128377) (punctuation 128375 . 128376) (CHAR 128370 . 128374) (CONST 128364 . 128369) (open-paren 128363 . 128364) (symbol 128348 . 128362) (VOID 128343 . 128347) (EXTERN 128336 . 128342) (punctuation 128334 . 128335) (close-paren 128333 . 128334) (punctuation 128332 . 128333) (CHAR 128327 . 128331) (CONST 128321 . 128326) (open-paren 128320 . 128321) (symbol 128311 . 128319) (VOID 128306 . 128310) (EXTERN 128299 . 128305) (punctuation 128297 . 128298) (close-paren 128296 . 128297) (number 128295 . 128296) (punctuation 128293 . 128294) (number 128292 . 128293) (open-paren 128291 . 128292) (symbol 128267 . 128290) (close-paren 128265 . 128266) (punctuation 128264 . 128265) (punctuation 128263 . 128264) (punctuation 128262 . 128263) (punctuation 128260 . 128261) (punctuation 128259 . 128260) (CHAR 128254 . 128258) (CONST 128248 . 128253) (open-paren 128247 . 128248) (symbol 128239 . 128246) (VOID 128234 . 128238) (EXTERN 128227 . 128233) (punctuation 128225 . 128226) (close-paren 128224 . 128225) (BOOL 128220 . 128224) (punctuation 128218 . 128219) (BOOL 128214 . 128218) (open-paren 128213 . 128214) (symbol 128199 . 128212) (VOID 128194 . 128198) (EXTERN 128187 . 128193) (punctuation 128185 . 128186) (close-paren 128184 . 128185) (VOID 128180 . 128184) (open-paren 128179 . 128180) (symbol 128163 . 128178) (symbol 128151 . 128162) (EXTERN 128144 . 128150) (punctuation 128142 . 128143) (close-paren 128141 . 128142) (VOID 128137 . 128141) (open-paren 128136 . 128137) (symbol 128120 . 128135) (VOID 128115 . 128119) (EXTERN 128108 . 128114) (punctuation 128106 . 128107) (close-paren 128105 . 128106) (symbol 128094 . 128105) (open-paren 128093 . 128094) (symbol 128070 . 128092) (symbol 128058 . 128069) (EXTERN 128051 . 128057) (punctuation 128049 . 128050) (close-paren 128048 . 128049) (VOID 128044 . 128048) (open-paren 128043 . 128044) (symbol 128024 . 128042) (VOID 128019 . 128023) (EXTERN 128012 . 128018) (punctuation 128010 . 128011) (close-paren 128009 . 128010) (VOID 128005 . 128009) (open-paren 128004 . 128005) (symbol 127991 . 128003) (BOOL 127986 . 127990) (EXTERN 127979 . 127985) (punctuation 127977 . 127978) (close-paren 127976 . 127977) (BOOL 127972 . 127976) (open-paren 127971 . 127972) (symbol 127942 . 127970) (VOID 127937 . 127941) (EXTERN 127930 . 127936) (punctuation 127928 . 127929) (close-paren 127927 . 127928) (VOID 127923 . 127927) (open-paren 127922 . 127923) (symbol 127902 . 127921) (VOID 127897 . 127901) (EXTERN 127890 . 127896) (punctuation 127888 . 127889) (close-paren 127887 . 127888) (VOID 127883 . 127887) (open-paren 127882 . 127883) (symbol 127862 . 127881) (VOID 127857 . 127861) (EXTERN 127850 . 127856) (punctuation 127848 . 127849) (close-paren 127847 . 127848) (symbol 127840 . 127847) (punctuation 127838 . 127839) (punctuation 127837 . 127838) (CONST 127831 . 127836) (CHAR 127826 . 127830) (open-paren 127825 . 127826) (symbol 127813 . 127824) (VOID 127808 . 127812) (EXTERN 127801 . 127807) (punctuation 127799 . 127800) (close-paren 127798 . 127799) (punctuation 127797 . 127798) (punctuation 127796 . 127797) (punctuation 127795 . 127796) (punctuation 127793 . 127794) (punctuation 127792 . 127793) (CONST 127786 . 127791) (CHAR 127781 . 127785) (open-paren 127780 . 127781) (symbol 127769 . 127779) (VOID 127764 . 127768) (EXTERN 127757 . 127763) (punctuation 127755 . 127756) (close-paren 127754 . 127755) (number 127753 . 127754) (open-paren 127752 . 127753) (symbol 127736 . 127752) (symbol 127724 . 127735) (EXTERN 127717 . 127723) (punctuation 127646 . 127647) (close-paren 127645 . 127646) (INT 127642 . 127645) (punctuation 127640 . 127641) (BOOL 127636 . 127640) (punctuation 127634 . 127635) (symbol 127623 . 127634) (open-paren 127622 . 127623) (symbol 127614 . 127621) (symbol 127602 . 127613) (EXTERN 127595 . 127601) (punctuation 127462 . 127463) (close-paren 127461 . 127462) (VOID 127457 . 127461) (open-paren 127456 . 127457) (symbol 127441 . 127455) (VOID 127436 . 127440) (EXTERN 127429 . 127435) (punctuation 127427 . 127428) (close-paren 127426 . 127427) (BOOL 127422 . 127426) (punctuation 127420 . 127421) (symbol 127411 . 127420) (punctuation 127409 . 127410) (symbol 127400 . 127409) (punctuation 127398 . 127399) (punctuation 127397 . 127398) (CHAR 127392 . 127396) (CONST 127386 . 127391) (punctuation 127376 . 127377) (symbol 127367 . 127376) (punctuation 127365 . 127366) (symbol 127356 . 127365) (punctuation 127354 . 127355) (symbol 127345 . 127354) (punctuation 127343 . 127344) (symbol 127334 . 127343) (open-paren 127333 . 127334) (symbol 127317 . 127332) (VOID 127312 . 127316) (EXTERN 127305 . 127311) (punctuation 127303 . 127304) (close-paren 127302 . 127303) (BOOL 127298 . 127302) (punctuation 127296 . 127297) (BOOL 127292 . 127296) (punctuation 127290 . 127291) (BOOL 127286 . 127290) (punctuation 127278 . 127279) (BOOL 127274 . 127278) (punctuation 127272 . 127273) (BOOL 127268 . 127272) (punctuation 127266 . 127267) (symbol 127255 . 127266) (punctuation 127253 . 127254) (symbol 127244 . 127253) (punctuation 127242 . 127243) (symbol 127233 . 127242) (open-paren 127232 . 127233) (symbol 127218 . 127231) (VOID 127213 . 127217) (EXTERN 127206 . 127212) (punctuation 127204 . 127205) (close-paren 127203 . 127204) (INT 127200 . 127203) (punctuation 127198 . 127199) (symbol 127189 . 127198) (punctuation 127187 . 127188) (symbol 127178 . 127187) (punctuation 127168 . 127169) (symbol 127159 . 127168) (punctuation 127157 . 127158) (symbol 127148 . 127157) (open-paren 127147 . 127148) (symbol 127124 . 127146) (VOID 127119 . 127123) (EXTERN 127112 . 127118) (punctuation 127110 . 127111) (close-paren 127109 . 127110) (symbol 127100 . 127109) (punctuation 127098 . 127099) (symbol 127089 . 127098) (punctuation 127076 . 127077) (symbol 127067 . 127076) (punctuation 127065 . 127066) (symbol 127056 . 127065) (open-paren 127055 . 127056) (symbol 127029 . 127054) (VOID 127024 . 127028) (EXTERN 127017 . 127023) (punctuation 127015 . 127016) (close-paren 127014 . 127015) (symbol 127005 . 127014) (punctuation 127003 . 127004) (symbol 126994 . 127003) (punctuation 126987 . 126988) (symbol 126978 . 126987) (punctuation 126976 . 126977) (symbol 126967 . 126976) (punctuation 126965 . 126966) (symbol 126956 . 126965) (open-paren 126955 . 126956) (symbol 126935 . 126954) (VOID 126930 . 126934) (EXTERN 126923 . 126929) (punctuation 126921 . 126922) (close-paren 126920 . 126921) (symbol 126911 . 126920) (punctuation 126909 . 126910) (symbol 126900 . 126909) (punctuation 126898 . 126899) (symbol 126889 . 126898) (open-paren 126888 . 126889) (symbol 126868 . 126887) (VOID 126863 . 126867) (EXTERN 126856 . 126862) (punctuation 126854 . 126855) (close-paren 126853 . 126854) (symbol 126844 . 126853) (punctuation 126842 . 126843) (symbol 126833 . 126842) (punctuation 126831 . 126832) (punctuation 126830 . 126831) (symbol 126823 . 126829) (STRUCT 126816 . 126822) (open-paren 126815 . 126816) (symbol 126790 . 126814) (VOID 126785 . 126789) (EXTERN 126778 . 126784) (punctuation 126776 . 126777) (close-paren 126775 . 126776) (punctuation 126774 . 126775) (symbol 126764 . 126773) (punctuation 126762 . 126763) (symbol 126753 . 126762) (punctuation 126751 . 126752) (symbol 126742 . 126751) (open-paren 126741 . 126742) (symbol 126714 . 126740) (VOID 126709 . 126713) (EXTERN 126702 . 126708) (punctuation 126700 . 126701) (close-paren 126699 . 126700) (punctuation 126698 . 126699) (symbol 126688 . 126697) (punctuation 126686 . 126687) (symbol 126677 . 126686) (punctuation 126675 . 126676) (symbol 126666 . 126675) (open-paren 126665 . 126666) (symbol 126640 . 126664) (VOID 126635 . 126639) (EXTERN 126628 . 126634) (punctuation 126626 . 126627) (close-paren 126625 . 126626) (symbol 126616 . 126625) (punctuation 126614 . 126615) (symbol 126605 . 126614) (open-paren 126604 . 126605) (symbol 126592 . 126603) (VOID 126587 . 126591) (EXTERN 126580 . 126586) (punctuation 126578 . 126579) (close-paren 126577 . 126578) (BOOL 126573 . 126577) (punctuation 126571 . 126572) (symbol 126562 . 126571) (punctuation 126560 . 126561) (symbol 126551 . 126560) (punctuation 126545 . 126546) (symbol 126536 . 126545) (punctuation 126534 . 126535) (symbol 126525 . 126534) (open-paren 126524 . 126525) (symbol 126512 . 126523) (symbol 126500 . 126511) (EXTERN 126493 . 126499) (punctuation 126491 . 126492) (close-paren 126490 . 126491) (BOOL 126486 . 126490) (punctuation 126484 . 126485) (symbol 126475 . 126484) (punctuation 126473 . 126474) (symbol 126464 . 126473) (punctuation 126462 . 126463) (symbol 126453 . 126462) (punctuation 126451 . 126452) (symbol 126442 . 126451) (open-paren 126441 . 126442) (symbol 126426 . 126440) (VOID 126421 . 126425) (EXTERN 126414 . 126420) (punctuation 126412 . 126413) (close-paren 126411 . 126412) (symbol 126402 . 126411) (punctuation 126400 . 126401) (symbol 126391 . 126400) (open-paren 126390 . 126391) (symbol 126375 . 126389) (VOID 126370 . 126374) (EXTERN 126363 . 126369) (punctuation 126361 . 126362) (close-paren 126360 . 126361) (BOOL 126356 . 126360) (punctuation 126354 . 126355) (BOOL 126350 . 126354) (punctuation 126348 . 126349) (symbol 126339 . 126348) (punctuation 126337 . 126338) (symbol 126328 . 126337) (open-paren 126327 . 126328) (symbol 126315 . 126326) (symbol 126303 . 126314) (EXTERN 126296 . 126302) (punctuation 126294 . 126295) (close-paren 126293 . 126294) (symbol 126284 . 126293) (punctuation 126282 . 126283) (symbol 126273 . 126282) (open-paren 126272 . 126273) (symbol 126262 . 126271) (VOID 126257 . 126261) (EXTERN 126250 . 126256) (punctuation 126248 . 126249) (close-paren 126247 . 126248) (BOOL 126243 . 126247) (punctuation 126241 . 126242) (symbol 126232 . 126241) (punctuation 126218 . 126219) (symbol 126209 . 126218) (punctuation 126207 . 126208) (symbol 126198 . 126207) (punctuation 126184 . 126185) (symbol 126175 . 126184) (punctuation 126173 . 126174) (symbol 126162 . 126173) (open-paren 126161 . 126162) (symbol 126127 . 126160) (VOID 126122 . 126126) (EXTERN 126115 . 126121) (punctuation 126113 . 126114) (close-paren 126112 . 126113) (symbol 126103 . 126112) (punctuation 126101 . 126102) (punctuation 126100 . 126101) (CHAR 126095 . 126099) (CONST 126089 . 126094) (open-paren 126088 . 126089) (symbol 126054 . 126087) (VOID 126049 . 126053) (EXTERN 126042 . 126048) (punctuation 126040 . 126041) (close-paren 126039 . 126040) (symbol 126030 . 126039) (punctuation 126028 . 126029) (punctuation 126027 . 126028) (CHAR 126022 . 126026) (CONST 126016 . 126021) (open-paren 126015 . 126016) (symbol 125993 . 126014) (VOID 125988 . 125992) (EXTERN 125981 . 125987) (punctuation 125979 . 125980) (close-paren 125978 . 125979) (punctuation 125977 . 125978) (CHAR 125972 . 125976) (CONST 125966 . 125971) (open-paren 125965 . 125966) (symbol 125951 . 125964) (VOID 125946 . 125950) (EXTERN 125939 . 125945) (punctuation 125937 . 125938) (close-paren 125936 . 125937) (INT 125933 . 125936) (open-paren 125932 . 125933) (symbol 125920 . 125931) (VOID 125915 . 125919) (EXTERN 125908 . 125914) (punctuation 125906 . 125907) (close-paren 125905 . 125906) (BOOL 125901 . 125905) (punctuation 125899 . 125900) (symbol 125890 . 125899) (punctuation 125888 . 125889) (symbol 125879 . 125888) (punctuation 125877 . 125878) (punctuation 125876 . 125877) (symbol 125869 . 125875) (STRUCT 125862 . 125868) (open-paren 125861 . 125862) (symbol 125842 . 125860) (VOID 125837 . 125841) (EXTERN 125830 . 125836) (punctuation 125828 . 125829) (close-paren 125827 . 125828) (BOOL 125823 . 125827) (punctuation 125821 . 125822) (symbol 125812 . 125821) (punctuation 125810 . 125811) (symbol 125801 . 125810) (punctuation 125795 . 125796) (symbol 125786 . 125795) (punctuation 125784 . 125785) (symbol 125775 . 125784) (punctuation 125773 . 125774) (symbol 125762 . 125773) (open-paren 125761 . 125762) (symbol 125742 . 125760) (VOID 125737 . 125741) (EXTERN 125730 . 125736) (punctuation 125728 . 125729) (close-paren 125727 . 125728) (symbol 125711 . 125727) (BOOL 125706 . 125710) (punctuation 125704 . 125705) (symbol 125695 . 125704) (punctuation 125693 . 125694) (symbol 125684 . 125693) (open-paren 125683 . 125684) (symbol 125667 . 125682) (VOID 125662 . 125666) (EXTERN 125655 . 125661) (punctuation 125653 . 125654) (close-paren 125652 . 125653) (symbol 125636 . 125652) (BOOL 125631 . 125635) (punctuation 125629 . 125630) (symbol 125620 . 125629) (punctuation 125618 . 125619) (symbol 125609 . 125618) (open-paren 125608 . 125609) (symbol 125590 . 125607) (VOID 125585 . 125589) (EXTERN 125578 . 125584) (punctuation 125576 . 125577) (close-paren 125575 . 125576) (BOOL 125571 . 125575) (punctuation 125569 . 125570) (BOOL 125565 . 125569) (punctuation 125563 . 125564) (BOOL 125559 . 125563) (punctuation 125551 . 125552) (symbol 125542 . 125551) (punctuation 125540 . 125541) (symbol 125531 . 125540) (punctuation 125529 . 125530) (punctuation 125528 . 125529) (CHAR 125523 . 125527) (CONST 125517 . 125522) (open-paren 125516 . 125517) (symbol 125502 . 125515) (VOID 125497 . 125501) (EXTERN 125490 . 125496) (punctuation 125488 . 125489) (close-paren 125487 . 125488) (symbol 125478 . 125487) (punctuation 125476 . 125477) (punctuation 125475 . 125476) (CHAR 125470 . 125474) (CONST 125464 . 125469) (open-paren 125463 . 125464) (symbol 125444 . 125462) (VOID 125439 . 125443) (EXTERN 125432 . 125438) (punctuation 125430 . 125431) (close-paren 125429 . 125430) (symbol 125420 . 125429) (punctuation 125418 . 125419) (punctuation 125417 . 125418) (CHAR 125412 . 125416) (CONST 125406 . 125411) (open-paren 125405 . 125406) (symbol 125398 . 125404) (VOID 125393 . 125397) (EXTERN 125386 . 125392) (punctuation 125384 . 125385) (close-paren 125383 . 125384) (symbol 125374 . 125383) (punctuation 125372 . 125373) (symbol 125363 . 125372) (punctuation 125361 . 125362) (symbol 125352 . 125361) (punctuation 125344 . 125345) (punctuation 125343 . 125344) (CHAR 125338 . 125342) (UNSIGNED 125329 . 125337) (CONST 125323 . 125328) (open-paren 125322 . 125323) (symbol 125300 . 125321) (INT 125296 . 125299) (EXTERN 125289 . 125295) (punctuation 125287 . 125288) (close-paren 125286 . 125287) (symbol 125277 . 125286) (punctuation 125275 . 125276) (symbol 125266 . 125275) (punctuation 125264 . 125265) (symbol 125255 . 125264) (punctuation 125246 . 125247) (punctuation 125245 . 125246) (CHAR 125240 . 125244) (UNSIGNED 125231 . 125239) (CONST 125225 . 125230) (open-paren 125224 . 125225) (symbol 125201 . 125223) (INT 125197 . 125200) (EXTERN 125190 . 125196) (punctuation 125188 . 125189) (close-paren 125187 . 125188) (BOOL 125183 . 125187) (punctuation 125181 . 125182) (BOOL 125177 . 125181) (punctuation 125175 . 125176) (symbol 125166 . 125175) (punctuation 125157 . 125158) (punctuation 125156 . 125157) (CHAR 125151 . 125155) (UNSIGNED 125142 . 125150) (punctuation 125140 . 125141) (punctuation 125139 . 125140) (CHAR 125134 . 125138) (UNSIGNED 125125 . 125133) (CONST 125119 . 125124) (open-paren 125118 . 125119) (symbol 125108 . 125117) (symbol 125098 . 125107) (EXTERN 125091 . 125097) (punctuation 125089 . 125090) (close-paren 125088 . 125089) (symbol 125079 . 125088) (punctuation 125077 . 125078) (punctuation 125076 . 125077) (symbol 125069 . 125075) (STRUCT 125062 . 125068) (open-paren 125061 . 125062) (symbol 125050 . 125060) (VOID 125045 . 125049) (EXTERN 125038 . 125044) (punctuation 125036 . 125037) (close-paren 125035 . 125036) (symbol 125026 . 125035) (open-paren 125025 . 125026) (symbol 125016 . 125024) (VOID 125011 . 125015) (EXTERN 125004 . 125010) (punctuation 125002 . 125003) (close-paren 125001 . 125002) (VOID 124997 . 125001) (open-paren 124996 . 124997) (symbol 124980 . 124995) (VOID "void" 124974 . 124979) (symbol "ATTRIBUTE_COLD" 124974 . 124979) (EXTERN 124967 . 124973) (punctuation 124965 . 124966) (close-paren 124964 . 124965) (symbol 124955 . 124964) (punctuation 124953 . 124954) (symbol 124944 . 124953) (open-paren 124943 . 124944) (symbol 124929 . 124942) (VOID 124924 . 124928) (EXTERN 124917 . 124923) (punctuation 124772 . 124773) (close-paren 124771 . 124772) (VOID 124767 . 124771) (open-paren 124766 . 124767) (symbol 124752 . 124765) (VOID 124747 . 124751) (EXTERN 124740 . 124746) (punctuation 124738 . 124739) (close-paren 124737 . 124738) (symbol 124728 . 124737) (punctuation 124726 . 124727) (punctuation 124725 . 124726) (symbol 124719 . 124724) (STRUCT 124712 . 124718) (open-paren 124711 . 124712) (symbol 124697 . 124710) (INT 124693 . 124696) (EXTERN 124686 . 124692) (punctuation 124524 . 124525) (close-paren 124523 . 124524) (VOID 124519 . 124523) (open-paren 124518 . 124519) (symbol 124506 . 124517) (VOID 124501 . 124505) (EXTERN 124494 . 124500) (punctuation 124492 . 124493) (close-paren 124491 . 124492) (VOID 124487 . 124491) (open-paren 124486 . 124487) (symbol 124471 . 124485) (VOID 124466 . 124470) (EXTERN 124459 . 124465) (punctuation 124428 . 124429) (close-paren 124427 . 124428) (VOID 124423 . 124427) (open-paren 124422 . 124423) (symbol 124405 . 124421) (VOID 124400 . 124404) (EXTERN 124393 . 124399) (punctuation 124391 . 124392) (close-paren 124390 . 124391) (symbol 124389 . 124390) (symbol 124377 . 124388) (punctuation 124375 . 124376) (symbol 124374 . 124375) (symbol 124362 . 124373) (open-paren 124361 . 124362) (symbol 124350 . 124360) (symbol 124338 . 124349) (EXTERN 124331 . 124337) (punctuation 124322 . 124323) (close-paren 124321 . 124322) (DOUBLE 124315 . 124321) (open-paren 124314 . 124315) (symbol 124308 . 124313) (DOUBLE 124301 . 124307) (EXTERN 124294 . 124300) (punctuation 124273 . 124274) (close-paren 124272 . 124273) (DOUBLE 124266 . 124272) (open-paren 124265 . 124266) (symbol 124244 . 124264) (INT 124240 . 124243) (punctuation 124238 . 124239) (close-paren 124237 . 124238) (number 124235 . 124236) (punctuation 124233 . 124234) (number 124231 . 124232) (punctuation 124229 . 124230) (number 124227 . 124228) (punctuation 124225 . 124226) (punctuation 124224 . 124225) (symbol 124214 . 124223) (punctuation 124212 . 124213) (symbol 124197 . 124211) (open-paren 124195 . 124196) (ENUM 124190 . 124194) (punctuation 124188 . 124189) (close-paren 124187 . 124188) (number 124185 . 124187) (punctuation 124183 . 124184) (punctuation 124182 . 124183) (symbol 124172 . 124181) (punctuation 124170 . 124171) (punctuation 124169 . 124170) (number 124167 . 124168) (punctuation 124165 . 124166) (punctuation 124164 . 124165) (symbol 124154 . 124163) (open-paren 124153 . 124154) (symbol 124146 . 124152) (punctuation 124113 . 124114) (close-paren 124112 . 124113) (symbol 124103 . 124112) (CONST 124097 . 124102) (punctuation 124095 . 124096) (punctuation 124094 . 124095) (symbol 124082 . 124093) (punctuation 124080 . 124081) (symbol 124069 . 124080) (open-paren 124068 . 124069) (symbol 124059 . 124067) (VOID 124054 . 124058) (EXTERN 124047 . 124053) (punctuation 124019 . 124020) (close-paren 124018 . 124019) (VOID 124014 . 124018) (open-paren 124013 . 124014) (symbol 124001 . 124012) (VOID 123996 . 124000) (EXTERN 123989 . 123995) (punctuation 123987 . 123988) (close-paren 123986 . 123987) (symbol 123982 . 123986) (symbol 123970 . 123981) (punctuation 123968 . 123969) (symbol 123963 . 123968) (symbol 123951 . 123962) (open-paren 123950 . 123951) (symbol 123937 . 123949) (symbol 123925 . 123936) (EXTERN 123918 . 123924) (punctuation 123916 . 123917) (close-paren 123915 . 123916) (symbol 123912 . 123915) (symbol 123900 . 123911) (punctuation 123889 . 123890) (symbol 123885 . 123889) (symbol 123873 . 123884) (punctuation 123871 . 123872) (symbol 123866 . 123871) (symbol 123854 . 123865) (open-paren 123853 . 123854) (symbol 123843 . 123852) (symbol 123831 . 123842) (EXTERN 123824 . 123830) (punctuation 123822 . 123823) (close-paren 123821 . 123822) (symbol 123817 . 123821) (symbol 123805 . 123816) (punctuation 123803 . 123804) (symbol 123798 . 123803) (symbol 123786 . 123797) (open-paren 123785 . 123786) (symbol 123775 . 123784) (symbol 123763 . 123774) (EXTERN 123756 . 123762) (punctuation 123754 . 123755) (close-paren 123753 . 123754) (symbol 123742 . 123753) (open-paren 123741 . 123742) (symbol 123721 . 123740) (symbol 123709 . 123720) (EXTERN 123702 . 123708) (punctuation 123700 . 123701) (close-paren 123699 . 123700) (symbol 123688 . 123699) (open-paren 123687 . 123688) (symbol 123667 . 123686) (symbol 123655 . 123666) (EXTERN 123648 . 123654) (punctuation 123646 . 123647) (close-paren 123645 . 123646) (symbol 123636 . 123645) (punctuation 123634 . 123635) (symbol 123623 . 123634) (open-paren 123622 . 123623) (symbol 123602 . 123621) (symbol 123592 . 123601) (EXTERN 123585 . 123591) (punctuation 123583 . 123584) (close-paren 123582 . 123583) (symbol 123573 . 123582) (punctuation 123571 . 123572) (symbol 123560 . 123571) (open-paren 123559 . 123560) (symbol 123539 . 123558) (symbol 123529 . 123538) (EXTERN 123522 . 123528) (punctuation 123520 . 123521) (close-paren 123519 . 123520) (VOID 123515 . 123519) (open-paren 123514 . 123515) (symbol 123485 . 123513) (VOID 123480 . 123484) (EXTERN 123473 . 123479) (punctuation 123471 . 123472) (close-paren 123470 . 123471) (symbol 123459 . 123470) (punctuation 123457 . 123458) (symbol 123446 . 123457) (open-paren 123445 . 123446) (symbol 123431 . 123444) (symbol 123419 . 123430) (EXTERN 123412 . 123418) (punctuation 123410 . 123411) (close-paren 123409 . 123410) (symbol 123398 . 123409) (punctuation 123396 . 123397) (symbol 123385 . 123396) (open-paren 123384 . 123385) (symbol 123371 . 123383) (symbol 123359 . 123370) (EXTERN 123352 . 123358) (punctuation 123350 . 123351) (close-paren 123349 . 123350) (symbol 123338 . 123349) (punctuation 123336 . 123337) (symbol 123325 . 123336) (open-paren 123324 . 123325) (symbol 123317 . 123323) (symbol 123305 . 123316) (EXTERN 123298 . 123304) (punctuation 123296 . 123297) (close-paren 123295 . 123296) (symbol 123284 . 123295) (punctuation 123282 . 123283) (symbol 123271 . 123282) (open-paren 123270 . 123271) (symbol 123256 . 123269) (BOOL 123251 . 123255) (EXTERN 123244 . 123250) (punctuation 123242 . 123243) (close-paren 123241 . 123242) (symbol 123230 . 123241) (punctuation 123228 . 123229) (symbol 123217 . 123228) (punctuation 123215 . 123216) (symbol 123204 . 123215) (open-paren 123203 . 123204) (symbol 123195 . 123202) (symbol 123183 . 123194) (EXTERN 123176 . 123182) (punctuation 123174 . 123175) (close-paren 123173 . 123174) (symbol 123162 . 123173) (punctuation 123160 . 123161) (symbol 123149 . 123160) (open-paren 123148 . 123149) (symbol 123140 . 123147) (symbol 123128 . 123139) (EXTERN 123121 . 123127) (punctuation 123119 . 123120) (close-paren 123118 . 123119) (symbol 123107 . 123118) (open-paren 123106 . 123107) (symbol 123091 . 123105) (symbol 123079 . 123090) (EXTERN 123072 . 123078) (punctuation 123070 . 123071) (close-paren 123069 . 123070) (semantic-list 123043 . 123069) (semantic-list 123039 . 123042) (BOOL 123034 . 123038) (punctuation 123032 . 123033) (symbol 123021 . 123032) (punctuation 123019 . 123020) (symbol 123008 . 123019) (open-paren 123007 . 123008) (symbol 122999 . 123006) (symbol 122987 . 122998) (EXTERN 122980 . 122986) (punctuation 122978 . 122979) (close-paren 122977 . 122978) (symbol 122966 . 122977) (punctuation 122964 . 122965) (symbol 122953 . 122964) (punctuation 122951 . 122952) (symbol 122940 . 122951) (open-paren 122939 . 122940) (symbol 122933 . 122938) (symbol 122921 . 122932) (EXTERN 122914 . 122920) (punctuation 122912 . 122913) (close-paren 122911 . 122912) (symbol 122902 . 122911) (punctuation 122900 . 122901) (symbol 122891 . 122900) (punctuation 122882 . 122883) (symbol 122873 . 122882) (punctuation 122871 . 122872) (symbol 122862 . 122871) (punctuation 122860 . 122861) (symbol 122849 . 122860) (open-paren 122848 . 122849) (symbol 122833 . 122847) (symbol 122821 . 122832) (EXTERN 122814 . 122820) (punctuation 122812 . 122813) (close-paren 122811 . 122812) (punctuation 122810 . 122811) (symbol 122800 . 122809) (punctuation 122798 . 122799) (punctuation 122797 . 122798) (symbol 122787 . 122796) (punctuation 122785 . 122786) (symbol 122776 . 122785) (punctuation 122764 . 122765) (symbol 122753 . 122764) (punctuation 122751 . 122752) (symbol 122740 . 122751) (punctuation 122738 . 122739) (symbol 122727 . 122738) (open-paren 122726 . 122727) (symbol 122708 . 122725) (VOID 122703 . 122707) (EXTERN 122696 . 122702) (punctuation 122615 . 122616) (close-paren 122614 . 122615) (symbol 122603 . 122614) (punctuation 122601 . 122602) (punctuation 122600 . 122601) (symbol 122584 . 122599) (STRUCT 122577 . 122583) (open-paren 122576 . 122577) (symbol 122553 . 122575) (VOID 122548 . 122552) (punctuation 122546 . 122547) (close-paren 122545 . 122546) (symbol 122534 . 122545) (punctuation 122526 . 122527) (symbol 122515 . 122526) (punctuation 122513 . 122514) (symbol 122502 . 122513) (punctuation 122500 . 122501) (punctuation 122499 . 122500) (symbol 122483 . 122498) (STRUCT 122476 . 122482) (open-paren 122475 . 122476) (symbol 122466 . 122474) (symbol 122456 . 122465) (punctuation 122454 . 122455) (close-paren 122453 . 122454) (punctuation 122452 . 122453) (symbol 122440 . 122451) (punctuation 122438 . 122439) (symbol 122427 . 122438) (punctuation 122425 . 122426) (punctuation 122424 . 122425) (symbol 122408 . 122423) (STRUCT 122401 . 122407) (open-paren 122400 . 122401) (symbol 122388 . 122399) (symbol 122378 . 122387) (punctuation 122376 . 122377) (close-paren 122375 . 122376) (BOOL 122371 . 122375) (punctuation 122369 . 122370) (symbol 122358 . 122369) (punctuation 122327 . 122328) (FLOAT 122322 . 122327) (punctuation 122320 . 122321) (FLOAT 122315 . 122320) (punctuation 122313 . 122314) (symbol 122304 . 122313) (punctuation 122302 . 122303) (symbol 122287 . 122302) (STRUCT 122280 . 122286) (open-paren 122279 . 122280) (symbol 122263 . 122278) (symbol 122251 . 122262) (punctuation 122249 . 122250) (close-paren 122248 . 122249) (punctuation 122247 . 122248) (symbol 122231 . 122246) (STRUCT 122224 . 122230) (punctuation 122222 . 122223) (symbol 122211 . 122222) (open-paren 122210 . 122211) (symbol 122190 . 122209) (symbol 122178 . 122189) (punctuation 122176 . 122177) (close-paren 122175 . 122176) (symbol 122164 . 122175) (open-paren 122163 . 122164) (symbol 122156 . 122162) (symbol 122145 . 122155) (punctuation 122143 . 122144) (close-paren 122142 . 122143) (symbol 122133 . 122142) (punctuation 122131 . 122132) (punctuation 122130 . 122131) (CONST 122124 . 122129) (CHAR 122119 . 122123) (open-paren 122118 . 122119) (symbol 122106 . 122117) (symbol 122095 . 122105) (punctuation 122093 . 122094) (close-paren 122092 . 122093) (punctuation 122091 . 122092) (symbol 122081 . 122090) (punctuation 122079 . 122080) (punctuation 122078 . 122079) (symbol 122068 . 122077) (punctuation 122066 . 122067) (symbol 122055 . 122066) (open-paren 122054 . 122055) (symbol 122029 . 122053) (punctuation 122028 . 122029) (CHAR 122023 . 122027) (EXTERN 122016 . 122022) (punctuation 122014 . 122015) (close-paren 122013 . 122014) (INT 122010 . 122013) (punctuation 122008 . 122009) (punctuation 122007 . 122008) (CONST 122001 . 122006) (VOID 121996 . 122000) (punctuation 121994 . 121995) (punctuation 121993 . 121994) (CHAR 121988 . 121992) (open-paren 121987 . 121988) (symbol 121973 . 121986) (VOID 121968 . 121972) (EXTERN 121961 . 121967) (punctuation 121959 . 121960) (close-paren 121958 . 121959) (BOOL 121954 . 121958) (punctuation 121952 . 121953) (punctuation 121951 . 121952) (symbol 121935 . 121950) (STRUCT 121928 . 121934) (open-paren 121927 . 121928) (symbol 121910 . 121926) (BOOL 121905 . 121909) (EXTERN 121898 . 121904) (punctuation 121896 . 121897) (close-paren 121895 . 121896) (symbol 121886 . 121895) (punctuation 121884 . 121885) (symbol 121875 . 121884) (punctuation 121873 . 121874) (symbol 121862 . 121873) (open-paren 121861 . 121862) (symbol 121847 . 121860) (symbol 121835 . 121846) (EXTERN 121828 . 121834) (close-paren 121809 . 121810) (symbol 121800 . 121809) (open-paren 121799 . 121800) (symbol 121781 . 121798) (symbol 121771 . 121780) (EXTERN 121764 . 121770) (punctuation 121762 . 121763) (close-paren 121761 . 121762) (symbol 121750 . 121761) (open-paren 121749 . 121750) (symbol 121737 . 121748) (symbol 121727 . 121736) (EXTERN 121720 . 121726) (punctuation 121718 . 121719) (close-paren 121717 . 121718) (number 121714 . 121716) (punctuation 121712 . 121713) (symbol 121688 . 121711) (open-paren 121686 . 121687) (ENUM 121681 . 121685) (punctuation 121653 . 121654) (close-paren 121652 . 121653) (VOID 121648 . 121652) (open-paren 121647 . 121648) (symbol 121632 . 121646) (VOID 121627 . 121631) (EXTERN 121620 . 121626) (punctuation 121618 . 121619) (close-paren 121617 . 121618) (VOID 121613 . 121617) (open-paren 121612 . 121613) (symbol 121595 . 121611) (VOID 121590 . 121594) (EXTERN 121583 . 121589) (punctuation 121497 . 121498) (close-paren 121496 . 121497) (VOID 121492 . 121496) (open-paren 121491 . 121492) (symbol 121475 . 121490) (VOID 121470 . 121474) (EXTERN 121463 . 121469) (punctuation 121461 . 121462) (close-paren 121460 . 121461) (VOID 121456 . 121460) (open-paren 121455 . 121456) (symbol 121437 . 121454) (VOID 121432 . 121436) (EXTERN 121425 . 121431) (punctuation 121423 . 121424) (close-paren 121422 . 121423) (VOID 121418 . 121422) (open-paren 121417 . 121418) (symbol 121404 . 121416) (VOID 121399 . 121403) (EXTERN 121392 . 121398) (punctuation 121360 . 121361) (close-paren 121359 . 121360) (VOID 121355 . 121359) (open-paren 121354 . 121355) (symbol 121336 . 121353) (VOID 121331 . 121335) (EXTERN 121324 . 121330) (punctuation 121322 . 121323) (close-paren 121321 . 121322) (symbol 121312 . 121321) (punctuation 121310 . 121311) (punctuation 121309 . 121310) (CHAR 121304 . 121308) (UNSIGNED 121295 . 121303) (CONST 121289 . 121294) (open-paren 121288 . 121289) (symbol 121264 . 121287) (symbol 121254 . 121263) (EXTERN 121247 . 121253) (punctuation 121245 . 121246) (close-paren 121244 . 121245) (symbol 121235 . 121244) (punctuation 121233 . 121234) (punctuation 121232 . 121233) (CHAR 121227 . 121231) (UNSIGNED 121218 . 121226) (CONST 121212 . 121217) (open-paren 121211 . 121212) (symbol 121197 . 121210) (symbol 121187 . 121196) (EXTERN 121180 . 121186) (punctuation 121146 . 121147) (close-paren 121145 . 121146) (symbol 121134 . 121145) (open-paren 121133 . 121134) (symbol 121118 . 121132) (BOOL 121113 . 121117) (EXTERN 121106 . 121112) (punctuation 121104 . 121105) (close-paren 121103 . 121104) (VOID 121099 . 121103) (open-paren 121098 . 121099) (symbol 121083 . 121097) (VOID 121078 . 121082) (EXTERN 121071 . 121077) (punctuation 121069 . 121070) (close-paren 121068 . 121069) (VOID 121064 . 121068) (open-paren 121063 . 121064) (symbol 121046 . 121062) (VOID 121041 . 121045) (EXTERN 121034 . 121040) (punctuation 121032 . 121033) (close-paren 121031 . 121032) (VOID 121027 . 121031) (open-paren 121026 . 121027) (symbol 121014 . 121025) (VOID 121009 . 121013) (EXTERN 121002 . 121008) (punctuation 121000 . 121001) (close-paren 120999 . 121000) (symbol 120988 . 120999) (punctuation 120986 . 120987) (BOOL 120982 . 120986) (punctuation 120980 . 120981) (BOOL 120976 . 120980) (punctuation 120974 . 120975) (symbol 120965 . 120974) (punctuation 120922 . 120923) (symbol 120913 . 120922) (punctuation 120911 . 120912) (punctuation 120910 . 120911) (CHAR 120905 . 120909) (UNSIGNED 120896 . 120904) (CONST 120890 . 120895) (open-paren 120889 . 120890) (symbol 120868 . 120888) (symbol 120856 . 120867) (EXTERN 120849 . 120855) (punctuation 120818 . 120819) (close-paren 120817 . 120818) (VOID 120813 . 120817) (open-paren 120812 . 120813) (symbol 120799 . 120811) (VOID 120794 . 120798) (EXTERN 120787 . 120793) (punctuation 120760 . 120761) (close-paren 120759 . 120760) (punctuation 120758 . 120759) (symbol 120746 . 120757) (STRUCT 120739 . 120745) (open-paren 120738 . 120739) (symbol 120715 . 120737) (VOID 120710 . 120714) (EXTERN 120703 . 120709) (punctuation 120701 . 120702) (close-paren 120700 . 120701) (VOID 120696 . 120700) (open-paren 120695 . 120696) (symbol 120682 . 120694) (VOID 120677 . 120681) (EXTERN 120670 . 120676) (punctuation 120668 . 120669) (close-paren 120667 . 120668) (symbol 120656 . 120667) (punctuation 120654 . 120655) (symbol 120643 . 120654) (open-paren 120642 . 120643) (symbol 120629 . 120641) (symbol 120617 . 120628) (EXTERN 120610 . 120616) (punctuation 120608 . 120609) (close-paren 120607 . 120608) (symbol 120599 . 120607) (symbol 120581 . 120598) (ENUM 120576 . 120580) (punctuation 120540 . 120541) (symbol 120529 . 120540) (punctuation 120527 . 120528) (symbol 120516 . 120527) (open-paren 120515 . 120516) (symbol 120494 . 120514) (VOID 120489 . 120493) (EXTERN 120482 . 120488) (punctuation 120480 . 120481) (close-paren 120479 . 120480) (symbol 120462 . 120479) (ENUM 120457 . 120461) (punctuation 120429 . 120430) (symbol 120418 . 120429) (punctuation 120416 . 120417) (symbol 120405 . 120416) (punctuation 120403 . 120404) (symbol 120392 . 120403) (open-paren 120391 . 120392) (symbol 120378 . 120390) (VOID 120373 . 120377) (EXTERN 120366 . 120372) (punctuation 120364 . 120365) (close-paren 120363 . 120364) (symbol 120336 . 120362) (punctuation 120332 . 120333) (symbol 120313 . 120332) (punctuation 120309 . 120310) (symbol 120292 . 120309) (punctuation 120288 . 120289) (symbol 120272 . 120288) (open-paren 120268 . 120269) (symbol 120250 . 120267) (ENUM 120245 . 120249) (punctuation 120243 . 120244) (close-paren 120242 . 120243) (symbol 120235 . 120242) (open-paren 120234 . 120235) (symbol 120213 . 120233) (symbol 120201 . 120212) (EXTERN 120194 . 120200) (punctuation 120192 . 120193) (close-paren 120191 . 120192) (symbol 120180 . 120191) (open-paren 120179 . 120180) (symbol 120165 . 120178) (VOID "void" 120159 . 120164) (symbol "ATTRIBUTE_COLD" 120159 . 120164) (EXTERN 120152 . 120158) (punctuation 120150 . 120151) (close-paren 120149 . 120150) (symbol 120138 . 120149) (punctuation 120136 . 120137) (symbol 120125 . 120136) (open-paren 120124 . 120125) (symbol 120106 . 120123) (VOID "void" 120100 . 120105) (symbol "ATTRIBUTE_COLD" 120100 . 120105) (EXTERN 120093 . 120099) (punctuation 120091 . 120092) (close-paren 120090 . 120091) (punctuation 120089 . 120090) (symbol 120077 . 120088) (STRUCT 120070 . 120076) (open-paren 120069 . 120070) (symbol 120051 . 120068) (punctuation 120050 . 120051) (symbol 120038 . 120049) (STRUCT 120031 . 120037) (EXTERN 120024 . 120030) (punctuation 120021 . 120022) (close-paren 120020 . 120021) (symbol 120011 . 120020) (punctuation 120009 . 120010) (symbol 119998 . 120009) (open-paren 119997 . 119998) (symbol 119980 . 119996) (symbol 119970 . 119979) (EXTERN 119963 . 119969) (punctuation 119961 . 119962) (close-paren 119960 . 119961) (symbol 119952 . 119960) (punctuation 119950 . 119951) (symbol 119942 . 119950) (punctuation 119940 . 119941) (symbol 119929 . 119940) (open-paren 119928 . 119929) (symbol 119913 . 119927) (symbol 119904 . 119912) (EXTERN 119897 . 119903) (punctuation 119474 . 119475) (close-paren 119473 . 119474) (symbol 119463 . 119473) (symbol 119446 . 119462) (ENUM 119441 . 119445) (punctuation 119406 . 119407) (symbol 119402 . 119406) (symbol 119390 . 119401) (punctuation 119388 . 119389) (symbol 119384 . 119388) (symbol 119372 . 119383) (open-paren 119371 . 119372) (symbol 119358 . 119370) (symbol 119346 . 119357) (EXTERN 119339 . 119345) (punctuation 119337 . 119338) (close-paren 119336 . 119337) (symbol 119316 . 119335) (punctuation 119312 . 119313) (symbol 119293 . 119312) (punctuation 119289 . 119290) (symbol 119279 . 119289) (punctuation 119275 . 119276) (symbol 119265 . 119275) (punctuation 119261 . 119262) (symbol 119247 . 119261) (punctuation 119243 . 119244) (symbol 119232 . 119243) (open-paren 119228 . 119229) (symbol 119211 . 119227) (ENUM 119206 . 119210) (punctuation 119204 . 119205) (close-paren 119203 . 119204) (symbol 119192 . 119203) (open-paren 119191 . 119192) (symbol 119173 . 119190) (symbol 119161 . 119172) (EXTERN 119154 . 119160) (punctuation 119152 . 119153) (close-paren 119151 . 119152) (symbol 119140 . 119151) (open-paren 119139 . 119140) (symbol 119121 . 119138) (symbol 119109 . 119120) (EXTERN 119102 . 119108) (punctuation 119100 . 119101) (close-paren 119099 . 119100) (symbol 119088 . 119099) (punctuation 119086 . 119087) (symbol 119075 . 119086) (punctuation 119063 . 119064) (symbol 119052 . 119063) (punctuation 119050 . 119051) (symbol 119039 . 119050) (open-paren 119038 . 119039) (symbol 119013 . 119037) (VOID 119008 . 119012) (EXTERN 119001 . 119007) (punctuation 118999 . 119000) (close-paren 118998 . 118999) (symbol 118987 . 118998) (punctuation 118985 . 118986) (symbol 118974 . 118985) (open-paren 118973 . 118974) (symbol 118960 . 118972) (VOID "void" 118954 . 118959) (symbol "ATTRIBUTE_COLD" 118954 . 118959) (EXTERN 118947 . 118953) (close-paren 118918 . 118919) (RETURN 118897 . 118903) (open-paren 118851 . 118852) (close-paren 118849 . 118850) (symbol 118848 . 118849) (symbol 118835 . 118847) (open-paren 118834 . 118835) (symbol 118816 . 118833) (symbol 118804 . 118815) (symbol 118797 . 118803) (close-paren 118794 . 118795) (RETURN 118783 . 118789) (punctuation 118779 . 118780) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "modiff_overflow" 118740 . 118755)))) 118730 . 118779) (punctuation 118672 . 118673) (punctuation 118671 . 118672) (punctuation 118670 . 118671) (symbol 118666 . 118670) (semantic-list 118654 . 118665) (WHILE 118648 . 118653) (open-paren 118429 . 118430) (close-paren 118427 . 118428) (symbol 118424 . 118427) (symbol 118414 . 118423) (punctuation 118412 . 118413) (symbol 118411 . 118412) (punctuation 118410 . 118411) (symbol 118397 . 118409) (open-paren 118396 . 118397) (symbol 118384 . 118395) (symbol 118371 . 118383) (symbol 118364 . 118370) (close-paren 118075 . 118076) (semantic-list 117987 . 118074) (ELSE 117978 . 117982) (semantic-list 117909 . 117975) (semantic-list 117889 . 117904) (IF 117886 . 117888) (open-paren 117882 . 117883) (close-paren 117880 . 117881) (symbol 117879 . 117880) (punctuation 117878 . 117879) (symbol 117868 . 117877) (punctuation 117866 . 117867) (symbol 117863 . 117866) (symbol 117851 . 117862) (open-paren 117850 . 117851) (symbol 117831 . 117849) (BOOL 117826 . 117830) (symbol 117819 . 117825) (close-paren 117817 . 117818) (semantic-list 117731 . 117816) (ELSE 117722 . 117726) (semantic-list 117667 . 117719) (semantic-list 117647 . 117662) (IF 117644 . 117646) (open-paren 117640 . 117641) (close-paren 117638 . 117639) (symbol 117637 . 117638) (punctuation 117636 . 117637) (symbol 117627 . 117635) (punctuation 117625 . 117626) (symbol 117622 . 117625) (symbol 117610 . 117621) (open-paren 117609 . 117610) (symbol 117591 . 117608) (BOOL 117586 . 117590) (symbol 117579 . 117585) (punctuation 117468 . 117469) (close-paren 117467 . 117468) (DOUBLE 117461 . 117467) (open-paren 117460 . 117461) (symbol 117442 . 117459) (symbol 117430 . 117441) (EXTERN 117423 . 117429) (punctuation 117421 . 117422) (close-paren 117420 . 117421) (symbol 117411 . 117420) (open-paren 117410 . 117411) (symbol 117393 . 117409) (symbol 117381 . 117392) (EXTERN 117374 . 117380) (punctuation 117372 . 117373) (close-paren 117371 . 117372) (INT 117368 . 117371) (punctuation 117366 . 117367) (punctuation 117365 . 117366) (CONST 117359 . 117364) (CHAR 117354 . 117358) (open-paren 117353 . 117354) (symbol 117337 . 117352) (symbol 117325 . 117336) (EXTERN 117318 . 117324) (punctuation 117316 . 117317) (close-paren 117315 . 117316) (INT 117312 . 117315) (punctuation 117310 . 117311) (symbol 117299 . 117310) (open-paren 117298 . 117299) (symbol 117281 . 117297) (symbol 117269 . 117280) (EXTERN 117262 . 117268) (punctuation 117260 . 117261) (close-paren 117259 . 117260) (INT 117256 . 117259) (punctuation 117254 . 117255) (symbol 117243 . 117254) (punctuation 117241 . 117242) (symbol 117232 . 117241) (punctuation 117230 . 117231) (punctuation 117229 . 117230) (CHAR 117224 . 117228) (open-paren 117223 . 117224) (symbol 117204 . 117222) (symbol 117194 . 117203) (EXTERN 117187 . 117193) (close-paren 117168 . 117169) (INT 117165 . 117168) (punctuation 117163 . 117164) (symbol 117152 . 117163) (open-paren 117151 . 117152) (symbol 117136 . 117150) (symbol 117126 . 117135) (EXTERN 117119 . 117125) (close-paren 117100 . 117101) (symbol 117089 . 117100) (open-paren 117088 . 117089) (symbol 117070 . 117087) (symbol 117060 . 117069) (EXTERN 117053 . 117059) (close-paren 117034 . 117035) (symbol 117023 . 117034) (open-paren 117022 . 117023) (symbol 117005 . 117021) (symbol 116996 . 117004) (EXTERN 116989 . 116995) (close-paren 116847 . 116848) (punctuation 116825 . 116826) (punctuation 116824 . 116825) (semantic-list 116817 . 116824) (symbol 116801 . 116816) (open-paren 116797 . 116798) (close-paren 116795 . 116796) (symbol 116792 . 116795) (symbol 116780 . 116791) (punctuation 116778 . 116779) (symbol 116775 . 116778) (symbol 116765 . 116774) (punctuation 116763 . 116764) (symbol 116758 . 116763) (symbol 116746 . 116757) (open-paren 116745 . 116746) (symbol 116717 . 116744) (VOID 116712 . 116716) (symbol 116705 . 116711) (close-paren 116702 . 116703) (punctuation 116680 . 116681) (punctuation 116679 . 116680) (semantic-list 116672 . 116679) (symbol 116660 . 116671) (punctuation 116656 . 116657) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 116611 . 116612)))) 116602 . 116656) (open-paren 116598 . 116599) (close-paren 116596 . 116597) (symbol 116593 . 116596) (symbol 116581 . 116592) (punctuation 116579 . 116580) (symbol 116576 . 116579) (symbol 116566 . 116575) (punctuation 116564 . 116565) (symbol 116559 . 116564) (symbol 116547 . 116558) (open-paren 116546 . 116547) (symbol 116522 . 116545) (VOID 116517 . 116521) (symbol 116510 . 116516) (close-paren 116507 . 116508) (punctuation 116487 . 116488) (punctuation 116486 . 116487) (semantic-list 116479 . 116486) (symbol 116467 . 116478) (punctuation 116463 . 116464) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 116400 . 116401)))) 116391 . 116463) (open-paren 116387 . 116388) (close-paren 116385 . 116386) (symbol 116382 . 116385) (symbol 116370 . 116381) (punctuation 116368 . 116369) (symbol 116365 . 116368) (symbol 116355 . 116364) (punctuation 116353 . 116354) (symbol 116348 . 116353) (symbol 116336 . 116347) (open-paren 116335 . 116336) (symbol 116313 . 116334) (VOID 116308 . 116312) (symbol 116301 . 116307) (close-paren 116244 . 116245) (punctuation 116228 . 116229) (punctuation 116227 . 116228) (semantic-list 116220 . 116227) (symbol 116208 . 116219) (open-paren 116204 . 116205) (close-paren 116202 . 116203) (symbol 116199 . 116202) (symbol 116187 . 116198) (punctuation 116185 . 116186) (symbol 116180 . 116185) (symbol 116168 . 116179) (open-paren 116167 . 116168) (symbol 116144 . 116166) (VOID 116139 . 116143) (symbol 116132 . 116138) (close-paren 116130 . 116131) (punctuation 116115 . 116116) (punctuation 116114 . 116115) (semantic-list 116107 . 116114) (symbol 116095 . 116106) (open-paren 116091 . 116092) (close-paren 116089 . 116090) (symbol 116086 . 116089) (symbol 116074 . 116085) (punctuation 116072 . 116073) (symbol 116067 . 116072) (symbol 116055 . 116066) (open-paren 116054 . 116055) (symbol 116032 . 116053) (VOID 116027 . 116031) (symbol 116020 . 116026) (close-paren 115911 . 115912) (punctuation 115895 . 115896) (symbol 115894 . 115895) (punctuation 115893 . 115894) (symbol 115892 . 115893) (punctuation 115891 . 115892) (punctuation 115890 . 115891) (semantic-list 115887 . 115890) (symbol 115879 . 115886) (open-paren 115875 . 115876) (close-paren 115873 . 115874) (symbol 115872 . 115873) (symbol 115863 . 115871) (punctuation 115861 . 115862) (symbol 115860 . 115861) (symbol 115848 . 115859) (open-paren 115847 . 115848) (symbol 115826 . 115846) (VOID 115821 . 115825) (symbol 115814 . 115820) (close-paren 115772 . 115773) (punctuation 115760 . 115761) (symbol 115759 . 115760) (punctuation 115758 . 115759) (symbol 115757 . 115758) (punctuation 115756 . 115757) (punctuation 115755 . 115756) (semantic-list 115752 . 115755) (symbol 115744 . 115751) (RETURN 115737 . 115743) (open-paren 115733 . 115734) (close-paren 115731 . 115732) (symbol 115730 . 115731) (symbol 115718 . 115729) (open-paren 115717 . 115718) (symbol 115700 . 115716) (symbol 115691 . 115699) (symbol 115684 . 115690) (close-paren 115647 . 115648) (punctuation 115631 . 115632) (punctuation 115630 . 115631) (semantic-list 115621 . 115630) (symbol 115612 . 115620) (open-paren 115608 . 115609) (close-paren 115606 . 115607) (symbol 115601 . 115606) (symbol 115589 . 115600) (punctuation 115587 . 115588) (symbol 115580 . 115587) (symbol 115568 . 115579) (open-paren 115567 . 115568) (symbol 115549 . 115566) (VOID 115544 . 115548) (symbol 115537 . 115543) (close-paren 115497 . 115498) (punctuation 115489 . 115490) (punctuation 115488 . 115489) (symbol 115485 . 115488) (RETURN 115478 . 115484) (punctuation 115474 . 115475) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 115422 . 115425)))) 115413 . 115474) (open-paren 115409 . 115410) (close-paren 115407 . 115408) (symbol 115404 . 115407) (punctuation 115403 . 115404) (symbol 115379 . 115402) (STRUCT 115372 . 115378) (open-paren 115371 . 115372) (symbol 115361 . 115370) (BOOL 115356 . 115360) (symbol 115349 . 115355) (close-paren 115298 . 115299) (punctuation 115265 . 115266) (symbol 115264 . 115265) (punctuation 115263 . 115264) (symbol 115262 . 115263) (punctuation 115261 . 115262) (punctuation 115260 . 115261) (semantic-list 115255 . 115260) (symbol 115247 . 115254) (open-paren 115243 . 115244) (close-paren 115241 . 115242) (symbol 115238 . 115241) (symbol 115226 . 115237) (open-paren 115225 . 115226) (symbol 115204 . 115224) (VOID 115199 . 115203) (symbol 115192 . 115198) (close-paren 115189 . 115190) (punctuation 115175 . 115176) (symbol 115174 . 115175) (punctuation 115173 . 115174) (symbol 115172 . 115173) (punctuation 115171 . 115172) (punctuation 115170 . 115171) (semantic-list 115165 . 115170) (symbol 115157 . 115164) (open-paren 115153 . 115154) (close-paren 115151 . 115152) (symbol 115147 . 115151) (punctuation 115146 . 115147) (symbol 115134 . 115145) (STRUCT 115127 . 115133) (punctuation 115125 . 115126) (symbol 115122 . 115125) (symbol 115110 . 115121) (open-paren 115109 . 115110) (symbol 115093 . 115108) (VOID 115088 . 115092) (symbol 115081 . 115087) (close-paren 115078 . 115079) (punctuation 115062 . 115063) (symbol 115061 . 115062) (punctuation 115060 . 115061) (symbol 115059 . 115060) (punctuation 115058 . 115059) (punctuation 115057 . 115058) (semantic-list 115052 . 115057) (symbol 115044 . 115051) (open-paren 115040 . 115041) (close-paren 115038 . 115039) (symbol 115033 . 115038) (symbol 115021 . 115032) (punctuation 115019 . 115020) (symbol 115016 . 115019) (symbol 115004 . 115015) (open-paren 115003 . 115004) (symbol 114986 . 115002) (VOID 114981 . 114985) (symbol 114974 . 114980) (close-paren 114971 . 114972) (punctuation 114949 . 114950) (symbol 114948 . 114949) (punctuation 114947 . 114948) (symbol 114946 . 114947) (punctuation 114945 . 114946) (punctuation 114944 . 114945) (semantic-list 114939 . 114944) (symbol 114931 . 114938) (open-paren 114927 . 114928) (close-paren 114925 . 114926) (symbol 114917 . 114925) (symbol 114905 . 114916) (punctuation 114903 . 114904) (symbol 114900 . 114903) (symbol 114888 . 114899) (open-paren 114887 . 114888) (symbol 114867 . 114886) (VOID 114862 . 114866) (symbol 114855 . 114861) (close-paren 114762 . 114763) (number 114753 . 114754) (punctuation 114751 . 114752) (punctuation 114745 . 114746) (number 114743 . 114744) (punctuation 114727 . 114728) (punctuation 114726 . 114727) (open-paren 114712 . 114713) (close-paren 114710 . 114711) (symbol 114707 . 114710) (symbol 114695 . 114706) (punctuation 114693 . 114694) (symbol 114690 . 114693) (symbol 114680 . 114689) (punctuation 114678 . 114679) (symbol 114677 . 114678) (punctuation 114676 . 114677) (symbol 114660 . 114675) (STRUCT 114653 . 114659) (open-paren 114652 . 114653) (symbol 114632 . 114651) (VOID 114627 . 114631) (symbol 114620 . 114626) (close-paren 114617 . 114618) (punctuation 114604 . 114605) (number 114602 . 114603) (punctuation 114586 . 114587) (punctuation 114585 . 114586) (open-paren 114571 . 114572) (close-paren 114569 . 114570) (symbol 114566 . 114569) (symbol 114554 . 114565) (punctuation 114552 . 114553) (symbol 114549 . 114552) (symbol 114539 . 114548) (punctuation 114537 . 114538) (symbol 114536 . 114537) (punctuation 114535 . 114536) (symbol 114519 . 114534) (STRUCT 114512 . 114518) (open-paren 114511 . 114512) (symbol 114493 . 114510) (VOID 114488 . 114492) (symbol 114481 . 114487) (close-paren 114437 . 114438) (punctuation 114429 . 114430) (SIZEOF 114422 . 114428) (semantic-list 114395 . 114406) (punctuation 114361 . 114362) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 114304 . 114305)))) 114295 . 114361) (open-paren 114291 . 114292) (close-paren 114289 . 114290) (symbol 114284 . 114289) (symbol 114274 . 114283) (punctuation 114265 . 114266) (symbol 114261 . 114265) (punctuation 114260 . 114261) (CONST 114254 . 114259) (symbol 114242 . 114253) (punctuation 114240 . 114241) (symbol 114234 . 114240) (symbol 114224 . 114233) (punctuation 114222 . 114223) (symbol 114221 . 114222) (symbol 114209 . 114220) (open-paren 114208 . 114209) (symbol 114202 . 114207) (VOID 114197 . 114201) (symbol 114190 . 114196) (close-paren 114106 . 114107) (number 114102 . 114103) (RETURN 114069 . 114075) (open-paren 114065 . 114066) (close-paren 114063 . 114064) (symbol 114062 . 114063) (symbol 114050 . 114061) (open-paren 114049 . 114050) (symbol 114032 . 114048) (punctuation 114030 . 114031) (symbol 114018 . 114029) (symbol 114011 . 114017) (close-paren 113957 . 113958) (RETURN 113947 . 113953) (punctuation 113928 . 113929) (symbol 113916 . 113927) (punctuation 113914 . 113915) (symbol 113912 . 113913) (punctuation 113910 . 113911) (symbol 113908 . 113909) (punctuation 113907 . 113908) (VOID 113902 . 113906) (open-paren 113755 . 113756) (close-paren 113753 . 113754) (symbol 113752 . 113753) (symbol 113742 . 113751) (punctuation 113740 . 113741) (symbol 113739 . 113740) (symbol 113727 . 113738) (open-paren 113726 . 113727) (symbol 113704 . 113725) (punctuation 113702 . 113703) (symbol 113690 . 113701) (symbol 113683 . 113689) (punctuation 113160 . 113161) (close-paren 113159 . 113160) (symbol 113151 . 113159) (open-paren 113150 . 113151) (symbol 113141 . 113150) (punctuation 113140 . 113141) (CONST 113134 . 113139) (symbol 113122 . 113133) (EXTERN 113115 . 113121) (punctuation 113113 . 113114) (close-paren 113112 . 113113) (number 113107 . 113111) (punctuation 113105 . 113106) (symbol 113096 . 113104) (open-paren 113094 . 113095) (ENUM 113089 . 113093) (punctuation 113086 . 113087) (close-paren 113085 . 113086) (punctuation 113084 . 113085) (CONST 113078 . 113083) (symbol 113066 . 113077) (open-paren 113065 . 113066) (symbol 113055 . 113064) (VOID 113050 . 113054) (close-paren 112899 . 112900) (semantic-list 112870 . 112879) (IF 112867 . 112869) (open-paren 112863 . 112864) (close-paren 112861 . 112862) (symbol 112856 . 112861) (INT 112852 . 112855) (SHORT 112846 . 112851) (UNSIGNED 112837 . 112845) (open-paren 112836 . 112837) (symbol 112824 . 112835) (VOID 112819 . 112823) (symbol 112812 . 112818) (close-paren 112642 . 112643) (semantic-list 112580 . 112619) (IF 112577 . 112579) (open-paren 112573 . 112574) (close-paren 112571 . 112572) (VOID 112567 . 112571) (open-paren 112566 . 112567) (symbol 112555 . 112565) (VOID 112550 . 112554) (symbol 112543 . 112549) (punctuation 111914 . 111915) (close-paren 111913 . 111914) (VOID 111909 . 111913) (open-paren 111908 . 111909) (symbol 111894 . 111907) (VOID 111889 . 111893) (EXTERN 111882 . 111888) (punctuation 111880 . 111881) (close-paren 111879 . 111880) (VOID 111875 . 111879) (open-paren 111874 . 111875) (symbol 111850 . 111873) (VOID 111845 . 111849) (EXTERN 111838 . 111844) (punctuation 111662 . 111663) (close-paren 111661 . 111662) (open-paren 110709 . 110710) (symbol 110701 . 110708) (STRUCT 110694 . 110700) (punctuation 110691 . 110692) (close-paren 110690 . 110691) (punctuation 110688 . 110689) (symbol 110669 . 110688) (punctuation 110665 . 110666) (symbol 110645 . 110665) (open-paren 110641 . 110642) (symbol 110627 . 110640) (ENUM 110622 . 110626) (punctuation 110619 . 110620) (close-paren 110618 . 110619) (symbol 110606 . 110617) (punctuation 110604 . 110605) (symbol 110590 . 110604) (punctuation 110588 . 110589) (symbol 110581 . 110588) (open-paren 110579 . 110580) (symbol 110567 . 110578) (ENUM 110562 . 110566) (close-paren 109258 . 109259) (RETURN 109244 . 109250) (punctuation 109206 . 109207) (symbol 109204 . 109206) (punctuation 109203 . 109204) (punctuation 109202 . 109203) (symbol 109191 . 109202) (punctuation 109175 . 109176) (symbol 109173 . 109175) (punctuation 109172 . 109173) (punctuation 109171 . 109172) (symbol 109160 . 109171) (punctuation 109158 . 109159) (symbol 109148 . 109157) (punctuation 109147 . 109148) (punctuation 109146 . 109147) (symbol 109132 . 109146) (punctuation 109108 . 109109) (symbol 109106 . 109108) (punctuation 109105 . 109106) (punctuation 109104 . 109105) (symbol 109093 . 109104) (punctuation 109067 . 109068) (symbol 109065 . 109067) (punctuation 109064 . 109065) (punctuation 109063 . 109064) (symbol 109052 . 109063) (punctuation 109023 . 109024) (symbol 109021 . 109023) (punctuation 109020 . 109021) (punctuation 109019 . 109020) (symbol 109008 . 109019) (punctuation 109004 . 109005) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "nargs" 108985 . 108990)))) 108976 . 109004) (open-paren 108931 . 108932) (close-paren 108929 . 108930) (symbol 108924 . 108929) (symbol 108914 . 108923) (punctuation 108912 . 108913) (symbol 108908 . 108912) (punctuation 108907 . 108908) (symbol 108895 . 108906) (punctuation 108893 . 108894) (symbol 108885 . 108893) (symbol 108873 . 108884) (open-paren 108872 . 108873) (symbol 108852 . 108871) (symbol 108840 . 108851) (symbol 108833 . 108839) (close-paren 108830 . 108831) (semantic-list 108769 . 108797) (IF 108766 . 108768) (punctuation 108762 . 108763) (punctuation 108761 . 108762) (punctuation 108760 . 108761) (symbol 108749 . 108760) (open-paren 108745 . 108746) (close-paren 108743 . 108744) (VOID 108739 . 108743) (open-paren 108738 . 108739) (symbol 108725 . 108737) (VOID 108720 . 108724) (symbol 108713 . 108719) (punctuation 108272 . 108273) (close-paren 108271 . 108272) (VOID 108267 . 108271) (open-paren 108266 . 108267) (symbol 108242 . 108265) (VOID 108237 . 108241) (close-paren 108234 . 108235) (punctuation 108218 . 108219) (symbol 108216 . 108218) (punctuation 108215 . 108216) (punctuation 108214 . 108215) (symbol 108211 . 108214) (RETURN 108204 . 108210) (punctuation 108200 . 108201) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "pdl" 108169 . 108172)))) 108160 . 108200) (open-paren 108156 . 108157) (close-paren 108154 . 108155) (symbol 108151 . 108154) (punctuation 108150 . 108151) (symbol 108138 . 108149) (UNION 108132 . 108137) (open-paren 108131 . 108132) (symbol 108107 . 108130) (BOOL 108102 . 108106) (symbol 108095 . 108101) (close-paren 108092 . 108093) (semantic-list 108074 . 108082) (punctuation 108072 . 108073) (semantic-list 108052 . 108060) (RETURN 108027 . 108033) (open-paren 108023 . 108024) (close-paren 108021 . 108022) (VOID 108017 . 108021) (open-paren 108016 . 108017) (symbol 108002 . 108015) (symbol 107990 . 108001) (symbol 107983 . 107989) (close-paren 107920 . 107921) (punctuation 107918 . 107919) (semantic-list 107874 . 107918) (semantic-list 107853 . 107874) (RETURN 107846 . 107852) (open-paren 107842 . 107843) (close-paren 107840 . 107841) (symbol 107837 . 107840) (symbol 107825 . 107836) (open-paren 107824 . 107825) (symbol 107805 . 107823) (punctuation 107803 . 107804) (symbol 107791 . 107802) (UNION 107785 . 107790) (symbol 107778 . 107784) (close-paren 107775 . 107776) (semantic-list 107753 . 107772) (SIZEOF 107746 . 107752) (punctuation 107736 . 107737) (semantic-list 107724 . 107729) (RETURN 107680 . 107686) (open-paren 107676 . 107677) (close-paren 107674 . 107675) (symbol 107669 . 107674) (symbol 107659 . 107668) (punctuation 107657 . 107658) (symbol 107654 . 107657) (symbol 107642 . 107653) (open-paren 107641 . 107642) (symbol 107625 . 107640) (symbol 107613 . 107624) (symbol 107606 . 107612) (close-paren 107495 . 107496) (number 107491 . 107492) (punctuation 107490 . 107491) (RETURN 107465 . 107471) (open-paren 107461 . 107462) (close-paren 107459 . 107460) (VOID 107455 . 107459) (open-paren 107454 . 107455) (symbol 107429 . 107453) (symbol 107417 . 107428) (symbol 107410 . 107416) (close-paren 107407 . 107408) (punctuation 107405 . 107406) (number 107404 . 107405) (punctuation 107402 . 107403) (punctuation 107401 . 107402) (semantic-list 107395 . 107400) (symbol 107376 . 107394) (RETURN 107369 . 107375) (open-paren 107365 . 107366) (close-paren 107363 . 107364) (symbol 107360 . 107363) (symbol 107348 . 107359) (open-paren 107347 . 107348) (symbol 107327 . 107346) (BOOL 107322 . 107326) (symbol 107315 . 107321) (close-paren 107312 . 107313) (punctuation 107286 . 107287) (semantic-list 107282 . 107285) (symbol 107263 . 107281) (RETURN 107256 . 107262) (open-paren 107252 . 107253) (close-paren 107250 . 107251) (symbol 107249 . 107250) (symbol 107237 . 107248) (punctuation 107235 . 107236) (symbol 107234 . 107235) (symbol 107222 . 107233) (open-paren 107221 . 107222) (symbol 107206 . 107220) (BOOL 107201 . 107205) (symbol 107194 . 107200) (close-paren 107135 . 107136) (punctuation 107109 . 107110) (punctuation 107108 . 107109) (semantic-list 107104 . 107107) (symbol 107085 . 107103) (RETURN 107078 . 107084) (open-paren 107074 . 107075) (close-paren 107072 . 107073) (symbol 107071 . 107072) (symbol 107059 . 107070) (punctuation 107057 . 107058) (symbol 107056 . 107057) (symbol 107044 . 107055) (open-paren 107043 . 107044) (symbol 107028 . 107042) (BOOL 107023 . 107027) (symbol 107016 . 107022) (close-paren 106955 . 106956) (punctuation 106953 . 106954) (semantic-list 106934 . 106953) (SIZEOF 106927 . 106933) (punctuation 106925 . 106926) (semantic-list 106919 . 106924) (symbol 106900 . 106918) (RETURN 106893 . 106899) (open-paren 106889 . 106890) (close-paren 106887 . 106888) (symbol 106884 . 106887) (symbol 106872 . 106883) (open-paren 106871 . 106872) (symbol 106850 . 106870) (symbol 106840 . 106849) (symbol 106833 . 106839) (close-paren 106830 . 106831) (semantic-list 106808 . 106827) (SIZEOF 106801 . 106807) (RETURN 106768 . 106774) (open-paren 106764 . 106765) (close-paren 106762 . 106763) (symbol 106757 . 106762) (symbol 106747 . 106756) (open-paren 106746 . 106747) (symbol 106725 . 106745) (symbol 106713 . 106724) (symbol 106706 . 106712) (close-paren 106703 . 106704) (RETURN 106684 . 106690) (open-paren 106630 . 106631) (close-paren 106628 . 106629) (symbol 106625 . 106628) (symbol 106613 . 106624) (open-paren 106612 . 106613) (symbol 106593 . 106611) (symbol 106583 . 106592) (symbol 106576 . 106582) (close-paren 106547 . 106548) (RETURN 106526 . 106532) (open-paren 106452 . 106453) (close-paren 106450 . 106451) (symbol 106445 . 106450) (symbol 106435 . 106444) (open-paren 106434 . 106435) (symbol 106417 . 106433) (symbol 106405 . 106416) (symbol 106398 . 106404) (punctuation 105854 . 105855) (close-paren 105853 . 105854) (punctuation 105720 . 105721) (symbol 105715 . 105719) (symbol "specbind_tag" 105692 . 105714) (ENUM "enum" 105692 . 105714) (punctuation 105720 . 105721) (symbol 105715 . 105719) (symbol "specbind_tag" 105692 . 105714) (ENUM "enum" 105692 . 105714) (punctuation 105545 . 105546) (symbol 105540 . 105544) (symbol "specbind_tag" 105517 . 105539) (ENUM "enum" 105517 . 105539) (punctuation 105545 . 105546) (symbol 105540 . 105544) (symbol "specbind_tag" 105517 . 105539) (ENUM "enum" 105517 . 105539) (punctuation 105440 . 105441) (symbol 105435 . 105439) (symbol "specbind_tag" 105412 . 105434) (ENUM "enum" 105412 . 105434) (punctuation 105440 . 105441) (symbol 105435 . 105439) (symbol "specbind_tag" 105412 . 105434) (ENUM "enum" 105412 . 105434) (punctuation 105323 . 105324) (symbol 105318 . 105322) (symbol "specbind_tag" 105295 . 105317) (ENUM "enum" 105295 . 105317) (punctuation 105323 . 105324) (symbol 105318 . 105322) (symbol "specbind_tag" 105295 . 105317) (ENUM "enum" 105295 . 105317) (punctuation 105192 . 105193) (symbol 105187 . 105191) (symbol "specbind_tag" 105164 . 105186) (ENUM "enum" 105164 . 105186) (punctuation 105192 . 105193) (symbol 105187 . 105191) (symbol "specbind_tag" 105164 . 105186) (ENUM "enum" 105164 . 105186) (punctuation 105074 . 105075) (symbol 105069 . 105073) (symbol "specbind_tag" 105046 . 105068) (ENUM "enum" 105046 . 105068) (punctuation 105074 . 105075) (symbol 105069 . 105073) (symbol "specbind_tag" 105046 . 105068) (ENUM "enum" 105046 . 105068) (punctuation 104859 . 104860) (symbol 104854 . 104858) (symbol "specbind_tag" 104831 . 104853) (ENUM "enum" 104831 . 104853) (punctuation 104859 . 104860) (symbol 104854 . 104858) (symbol "specbind_tag" 104831 . 104853) (ENUM "enum" 104831 . 104853) (punctuation 104731 . 104732) (symbol 104726 . 104730) (symbol "specbind_tag" 104703 . 104725) (ENUM "enum" 104703 . 104725) (punctuation 104731 . 104732) (symbol 104726 . 104730) (symbol "specbind_tag" 104703 . 104725) (ENUM "enum" 104703 . 104725) (punctuation 104573 . 104574) (symbol 104568 . 104572) (symbol "specbind_tag" 104545 . 104567) (ENUM "enum" 104545 . 104567) (punctuation 104573 . 104574) (symbol 104568 . 104572) (symbol "specbind_tag" 104545 . 104567) (ENUM "enum" 104545 . 104567) (punctuation 104514 . 104515) (symbol 104509 . 104513) (symbol "specbind_tag" 104486 . 104508) (ENUM "enum" 104486 . 104508) (open-paren 104377 . 104378) (symbol 104363 . 104374) (UNION 104357 . 104362) (punctuation 104354 . 104355) (close-paren 104353 . 104354) (symbol 104287 . 104306) (punctuation 104247 . 104248) (symbol 104230 . 104247) (punctuation 104111 . 104112) (symbol 104100 . 104111) (punctuation 103922 . 103923) (symbol 103911 . 103922) (punctuation 103870 . 103871) (symbol 103853 . 103870) (punctuation 103818 . 103819) (symbol 103799 . 103818) (punctuation 103761 . 103762) (symbol 103737 . 103761) (punctuation 103703 . 103704) (symbol 103682 . 103703) (punctuation 103652 . 103653) (symbol 103634 . 103652) (punctuation 103601 . 103602) (symbol 103583 . 103601) (punctuation 103481 . 103482) (symbol 103461 . 103481) (punctuation 103406 . 103407) (symbol 103392 . 103406) (open-paren 103388 . 103389) (symbol 103375 . 103387) (ENUM 103370 . 103374) (punctuation 100649 . 100650) (close-paren 100648 . 100649) (punctuation 100647 . 100648) (CONST 100641 . 100646) (CHAR 100636 . 100640) (punctuation 100634 . 100635) (punctuation 100633 . 100634) (CONST 100627 . 100632) (symbol 100608 . 100626) (STRUCT 100601 . 100607) (open-paren 100600 . 100601) (symbol 100586 . 100599) (VOID 100581 . 100585) (EXTERN 100574 . 100580) (punctuation 100572 . 100573) (close-paren 100571 . 100572) (punctuation 100570 . 100571) (CONST 100564 . 100569) (CHAR 100559 . 100563) (punctuation 100557 . 100558) (punctuation 100556 . 100557) (CONST 100550 . 100555) (symbol 100538 . 100549) (STRUCT 100531 . 100537) (open-paren 100530 . 100531) (symbol 100519 . 100529) (VOID 100514 . 100518) (EXTERN 100507 . 100513) (punctuation 100505 . 100506) (close-paren 100504 . 100505) (punctuation 100503 . 100504) (CONST 100497 . 100502) (CHAR 100492 . 100496) (punctuation 100490 . 100491) (punctuation 100489 . 100490) (CONST 100483 . 100488) (symbol 100470 . 100482) (STRUCT 100463 . 100469) (open-paren 100462 . 100463) (symbol 100450 . 100461) (VOID 100445 . 100449) (EXTERN 100438 . 100444) (punctuation 100436 . 100437) (close-paren 100435 . 100436) (punctuation 100434 . 100435) (CONST 100428 . 100433) (CHAR 100423 . 100427) (punctuation 100421 . 100422) (punctuation 100420 . 100421) (CONST 100414 . 100419) (symbol 100402 . 100413) (STRUCT 100395 . 100401) (open-paren 100394 . 100395) (symbol 100376 . 100393) (VOID 100371 . 100375) (EXTERN 100364 . 100370) (punctuation 100362 . 100363) (close-paren 100361 . 100362) (punctuation 100360 . 100361) (CONST 100354 . 100359) (CHAR 100349 . 100353) (punctuation 100347 . 100348) (punctuation 100346 . 100347) (CONST 100340 . 100345) (symbol 100328 . 100339) (STRUCT 100321 . 100327) (open-paren 100320 . 100321) (symbol 100308 . 100319) (VOID 100303 . 100307) (EXTERN 100296 . 100302) (close-paren 100293 . 100294) (punctuation 100291 . 100292) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 100223 . 100291) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 100223 . 100291) (RETURN 100216 . 100222) (open-paren 100212 . 100213) (close-paren 100210 . 100211) (symbol 100206 . 100210) (symbol 100194 . 100205) (punctuation 100185 . 100186) (symbol 100181 . 100185) (symbol 100169 . 100180) (punctuation 100167 . 100168) (symbol 100163 . 100167) (symbol 100151 . 100162) (punctuation 100149 . 100150) (symbol 100145 . 100149) (symbol 100133 . 100144) (punctuation 100131 . 100132) (symbol 100127 . 100131) (symbol 100115 . 100126) (punctuation 100106 . 100107) (symbol 100102 . 100106) (symbol 100090 . 100101) (punctuation 100088 . 100089) (symbol 100084 . 100088) (symbol 100072 . 100083) (punctuation 100070 . 100071) (symbol 100066 . 100070) (symbol 100054 . 100065) (punctuation 100052 . 100053) (symbol 100050 . 100052) (symbol 100038 . 100049) (open-paren 100037 . 100038) (symbol 100031 . 100036) (symbol 100019 . 100030) (symbol 100012 . 100018) (close-paren 99917 . 99918) (punctuation 99915 . 99916) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99853 . 99915) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99853 . 99915) (RETURN 99846 . 99852) (open-paren 99842 . 99843) (close-paren 99840 . 99841) (symbol 99836 . 99840) (symbol 99824 . 99835) (punctuation 99822 . 99823) (symbol 99818 . 99822) (symbol 99806 . 99817) (punctuation 99804 . 99805) (symbol 99800 . 99804) (symbol 99788 . 99799) (punctuation 99786 . 99787) (symbol 99782 . 99786) (symbol 99770 . 99781) (punctuation 99761 . 99762) (symbol 99757 . 99761) (symbol 99745 . 99756) (punctuation 99743 . 99744) (symbol 99739 . 99743) (symbol 99727 . 99738) (punctuation 99725 . 99726) (symbol 99721 . 99725) (symbol 99709 . 99720) (punctuation 99707 . 99708) (symbol 99705 . 99707) (symbol 99693 . 99704) (open-paren 99692 . 99693) (symbol 99686 . 99691) (symbol 99674 . 99685) (symbol 99667 . 99673) (close-paren 99581 . 99582) (punctuation 99579 . 99580) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99523 . 99579) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99523 . 99579) (RETURN 99516 . 99522) (open-paren 99512 . 99513) (close-paren 99510 . 99511) (symbol 99506 . 99510) (symbol 99494 . 99505) (punctuation 99492 . 99493) (symbol 99488 . 99492) (symbol 99476 . 99487) (punctuation 99474 . 99475) (symbol 99470 . 99474) (symbol 99458 . 99469) (punctuation 99449 . 99450) (symbol 99445 . 99449) (symbol 99433 . 99444) (punctuation 99431 . 99432) (symbol 99427 . 99431) (symbol 99415 . 99426) (punctuation 99413 . 99414) (symbol 99409 . 99413) (symbol 99397 . 99408) (punctuation 99395 . 99396) (symbol 99393 . 99395) (symbol 99381 . 99392) (open-paren 99380 . 99381) (symbol 99374 . 99379) (symbol 99362 . 99373) (symbol 99355 . 99361) (close-paren 99275 . 99276) (punctuation 99273 . 99274) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99223 . 99273) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 99223 . 99273) (RETURN 99216 . 99222) (open-paren 99212 . 99213) (close-paren 99210 . 99211) (symbol 99206 . 99210) (symbol 99194 . 99205) (punctuation 99192 . 99193) (symbol 99188 . 99192) (symbol 99176 . 99187) (punctuation 99167 . 99168) (symbol 99163 . 99167) (symbol 99151 . 99162) (punctuation 99149 . 99150) (symbol 99145 . 99149) (symbol 99133 . 99144) (punctuation 99131 . 99132) (symbol 99127 . 99131) (symbol 99115 . 99126) (punctuation 99113 . 99114) (symbol 99111 . 99113) (symbol 99099 . 99110) (open-paren 99098 . 99099) (symbol 99092 . 99097) (symbol 99080 . 99091) (symbol 99073 . 99079) (close-paren 98999 . 99000) (punctuation 98997 . 98998) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98953 . 98997) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98953 . 98997) (RETURN 98946 . 98952) (open-paren 98942 . 98943) (close-paren 98940 . 98941) (symbol 98936 . 98940) (symbol 98924 . 98935) (punctuation 98915 . 98916) (symbol 98911 . 98915) (symbol 98899 . 98910) (punctuation 98897 . 98898) (symbol 98893 . 98897) (symbol 98881 . 98892) (punctuation 98879 . 98880) (symbol 98875 . 98879) (symbol 98863 . 98874) (punctuation 98861 . 98862) (symbol 98859 . 98861) (symbol 98847 . 98858) (open-paren 98846 . 98847) (symbol 98840 . 98845) (symbol 98828 . 98839) (symbol 98821 . 98827) (close-paren 98753 . 98754) (punctuation 98751 . 98752) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98713 . 98751) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98713 . 98751) (RETURN 98706 . 98712) (open-paren 98702 . 98703) (close-paren 98700 . 98701) (symbol 98696 . 98700) (symbol 98684 . 98695) (punctuation 98682 . 98683) (symbol 98678 . 98682) (symbol 98666 . 98677) (punctuation 98664 . 98665) (symbol 98660 . 98664) (symbol 98648 . 98659) (punctuation 98646 . 98647) (symbol 98644 . 98646) (symbol 98632 . 98643) (open-paren 98631 . 98632) (symbol 98625 . 98630) (symbol 98613 . 98624) (symbol 98606 . 98612) (close-paren 98544 . 98545) (punctuation 98542 . 98543) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98510 . 98542) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98510 . 98542) (RETURN 98503 . 98509) (open-paren 98499 . 98500) (close-paren 98497 . 98498) (symbol 98493 . 98497) (symbol 98481 . 98492) (punctuation 98479 . 98480) (symbol 98475 . 98479) (symbol 98463 . 98474) (punctuation 98461 . 98462) (symbol 98459 . 98461) (symbol 98447 . 98458) (open-paren 98446 . 98447) (symbol 98440 . 98445) (symbol 98428 . 98439) (symbol 98421 . 98427) (close-paren 98365 . 98366) (punctuation 98363 . 98364) (semantic-list #("(ARRAYELTS (array), array)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98337 . 98363) (semantic-list #("(f)" 0 1 (macros (("array" semantic-list "((Lisp_Object []) {__VA_ARGS__})" 4 . 36) ("f" symbol "Ffuncall" 1 . 2)))) 98337 . 98363) (RETURN 98330 . 98336) (open-paren 98326 . 98327) (close-paren 98324 . 98325) (symbol 98320 . 98324) (symbol 98308 . 98319) (punctuation 98306 . 98307) (symbol 98304 . 98306) (symbol 98292 . 98303) (open-paren 98291 . 98292) (symbol 98285 . 98290) (symbol 98273 . 98284) (symbol 98266 . 98272) (close-paren 98217 . 98218) (punctuation 98211 . 98212) (number 98208 . 98209) (RETURN 98191 . 98197) (open-paren 98187 . 98188) (close-paren 98185 . 98186) (symbol 98183 . 98185) (symbol 98171 . 98182) (open-paren 98170 . 98171) (symbol 98164 . 98169) (symbol 98152 . 98163) (symbol 98145 . 98151) (punctuation 97511 . 97512) (close-paren 97510 . 97511) (number 97506 . 97507) (punctuation 97505 . 97506) (punctuation 97503 . 97504) (symbol 97493 . 97502) (punctuation 97487 . 97488) (number 97486 . 97487) (punctuation 97485 . 97486) (punctuation 97483 . 97484) (symbol 97478 . 97482) (open-paren 97472 . 97473) (symbol 97462 . 97469) (ENUM 97457 . 97461) (punctuation 97454 . 97455) (close-paren 97453 . 97454) (punctuation 97452 . 97453) (symbol 97434 . 97451) (UNION 97428 . 97433) (open-paren 97427 . 97428) (symbol 97419 . 97426) (VOID 97414 . 97418) (EXTERN 97407 . 97413) (close-paren 95035 . 95036) (semantic-list 95018 . 95021) (open-paren 94996 . 94997) (close-paren 94994 . 94995) (symbol 94993 . 94994) (symbol 94981 . 94992) (open-paren 94980 . 94981) (symbol 94969 . 94979) (VOID 94964 . 94968) (symbol 94957 . 94963) (close-paren 94954 . 94955) (semantic-list 94934 . 94937) (open-paren 94909 . 94910) (close-paren 94907 . 94908) (symbol 94906 . 94907) (symbol 94894 . 94905) (open-paren 94893 . 94894) (symbol 94879 . 94892) (VOID 94874 . 94878) (symbol 94867 . 94873) (close-paren 94864 . 94865) (semantic-list 94845 . 94848) (open-paren 94821 . 94822) (close-paren 94819 . 94820) (symbol 94818 . 94819) (symbol 94806 . 94817) (open-paren 94805 . 94806) (symbol 94792 . 94804) (VOID 94787 . 94791) (symbol 94780 . 94786) (close-paren 94777 . 94778) (punctuation 94775 . 94776) (semantic-list 94688 . 94775) (RETURN 94681 . 94687) (open-paren 94677 . 94678) (close-paren 94675 . 94676) (symbol 94674 . 94675) (symbol 94662 . 94673) (open-paren 94661 . 94662) (symbol 94651 . 94660) (DOUBLE 94644 . 94650) (symbol 94637 . 94643) (close-paren 94634 . 94635) (semantic-list 94613 . 94616) (open-paren 94589 . 94590) (close-paren 94587 . 94588) (symbol 94586 . 94587) (symbol 94574 . 94585) (open-paren 94573 . 94574) (symbol 94560 . 94572) (VOID 94555 . 94559) (symbol 94548 . 94554) (close-paren 94546 . 94547) (semantic-list 94526 . 94529) (open-paren 94503 . 94504) (close-paren 94501 . 94502) (symbol 94492 . 94501) (symbol 94480 . 94491) (punctuation 94478 . 94479) (symbol 94477 . 94478) (symbol 94465 . 94476) (open-paren 94464 . 94465) (symbol 94452 . 94463) (VOID 94447 . 94451) (symbol 94440 . 94446) (close-paren 94438 . 94439) (RETURN 94383 . 94389) (semantic-list 94365 . 94378) (IF 94362 . 94364) (RETURN 94342 . 94348) (semantic-list 94324 . 94337) (IF 94321 . 94323) (open-paren 94317 . 94318) (close-paren 94315 . 94316) (symbol 94314 . 94315) (symbol 94302 . 94313) (open-paren 94301 . 94302) (symbol 94278 . 94300) (symbol 94268 . 94277) (symbol 94261 . 94267) (close-paren 94190 . 94191) (semantic-list 94184 . 94187) (semantic-list 94157 . 94167) (open-paren 94133 . 94134) (close-paren 94131 . 94132) (symbol 94130 . 94131) (symbol 94118 . 94129) (open-paren 94117 . 94118) (symbol 94100 . 94116) (VOID 94095 . 94099) (symbol 94088 . 94094) (close-paren 94085 . 94086) (open-paren 94056 . 94057) (close-paren 94054 . 94055) (symbol 94053 . 94054) (symbol 94041 . 94052) (open-paren 94040 . 94041) (close-paren 94038 . 94039) (symbol 94026 . 94038) (open-paren 94025 . 94026) (VOID 94020 . 94024) (symbol 94013 . 94019) (close-paren 94010 . 94011) (semantic-list 93993 . 93996) (open-paren 93972 . 93973) (close-paren 93970 . 93971) (symbol 93969 . 93970) (symbol 93957 . 93968) (punctuation 93955 . 93956) (symbol 93954 . 93955) (symbol 93942 . 93953) (open-paren 93941 . 93942) (symbol 93926 . 93940) (VOID 93921 . 93925) (symbol 93914 . 93920) (close-paren 93911 . 93912) (semantic-list 93894 . 93897) (punctuation 93887 . 93888) (punctuation 93886 . 93887) (semantic-list 93882 . 93885) (open-paren 93860 . 93861) (close-paren 93858 . 93859) (symbol 93857 . 93858) (symbol 93845 . 93856) (open-paren 93844 . 93845) (symbol 93833 . 93843) (VOID 93828 . 93832) (symbol 93821 . 93827) (close-paren 93817 . 93818) (punctuation 93796 . 93797) (punctuation 93795 . 93796) (semantic-list 93791 . 93794) (symbol 93778 . 93790) (punctuation 93776 . 93777) (punctuation 93775 . 93776) (semantic-list 93771 . 93774) (symbol 93763 . 93770) (punctuation 93761 . 93762) (punctuation 93760 . 93761) (semantic-list 93756 . 93759) (symbol 93748 . 93755) (RETURN 93741 . 93747) (open-paren 93737 . 93738) (close-paren 93735 . 93736) (symbol 93734 . 93735) (symbol 93722 . 93733) (open-paren 93721 . 93722) (symbol 93714 . 93720) (BOOL 93709 . 93713) (symbol 93702 . 93708) (close-paren 93679 . 93680) (punctuation 93653 . 93654) (semantic-list 93649 . 93652) (symbol 93643 . 93648) (RETURN 93636 . 93642) (open-paren 93632 . 93633) (close-paren 93630 . 93631) (symbol 93629 . 93630) (symbol 93617 . 93628) (open-paren 93616 . 93617) (symbol 93609 . 93615) (BOOL 93604 . 93608) (symbol 93597 . 93603) (close-paren 93557 . 93558) (semantic-list 93538 . 93541) (open-paren 93514 . 93515) (close-paren 93512 . 93513) (symbol 93511 . 93512) (symbol 93499 . 93510) (open-paren 93498 . 93499) (symbol 93485 . 93497) (VOID 93480 . 93484) (symbol 93473 . 93479) (close-paren 93470 . 93471) (RETURN 93431 . 93437) (open-paren 93427 . 93428) (close-paren 93425 . 93426) (symbol 93424 . 93425) (symbol 93412 . 93423) (open-paren 93411 . 93412) (symbol 93403 . 93410) (BOOL 93398 . 93402) (symbol 93391 . 93397) (close-paren 93388 . 93389) (RETURN 93350 . 93356) (open-paren 93346 . 93347) (close-paren 93344 . 93345) (symbol 93343 . 93344) (symbol 93331 . 93342) (open-paren 93330 . 93331) (symbol 93323 . 93329) (BOOL 93318 . 93322) (symbol 93311 . 93317) (close-paren 93308 . 93309) (RETURN 93267 . 93273) (open-paren 93263 . 93264) (close-paren 93261 . 93262) (symbol 93260 . 93261) (symbol 93248 . 93259) (open-paren 93247 . 93248) (symbol 93237 . 93246) (BOOL 93232 . 93236) (symbol 93225 . 93231) (close-paren 93222 . 93223) (RETURN 93169 . 93175) (open-paren 93165 . 93166) (close-paren 93163 . 93164) (symbol 93162 . 93163) (symbol 93150 . 93161) (open-paren 93149 . 93150) (symbol 93127 . 93148) (BOOL 93122 . 93126) (symbol 93115 . 93121) (close-paren 93065 . 93066) (punctuation 93036 . 93037) (semantic-list 93032 . 93035) (symbol 93026 . 93031) (RETURN 93019 . 93025) (open-paren 93015 . 93016) (close-paren 93013 . 93014) (symbol 93012 . 93013) (symbol 93000 . 93011) (open-paren 92999 . 93000) (symbol 92989 . 92998) (BOOL 92984 . 92988) (symbol 92977 . 92983) (close-paren 92782 . 92783) (punctuation 92776 . 92777) (punctuation 92775 . 92776) (semantic-list 92771 . 92774) (symbol 92763 . 92770) (punctuation 92761 . 92762) (punctuation 92760 . 92761) (semantic-list 92756 . 92759) (symbol 92748 . 92755) (punctuation 92746 . 92747) (punctuation 92745 . 92746) (symbol 92742 . 92744) (punctuation 92740 . 92741) (punctuation 92739 . 92740) (semantic-list 92735 . 92738) (symbol 92727 . 92734) (RETURN 92720 . 92726) (open-paren 92716 . 92717) (close-paren 92714 . 92715) (symbol 92712 . 92714) (symbol 92703 . 92711) (punctuation 92701 . 92702) (symbol 92700 . 92701) (symbol 92688 . 92699) (punctuation 92686 . 92687) (symbol 92684 . 92686) (symbol 92675 . 92683) (open-paren 92674 . 92675) (symbol 92659 . 92673) (BOOL 92654 . 92658) (symbol 92647 . 92653) (close-paren 92644 . 92645) (punctuation 92630 . 92631) (punctuation 92629 . 92630) (semantic-list 92625 . 92628) (symbol 92616 . 92624) (RETURN 92609 . 92615) (open-paren 92605 . 92606) (close-paren 92603 . 92604) (symbol 92602 . 92603) (symbol 92590 . 92601) (open-paren 92589 . 92590) (symbol 92581 . 92588) (BOOL 92576 . 92580) (symbol 92569 . 92575) (close-paren 92566 . 92567) (RETURN 92551 . 92557) (punctuation 92522 . 92523) (semantic-list 92505 . 92522) (punctuation 92503 . 92504) (semantic-list 92499 . 92502) (symbol 92495 . 92498) (punctuation 92493 . 92494) (semantic-list 92489 . 92492) (symbol 92481 . 92488) (punctuation 92479 . 92480) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 92467 . 92478) (punctuation 92465 . 92466) (symbol 92458 . 92464) (symbol 92448 . 92457) (punctuation 92414 . 92415) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 92402 . 92409)))) 92393 . 92414) (open-paren 92389 . 92390) (close-paren 92387 . 92388) (symbol 92386 . 92387) (symbol 92374 . 92385) (open-paren 92373 . 92374) (symbol 92365 . 92372) (symbol 92355 . 92364) (symbol 92348 . 92354) (close-paren 92277 . 92278) (punctuation 92262 . 92263) (punctuation 92261 . 92262) (number 92259 . 92260) (punctuation 92257 . 92258) (punctuation 92256 . 92257) (semantic-list 92252 . 92255) (symbol 92244 . 92251) (RETURN 92237 . 92243) (open-paren 92233 . 92234) (close-paren 92231 . 92232) (symbol 92230 . 92231) (symbol 92218 . 92229) (open-paren 92217 . 92218) (symbol 92209 . 92216) (BOOL 92204 . 92208) (symbol 92197 . 92203) (punctuation 92165 . 92166) (close-paren 92164 . 92165) (number 92159 . 92161) (punctuation 92157 . 92158) (symbol 92143 . 92156) (punctuation 92045 . 92046) (symbol 92036 . 92045) (punctuation 92034 . 92035) (symbol 92025 . 92033) (punctuation 92023 . 92024) (symbol 92012 . 92022) (punctuation 92010 . 92011) (symbol 91999 . 92009) (punctuation 91997 . 91998) (symbol 91986 . 91996) (punctuation 91984 . 91985) (symbol 91975 . 91983) (punctuation 91967 . 91968) (symbol 91948 . 91966) (punctuation 91941 . 91942) (number 91932 . 91941) (punctuation 91930 . 91931) (symbol 91920 . 91929) (punctuation 91914 . 91915) (number 91905 . 91914) (punctuation 91903 . 91904) (symbol 91894 . 91902) (punctuation 91888 . 91889) (number 91879 . 91888) (punctuation 91877 . 91878) (symbol 91866 . 91876) (punctuation 91860 . 91861) (number 91851 . 91860) (punctuation 91849 . 91850) (symbol 91838 . 91848) (punctuation 91832 . 91833) (number 91823 . 91832) (punctuation 91821 . 91822) (symbol 91810 . 91820) (punctuation 91804 . 91805) (number 91795 . 91804) (punctuation 91793 . 91794) (symbol 91784 . 91792) (open-paren 91778 . 91779) (symbol 91766 . 91775) (ENUM 91761 . 91765) (punctuation 91565 . 91566) (close-paren 91564 . 91565) (number 91560 . 91561) (punctuation 91558 . 91559) (symbol 91537 . 91557) (punctuation 91531 . 91532) (number 91530 . 91531) (punctuation 91528 . 91529) (symbol 91508 . 91527) (punctuation 91502 . 91503) (number 91501 . 91502) (punctuation 91499 . 91500) (symbol 91478 . 91498) (punctuation 91472 . 91473) (number 91471 . 91472) (punctuation 91469 . 91470) (symbol 91450 . 91468) (punctuation 91444 . 91445) (number 91443 . 91444) (punctuation 91441 . 91442) (symbol 91423 . 91440) (punctuation 91417 . 91418) (number 91416 . 91417) (punctuation 91414 . 91415) (symbol 91397 . 91413) (open-paren 91391 . 91392) (symbol 91375 . 91388) (ENUM 91370 . 91374) (close-paren 90754 . 90755) (punctuation 90747 . 90748) (symbol 90746 . 90747) (punctuation 90745 . 90746) (punctuation 90744 . 90745) (semantic-list 90741 . 90744) (symbol 90734 . 90740) (RETURN 90727 . 90733) (open-paren 90723 . 90724) (close-paren 90721 . 90722) (symbol 90720 . 90721) (symbol 90708 . 90719) (open-paren 90707 . 90708) (symbol 90695 . 90706) (DOUBLE 90688 . 90694) (symbol 90681 . 90687) (close-paren 90678 . 90679) (punctuation 90676 . 90677) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 90658 . 90664) ("type" symbol "Lisp_Float" 90646 . 90656) ("a" symbol "a" 90643 . 90644)))) 90635 . 90676) (RETURN 90628 . 90634) (punctuation 90624 . 90625) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 90613 . 90619)))) 90604 . 90624) (open-paren 90600 . 90601) (close-paren 90598 . 90599) (symbol 90597 . 90598) (symbol 90585 . 90596) (open-paren 90584 . 90585) (symbol 90577 . 90583) (punctuation 90575 . 90576) (symbol 90564 . 90574) (STRUCT 90557 . 90563) (symbol 90550 . 90556) (close-paren 90547 . 90548) (RETURN 90521 . 90527) (open-paren 90517 . 90518) (close-paren 90515 . 90516) (symbol 90514 . 90515) (symbol 90502 . 90513) (open-paren 90501 . 90502) (close-paren 90499 . 90500) (symbol 90493 . 90499) (open-paren 90492 . 90493) (BOOL 90487 . 90491) (symbol 90480 . 90486) (punctuation 90477 . 90478) (close-paren 90476 . 90477) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 90458 . 90464)))) 90447 . 90476) (open-paren 90446 . 90447) (symbol 90439 . 90445) (punctuation 90437 . 90438) (close-paren 90436 . 90437) (semantic-list "(GCALIGNMENT)" 90402 . 90424) (symbol "alignas" 90402 . 90424) (CHAR "char" 90402 . 90424) (semantic-list "(GCALIGNMENT)" 90402 . 90424) (symbol "alignas" 90402 . 90424) (CHAR "char" 90402 . 90424) (open-paren 90327 . 90328) (symbol 90314 . 90324) (STRUCT 90307 . 90313) (close-paren 90270 . 90271) (punctuation 90261 . 90262) (symbol 90260 . 90261) (RETURN 90253 . 90259) (punctuation 90249 . 90250) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 90230 . 90244)))) 90221 . 90249) (open-paren 90217 . 90218) (close-paren 90215 . 90216) (symbol 90214 . 90215) (symbol 90206 . 90213) (open-paren 90205 . 90206) (symbol 90190 . 90204) (punctuation 90188 . 90189) (CONST 90182 . 90187) (symbol 90163 . 90181) (STRUCT 90156 . 90162) (symbol 90149 . 90155) (close-paren 90146 . 90147) (punctuation 90123 . 90124) (punctuation 90122 . 90123) (semantic-list 90118 . 90121) (symbol 90109 . 90117) (RETURN 90102 . 90108) (open-paren 90098 . 90099) (close-paren 90096 . 90097) (symbol 90095 . 90096) (symbol 90087 . 90094) (open-paren 90086 . 90087) (symbol 90071 . 90085) (BOOL 90066 . 90070) (symbol 90059 . 90065) (close-paren 90056 . 90057) (RETURN 90045 . 90051) (open-paren 89999 . 90000) (close-paren 89997 . 89998) (symbol 89996 . 89997) (symbol 89988 . 89995) (open-paren 89987 . 89988) (symbol 89978 . 89986) (symbol 89964 . 89977) (ENUM 89959 . 89963) (symbol 89952 . 89958) (punctuation 89949 . 89950) (close-paren 89948 . 89949) (open-paren 89871 . 89872) (symbol 89850 . 89868) (STRUCT 89843 . 89849) (punctuation 89756 . 89757) (close-paren 89755 . 89756) (open-paren 88818 . 88819) (symbol 88792 . 88815) (STRUCT 88785 . 88791) (punctuation 87708 . 87709) (close-paren 87707 . 87708) (open-paren 87527 . 87528) (symbol 87506 . 87524) (STRUCT 87499 . 87505) (punctuation 87368 . 87369) (close-paren 87367 . 87368) (open-paren 87288 . 87289) (symbol 87274 . 87285) (STRUCT 87267 . 87273) (punctuation 87073 . 87074) (close-paren 87072 . 87073) (open-paren 86998 . 86999) (symbol 86983 . 86995) (STRUCT 86976 . 86982) (punctuation 86781 . 86782) (close-paren 86780 . 86781) (open-paren 86704 . 86705) (symbol 86690 . 86701) (STRUCT 86683 . 86689) (close-paren 86327 . 86328) (punctuation 86308 . 86309) (semantic-list 86304 . 86307) (symbol 86291 . 86303) (punctuation 86289 . 86290) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 86286 . 86287)))) 86267 . 86288) (RETURN 86260 . 86266) (open-paren 86256 . 86257) (close-paren 86254 . 86255) (symbol 86253 . 86254) (symbol 86243 . 86252) (open-paren 86242 . 86243) (symbol 86232 . 86241) (symbol 86220 . 86231) (symbol 86213 . 86219) (close-paren 86211 . 86212) (punctuation 86192 . 86193) (semantic-list 86188 . 86191) (symbol 86176 . 86187) (punctuation 86174 . 86175) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 86171 . 86172)))) 86152 . 86173) (RETURN 86145 . 86151) (open-paren 86141 . 86142) (close-paren 86139 . 86140) (symbol 86138 . 86139) (symbol 86129 . 86137) (open-paren 86128 . 86129) (symbol 86119 . 86127) (symbol 86107 . 86118) (symbol 86100 . 86106) (close-paren 86043 . 86044) (punctuation 86028 . 86029) (punctuation 86027 . 86028) (semantic-list 86023 . 86026) (symbol 86015 . 86022) (RETURN 86008 . 86014) (open-paren 86004 . 86005) (close-paren 86002 . 86003) (symbol 86001 . 86002) (symbol 85989 . 86000) (open-paren 85988 . 85989) (symbol 85979 . 85987) (BOOL 85974 . 85978) (symbol 85967 . 85973) (close-paren 85964 . 85965) (RETURN 85925 . 85931) (open-paren 85921 . 85922) (close-paren 85919 . 85920) (symbol 85918 . 85919) (symbol 85906 . 85917) (open-paren 85905 . 85906) (symbol 85897 . 85904) (BOOL 85892 . 85896) (symbol 85885 . 85891) (close-paren 85882 . 85883) (punctuation 85880 . 85881) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 85861 . 85867) ("type" symbol "Lisp_Vectorlike" 85844 . 85859) ("a" symbol "a" 85841 . 85842)))) 85833 . 85880) (RETURN 85826 . 85832) (punctuation 85822 . 85823) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SQLITEP" 85810 . 85817)))) 85801 . 85822) (open-paren 85797 . 85798) (close-paren 85795 . 85796) (symbol 85794 . 85795) (symbol 85782 . 85793) (open-paren 85781 . 85782) (symbol 85773 . 85780) (punctuation 85771 . 85772) (symbol 85759 . 85770) (STRUCT 85752 . 85758) (symbol 85745 . 85751) (close-paren 85742 . 85743) (semantic-list 85723 . 85726) (open-paren 85700 . 85701) (close-paren 85698 . 85699) (symbol 85697 . 85698) (symbol 85685 . 85696) (open-paren 85684 . 85685) (symbol 85671 . 85683) (VOID 85666 . 85670) (symbol 85659 . 85665) (close-paren 85656 . 85657) (RETURN 85617 . 85623) (open-paren 85613 . 85614) (close-paren 85611 . 85612) (symbol 85610 . 85611) (symbol 85598 . 85609) (open-paren 85597 . 85598) (symbol 85590 . 85596) (BOOL 85585 . 85589) (symbol 85578 . 85584) (close-paren 85575 . 85576) (RETURN 85536 . 85542) (open-paren 85532 . 85533) (close-paren 85530 . 85531) (symbol 85529 . 85530) (symbol 85517 . 85528) (open-paren 85516 . 85517) (symbol 85508 . 85515) (BOOL 85503 . 85507) (symbol 85496 . 85502) (close-paren 85493 . 85494) (punctuation 85491 . 85492) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 85470 . 85476) ("type" symbol "Lisp_Vectorlike" 85453 . 85468) ("a" symbol "a" 85450 . 85451)))) 85442 . 85491) (RETURN 85435 . 85441) (punctuation 85431 . 85432) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "USER_PTRP" 85417 . 85426)))) 85408 . 85431) (open-paren 85404 . 85405) (close-paren 85402 . 85403) (symbol 85401 . 85402) (symbol 85389 . 85400) (open-paren 85388 . 85389) (symbol 85378 . 85387) (punctuation 85376 . 85377) (symbol 85362 . 85375) (STRUCT 85355 . 85361) (symbol 85348 . 85354) (close-paren 85345 . 85346) (RETURN 85304 . 85310) (open-paren 85300 . 85301) (close-paren 85298 . 85299) (symbol 85297 . 85298) (symbol 85285 . 85296) (open-paren 85284 . 85285) (symbol 85274 . 85283) (BOOL 85269 . 85273) (symbol 85262 . 85268) (close-paren 85259 . 85260) (punctuation 85253 . 85254) (punctuation 85252 . 85253) (semantic-list 85249 . 85252) (symbol 85232 . 85248) (RETURN 85225 . 85231) (semantic-list 85149 . 85173) (IF 85146 . 85148) (open-paren 85142 . 85143) (close-paren 85140 . 85141) (symbol 85139 . 85140) (symbol 85127 . 85138) (open-paren 85126 . 85127) (symbol 85106 . 85125) (symbol 85094 . 85105) (symbol 85087 . 85093) (close-paren 85084 . 85085) (punctuation 85078 . 85079) (punctuation 85077 . 85078) (semantic-list 85074 . 85077) (symbol 85057 . 85073) (RETURN 85050 . 85056) (semantic-list 84974 . 84998) (IF 84971 . 84973) (open-paren 84967 . 84968) (close-paren 84965 . 84966) (symbol 84964 . 84965) (symbol 84952 . 84963) (open-paren 84951 . 84952) (symbol 84931 . 84950) (symbol 84919 . 84930) (symbol 84912 . 84918) (close-paren 84909 . 84910) (punctuation 84907 . 84908) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 84887 . 84893) ("type" symbol "Lisp_Vectorlike" 84870 . 84885) ("a" symbol "a" 84867 . 84868)))) 84859 . 84907) (RETURN 84852 . 84858) (punctuation 84848 . 84849) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 84835 . 84843)))) 84826 . 84848) (open-paren 84822 . 84823) (close-paren 84820 . 84821) (symbol 84819 . 84820) (symbol 84807 . 84818) (open-paren 84806 . 84807) (symbol 84797 . 84805) (punctuation 84795 . 84796) (symbol 84782 . 84794) (STRUCT 84775 . 84781) (symbol 84768 . 84774) (close-paren 84765 . 84766) (RETURN 84725 . 84731) (open-paren 84721 . 84722) (close-paren 84719 . 84720) (symbol 84718 . 84719) (symbol 84706 . 84717) (open-paren 84705 . 84706) (symbol 84696 . 84704) (BOOL 84691 . 84695) (symbol 84684 . 84690) (close-paren 84681 . 84682) (punctuation 84679 . 84680) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 84660 . 84666) ("type" symbol "Lisp_Vectorlike" 84643 . 84658) ("a" symbol "a" 84640 . 84641)))) 84632 . 84679) (RETURN 84625 . 84631) (punctuation 84621 . 84622) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 84609 . 84616)))) 84600 . 84621) (open-paren 84596 . 84597) (close-paren 84594 . 84595) (symbol 84593 . 84594) (symbol 84581 . 84592) (open-paren 84580 . 84581) (symbol 84572 . 84579) (punctuation 84570 . 84571) (symbol 84558 . 84569) (STRUCT 84551 . 84557) (symbol 84544 . 84550) (close-paren 84541 . 84542) (RETURN 84502 . 84508) (open-paren 84498 . 84499) (close-paren 84496 . 84497) (symbol 84495 . 84496) (symbol 84483 . 84494) (open-paren 84482 . 84483) (symbol 84474 . 84481) (BOOL 84469 . 84473) (symbol 84462 . 84468) (close-paren 84459 . 84460) (punctuation 84457 . 84458) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 84435 . 84441) ("type" symbol "Lisp_Vectorlike" 84418 . 84433) ("a" symbol "a" 84415 . 84416)))) 84407 . 84457) (RETURN 84400 . 84406) (punctuation 84396 . 84397) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 84381 . 84391)))) 84372 . 84396) (open-paren 84368 . 84369) (close-paren 84366 . 84367) (symbol 84365 . 84366) (symbol 84353 . 84364) (open-paren 84352 . 84353) (symbol 84341 . 84351) (punctuation 84339 . 84340) (symbol 84324 . 84338) (STRUCT 84317 . 84323) (symbol 84310 . 84316) (close-paren 84307 . 84308) (RETURN 84265 . 84271) (open-paren 84261 . 84262) (close-paren 84259 . 84260) (symbol 84258 . 84259) (symbol 84246 . 84257) (open-paren 84245 . 84246) (symbol 84234 . 84244) (BOOL 84229 . 84233) (symbol 84222 . 84228) (punctuation 84129 . 84130) (close-paren 84111 . 84112) (open-paren 83718 . 83719) (symbol 83701 . 83715) (STRUCT 83694 . 83700) (punctuation 83662 . 83663) (close-paren 83644 . 83645) (open-paren 83567 . 83568) (symbol 83553 . 83566) (STRUCT 83546 . 83552) (punctuation 83543 . 83544) (close-paren 83525 . 83526) (open-paren 83386 . 83387) (symbol 83374 . 83385) (STRUCT 83367 . 83373) (close-paren 83364 . 83365) (punctuation 83354 . 83355) (punctuation 83353 . 83354) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 83332 . 83338) ("type" symbol "Lisp_Vectorlike" 83315 . 83330) ("a" symbol "a" 83312 . 83313)))) 83304 . 83353) (RETURN 83297 . 83303) (RETURN 83272 . 83278) (semantic-list 83254 . 83267) (IF 83251 . 83253) (punctuation 83247 . 83248) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "mint_ptrp" 83233 . 83242)))) 83224 . 83247) (open-paren 83220 . 83221) (close-paren 83218 . 83219) (symbol 83217 . 83218) (symbol 83205 . 83216) (open-paren 83204 . 83205) (symbol 83190 . 83203) (punctuation 83188 . 83189) (VOID 83183 . 83187) (symbol 83176 . 83182) (close-paren 83173 . 83174) (punctuation 83137 . 83138) (punctuation 83136 . 83137) (semantic-list 83132 . 83135) (symbol 83124 . 83131) (RETURN 83117 . 83123) (open-paren 83113 . 83114) (close-paren 83111 . 83112) (symbol 83110 . 83111) (symbol 83098 . 83109) (open-paren 83097 . 83098) (symbol 83087 . 83096) (BOOL 83082 . 83086) (symbol 83075 . 83081) (close-paren 83072 . 83073) (punctuation 83051 . 83052) (symbol 83047 . 83050) (punctuation 83045 . 83046) (symbol 83043 . 83044) (punctuation 83041 . 83042) (punctuation 83040 . 83041) (semantic-list 83034 . 83039) (symbol 83023 . 83033) (punctuation 83021 . 83022) (punctuation 83020 . 83021) (semantic-list 83014 . 83019) (symbol 83006 . 83013) (RETURN 82999 . 83005) (open-paren 82951 . 82952) (close-paren 82949 . 82950) (symbol 82948 . 82949) (punctuation 82947 . 82948) (VOID 82942 . 82946) (open-paren 82941 . 82942) (symbol 82927 . 82940) (symbol 82915 . 82926) (symbol 82908 . 82914) (punctuation 82056 . 82057) (close-paren 82055 . 82056) (punctuation 82054 . 82055) (VOID 82049 . 82053) (open-paren 82048 . 82049) (symbol 82034 . 82047) (symbol 82022 . 82033) (EXTERN 82015 . 82021) (punctuation 82012 . 82013) (close-paren 81994 . 81995) (open-paren 81935 . 81936) (symbol 81919 . 81932) (STRUCT 81912 . 81918) (punctuation 81909 . 81910) (close-paren 81891 . 81892) (open-paren 81753 . 81754) (symbol 81254 . 81266) (STRUCT 81247 . 81253) (punctuation 81141 . 81142) (close-paren 81123 . 81124) (open-paren 79332 . 79333) (symbol 79320 . 79331) (STRUCT 79313 . 79319) (close-paren 79310 . 79311) (punctuation 79308 . 79309) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 79301 . 79308) (punctuation 79299 . 79300) (semantic-list 79256 . 79298) (RETURN 79249 . 79255) (open-paren 79245 . 79246) (close-paren 79243 . 79244) (symbol 79242 . 79243) (symbol 79231 . 79241) (open-paren 79230 . 79231) (symbol 79216 . 79229) (symbol 79205 . 79215) (symbol 79198 . 79204) (close-paren 79136 . 79137) (punctuation 79131 . 79132) (semantic-list 79102 . 79130) (punctuation 79100 . 79101) (semantic-list 79091 . 79099) (RETURN 79084 . 79090) (open-paren 79080 . 79081) (close-paren 79078 . 79079) (symbol 79077 . 79078) (symbol 79066 . 79076) (punctuation 79064 . 79065) (symbol 79063 . 79064) (symbol 79052 . 79062) (open-paren 79051 . 79052) (symbol 79036 . 79050) (symbol 79025 . 79035) (symbol 79018 . 79024) (punctuation 78575 . 78576) (close-paren 78574 . 78575) (number 78571 . 78573) (punctuation 78569 . 78570) (symbol 78551 . 78568) (open-paren 78549 . 78550) (symbol 78531 . 78548) (ENUM 78526 . 78530) (punctuation 78468 . 78469) (close-paren 78467 . 78468) (symbol 78456 . 78467) (open-paren 78455 . 78456) (symbol 78437 . 78454) (VOID 78432 . 78436) (close-paren 78429 . 78430) (RETURN 78416 . 78422) (open-paren 78354 . 78355) (close-paren 78352 . 78353) (symbol 78351 . 78352) (punctuation 78350 . 78351) (symbol 78334 . 78349) (STRUCT 78327 . 78333) (CONST 78321 . 78326) (open-paren 78320 . 78321) (symbol 78304 . 78319) (symbol 78294 . 78303) (symbol 78287 . 78293) (close-paren 78242 . 78243) (punctuation 78229 . 78230) (punctuation 78228 . 78229) (RETURN 78214 . 78220) (open-paren 78210 . 78211) (close-paren 78208 . 78209) (symbol 78205 . 78208) (symbol 78195 . 78204) (punctuation 78193 . 78194) (symbol 78192 . 78193) (punctuation 78191 . 78192) (symbol 78175 . 78190) (STRUCT 78168 . 78174) (CONST 78162 . 78167) (open-paren 78161 . 78162) (symbol 78151 . 78160) (symbol 78139 . 78150) (symbol 78132 . 78138) (close-paren 78059 . 78060) (number 78055 . 78056) (punctuation 78053 . 78054) (punctuation 78047 . 78048) (number 78045 . 78046) (punctuation 78029 . 78030) (punctuation 78028 . 78029) (RETURN 78014 . 78020) (open-paren 78010 . 78011) (close-paren 78008 . 78009) (symbol 78005 . 78008) (symbol 77995 . 78004) (punctuation 77993 . 77994) (symbol 77992 . 77993) (punctuation 77991 . 77992) (symbol 77975 . 77990) (STRUCT 77968 . 77974) (CONST 77962 . 77967) (open-paren 77961 . 77962) (symbol 77950 . 77960) (symbol 77938 . 77949) (symbol 77931 . 77937) (close-paren 77867 . 77868) (punctuation 77859 . 77860) (number 77857 . 77858) (punctuation 77841 . 77842) (punctuation 77840 . 77841) (RETURN 77826 . 77832) (open-paren 77822 . 77823) (close-paren 77820 . 77821) (symbol 77817 . 77820) (symbol 77807 . 77816) (punctuation 77805 . 77806) (symbol 77804 . 77805) (punctuation 77803 . 77804) (symbol 77787 . 77802) (STRUCT 77780 . 77786) (CONST 77774 . 77779) (open-paren 77773 . 77774) (symbol 77764 . 77772) (symbol 77752 . 77763) (symbol 77745 . 77751) (close-paren 77594 . 77595) (punctuation 77592 . 77593) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77569 . 77575) ("type" symbol "Lisp_Vectorlike" 77552 . 77567) ("a" symbol "a" 77549 . 77550)))) 77541 . 77592) (RETURN 77534 . 77540) (punctuation 77530 . 77531) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 77513 . 77525)))) 77504 . 77530) (open-paren 77500 . 77501) (close-paren 77498 . 77499) (symbol 77497 . 77498) (symbol 77485 . 77496) (open-paren 77484 . 77485) (symbol 77472 . 77483) (punctuation 77470 . 77471) (symbol 77454 . 77469) (STRUCT 77447 . 77453) (symbol 77440 . 77446) (close-paren 77437 . 77438) (RETURN 77394 . 77400) (open-paren 77390 . 77391) (close-paren 77388 . 77389) (symbol 77387 . 77388) (symbol 77375 . 77386) (open-paren 77374 . 77375) (symbol 77361 . 77373) (BOOL 77356 . 77360) (symbol 77349 . 77355) (punctuation 77346 . 77347) (close-paren 77345 . 77346) (symbol 77334 . 77345) (punctuation 77332 . 77333) (punctuation 77331 . 77332) (semantic-list 77300 . 77330) (symbol 77291 . 77299) (open-paren 77290 . 77291) (symbol 77283 . 77289) (punctuation 77239 . 77240) (close-paren 77221 . 77222) (punctuation 76180 . 76181) (MUTABLE 76173 . 76180) (BOOL 76168 . 76172) (open-paren 74542 . 74543) (symbol 74526 . 74541) (STRUCT 74519 . 74525) (punctuation 74516 . 74517) (close-paren 74515 . 74516) (open-paren 74043 . 74044) (symbol 74027 . 74042) (STRUCT 74020 . 74026) (close-paren 73622 . 73623) (punctuation 73620 . 73621) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 73616 . 73619)))) 73590 . 73620) (RETURN 73583 . 73589) (open-paren 73579 . 73580) (close-paren 73577 . 73578) (symbol 73574 . 73577) (symbol 73562 . 73573) (open-paren 73561 . 73562) (close-paren 73559 . 73560) (symbol 73542 . 73559) (open-paren 73541 . 73542) (INT 73537 . 73540) (symbol 73530 . 73536) (close-paren 73306 . 73307) (punctuation 73304 . 73305) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 73300 . 73303)))) 73269 . 73304) (RETURN 73262 . 73268) (open-paren 73258 . 73259) (close-paren 73256 . 73257) (symbol 73253 . 73256) (symbol 73241 . 73252) (open-paren 73240 . 73241) (close-paren 73238 . 73239) (symbol 73216 . 73238) (open-paren 73215 . 73216) (INT 73211 . 73214) (symbol 73204 . 73210) (close-paren 73037 . 73038) (punctuation 72999 . 73000) (punctuation 72998 . 72999) (symbol 72989 . 72997) (punctuation 72988 . 72989) (symbol 72987 . 72988) (punctuation 72986 . 72987) (symbol 72985 . 72986) (punctuation 72984 . 72985) (punctuation 72983 . 72984) (semantic-list 72978 . 72983) (symbol 72970 . 72977) (RETURN 72963 . 72969) (open-paren 72959 . 72960) (close-paren 72957 . 72958) (symbol 72954 . 72957) (symbol 72942 . 72953) (open-paren 72941 . 72942) (symbol 72904 . 72940) (BOOL 72899 . 72903) (symbol 72892 . 72898) (close-paren 72828 . 72829) (punctuation 72807 . 72808) (punctuation 72806 . 72807) (symbol 72797 . 72805) (punctuation 72796 . 72797) (symbol 72795 . 72796) (punctuation 72794 . 72795) (symbol 72793 . 72794) (punctuation 72792 . 72793) (punctuation 72791 . 72792) (semantic-list 72786 . 72791) (symbol 72778 . 72785) (RETURN 72771 . 72777) (open-paren 72767 . 72768) (close-paren 72765 . 72766) (symbol 72762 . 72765) (symbol 72750 . 72761) (open-paren 72749 . 72750) (symbol 72731 . 72748) (BOOL 72726 . 72730) (symbol 72719 . 72725) (close-paren 72664 . 72665) (punctuation 72657 . 72658) (symbol 72656 . 72657) (punctuation 72655 . 72656) (symbol 72654 . 72655) (punctuation 72653 . 72654) (punctuation 72652 . 72653) (semantic-list 72647 . 72652) (symbol 72639 . 72646) (RETURN 72632 . 72638) (open-paren 72628 . 72629) (close-paren 72626 . 72627) (symbol 72623 . 72626) (symbol 72611 . 72622) (open-paren 72610 . 72611) (symbol 72598 . 72609) (symbol 72586 . 72597) (symbol 72579 . 72585) (close-paren 72576 . 72577) (punctuation 72563 . 72564) (symbol 72560 . 72563) (punctuation 72559 . 72560) (symbol 72556 . 72559) (punctuation 72555 . 72556) (symbol 72554 . 72555) (punctuation 72553 . 72554) (symbol 72552 . 72553) (punctuation 72551 . 72552) (punctuation 72550 . 72551) (symbol 72547 . 72550) (open-paren 72487 . 72488) (close-paren 72485 . 72486) (symbol 72484 . 72485) (punctuation 72483 . 72484) (CONST 72477 . 72482) (VOID 72472 . 72476) (punctuation 72470 . 72471) (symbol 72467 . 72470) (punctuation 72466 . 72467) (symbol 72454 . 72465) (STRUCT 72447 . 72453) (open-paren 72446 . 72447) (symbol 72431 . 72445) (VOID 72426 . 72430) (symbol 72419 . 72425) (close-paren 72417 . 72418) (punctuation 72407 . 72408) (symbol 72404 . 72407) (punctuation 72403 . 72404) (symbol 72402 . 72403) (punctuation 72401 . 72402) (symbol 72400 . 72401) (punctuation 72399 . 72400) (punctuation 72398 . 72399) (symbol 72395 . 72398) (open-paren 72335 . 72336) (close-paren 72333 . 72334) (symbol 72332 . 72333) (punctuation 72331 . 72332) (symbol 72307 . 72330) (STRUCT 72300 . 72306) (punctuation 72298 . 72299) (symbol 72295 . 72298) (punctuation 72294 . 72295) (symbol 72282 . 72293) (STRUCT 72275 . 72281) (open-paren 72274 . 72275) (symbol 72259 . 72273) (VOID 72254 . 72258) (symbol 72247 . 72253) (close-paren 72245 . 72246) (punctuation 72233 . 72234) (symbol 72230 . 72233) (punctuation 72229 . 72230) (symbol 72228 . 72229) (punctuation 72227 . 72228) (symbol 72226 . 72227) (punctuation 72225 . 72226) (punctuation 72224 . 72225) (symbol 72221 . 72224) (open-paren 72162 . 72163) (close-paren 72160 . 72161) (symbol 72159 . 72160) (punctuation 72158 . 72159) (symbol 72146 . 72157) (STRUCT 72139 . 72145) (punctuation 72137 . 72138) (symbol 72134 . 72137) (punctuation 72133 . 72134) (symbol 72121 . 72132) (STRUCT 72114 . 72120) (open-paren 72113 . 72114) (symbol 72096 . 72112) (VOID 72091 . 72095) (symbol 72084 . 72090) (close-paren 72081 . 72082) (punctuation 72079 . 72080) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 72077 . 72078) ("sym" symbol "sym" 72072 . 72075)))) 72049 . 72079) (open-paren 72045 . 72046) (close-paren 72043 . 72044) (symbol 72042 . 72043) (symbol 72030 . 72041) (punctuation 72028 . 72029) (symbol 72025 . 72028) (punctuation 72024 . 72025) (symbol 72012 . 72023) (STRUCT 72005 . 72011) (open-paren 72004 . 72005) (close-paren 72002 . 72003) (symbol 71988 . 72002) (open-paren 71987 . 71988) (VOID 71982 . 71986) (symbol 71975 . 71981) (close-paren 71972 . 71973) (punctuation 71966 . 71967) (symbol 71963 . 71966) (punctuation 71962 . 71963) (symbol 71961 . 71962) (punctuation 71960 . 71961) (symbol 71959 . 71960) (punctuation 71958 . 71959) (punctuation 71957 . 71958) (symbol 71954 . 71957) (RETURN 71947 . 71953) (open-paren 71865 . 71866) (close-paren 71863 . 71864) (symbol 71860 . 71863) (punctuation 71859 . 71860) (symbol 71847 . 71858) (STRUCT 71840 . 71846) (open-paren 71839 . 71840) (symbol 71828 . 71838) (symbol 71820 . 71827) (symbol 71813 . 71819) (close-paren 71811 . 71812) (punctuation 71805 . 71806) (symbol 71802 . 71805) (punctuation 71801 . 71802) (symbol 71800 . 71801) (punctuation 71799 . 71800) (symbol 71798 . 71799) (punctuation 71797 . 71798) (punctuation 71796 . 71797) (symbol 71793 . 71796) (RETURN 71786 . 71792) (open-paren 71711 . 71712) (close-paren 71709 . 71710) (symbol 71706 . 71709) (punctuation 71705 . 71706) (symbol 71693 . 71704) (STRUCT 71686 . 71692) (open-paren 71685 . 71686) (symbol 71674 . 71684) (punctuation 71672 . 71673) (symbol 71648 . 71671) (STRUCT 71641 . 71647) (symbol 71634 . 71640) (close-paren 71632 . 71633) (punctuation 71624 . 71625) (symbol 71621 . 71624) (punctuation 71620 . 71621) (symbol 71619 . 71620) (punctuation 71618 . 71619) (symbol 71617 . 71618) (punctuation 71616 . 71617) (punctuation 71615 . 71616) (symbol 71612 . 71615) (RETURN 71605 . 71611) (open-paren 71529 . 71530) (close-paren 71527 . 71528) (symbol 71524 . 71527) (punctuation 71523 . 71524) (symbol 71511 . 71522) (STRUCT 71504 . 71510) (open-paren 71503 . 71504) (symbol 71490 . 71502) (punctuation 71488 . 71489) (symbol 71476 . 71487) (STRUCT 71469 . 71475) (symbol 71462 . 71468) (close-paren 71459 . 71460) (punctuation 71457 . 71458) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 71453 . 71456)))) 71434 . 71457) (RETURN 71427 . 71433) (open-paren 71423 . 71424) (close-paren 71421 . 71422) (symbol 71418 . 71421) (punctuation 71417 . 71418) (symbol 71405 . 71416) (STRUCT 71398 . 71404) (open-paren 71397 . 71398) (close-paren 71395 . 71396) (symbol 71385 . 71395) (open-paren 71384 . 71385) (symbol 71372 . 71383) (symbol 71365 . 71371) (close-paren 70536 . 70537) (punctuation 70534 . 70535) (semantic-list 70459 . 70534) (RETURN 70452 . 70458) (open-paren 70448 . 70449) (close-paren 70446 . 70447) (symbol 70444 . 70446) (punctuation 70443 . 70444) (symbol 70427 . 70442) (STRUCT 70420 . 70426) (open-paren 70419 . 70420) (symbol 70396 . 70418) (INT 70392 . 70395) (symbol 70385 . 70391) (punctuation 70317 . 70318) (close-paren 70316 . 70317) (semantic-list 70303 . 70316) (SIZEOF 70296 . 70302) (punctuation 70294 . 70295) (symbol 70272 . 70293) (punctuation 70270 . 70271) (symbol 70258 . 70269) (punctuation 70256 . 70257) (punctuation 70255 . 70256) (semantic-list 70215 . 70253) (symbol 70206 . 70214) (open-paren 70205 . 70206) (symbol 70198 . 70204) (punctuation 70196 . 70197) (close-paren 70195 . 70196) (semantic-list 70182 . 70195) (SIZEOF 70175 . 70181) (punctuation 70173 . 70174) (symbol 70147 . 70172) (punctuation 70145 . 70146) (symbol 70133 . 70144) (punctuation 70131 . 70132) (punctuation 70130 . 70131) (semantic-list 70096 . 70128) (symbol 70087 . 70095) (open-paren 70086 . 70087) (symbol 70079 . 70085) (punctuation 70077 . 70078) (close-paren 70076 . 70077) (symbol 70065 . 70076) (punctuation 70063 . 70064) (punctuation 70062 . 70063) (semantic-list 70029 . 70061) (symbol 70020 . 70028) (open-paren 70019 . 70020) (symbol 70012 . 70018) (punctuation 69968 . 69969) (close-paren 69967 . 69968) (number 69963 . 69964) (punctuation 69961 . 69962) (semantic-list #("(offsetof (type, lastlispfield) + word_size < header_size		\\
   ? 0 : (offsetof (type, lastlispfield) + word_size - header_size) / word_size)" 0 1 (macros (("lastlispfield" symbol "Lisp_Sub_Char_Table" 69930 . 69949) ("type" STRUCT "struct" 69923 . 69929)))) 69908 . 69960) (punctuation 69906 . 69907) (symbol 69878 . 69899) (punctuation 69726 . 69727) (semantic-list 69641 . 69726) (punctuation 69639 . 69640) (symbol 69607 . 69632) (open-paren 69435 . 69436) (symbol 69413 . 69432) (ENUM 69408 . 69412) (close-paren 69405 . 69406) (punctuation 69403 . 69404) (semantic-list 69342 . 69403) (punctuation 69340 . 69341) (punctuation 69339 . 69340) (semantic-list 69324 . 69329) (symbol 69316 . 69323) (punctuation 69314 . 69315) (punctuation 69313 . 69314) (semantic-list 69307 . 69312) (symbol 69299 . 69306) (RETURN 69292 . 69298) (open-paren 69288 . 69289) (close-paren 69286 . 69287) (symbol 69283 . 69286) (symbol 69271 . 69282) (open-paren 69270 . 69271) (symbol 69252 . 69269) (BOOL 69247 . 69251) (symbol 69240 . 69246) (close-paren 69071 . 69072) (punctuation 69067 . 69068) (punctuation 69066 . 69067) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" UNION "union" 69042 . 69047) ("type" symbol "Lisp_Vectorlike" 69025 . 69040) ("a" symbol "a" 69022 . 69023)))) 69014 . 69066) (punctuation 69013 . 69014) (RETURN 69006 . 69012) (punctuation 69002 . 69003) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 68992 . 68997)))) 68983 . 69002) (open-paren 68979 . 68980) (close-paren 68977 . 68978) (symbol 68976 . 68977) (symbol 68964 . 68975) (open-paren 68963 . 68964) (symbol 68957 . 68962) (punctuation 68955 . 68956) (symbol 68945 . 68954) (STRUCT 68938 . 68944) (symbol 68931 . 68937) (close-paren 68928 . 68929) (RETURN 68891 . 68897) (open-paren 68887 . 68888) (close-paren 68885 . 68886) (symbol 68884 . 68885) (symbol 68872 . 68883) (open-paren 68871 . 68872) (symbol 68865 . 68870) (BOOL 68860 . 68864) (symbol 68853 . 68859) (punctuation 68850 . 68851) (close-paren 68849 . 68850) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" UNION "union" 68825 . 68830)))) 68814 . 68849) (open-paren 68813 . 68814) (symbol 68806 . 68812) (punctuation 68804 . 68805) (close-paren 68803 . 68804) (semantic-list "(GCALIGNMENT)" 68778 . 68800) (symbol "alignas" 68778 . 68800) (CHAR "char" 68778 . 68800) (open-paren 68748 . 68749) (symbol 68728 . 68745) (UNION 68722 . 68727) (punctuation 68720 . 68721) (close-paren 68702 . 68703) (open-paren 67493 . 67494) (symbol 67481 . 67490) (STRUCT 67474 . 67480) (close-paren 67314 . 67315) (ELSE 67274 . 67278) (punctuation 67253 . 67254) (punctuation 67252 . 67253) (semantic-list 67248 . 67252) (semantic-list 67136 . 67202) (IF 67133 . 67135) (open-paren 67129 . 67130) (close-paren 67127 . 67128) (symbol 67124 . 67127) (symbol 67112 . 67123) (punctuation 67110 . 67111) (symbol 67107 . 67110) (INT 67103 . 67106) (punctuation 67101 . 67102) (symbol 67099 . 67101) (symbol 67087 . 67098) (open-paren 67086 . 67087) (symbol 67071 . 67085) (VOID 67066 . 67070) (symbol 67059 . 67065) (close-paren 66920 . 66921) (punctuation 66918 . 66919) (semantic-list 66832 . 66918) (RETURN 66825 . 66831) (open-paren 66821 . 66822) (close-paren 66819 . 66820) (symbol 66816 . 66819) (INT 66812 . 66815) (punctuation 66810 . 66811) (symbol 66808 . 66810) (symbol 66796 . 66807) (open-paren 66795 . 66796) (symbol 66780 . 66794) (symbol 66768 . 66779) (symbol 66761 . 66767) (close-paren 66639 . 66640) (semantic-list 66407 . 66638) (semantic-list 66312 . 66402) (FOR 66308 . 66311) (open-paren 66304 . 66305) (close-paren 66302 . 66303) (symbol 66299 . 66302) (symbol 66289 . 66298) (punctuation 66287 . 66288) (symbol 66285 . 66287) (symbol 66273 . 66284) (open-paren 66272 . 66273) (symbol 66251 . 66271) (symbol 66239 . 66250) (symbol 66232 . 66238) (close-paren 66229 . 66230) (punctuation 66227 . 66228) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 66200 . 66206) ("type" symbol "Lisp_Vectorlike" 66183 . 66198) ("a" symbol "a" 66180 . 66181)))) 66172 . 66227) (RETURN 66165 . 66171) (punctuation 66161 . 66162) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 66140 . 66156)))) 66131 . 66161) (open-paren 66127 . 66128) (close-paren 66125 . 66126) (symbol 66124 . 66125) (symbol 66112 . 66123) (open-paren 66111 . 66112) (symbol 66095 . 66110) (punctuation 66093 . 66094) (symbol 66073 . 66092) (STRUCT 66066 . 66072) (symbol 66059 . 66065) (close-paren 66056 . 66057) (RETURN 66009 . 66015) (open-paren 66005 . 66006) (close-paren 66003 . 66004) (symbol 66002 . 66003) (symbol 65990 . 66001) (open-paren 65989 . 65990) (symbol 65972 . 65988) (BOOL 65967 . 65971) (symbol 65960 . 65966) (punctuation 65957 . 65958) (close-paren 65939 . 65940) (open-paren 65178 . 65179) (symbol 65156 . 65175) (STRUCT 65149 . 65155) (close-paren 65146 . 65147) (punctuation 65144 . 65145) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 65121 . 65127) ("type" symbol "Lisp_Vectorlike" 65104 . 65119) ("a" symbol "a" 65101 . 65102)))) 65093 . 65144) (RETURN 65086 . 65092) (punctuation 65082 . 65083) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 65065 . 65077)))) 65056 . 65082) (open-paren 65052 . 65053) (close-paren 65050 . 65051) (symbol 65049 . 65050) (symbol 65037 . 65048) (open-paren 65036 . 65037) (symbol 65024 . 65035) (punctuation 65022 . 65023) (symbol 65006 . 65021) (STRUCT 64999 . 65005) (symbol 64992 . 64998) (close-paren 64989 . 64990) (RETURN 64946 . 64952) (open-paren 64942 . 64943) (close-paren 64940 . 64941) (symbol 64939 . 64940) (symbol 64927 . 64938) (open-paren 64926 . 64927) (symbol 64913 . 64925) (BOOL 64908 . 64912) (symbol 64901 . 64907) (punctuation 64898 . 64899) (close-paren 64880 . 64881) (open-paren 63833 . 63834) (symbol 63815 . 63830) (STRUCT 63808 . 63814) (punctuation 63805 . 63806) (close-paren 63804 . 63805) (number 63803 . 63804) (open-paren 63802 . 63803) (symbol 63790 . 63802) (INT 63786 . 63789) (CONST 63780 . 63785) (EXTERN 63773 . 63779) (punctuation 63770 . 63771) (close-paren 63769 . 63770) (number 63765 . 63766) (punctuation 63763 . 63764) (symbol 63743 . 63762) (punctuation 63737 . 63738) (number 63736 . 63737) (punctuation 63734 . 63735) (symbol 63714 . 63733) (punctuation 63708 . 63709) (number 63707 . 63708) (punctuation 63705 . 63706) (symbol 63685 . 63704) (punctuation 63679 . 63680) (number 63678 . 63679) (punctuation 63676 . 63677) (symbol 63656 . 63675) (open-paren 63650 . 63651) (symbol 63630 . 63647) (ENUM 63625 . 63629) (close-paren 62914 . 62915) (punctuation 62912 . 62913) (number 62908 . 62912) (punctuation 62906 . 62907) (symbol 62904 . 62905) (punctuation 62902 . 62903) (punctuation 62901 . 62902) (symbol 62899 . 62900) (punctuation 62897 . 62898) (punctuation 62896 . 62897) (number 62894 . 62895) (RETURN 62887 . 62893) (open-paren 62883 . 62884) (close-paren 62881 . 62882) (symbol 62880 . 62881) (symbol 62871 . 62879) (open-paren 62870 . 62871) (symbol 62857 . 62869) (BOOL 62852 . 62856) (symbol 62845 . 62851) (close-paren 62187 . 62188) (number 62175 . 62176) (punctuation 62090 . 62091) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 62078 . 62079)))) 62069 . 62090) (open-paren 62065 . 62066) (close-paren 62063 . 62064) (symbol 62057 . 62063) (symbol 62047 . 62056) (punctuation 62045 . 62046) (symbol 62044 . 62045) (punctuation 62043 . 62044) (VOID 62038 . 62042) (open-paren 62037 . 62038) (symbol 62028 . 62036) (VOID 62023 . 62027) (symbol 62016 . 62022) (punctuation 61888 . 61889) (close-paren 61887 . 61888) (number 61885 . 61886) (punctuation 61883 . 61884) (punctuation 61882 . 61883) (symbol 61870 . 61881) (punctuation 61868 . 61869) (punctuation 61867 . 61868) (number 61865 . 61866) (punctuation 61863 . 61864) (punctuation 61862 . 61863) (symbol 61856 . 61861) (punctuation 61854 . 61855) (symbol 61842 . 61853) (open-paren 61840 . 61841) (ENUM 61835 . 61839) (close-paren 61481 . 61482) (punctuation 61459 . 61460) (punctuation 61458 . 61459) (semantic-list 61451 . 61458) (symbol 61443 . 61450) (punctuation 61439 . 61440) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 61404 . 61405)))) 61395 . 61439) (open-paren 61251 . 61252) (close-paren 61249 . 61250) (symbol 61246 . 61249) (symbol 61234 . 61245) (punctuation 61232 . 61233) (symbol 61229 . 61232) (symbol 61219 . 61228) (punctuation 61217 . 61218) (symbol 61212 . 61217) (symbol 61200 . 61211) (open-paren 61199 . 61200) (symbol 61191 . 61198) (VOID 61186 . 61190) (symbol 61179 . 61185) (close-paren 61176 . 61177) (punctuation 61154 . 61155) (punctuation 61153 . 61154) (semantic-list 61146 . 61153) (symbol 61138 . 61145) (punctuation 61134 . 61135) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 61102 . 61103)))) 61093 . 61134) (open-paren 61089 . 61090) (close-paren 61087 . 61088) (symbol 61084 . 61087) (symbol 61072 . 61083) (punctuation 61070 . 61071) (symbol 61067 . 61070) (symbol 61057 . 61066) (punctuation 61055 . 61056) (symbol 61050 . 61055) (symbol 61038 . 61049) (open-paren 61037 . 61038) (symbol 61032 . 61036) (VOID 61027 . 61031) (symbol 61020 . 61026) (close-paren 61017 . 61018) (punctuation 61001 . 61002) (punctuation 61000 . 61001) (semantic-list 60993 . 61000) (symbol 60985 . 60992) (punctuation 60983 . 60984) (RETURN 60976 . 60982) (punctuation 60972 . 60973) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 60936 . 60937)))) 60927 . 60972) (open-paren 60923 . 60924) (close-paren 60921 . 60922) (symbol 60918 . 60921) (symbol 60908 . 60917) (punctuation 60906 . 60907) (symbol 60901 . 60906) (symbol 60889 . 60900) (open-paren 60888 . 60889) (symbol 60878 . 60887) (punctuation 60876 . 60877) (symbol 60864 . 60875) (symbol 60857 . 60863) (close-paren 60854 . 60855) (punctuation 60838 . 60839) (punctuation 60837 . 60838) (semantic-list 60830 . 60837) (symbol 60822 . 60829) (RETURN 60815 . 60821) (punctuation 60811 . 60812) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 60776 . 60777)))) 60767 . 60811) (open-paren 60763 . 60764) (close-paren 60761 . 60762) (symbol 60758 . 60761) (symbol 60748 . 60757) (punctuation 60746 . 60747) (symbol 60741 . 60746) (symbol 60729 . 60740) (open-paren 60728 . 60729) (symbol 60723 . 60727) (symbol 60711 . 60722) (symbol 60704 . 60710) (close-paren 60650 . 60651) (punctuation 60648 . 60649) (semantic-list 60610 . 60648) (punctuation 60608 . 60609) (punctuation 60606 . 60607) (punctuation 60605 . 60606) (symbol 60600 . 60604) (punctuation 60599 . 60600) (ELSE 60590 . 60594) (punctuation 60586 . 60587) (semantic-list 60555 . 60586) (punctuation 60553 . 60554) (punctuation 60552 . 60553) (number 60550 . 60551) (punctuation 60548 . 60549) (punctuation 60547 . 60548) (symbol 60542 . 60546) (punctuation 60541 . 60542) (semantic-list 60533 . 60536) (IF 60530 . 60532) (punctuation 60526 . 60527) (punctuation 60468 . 60469) (punctuation 60466 . 60467) (symbol 60457 . 60461) (punctuation 60456 . 60457) (CHAR 60451 . 60455) (UNSIGNED 60442 . 60450) (punctuation 60437 . 60438) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "i" 60412 . 60413)))) 60403 . 60437) (open-paren 60379 . 60380) (close-paren 60377 . 60378) (symbol 60376 . 60377) (BOOL 60371 . 60375) (punctuation 60369 . 60370) (symbol 60368 . 60369) (symbol 60358 . 60367) (punctuation 60356 . 60357) (symbol 60355 . 60356) (symbol 60343 . 60354) (open-paren 60342 . 60343) (symbol 60326 . 60341) (VOID 60321 . 60325) (symbol 60314 . 60320) (close-paren 60281 . 60282) (punctuation 60273 . 60274) (symbol 60270 . 60272) (punctuation 60268 . 60269) (semantic-list 60261 . 60267) (symbol 60242 . 60260) (RETURN 60235 . 60241) (open-paren 60231 . 60232) (close-paren 60229 . 60230) (symbol 60228 . 60229) (symbol 60218 . 60227) (punctuation 60216 . 60217) (symbol 60215 . 60216) (symbol 60203 . 60214) (open-paren 60202 . 60203) (symbol 60186 . 60201) (symbol 60174 . 60185) (symbol 60167 . 60173) (close-paren 60164 . 60165) (punctuation 60162 . 60163) (semantic-list 60056 . 60162) (punctuation 60054 . 60055) (punctuation 60053 . 60054) (RETURN 60046 . 60052) (punctuation 60042 . 60043) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "i" 60017 . 60018)))) 60008 . 60042) (open-paren 59984 . 59985) (close-paren 59982 . 59983) (symbol 59981 . 59982) (symbol 59971 . 59980) (punctuation 59969 . 59970) (symbol 59968 . 59969) (symbol 59956 . 59967) (open-paren 59955 . 59956) (symbol 59936 . 59954) (BOOL 59931 . 59935) (symbol 59924 . 59930) (close-paren 59885 . 59886) (semantic-list 59845 . 59862) (RETURN 59838 . 59844) (open-paren 59834 . 59835) (close-paren 59832 . 59833) (symbol 59831 . 59832) (symbol 59819 . 59830) (open-paren 59818 . 59819) (symbol 59795 . 59817) (punctuation 59793 . 59794) (CHAR 59788 . 59792) (UNSIGNED 59779 . 59787) (symbol 59772 . 59778) (close-paren 59769 . 59770) (punctuation 59762 . 59763) (punctuation 59761 . 59762) (semantic-list 59758 . 59761) (symbol 59745 . 59757) (RETURN 59738 . 59744) (open-paren 59734 . 59735) (close-paren 59732 . 59733) (symbol 59731 . 59732) (symbol 59719 . 59730) (open-paren 59718 . 59719) (symbol 59701 . 59717) (punctuation 59699 . 59700) (symbol 59689 . 59698) (symbol 59682 . 59688) (close-paren 59679 . 59680) (RETURN 59666 . 59672) (open-paren 59596 . 59597) (close-paren 59594 . 59595) (symbol 59593 . 59594) (symbol 59581 . 59592) (open-paren 59580 . 59581) (symbol 59563 . 59579) (symbol 59553 . 59562) (symbol 59546 . 59552) (close-paren 59543 . 59544) (punctuation 59541 . 59542) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59517 . 59523) ("type" symbol "Lisp_Vectorlike" 59500 . 59515) ("a" symbol "a" 59497 . 59498)))) 59489 . 59541) (RETURN 59482 . 59488) (punctuation 59478 . 59479) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 59460 . 59473)))) 59451 . 59478) (open-paren 59447 . 59448) (close-paren 59445 . 59446) (symbol 59444 . 59445) (symbol 59432 . 59443) (open-paren 59431 . 59432) (symbol 59418 . 59430) (punctuation 59416 . 59417) (symbol 59399 . 59415) (STRUCT 59392 . 59398) (symbol 59385 . 59391) (close-paren 59382 . 59383) (semantic-list 59357 . 59360) (open-paren 59327 . 59328) (close-paren 59325 . 59326) (symbol 59324 . 59325) (symbol 59312 . 59323) (open-paren 59311 . 59312) (symbol 59293 . 59310) (VOID 59288 . 59292) (symbol 59281 . 59287) (close-paren 59278 . 59279) (RETURN 59234 . 59240) (open-paren 59230 . 59231) (close-paren 59228 . 59229) (symbol 59227 . 59228) (symbol 59215 . 59226) (open-paren 59214 . 59215) (symbol 59200 . 59213) (BOOL 59195 . 59199) (symbol 59188 . 59194) (close-paren 59185 . 59186) (punctuation 59156 . 59157) (semantic-list 59117 . 59155) (RETURN 59110 . 59116) (open-paren 59031 . 59032) (close-paren 59029 . 59030) (symbol 59025 . 59029) (symbol 59015 . 59024) (open-paren 59014 . 59015) (symbol 58996 . 59013) (symbol 58986 . 58995) (symbol 58979 . 58985) (close-paren 58976 . 58977) (punctuation 58954 . 58955) (semantic-list 58922 . 58953) (RETURN 58915 . 58921) (open-paren 58836 . 58837) (close-paren 58834 . 58835) (symbol 58830 . 58834) (symbol 58820 . 58829) (open-paren 58819 . 58820) (symbol 58801 . 58818) (symbol 58791 . 58800) (symbol 58784 . 58790) (punctuation 58705 . 58706) (close-paren 58704 . 58705) (semantic-list 58688 . 58701) (SIZEOF 58681 . 58687) (punctuation 58679 . 58680) (symbol 58669 . 58678) (punctuation 58663 . 58664) (semantic-list 58632 . 58663) (symbol 58623 . 58631) (punctuation 58621 . 58622) (symbol 58604 . 58620) (punctuation 58598 . 58599) (semantic-list 58568 . 58598) (symbol 58559 . 58567) (punctuation 58557 . 58558) (symbol 58545 . 58556) (open-paren 58539 . 58540) (ENUM 58532 . 58536) (punctuation 57906 . 57907) (close-paren 57888 . 57889) (open-paren 57415 . 57416) (symbol 57396 . 57412) (STRUCT 57389 . 57395) (close-paren 57311 . 57312) (punctuation 57309 . 57310) (semantic-list 57198 . 57309) (RETURN 57191 . 57197) (open-paren 57082 . 57083) (close-paren 57080 . 57081) (symbol 57076 . 57080) (symbol 57066 . 57075) (ENUM 57061 . 57065) (punctuation 57059 . 57060) (symbol 57058 . 57059) (punctuation 57057 . 57058) (symbol 57039 . 57056) (UNION 57033 . 57038) (CONST 57027 . 57032) (open-paren 57026 . 57027) (symbol 57007 . 57025) (BOOL 57002 . 57006) (symbol 56995 . 57001) (close-paren 56946 . 56947) (punctuation 56944 . 56945) (semantic-list 56825 . 56944) (RETURN 56818 . 56824) (open-paren 56779 . 56780) (close-paren 56777 . 56778) (symbol 56776 . 56777) (punctuation 56775 . 56776) (symbol 56763 . 56774) (STRUCT 56756 . 56762) (CONST 56750 . 56755) (open-paren 56749 . 56750) (symbol 56731 . 56748) (symbol 56721 . 56730) (ENUM 56716 . 56720) (symbol 56709 . 56715) (close-paren 56629 . 56630) (semantic-list 56610 . 56613) (open-paren 56586 . 56587) (close-paren 56584 . 56585) (symbol 56583 . 56584) (symbol 56571 . 56582) (open-paren 56570 . 56571) (symbol 56557 . 56569) (VOID 56552 . 56556) (symbol 56545 . 56551) (close-paren 56542 . 56543) (punctuation 56540 . 56541) (semantic-list 56509 . 56540) (punctuation 56507 . 56508) (punctuation 56505 . 56506) (punctuation 56504 . 56505) (semantic-list 56500 . 56503) (symbol 56488 . 56499) (RETURN 56481 . 56487) (open-paren 56477 . 56478) (close-paren 56475 . 56476) (symbol 56474 . 56475) (symbol 56462 . 56473) (open-paren 56461 . 56462) (symbol 56453 . 56460) (BOOL 56448 . 56452) (symbol 56441 . 56447) (close-paren 56438 . 56439) (semantic-list 56407 . 56411) (symbol 56401 . 56406) (RETURN 56394 . 56400) (open-paren 56390 . 56391) (close-paren 56388 . 56389) (symbol 56386 . 56388) (symbol 56374 . 56385) (open-paren 56373 . 56374) (symbol 56366 . 56372) (symbol 56356 . 56365) (symbol 56349 . 56355) (close-paren 56346 . 56347) (punctuation 56328 . 56329) (punctuation 56326 . 56327) (symbol 56321 . 56325) (punctuation 56320 . 56321) (symbol 56314 . 56320) (punctuation 56313 . 56314) (punctuation 56312 . 56313) (semantic-list 56305 . 56312) (symbol 56297 . 56304) (RETURN 56290 . 56296) (open-paren 56218 . 56219) (close-paren 56216 . 56217) (symbol 56211 . 56216) (symbol 56199 . 56210) (open-paren 56198 . 56199) (symbol 56189 . 56197) (symbol 56179 . 56188) (symbol 56172 . 56178) (close-paren 56169 . 56170) (RETURN 56156 . 56162) (open-paren 56080 . 56081) (close-paren 56078 . 56079) (symbol 56073 . 56078) (symbol 56061 . 56072) (open-paren 56060 . 56061) (symbol 56054 . 56059) (symbol 56044 . 56053) (symbol 56037 . 56043) (close-paren 56034 . 56035) (punctuation 56032 . 56033) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 56013 . 56019) ("type" symbol "Lisp_Vectorlike" 55996 . 56011) ("a" symbol "a" 55993 . 55994)))) 55985 . 56032) (RETURN 55978 . 55984) (punctuation 55974 . 55975) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 55958 . 55969)))) 55949 . 55974) (open-paren 55945 . 55946) (close-paren 55943 . 55944) (symbol 55942 . 55943) (symbol 55930 . 55941) (open-paren 55929 . 55930) (symbol 55921 . 55928) (punctuation 55919 . 55920) (symbol 55907 . 55918) (STRUCT 55900 . 55906) (symbol 55893 . 55899) (close-paren 55890 . 55891) (RETURN 55859 . 55865) (open-paren 55855 . 55856) (close-paren 55853 . 55854) (symbol 55852 . 55853) (symbol 55840 . 55851) (open-paren 55839 . 55840) (close-paren 55837 . 55838) (symbol 55826 . 55837) (open-paren 55825 . 55826) (BOOL 55820 . 55824) (symbol 55813 . 55819) (punctuation 55810 . 55811) (close-paren 55792 . 55793) (open-paren 55703 . 55704) (symbol 55689 . 55700) (STRUCT 55682 . 55688) (close-paren 55606 . 55607) (punctuation 55604 . 55605) (number 55603 . 55604) (punctuation 55602 . 55603) (punctuation 55600 . 55601) (punctuation 55599 . 55600) (symbol 55589 . 55598) (punctuation 55588 . 55589) (symbol 55587 . 55588) (punctuation 55586 . 55587) (symbol 55585 . 55586) (punctuation 55584 . 55585) (punctuation 55583 . 55584) (semantic-list 55578 . 55583) (symbol 55570 . 55577) (RETURN 55563 . 55569) (open-paren 55559 . 55560) (close-paren 55557 . 55558) (symbol 55554 . 55557) (symbol 55542 . 55553) (open-paren 55541 . 55542) (symbol 55522 . 55540) (BOOL 55517 . 55521) (symbol 55510 . 55516) (close-paren 55440 . 55441) (punctuation 55404 . 55405) (punctuation 55403 . 55404) (semantic-list 55362 . 55402) (open-paren 55339 . 55340) (close-paren 55337 . 55338) (symbol 55331 . 55337) (symbol 55319 . 55330) (open-paren 55318 . 55319) (symbol 55294 . 55317) (VOID 55289 . 55293) (symbol 55282 . 55288) (close-paren 55279 . 55280) (punctuation 55262 . 55263) (symbol 55261 . 55262) (punctuation 55260 . 55261) (symbol 55259 . 55260) (punctuation 55258 . 55259) (punctuation 55257 . 55258) (semantic-list 55249 . 55257) (symbol 55241 . 55248) (punctuation 55237 . 55238) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 55129 . 55145)))) 55120 . 55237) (open-paren 55011 . 55012) (close-paren 55009 . 55010) (symbol 55002 . 55009) (symbol 54992 . 55001) (punctuation 54990 . 54991) (symbol 54984 . 54990) (symbol 54972 . 54983) (open-paren 54971 . 54972) (symbol 54954 . 54970) (VOID 54949 . 54953) (symbol 54942 . 54948) (close-paren 54940 . 54941) (semantic-list 54929 . 54937) (RETURN 54900 . 54906) (open-paren 54896 . 54897) (close-paren 54894 . 54895) (symbol 54888 . 54894) (symbol 54876 . 54887) (open-paren 54875 . 54876) (symbol 54868 . 54874) (symbol 54858 . 54867) (symbol 54851 . 54857) (close-paren 54848 . 54849) (RETURN 54833 . 54839) (punctuation 54787 . 54788) (symbol 54786 . 54787) (punctuation 54785 . 54786) (symbol 54784 . 54785) (punctuation 54783 . 54784) (punctuation 54782 . 54783) (symbol 54781 . 54782) (punctuation 54779 . 54780) (symbol 54774 . 54778) (punctuation 54773 . 54774) (symbol 54772 . 54773) (punctuation 54771 . 54772) (symbol 54770 . 54771) (punctuation 54769 . 54770) (punctuation 54768 . 54769) (symbol 54767 . 54768) (punctuation 54765 . 54766) (number 54763 . 54764) (punctuation 54761 . 54762) (symbol 54751 . 54760) (punctuation 54750 . 54751) (symbol 54749 . 54750) (punctuation 54748 . 54749) (symbol 54747 . 54748) (punctuation 54746 . 54747) (punctuation 54745 . 54746) (symbol 54744 . 54745) (punctuation 54742 . 54743) (symbol 54735 . 54741) (symbol 54725 . 54734) (open-paren 54647 . 54648) (close-paren 54645 . 54646) (symbol 54644 . 54645) (punctuation 54643 . 54644) (symbol 54631 . 54642) (STRUCT 54624 . 54630) (open-paren 54623 . 54624) (symbol 54610 . 54622) (symbol 54600 . 54609) (symbol 54593 . 54599) (close-paren 54500 . 54501) (RETURN 54485 . 54491) (open-paren 54407 . 54408) (close-paren 54405 . 54406) (symbol 54399 . 54405) (symbol 54387 . 54398) (open-paren 54386 . 54387) (symbol 54379 . 54385) (symbol 54369 . 54378) (symbol 54362 . 54368) (close-paren 54360 . 54361) (punctuation 54358 . 54359) (NEW 54355 . 54358) (punctuation 54353 . 54354) (open-paren 54327 . 54328) (close-paren 54325 . 54326) (NEW 54322 . 54325) (CHAR 54317 . 54321) (UNSIGNED 54308 . 54316) (punctuation 54306 . 54307) (symbol 54301 . 54306) (symbol 54291 . 54300) (punctuation 54289 . 54290) (symbol 54283 . 54289) (symbol 54271 . 54282) (open-paren 54270 . 54271) (symbol 54265 . 54269) (VOID 54260 . 54264) (symbol 54253 . 54259) (close-paren 54251 . 54252) (punctuation 54249 . 54250) (RETURN 54221 . 54227) (open-paren 54217 . 54218) (close-paren 54215 . 54216) (symbol 54210 . 54215) (symbol 54200 . 54209) (punctuation 54198 . 54199) (symbol 54192 . 54198) (symbol 54180 . 54191) (open-paren 54179 . 54180) (symbol 54174 . 54178) (CHAR 54169 . 54173) (UNSIGNED 54160 . 54168) (symbol 54153 . 54159) (close-paren 54151 . 54152) (semantic-list 54126 . 54134) (RETURN 54119 . 54125) (open-paren 54073 . 54074) (close-paren 54071 . 54072) (symbol 54065 . 54071) (symbol 54053 . 54064) (open-paren 54052 . 54053) (symbol 54045 . 54051) (punctuation 54043 . 54044) (CHAR 54038 . 54042) (symbol 54031 . 54037) (close-paren 54029 . 54030) (punctuation 54022 . 54023) (symbol 54021 . 54022) (punctuation 54020 . 54021) (symbol 54019 . 54020) (punctuation 54018 . 54019) (punctuation 54017 . 54018) (semantic-list 54009 . 54017) (symbol 54001 . 54008) (RETURN 53994 . 54000) (open-paren 53990 . 53991) (close-paren 53988 . 53989) (symbol 53982 . 53988) (symbol 53970 . 53981) (open-paren 53969 . 53970) (symbol 53963 . 53968) (punctuation 53961 . 53962) (CHAR 53956 . 53960) (UNSIGNED 53947 . 53955) (symbol 53940 . 53946) (close-paren 53447 . 53448) (punctuation 53409 . 53410) (symbol 53408 . 53409) (punctuation 53407 . 53408) (symbol 53406 . 53407) (punctuation 53405 . 53406) (punctuation 53404 . 53405) (semantic-list 53399 . 53404) (symbol 53391 . 53398) (punctuation 53387 . 53388) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSTRING" 53359 . 53366)))) 53350 . 53387) (open-paren 53273 . 53274) (close-paren 53271 . 53272) (symbol 53268 . 53271) (symbol 53256 . 53267) (open-paren 53255 . 53256) (symbol 53234 . 53254) (VOID 53229 . 53233) (symbol 53222 . 53228) (close-paren 52033 . 52034) (punctuation 52021 . 52022) (symbol 52020 . 52021) (punctuation 52019 . 52020) (symbol 52018 . 52019) (punctuation 52017 . 52018) (punctuation 52016 . 52017) (semantic-list 52011 . 52016) (symbol 52003 . 52010) (punctuation 52001 . 52002) (punctuation 52000 . 52001) (number 51998 . 51999) (RETURN 51991 . 51997) (open-paren 51987 . 51988) (close-paren 51985 . 51986) (symbol 51982 . 51985) (symbol 51970 . 51981) (open-paren 51969 . 51970) (symbol 51952 . 51968) (BOOL 51947 . 51951) (symbol 51940 . 51946) (close-paren 51895 . 51896) (punctuation 51893 . 51894) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 51874 . 51880) ("type" symbol "Lisp_String" 51861 . 51872) ("a" symbol "a" 51858 . 51859)))) 51850 . 51893) (RETURN 51843 . 51849) (punctuation 51839 . 51840) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 51827 . 51834)))) 51818 . 51839) (open-paren 51814 . 51815) (close-paren 51812 . 51813) (symbol 51811 . 51812) (symbol 51799 . 51810) (open-paren 51798 . 51799) (symbol 51790 . 51797) (punctuation 51788 . 51789) (symbol 51776 . 51787) (STRUCT 51769 . 51775) (symbol 51762 . 51768) (close-paren 51759 . 51760) (semantic-list 51740 . 51743) (open-paren 51716 . 51717) (close-paren 51714 . 51715) (symbol 51713 . 51714) (symbol 51701 . 51712) (open-paren 51700 . 51701) (symbol 51687 . 51699) (VOID 51682 . 51686) (symbol 51675 . 51681) (close-paren 51672 . 51673) (RETURN 51639 . 51645) (open-paren 51635 . 51636) (close-paren 51633 . 51634) (symbol 51632 . 51633) (symbol 51620 . 51631) (open-paren 51619 . 51620) (symbol 51611 . 51618) (BOOL 51606 . 51610) (symbol 51599 . 51605) (punctuation 51596 . 51597) (close-paren 51595 . 51596) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 51576 . 51582)))) 51565 . 51595) (open-paren 51564 . 51565) (symbol 51557 . 51563) (punctuation 51555 . 51556) (close-paren 51554 . 51555) (semantic-list "(GCALIGNMENT)" 51524 . 51546) (symbol "alignas" 51524 . 51546) (CHAR "char" 51524 . 51546) (semantic-list "(GCALIGNMENT)" 51524 . 51546) (symbol "alignas" 51524 . 51546) (CHAR "char" 51524 . 51546) (open-paren 51150 . 51151) (symbol 51138 . 51149) (STRUCT 51131 . 51137) (close-paren 51052 . 51053) (punctuation 51044 . 51045) (semantic-list 51040 . 51043) (symbol 51035 . 51039) (punctuation 51033 . 51034) (semantic-list 51029 . 51032) (symbol 51023 . 51028) (RETURN 51016 . 51022) (open-paren 51012 . 51013) (close-paren 51010 . 51011) (symbol 51009 . 51010) (symbol 50997 . 51008) (open-paren 50996 . 50997) (symbol 50987 . 50995) (symbol 50975 . 50986) (symbol 50968 . 50974) (close-paren 50966 . 50967) (punctuation 50958 . 50959) (semantic-list 50954 . 50957) (symbol 50949 . 50953) (punctuation 50947 . 50948) (semantic-list 50943 . 50946) (symbol 50937 . 50942) (RETURN 50930 . 50936) (open-paren 50926 . 50927) (close-paren 50924 . 50925) (symbol 50923 . 50924) (symbol 50911 . 50922) (open-paren 50910 . 50911) (symbol 50901 . 50909) (symbol 50889 . 50900) (symbol 50882 . 50888) (close-paren 50814 . 50815) (RETURN 50801 . 50807) (semantic-list 50750 . 50761) (IF 50747 . 50749) (RETURN 50728 . 50734) (semantic-list 50712 . 50723) (IF 50709 . 50711) (open-paren 50705 . 50706) (close-paren 50703 . 50704) (symbol 50702 . 50703) (symbol 50690 . 50701) (open-paren 50689 . 50690) (symbol 50685 . 50688) (symbol 50673 . 50684) (symbol 50666 . 50672) (close-paren 50664 . 50665) (RETURN 50651 . 50657) (semantic-list 50600 . 50611) (IF 50597 . 50599) (RETURN 50578 . 50584) (semantic-list 50562 . 50573) (IF 50559 . 50561) (open-paren 50555 . 50556) (close-paren 50553 . 50554) (symbol 50552 . 50553) (symbol 50540 . 50551) (open-paren 50539 . 50540) (symbol 50535 . 50538) (symbol 50523 . 50534) (symbol 50516 . 50522) (close-paren 50448 . 50449) (punctuation 50443 . 50444) (semantic-list 50439 . 50442) (symbol 50429 . 50438) (punctuation 50428 . 50429) (open-paren 50424 . 50425) (close-paren 50422 . 50423) (symbol 50421 . 50422) (symbol 50409 . 50420) (punctuation 50407 . 50408) (symbol 50406 . 50407) (symbol 50394 . 50405) (open-paren 50393 . 50394) (symbol 50385 . 50392) (VOID 50380 . 50384) (symbol 50373 . 50379) (close-paren 50371 . 50372) (punctuation 50366 . 50367) (semantic-list 50362 . 50365) (symbol 50352 . 50361) (punctuation 50351 . 50352) (open-paren 50347 . 50348) (close-paren 50345 . 50346) (symbol 50344 . 50345) (symbol 50332 . 50343) (punctuation 50330 . 50331) (symbol 50329 . 50330) (symbol 50317 . 50328) (open-paren 50316 . 50317) (symbol 50308 . 50315) (VOID 50303 . 50307) (symbol 50296 . 50302) (close-paren 50125 . 50126) (punctuation "." 50108 . 50123) (symbol "u" 50108 . 50123) (punctuation "." 50108 . 50123) (symbol "s" 50108 . 50123) (punctuation "." 50108 . 50123) (symbol "u" 50108 . 50123) (punctuation ">" 50108 . 50123) (punctuation "-" 50108 . 50123) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 50121 . 50122)))) 50108 . 50123) (symbol "XCONS" 50108 . 50123) (RETURN 50101 . 50107) (open-paren 50097 . 50098) (close-paren 50095 . 50096) (symbol 50094 . 50095) (symbol 50082 . 50093) (open-paren 50081 . 50082) (close-paren 50079 . 50080) (symbol 50075 . 50079) (open-paren 50074 . 50075) (symbol 50062 . 50073) (symbol 50055 . 50061) (close-paren 50052 . 50053) (punctuation "." 50035 . 50050) (symbol "s" 50035 . 50050) (punctuation "." 50035 . 50050) (symbol "u" 50035 . 50050) (punctuation ">" 50035 . 50050) (punctuation "-" 50035 . 50050) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 50048 . 50049)))) 50035 . 50050) (symbol "XCONS" 50035 . 50050) (RETURN 50028 . 50034) (open-paren 50024 . 50025) (close-paren 50022 . 50023) (symbol 50021 . 50022) (symbol 50009 . 50020) (open-paren 50008 . 50009) (close-paren 50006 . 50007) (symbol 50002 . 50006) (open-paren 50001 . 50002) (symbol 49989 . 50000) (symbol 49982 . 49988) (close-paren 49943 . 49944) (punctuation 49937 . 49938) (symbol 49936 . 49937) (punctuation 49935 . 49936) (symbol 49934 . 49935) (punctuation 49933 . 49934) (symbol 49932 . 49933) (punctuation 49931 . 49932) (punctuation 49930 . 49931) (semantic-list 49927 . 49930) (symbol 49921 . 49926) (punctuation 49920 . 49921) (RETURN 49913 . 49919) (open-paren 49909 . 49910) (close-paren 49907 . 49908) (symbol 49906 . 49907) (symbol 49894 . 49905) (open-paren 49893 . 49894) (symbol 49883 . 49892) (punctuation 49881 . 49882) (symbol 49869 . 49880) (symbol 49862 . 49868) (close-paren 49860 . 49861) (punctuation 49854 . 49855) (symbol 49853 . 49854) (punctuation 49852 . 49853) (symbol 49851 . 49852) (punctuation 49850 . 49851) (punctuation 49849 . 49850) (semantic-list 49846 . 49849) (symbol 49840 . 49845) (punctuation 49839 . 49840) (RETURN 49832 . 49838) (open-paren 49828 . 49829) (close-paren 49826 . 49827) (symbol 49825 . 49826) (symbol 49813 . 49824) (open-paren 49812 . 49813) (symbol 49802 . 49811) (punctuation 49800 . 49801) (symbol 49788 . 49799) (symbol 49781 . 49787) (close-paren 49321 . 49322) (punctuation 49319 . 49320) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 49317 . 49318)))) 49303 . 49319) (RETURN 49296 . 49302) (open-paren 49292 . 49293) (close-paren 49290 . 49291) (symbol 49289 . 49290) (symbol 49277 . 49288) (open-paren 49276 . 49277) (close-paren 49274 . 49275) (symbol 49269 . 49274) (open-paren 49268 . 49269) (punctuation 49266 . 49267) (symbol 49256 . 49265) (STRUCT 49249 . 49255) (symbol 49242 . 49248) (close-paren 49239 . 49240) (semantic-list 49222 . 49225) (open-paren 49200 . 49201) (close-paren 49198 . 49199) (symbol 49197 . 49198) (symbol 49185 . 49196) (open-paren 49184 . 49185) (symbol 49173 . 49183) (VOID 49168 . 49172) (symbol 49161 . 49167) (close-paren 49158 . 49159) (RETURN 49133 . 49139) (open-paren 49129 . 49130) (close-paren 49127 . 49128) (symbol 49126 . 49127) (symbol 49114 . 49125) (open-paren 49113 . 49114) (close-paren 49111 . 49112) (symbol 49106 . 49111) (open-paren 49105 . 49106) (BOOL 49100 . 49104) (symbol 49093 . 49099) (close-paren 49090 . 49091) (RETURN 49066 . 49072) (open-paren 49062 . 49063) (close-paren 49060 . 49061) (symbol 49059 . 49060) (symbol 49047 . 49058) (open-paren 49046 . 49047) (close-paren 49044 . 49045) (symbol 49040 . 49044) (open-paren 49039 . 49040) (BOOL 49034 . 49038) (symbol 49027 . 49033) (punctuation 49024 . 49025) (close-paren 49023 . 49024) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 49006 . 49012)))) 48995 . 49023) (open-paren 48994 . 48995) (symbol 48987 . 48993) (punctuation 48985 . 48986) (close-paren 48984 . 48985) (semantic-list "(GCALIGNMENT)" 48954 . 48976) (symbol "alignas" 48954 . 48976) (CHAR "char" 48954 . 48976) (semantic-list "(GCALIGNMENT)" 48954 . 48976) (symbol "alignas" 48954 . 48976) (CHAR "char" 48954 . 48976) (open-paren 48698 . 48699) (symbol 48688 . 48697) (STRUCT 48681 . 48687) (close-paren 48603 . 48604) (RETURN 48593 . 48599) (punctuation 48589 . 48590) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 48554 . 48561)))) 48545 . 48589) (open-paren 48490 . 48491) (close-paren 48488 . 48489) (symbol 48487 . 48488) (punctuation 48486 . 48487) (VOID 48481 . 48485) (open-paren 48480 . 48481) (symbol 48459 . 48479) (symbol 48447 . 48458) (symbol 48440 . 48446) (close-paren 48437 . 48438) (RETURN 48427 . 48433) (open-paren 48381 . 48382) (close-paren 48379 . 48380) (symbol 48378 . 48379) (punctuation 48377 . 48378) (VOID 48372 . 48376) (open-paren 48371 . 48372) (symbol 48343 . 48370) (symbol 48331 . 48342) (symbol 48324 . 48330) (close-paren 48321 . 48322) (punctuation 48319 . 48320) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 48314 . 48318) ("type" symbol "Lisp_Int0" 48303 . 48312) ("a" symbol "a" 48300 . 48301)))) 48292 . 48319) (RETURN 48285 . 48291) (open-paren 48281 . 48282) (close-paren 48279 . 48280) (symbol 48278 . 48279) (symbol 48266 . 48277) (open-paren 48265 . 48266) (symbol 48254 . 48264) (punctuation 48252 . 48253) (VOID 48247 . 48251) (symbol 48240 . 48246) (close-paren 46153 . 46154) (RETURN 46111 . 46117) (open-paren 46107 . 46108) (close-paren 46105 . 46106) (VOID 46101 . 46105) (open-paren 46100 . 46101) (symbol 46088 . 46099) (symbol 46076 . 46087) (symbol 46069 . 46075) (close-paren 45509 . 45510) (RETURN 45499 . 45505) (punctuation 45495 . 45496) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 45444 . 45451)))) 45435 . 45495) (open-paren 45392 . 45393) (close-paren 45390 . 45391) (symbol 45386 . 45390) (symbol 45376 . 45385) (ENUM 45371 . 45375) (punctuation 45369 . 45370) (symbol 45366 . 45369) (punctuation 45365 . 45366) (VOID 45360 . 45364) (open-paren 45359 . 45360) (symbol 45345 . 45358) (symbol 45333 . 45344) (symbol 45326 . 45332) (close-paren 45265 . 45266) (punctuation 45256 . 45257) (symbol 45252 . 45255) (punctuation 45250 . 45251) (symbol 45244 . 45249) (punctuation 45242 . 45243) (punctuation 45241 . 45242) (symbol 45237 . 45240) (punctuation 45235 . 45236) (symbol 45229 . 45234) (punctuation 45227 . 45228) (symbol 45221 . 45226) (punctuation 45219 . 45220) (symbol 45215 . 45218) (RETURN 45208 . 45214) (open-paren 45204 . 45205) (close-paren 45202 . 45203) (symbol 45197 . 45202) (symbol 45188 . 45196) (punctuation 45186 . 45187) (symbol 45183 . 45186) (symbol 45174 . 45182) (punctuation 45172 . 45173) (symbol 45167 . 45172) (symbol 45158 . 45166) (open-paren 45157 . 45158) (symbol 45142 . 45156) (symbol 45133 . 45141) (symbol 45126 . 45132) (close-paren 45123 . 45124) (punctuation 45121 . 45122) (semantic-list #("((XLI ((x)) == XLI ((y)))                                 \\
   || (symbols_with_pos_enabled                             \\
       && (SYMBOL_WITH_POS_P ((x))                          \\
           ? (BARE_SYMBOL_P ((y))                           \\
              ? XLI (XSYMBOL_WITH_POS((x))->sym) == XLI (y) \\
              : SYMBOL_WITH_POS_P((y))                      \\
                && (XLI (XSYMBOL_WITH_POS((x))->sym)        \\
                    == XLI (XSYMBOL_WITH_POS((y))->sym)))   \\
           : (SYMBOL_WITH_POS_P ((y))                       \\
              && BARE_SYMBOL_P ((x))                        \\
              && (XLI (x) == XLI ((XSYMBOL_WITH_POS ((y)))->sym))))))" 0 1 (macros (("y" symbol "y" 45119 . 45120) ("x" symbol "x" 45116 . 45117)))) 45105 . 45121) (RETURN 45098 . 45104) (open-paren 45094 . 45095) (close-paren 45092 . 45093) (symbol 45091 . 45092) (symbol 45079 . 45090) (punctuation 45077 . 45078) (symbol 45076 . 45077) (symbol 45064 . 45075) (open-paren 45063 . 45064) (close-paren 45061 . 45062) (symbol 45059 . 45061) (open-paren 45058 . 45059) (BOOL 45053 . 45057) (symbol 45046 . 45052) (close-paren 44918 . 44919) (punctuation 44916 . 44917) (semantic-list #("(BASE_EQ (x, y)					    \\
   || (symbols_with_pos_enabled				    \\
       && SYMBOL_WITH_POS_P (x)				    \\
       && BASE_EQ (XSYMBOL_WITH_POS (x)->sym, y)))" 0 1 (macros (("y" symbol "y" 44914 . 44915) ("x" symbol "x" 44911 . 44912)))) 44894 . 44916) (RETURN 44887 . 44893) (open-paren 44883 . 44884) (close-paren 44881 . 44882) (symbol 44880 . 44881) (symbol 44868 . 44879) (punctuation 44866 . 44867) (symbol 44865 . 44866) (symbol 44853 . 44864) (open-paren 44852 . 44853) (close-paren 44850 . 44851) (symbol 44842 . 44850) (open-paren 44841 . 44842) (BOOL 44836 . 44840) (symbol 44829 . 44835) (close-paren 44701 . 44702) (punctuation 44699 . 44700) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 44697 . 44698) ("x" symbol "x" 44694 . 44695)))) 44678 . 44699) (RETURN 44671 . 44677) (open-paren 44667 . 44668) (close-paren 44665 . 44666) (symbol 44664 . 44665) (symbol 44652 . 44663) (punctuation 44650 . 44651) (symbol 44649 . 44650) (symbol 44637 . 44648) (open-paren 44636 . 44637) (close-paren 44634 . 44635) (symbol 44627 . 44634) (open-paren 44626 . 44627) (BOOL 44621 . 44625) (symbol 44614 . 44620) (close-paren 44560 . 44561) (semantic-list 44540 . 44557) (punctuation 44538 . 44539) (punctuation 44529 . 44530) (semantic-list 44525 . 44528) (symbol 44513 . 44524) (punctuation 44511 . 44512) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 44499 . 44510) (RETURN 44492 . 44498) (punctuation 44458 . 44459) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 44422 . 44423)))) 44413 . 44458) (open-paren 44409 . 44410) (close-paren 44407 . 44408) (symbol 44406 . 44407) (symbol 44396 . 44405) (open-paren 44395 . 44396) (symbol 44377 . 44394) (symbol 44365 . 44376) (symbol 44358 . 44364) (close-paren 44274 . 44275) (RETURN 44249 . 44255) (open-paren 44245 . 44246) (close-paren 44243 . 44244) (symbol 44242 . 44243) (symbol 44230 . 44241) (open-paren 44229 . 44230) (close-paren 44227 . 44228) (symbol 44222 . 44227) (open-paren 44221 . 44222) (symbol 44211 . 44220) (symbol 44204 . 44210) (close-paren 44143 . 44144) (RETURN 44118 . 44124) (punctuation 44114 . 44115) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 44102 . 44109)))) 44093 . 44114) (open-paren 44089 . 44090) (close-paren 44087 . 44088) (symbol 44086 . 44087) (symbol 44074 . 44085) (open-paren 44073 . 44074) (symbol 44064 . 44072) (symbol 44053 . 44063) (symbol 44046 . 44052) (close-paren 44044 . 44045) (punctuation 44042 . 44043) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 44035 . 44042) (punctuation 44033 . 44034) (symbol 44031 . 44032) (punctuation 44029 . 44030) (semantic-list "(GCTYPEBITS - 1)" 44017 . 44028) (punctuation 44015 . 44016) (punctuation 44014 . 44015) (symbol 44012 . 44013) (punctuation 44010 . 44011) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 43998 . 44009) (RETURN 43991 . 43997) (open-paren 43961 . 43962) (close-paren 43959 . 43960) (symbol 43958 . 43959) (symbol 43946 . 43957) (open-paren 43945 . 43946) (symbol 43932 . 43944) (symbol 43921 . 43931) (symbol 43914 . 43920) (close-paren 43838 . 43839) (RETURN 43814 . 43820) (punctuation 43810 . 43811) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43798 . 43805)))) 43789 . 43810) (open-paren 43785 . 43786) (close-paren 43783 . 43784) (symbol 43782 . 43783) (symbol 43770 . 43781) (open-paren 43769 . 43770) (symbol 43761 . 43768) (symbol 43751 . 43760) (symbol 43744 . 43750) (close-paren 43741 . 43742) (punctuation 43739 . 43740) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 43737 . 43738)))) 43721 . 43739) (RETURN 43714 . 43720) (open-paren 43710 . 43711) (close-paren 43708 . 43709) (symbol 43707 . 43708) (symbol 43695 . 43706) (open-paren 43694 . 43695) (close-paren 43692 . 43693) (symbol 43685 . 43692) (open-paren 43684 . 43685) (BOOL 43679 . 43683) (symbol 43672 . 43678) (close-paren 43641 . 43642) (RETURN 43625 . 43631) (punctuation 43612 . 43613) (punctuation 43611 . 43612) (symbol 43606 . 43610) (punctuation 43604 . 43605) (punctuation 43603 . 43604) (symbol 43601 . 43602) (ELSE 43592 . 43596) (semantic-list 43513 . 43589) (semantic-list 43495 . 43508) (IF 43492 . 43494) (punctuation 43458 . 43459) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 43435 . 43436)))) 43426 . 43458) (open-paren 43422 . 43423) (close-paren 43420 . 43421) (symbol 43419 . 43420) (symbol 43409 . 43418) (open-paren 43408 . 43409) (symbol 43395 . 43407) (symbol 43383 . 43394) (symbol 43376 . 43382) (close-paren 43373 . 43374) (punctuation 43371 . 43372) (semantic-list "(GCTYPEBITS - 1)" 43360 . 43371) (punctuation 43358 . 43359) (punctuation 43357 . 43358) (symbol 43355 . 43356) (RETURN 43348 . 43354) (semantic-list 43286 . 43345) (semantic-list 43266 . 43281) (IF 43263 . 43265) (open-paren 43234 . 43235) (close-paren 43232 . 43233) (symbol 43231 . 43232) (symbol 43219 . 43230) (open-paren 43218 . 43219) (symbol 43206 . 43217) (symbol 43196 . 43205) (symbol 43189 . 43195) (close-paren 42992 . 42993) (RETURN 42976 . 42982) (semantic-list 42916 . 42973) (ELSE 42907 . 42911) (semantic-list 42828 . 42904) (semantic-list 42810 . 42823) (IF 42807 . 42809) (punctuation 42773 . 42774) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 42770 . 42771)))) 42751 . 42772)))) 42740 . 42773) (open-paren 42736 . 42737) (close-paren 42734 . 42735) (symbol 42733 . 42734) (symbol 42723 . 42732) (open-paren 42722 . 42723) (symbol 42710 . 42721) (symbol 42698 . 42709) (symbol 42691 . 42697) (close-paren 41860 . 41861) (open-paren 41831 . 41832) (close-paren 41829 . 41830) (symbol 41828 . 41829) (symbol 41816 . 41827) (open-paren 41815 . 41816) (close-paren 41813 . 41814) (symbol 41801 . 41813) (open-paren 41800 . 41801) (VOID 41795 . 41799) (symbol 41788 . 41794) (close-paren 41785 . 41786) (semantic-list 41690 . 41784) (ELSE 41681 . 41685) (SIZEOF 41663 . 41669) (punctuation 41661 . 41662) (symbol 41658 . 41660) (punctuation 41656 . 41657) (symbol 41653 . 41655) (punctuation 41651 . 41652) (punctuation 41650 . 41651) (symbol 41647 . 41649) (punctuation 41645 . 41646) (punctuation 41644 . 41645) (symbol 41641 . 41643) (RETURN 41634 . 41640) (semantic-list 41603 . 41629) (IF 41600 . 41602) (open-paren 41538 . 41539) (close-paren 41536 . 41537) (symbol 41533 . 41536) (punctuation 41532 . 41533) (symbol 41520 . 41531) (STRUCT 41513 . 41519) (open-paren 41512 . 41513) (symbol 41501 . 41511) (BOOL 41496 . 41500) (symbol 41489 . 41495) (close-paren 41486 . 41487) (semantic-list 41476 . 41483) (punctuation 41468 . 41469) (RETURN 41443 . 41449) (open-paren 41439 . 41440) (close-paren 41437 . 41438) (symbol 41432 . 41437) (INT 41428 . 41431) (open-paren 41427 . 41428) (symbol 41407 . 41426) (symbol 41395 . 41406) (symbol 41388 . 41394) (close-paren 41385 . 41386) (RETURN 41375 . 41381) (punctuation 41371 . 41372) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 41352 . 41359)))) 41343 . 41371) (open-paren 41120 . 41121) (close-paren 41118 . 41119) (symbol 41115 . 41118) (punctuation 41114 . 41115) (symbol 41102 . 41113) (STRUCT 41095 . 41101) (open-paren 41094 . 41095) (symbol 41077 . 41093) (symbol 41065 . 41076) (symbol 41058 . 41064) (close-paren 41055 . 41056) (punctuation 41048 . 41049) (punctuation 41047 . 41048) (semantic-list 41044 . 41047) (RETURN 41006 . 41012) (RETURN 40979 . 40985) (semantic-list 40926 . 40974) (IF 40923 . 40925) (punctuation 40919 . 40920) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 40905 . 40912)))) 40896 . 40919) (open-paren 40892 . 40893) (close-paren 40890 . 40891) (symbol 40889 . 40890) (symbol 40877 . 40888) (open-paren 40876 . 40877) (close-paren 40874 . 40875) (symbol 40867 . 40874) (open-paren 40866 . 40867) (symbol 40834 . 40865) (punctuation 40832 . 40833) (symbol 40820 . 40831) (STRUCT 40813 . 40819) (symbol 40806 . 40812) (close-paren 40803 . 40804) (RETURN 40793 . 40799) (punctuation 40684 . 40685) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BARE_SYMBOL_P" 40666 . 40679)))) 40657 . 40684) (open-paren 40653 . 40654) (close-paren 40651 . 40652) (symbol 40650 . 40651) (symbol 40638 . 40649) (open-paren 40637 . 40638) (close-paren 40635 . 40636) (symbol 40623 . 40635) (open-paren 40622 . 40623) (symbol 40590 . 40621) (punctuation 40588 . 40589) (symbol 40576 . 40587) (STRUCT 40569 . 40575) (symbol 40562 . 40568) (close-paren 40559 . 40560) (punctuation 40557 . 40558) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 40529 . 40535) ("type" symbol "Lisp_Vectorlike" 40512 . 40527) ("a" symbol "a" 40509 . 40510)))) 40501 . 40557) (RETURN 40494 . 40500) (punctuation 40488 . 40489) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOL_WITH_POS_P" 40466 . 40483)))) 40457 . 40488) (open-paren 40451 . 40452) (close-paren 40449 . 40450) (symbol 40448 . 40449) (symbol 40436 . 40447) (open-paren 40435 . 40436) (symbol 40418 . 40434) (punctuation 40416 . 40417) (symbol 40395 . 40415) (STRUCT 40388 . 40394) (symbol 40381 . 40387) (close-paren 40378 . 40379) (punctuation 40376 . 40377) (semantic-list #("((BARE_SYMBOL_P ((x)) ||               \\
                            (symbols_with_pos_enabled && (SYMBOL_WITH_POS_P ((x))))))" 0 1 (macros (("x" symbol "x" 40374 . 40375)))) 40358 . 40376) (RETURN 40351 . 40357) (open-paren 40347 . 40348) (close-paren 40345 . 40346) (symbol 40344 . 40345) (symbol 40332 . 40343) (open-paren 40331 . 40332) (close-paren 40329 . 40330) (symbol 40322 . 40329) (open-paren 40321 . 40322) (BOOL 40316 . 40320) (symbol 40309 . 40315) (close-paren 40306 . 40307) (RETURN 40269 . 40275) (open-paren 40265 . 40266) (close-paren 40263 . 40264) (symbol 40262 . 40263) (symbol 40250 . 40261) (open-paren 40249 . 40250) (close-paren 40247 . 40248) (symbol 40230 . 40247) (open-paren 40229 . 40230) (BOOL 40224 . 40228) (symbol 40217 . 40223) (close-paren 40214 . 40215) (RETURN 40181 . 40187) (open-paren 40177 . 40178) (close-paren 40175 . 40176) (symbol 40174 . 40175) (symbol 40162 . 40173) (open-paren 40161 . 40162) (close-paren 40159 . 40160) (symbol 40146 . 40159) (open-paren 40145 . 40146) (BOOL 40140 . 40144) (symbol 40133 . 40139) (close-paren 40130 . 40131) (punctuation 40128 . 40129) (semantic-list #("(lisp_h_VECTORLIKEP((a)) &&                                   \\
   ((XUNTAG ((a), Lisp_Vectorlike, union vectorlike_header)->size     \\
     & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))                    \\
    == (PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))))" 0 1 (macros (("code" symbol "code" 40123 . 40127) ("a" symbol "a" 40120 . 40121)))) 40098 . 40128) (RETURN 40091 . 40097) (open-paren 40087 . 40088) (close-paren 40085 . 40086) (symbol 40081 . 40085) (INT 40077 . 40080) (punctuation 40075 . 40076) (symbol 40074 . 40075) (symbol 40062 . 40073) (open-paren 40061 . 40062) (symbol 40047 . 40060) (BOOL 40042 . 40046) (symbol 40035 . 40041) (punctuation 39547 . 39548) (close-paren 39546 . 39547) (symbol 39521 . 39543) (punctuation 39519 . 39520) (punctuation 39518 . 39519) (number 39513 . 39517) (punctuation 39511 . 39512) (symbol 39496 . 39510) (punctuation 39490 . 39491) (symbol 39468 . 39490) (punctuation 39466 . 39467) (symbol 39443 . 39465) (punctuation 39441 . 39442) (symbol 39418 . 39440) (punctuation 39350 . 39351) (semantic-list 39278 . 39350) (punctuation 39276 . 39277) (symbol 39253 . 39275) (punctuation 39247 . 39248) (number 39245 . 39247) (punctuation 39243 . 39244) (symbol 39220 . 39242) (punctuation 39068 . 39069) (number 39067 . 39068) (punctuation 39065 . 39066) (semantic-list 39035 . 39064) (punctuation 39033 . 39034) (symbol 39010 . 39032) (punctuation 39004 . 39005) (number 39002 . 39004) (punctuation 39000 . 39001) (symbol 38977 . 38999) (open-paren 38604 . 38605) (symbol 38587 . 38601) (ENUM 38582 . 38586) (punctuation 38579 . 38580) (close-paren 38578 . 38579) (symbol 38508 . 38517) (punctuation 38504 . 38505) (symbol 38493 . 38504) (punctuation 38489 . 38490) (symbol 38470 . 38489) (punctuation 38466 . 38467) (symbol 38451 . 38466) (punctuation 38447 . 38448) (symbol 38434 . 38447) (punctuation 38363 . 38364) (symbol 38352 . 38363) (punctuation 38348 . 38349) (symbol 38327 . 38348) (punctuation 38323 . 38324) (symbol 38303 . 38323) (punctuation 38299 . 38300) (symbol 38287 . 38299) (punctuation 38283 . 38284) (symbol 38273 . 38283) (punctuation 38269 . 38270) (symbol 38258 . 38269) (punctuation 38254 . 38255) (symbol 38237 . 38254) (punctuation 38233 . 38234) (symbol 38221 . 38233) (punctuation 38160 . 38161) (symbol 38150 . 38160) (punctuation 38146 . 38147) (symbol 38137 . 38146) (punctuation 38133 . 38134) (symbol 38108 . 38133) (punctuation 38104 . 38105) (symbol 38091 . 38104) (punctuation 38087 . 38088) (symbol 38072 . 38087) (punctuation 38068 . 38069) (symbol 38057 . 38068) (punctuation 38053 . 38054) (symbol 38037 . 38053) (punctuation 38033 . 38034) (symbol 38022 . 38033) (punctuation 38018 . 38019) (symbol 38008 . 38018) (punctuation 38004 . 38005) (symbol 37992 . 38004) (punctuation 37988 . 37989) (symbol 37975 . 37988) (punctuation 37971 . 37972) (symbol 37958 . 37971) (punctuation 37954 . 37955) (symbol 37934 . 37954) (punctuation 37930 . 37931) (symbol 37916 . 37930) (punctuation 37912 . 37913) (symbol 37900 . 37912) (punctuation 37896 . 37897) (symbol 37885 . 37896) (punctuation 37881 . 37882) (symbol 37870 . 37881) (punctuation 37866 . 37867) (symbol 37857 . 37866) (punctuation 37813 . 37814) (symbol 37795 . 37813) (open-paren 37791 . 37792) (symbol 37781 . 37790) (ENUM 37776 . 37780) (punctuation ";" 37534 . 37575) (symbol "EXTERNALLY_VISIBLE" 37420 . 37474) (symbol "PSEUDOVECTOR_FLAG" 37420 . 37474) (CONST "const" 37420 . 37474) (symbol "ptrdiff_t" 37420 . 37474) (EXTERN "extern" 37420 . 37474) (punctuation ";" 37269 . 37308) (symbol "EXTERNALLY_VISIBLE" 37179 . 37231) (symbol "ARRAY_MARK_FLAG" 37179 . 37231) (CONST "const" 37179 . 37231) (symbol "ptrdiff_t" 37179 . 37231) (EXTERN "extern" 37179 . 37231) (punctuation 37095 . 37096) (close-paren 37077 . 37078) (open-paren 36947 . 36948) (symbol 36926 . 36946) (STRUCT 36919 . 36925) (punctuation 36916 . 36917) (close-paren 36915 . 36916) (open-paren 35768 . 35769) (symbol 35748 . 35765) (UNION 35742 . 35747) (punctuation 31198 . 31199) (close-paren 31197 . 31198) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 31178 . 31184)))) 31167 . 31197) (open-paren 31166 . 31167) (symbol 31159 . 31165) (punctuation 31157 . 31158) (close-paren 31156 . 31157) (semantic-list "(GCALIGNMENT)" 31126 . 31148) (symbol "alignas" 31126 . 31148) (CHAR "char" 31126 . 31148) (semantic-list "(GCALIGNMENT)" 31126 . 31148) (symbol "alignas" 31126 . 31148) (CHAR "char" 31126 . 31148) (open-paren 29496 . 29497) (symbol 29484 . 29495) (STRUCT 29477 . 29483) (punctuation 29474 . 29475) (close-paren 29473 . 29474) (number 29471 . 29472) (punctuation 29469 . 29470) (symbol 29448 . 29468) (punctuation 29444 . 29445) (number 29443 . 29444) (punctuation 29441 . 29442) (symbol 29426 . 29440) (punctuation 29422 . 29423) (number 29421 . 29422) (punctuation 29419 . 29420) (symbol 29396 . 29418) (open-paren 29392 . 29393) (symbol 29371 . 29391) (ENUM 29366 . 29370) (punctuation 29363 . 29364) (close-paren 29362 . 29363) (number 29360 . 29361) (punctuation 29358 . 29359) (symbol 29341 . 29357) (punctuation 29337 . 29338) (number 29336 . 29337) (punctuation 29334 . 29335) (symbol 29317 . 29333) (punctuation 29313 . 29314) (number 29312 . 29313) (punctuation 29310 . 29311) (symbol 29293 . 29308) (punctuation 29289 . 29290) (number 29288 . 29289) (punctuation 29286 . 29287) (symbol 29269 . 29284) (open-paren 29265 . 29266) (symbol 29249 . 29264) (ENUM 29244 . 29248) (punctuation 29241 . 29242) (close-paren 29240 . 29241) (number 29238 . 29239) (punctuation 29236 . 29237) (symbol 29201 . 29235) (punctuation 29197 . 29198) (number 29196 . 29197) (punctuation 29194 . 29195) (symbol 29178 . 29193) (punctuation 29174 . 29175) (number 29173 . 29174) (punctuation 29171 . 29172) (symbol 29153 . 29170) (open-paren 29149 . 29150) (symbol 29133 . 29148) (ENUM 29128 . 29132) (close-paren 29079 . 29080) (open-paren 29057 . 29058) (STRUCT 29050 . 29056) (TYPEDEF 29042 . 29049) (close-paren 28544 . 28545) (punctuation 28542 . 28543) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 28540 . 28541) ("predicate" symbol "predicate" 28529 . 28538) ("ok" symbol "ok" 28525 . 28527)))) 28506 . 28542) (open-paren 28502 . 28503) (close-paren 28500 . 28501) (symbol 28499 . 28500) (symbol 28487 . 28498) (punctuation 28485 . 28486) (symbol 28476 . 28485) (symbol 28464 . 28475) (punctuation 28462 . 28463) (symbol 28460 . 28462) (INT 28456 . 28459) (open-paren 28455 . 28456) (close-paren 28453 . 28454) (symbol 28443 . 28453) (open-paren 28442 . 28443) (VOID 28437 . 28441) (symbol 28430 . 28436) (close-paren 28427 . 28428) (punctuation 28425 . 28426) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 28421 . 28424) ("a" symbol "a" 28418 . 28419)))) 28402 . 28425) (RETURN 28395 . 28401) (open-paren 28391 . 28392) (close-paren 28389 . 28390) (symbol 28386 . 28389) (symbol 28376 . 28385) (ENUM 28371 . 28375) (punctuation 28369 . 28370) (symbol 28368 . 28369) (symbol 28356 . 28367) (open-paren 28355 . 28356) (close-paren 28353 . 28354) (symbol 28346 . 28353) (open-paren 28345 . 28346) (BOOL 28340 . 28344) (symbol 28333 . 28339) (close-paren 28241 . 28242) (punctuation 28223 . 28224) (punctuation 28222 . 28223) (symbol 28220 . 28221) (punctuation 28218 . 28219) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 28210 . 28217) (punctuation 28209 . 28210) (punctuation 28207 . 28208) (symbol 28205 . 28206) (punctuation 28203 . 28204) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 28191 . 28202) (RETURN 28184 . 28190) (open-paren 28105 . 28106) (close-paren 28103 . 28104) (symbol 28102 . 28103) (symbol 28090 . 28101) (open-paren 28089 . 28090) (close-paren 28087 . 28088) (symbol 28082 . 28087) (open-paren 28081 . 28082) (symbol 28071 . 28080) (ENUM 28066 . 28070) (symbol 28059 . 28065) (close-paren 28030 . 28031) (punctuation 28028 . 28029) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 28026 . 28027)))) 28014 . 28028) (RETURN 28007 . 28013) (open-paren 28003 . 28004) (close-paren 28001 . 28002) (symbol 28000 . 28001) (symbol 27988 . 27999) (open-paren 27987 . 27988) (close-paren 27985 . 27986) (symbol 27982 . 27985) (open-paren 27981 . 27982) (punctuation 27979 . 27980) (VOID 27974 . 27978) (symbol 27967 . 27973) (close-paren 27964 . 27965) (punctuation 27962 . 27963) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 27960 . 27961)))) 27948 . 27962) (RETURN 27941 . 27947) (open-paren 27937 . 27938) (close-paren 27935 . 27936) (symbol 27934 . 27935) (symbol 27924 . 27933) (open-paren 27923 . 27924) (close-paren 27921 . 27922) (symbol 27918 . 27921) (open-paren 27917 . 27918) (symbol 27905 . 27916) (symbol 27898 . 27904) (close-paren 27895 . 27896) (punctuation 27893 . 27894) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 27891 . 27892)))) 27879 . 27893) (RETURN 27872 . 27878) (open-paren 27868 . 27869) (close-paren 27866 . 27867) (symbol 27865 . 27866) (symbol 27853 . 27864) (open-paren 27852 . 27853) (close-paren 27850 . 27851) (symbol 27847 . 27850) (open-paren 27846 . 27847) (symbol 27836 . 27845) (symbol 27829 . 27835) (punctuation 27554 . 27555) (close-paren 27553 . 27554) (symbol 27542 . 27553) (open-paren 27541 . 27542) (symbol 27527 . 27540) (DOUBLE 27520 . 27526) (EXTERN 27513 . 27519) (close-paren 27480 . 27481) (RETURN 27460 . 27466) (open-paren 27397 . 27398) (close-paren 27395 . 27396) (VOID 27391 . 27395) (open-paren 27390 . 27391) (symbol 27361 . 27389) (BOOL 27356 . 27360) (symbol 27349 . 27355) (close-paren 27140 . 27141) (RETURN 27119 . 27125) (open-paren 27053 . 27054) (close-paren 27051 . 27052) (VOID 27047 . 27051) (open-paren 27046 . 27047) (symbol 27025 . 27045) (BOOL 27020 . 27024) (symbol 27013 . 27019) (close-paren 27010 . 27011) (RETURN 26989 . 26995) (open-paren 26920 . 26921) (close-paren 26918 . 26919) (VOID 26914 . 26918) (open-paren 26913 . 26914) (symbol 26889 . 26912) (BOOL 26884 . 26888) (symbol 26877 . 26883) (close-paren 26874 . 26875) (RETURN 26853 . 26859) (open-paren 26788 . 26789) (close-paren 26786 . 26787) (VOID 26782 . 26786) (open-paren 26781 . 26782) (symbol 26759 . 26780) (BOOL 26754 . 26758) (symbol 26747 . 26753) (close-paren 26744 . 26745) (RETURN 26723 . 26729) (open-paren 26655 . 26656) (close-paren 26653 . 26654) (VOID 26649 . 26653) (open-paren 26648 . 26649) (symbol 26623 . 26647) (BOOL 26618 . 26622) (symbol 26611 . 26617) (close-paren 26608 . 26609) (RETURN 26587 . 26593) (open-paren 26504 . 26505) (close-paren 26502 . 26503) (VOID 26498 . 26502) (open-paren 26497 . 26498) (symbol 26480 . 26496) (BOOL 26475 . 26479) (symbol 26468 . 26474) (close-paren 26465 . 26466) (RETURN 26444 . 26450) (open-paren 26366 . 26367) (close-paren 26364 . 26365) (VOID 26360 . 26364) (open-paren 26359 . 26360) (symbol 26347 . 26358) (BOOL 26342 . 26346) (symbol 26335 . 26341) (close-paren 26324 . 26325) (open-paren 25588 . 25589) (symbol 25581 . 25587) (STRUCT 25574 . 25580) (EXTERN 25567 . 25573) (punctuation 25371 . 25372) (close-paren 25370 . 25371) (symbol 25367 . 25370) (punctuation 25366 . 25367) (CHAR 25361 . 25365) (punctuation 25359 . 25360) (symbol 25353 . 25359) (punctuation 25352 . 25353) (CHAR 25347 . 25351) (punctuation 25345 . 25346) (symbol 25339 . 25345) (symbol 25329 . 25338) (open-paren 25328 . 25329) (symbol 25311 . 25327) (punctuation 25310 . 25311) (CHAR 25305 . 25309) (EXTERN 25298 . 25304) (punctuation 25296 . 25297) (close-paren 25295 . 25296) (symbol 25285 . 25295) (symbol 25273 . 25284) (punctuation 25271 . 25272) (symbol 25265 . 25271) (symbol 25253 . 25264) (open-paren 25252 . 25253) (symbol 25243 . 25251) (VOID 25238 . 25242) (EXTERN 25231 . 25237) (punctuation 25229 . 25230) (close-paren 25228 . 25229) (symbol 25222 . 25228) (symbol 25210 . 25221) (open-paren 25209 . 25210) (symbol 25195 . 25208) (symbol 25183 . 25194) (EXTERN 25176 . 25182) (punctuation 25174 . 25175) (close-paren 25173 . 25174) (symbol 25162 . 25173) (punctuation 25160 . 25161) (symbol 25149 . 25160) (open-paren 25148 . 25149) (symbol 25128 . 25147) (VOID "void" 25122 . 25127) (symbol "ATTRIBUTE_COLD" 25122 . 25127) (EXTERN 25115 . 25121) (punctuation 25113 . 25114) (close-paren 25112 . 25113) (symbol 25101 . 25112) (punctuation 25099 . 25100) (symbol 25088 . 25099) (punctuation 25086 . 25087) (symbol 25075 . 25086) (open-paren 25074 . 25075) (symbol 25054 . 25073) (VOID "void" 25048 . 25053) (symbol "ATTRIBUTE_COLD" 25048 . 25053) (EXTERN 25041 . 25047) (punctuation 25012 . 25013) (close-paren 25011 . 25012) (symbol 25000 . 25011) (punctuation 24998 . 24999) (INT 24995 . 24998) (punctuation 24993 . 24994) (symbol 24982 . 24993) (open-paren 24981 . 24982) (symbol 24966 . 24980) (VOID 24961 . 24965) (EXTERN 24954 . 24960) (close-paren 24936 . 24937) (INT 24933 . 24936) (punctuation 24931 . 24932) (symbol 24920 . 24931) (open-paren 24919 . 24920) (symbol 24904 . 24918) (symbol 24892 . 24903) (EXTERN 24885 . 24891) (punctuation 24853 . 24854) (close-paren 24852 . 24853) (symbol 24843 . 24852) (punctuation 24841 . 24842) (symbol 24830 . 24841) (open-paren 24829 . 24830) (symbol 24810 . 24828) (symbol 24800 . 24809) (EXTERN 24793 . 24799) (punctuation 24791 . 24792) (close-paren 24790 . 24791) (symbol 24781 . 24790) (open-paren 24780 . 24781) (symbol 24767 . 24779) (symbol 24755 . 24766) (EXTERN 24748 . 24754) (punctuation 24746 . 24747) (close-paren 24745 . 24746) (symbol 24737 . 24745) (open-paren 24736 . 24737) (symbol 24724 . 24735) (symbol 24712 . 24723) (EXTERN 24705 . 24711) (close-paren 24686 . 24687) (symbol 24675 . 24686) (open-paren 24674 . 24675) (symbol 24657 . 24673) (DOUBLE 24650 . 24656) (EXTERN 24643 . 24649) (punctuation 24641 . 24642) (close-paren 24640 . 24641) (symbol 24632 . 24640) (punctuation 24630 . 24631) (symbol 24622 . 24630) (punctuation 24620 . 24621) (symbol 24609 . 24620) (open-paren 24608 . 24609) (symbol 24588 . 24607) (symbol 24579 . 24587) (EXTERN 24572 . 24578) (punctuation 24570 . 24571) (close-paren 24569 . 24570) (symbol 24558 . 24569) (open-paren 24557 . 24558) (symbol 24535 . 24556) (INT 24531 . 24534) (EXTERN 24524 . 24530) (punctuation 24493 . 24494) (close-paren 24492 . 24493) (symbol 24481 . 24492) (punctuation 24468 . 24469) (symbol 24459 . 24468) (punctuation 24457 . 24458) (symbol 24446 . 24457) (open-paren 24445 . 24446) (symbol 24417 . 24444) (VOID 24412 . 24416) (symbol 24405 . 24411) (punctuation 24335 . 24336) (close-paren 24334 . 24335) (symbol 24328 . 24333) (punctuation 24326 . 24327) (symbol 24303 . 24325) (open-paren 24301 . 24302) (symbol 24278 . 24300) (ENUM 24273 . 24277) (punctuation 21520 . 21521) (close-paren 21519 . 21520) (symbol 21450 . 21469) (punctuation 21398 . 21399) (symbol 21379 . 21398) (punctuation 21332 . 21333) (symbol 21320 . 21332) (punctuation 21282 . 21283) (symbol 21269 . 21282) (punctuation 21228 . 21229) (symbol 21216 . 21228) (open-paren 21210 . 21211) (symbol 21194 . 21207) (ENUM 21189 . 21193) (punctuation 21028 . 21029) (close-paren 21027 . 21028) (number 21023 . 21024) (punctuation 21021 . 21022) (symbol 21010 . 21020) (punctuation 20947 . 20948) (number 20946 . 20947) (punctuation 20944 . 20945) (number 20942 . 20943) (punctuation 20940 . 20941) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20928 . 20939) (punctuation 20926 . 20927) (symbol 20916 . 20925) (punctuation 20846 . 20847) (number 20845 . 20846) (punctuation 20843 . 20844) (symbol 20827 . 20842) (punctuation 20563 . 20564) (number 20562 . 20563) (punctuation 20560 . 20561) (symbol 20548 . 20559) (punctuation 20401 . 20402) (number 20400 . 20401) (punctuation 20398 . 20399) (number 20396 . 20397) (punctuation 20394 . 20395) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20382 . 20393) (punctuation 20380 . 20381) (symbol 20370 . 20379) (punctuation 20364 . 20365) (number 20363 . 20364) (punctuation 20361 . 20362) (symbol 20351 . 20360) (punctuation 20288 . 20289) (number 20287 . 20288) (punctuation 20285 . 20286) (symbol 20267 . 20284) (punctuation 20221 . 20222) (number 20220 . 20221) (punctuation 20218 . 20219) (symbol 20206 . 20217) (open-paren 20131 . 20132) (symbol 20119 . 20128) (ENUM 20114 . 20118) (close-paren 17947 . 17948) (symbol 17930 . 17947) (symbol 17922 . 17929) (punctuation 17920 . 17921) (punctuation 17918 . 17919) (punctuation 17917 . 17918) (symbol 17904 . 17916) (symbol 17896 . 17903) (punctuation 17894 . 17895) (punctuation 17892 . 17893) (punctuation 17891 . 17892) (punctuation ";" 9262 . 9293) (symbol "EXTERNALLY_VISIBLE" 9154 . 9198) (symbol "VALMASK" 9154 . 9198) (CONST "const" 9154 . 9198) (symbol "EMACS_INT" 9154 . 9198) (EXTERN "extern" 9154 . 9198) (punctuation ";" 9043 . 9078) (symbol "EXTERNALLY_VISIBLE" 8952 . 8995) (CONST "const" 8952 . 8995) (symbol "USE_LSB_TAG" 8952 . 8995) (EXTERN "extern" 8952 . 8995) (punctuation ";" 8256 . 8291) (symbol "EXTERNALLY_VISIBLE" 8176 . 8218) (CONST "const" 8176 . 8218) (symbol "INTTYPEBITS" 8176 . 8218) (EXTERN "extern" 8176 . 8218) (number 4737 . 4738) (punctuation 4735 . 4736) (punctuation 4734 . 4735) (semantic-list 4709 . 4733) (punctuation 4707 . 4708) (punctuation 4706 . 4707) (number "8" 4104 . 4129) (spp-macro-def 4068 . 4093) (punctuation 4058 . 4059) (LONG 3125 . 3129) (UNSIGNED 3116 . 3124) (TYPEDEF 3108 . 3115) (LONG 3083 . 3087) (TYPEDEF 3075 . 3082) (string 2548 . 2574) (symbol 2542 . 2547) (symbol 2539 . 2540) (punctuation ";" 2187 . 2221) (symbol "EXTERNALLY_VISIBLE" 2124 . 2165) (CONST "const" 2124 . 2165) (symbol "GCTYPEBITS" 2124 . 2165) (EXTERN "extern" 2124 . 2165) (symbol 1096 . 1115))
      :lexical-table 
        '(("lisp_h_CONSP" (spp-arg-list ("x") 14260 . 14263) . ((symbol "TAGGEDP" 14264 . 14271) (semantic-list "(x, Lisp_Cons)" 14272 . 14286)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 16277 . 16280) . ((semantic-list "((BARE_SYMBOL_P ((x)) ||               \\
                            (symbols_with_pos_enabled && (SYMBOL_WITH_POS_P ((x))))))" 16281 . 16407)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 16639 . 16642) . 
              ((symbol "XCONS" 16643 . 16648) (semantic-list "(c)" 16649 . 16652) (punctuation "-" 16652 . 16653) (punctuation ">" 16653 . 16654) (symbol "u" 16654 . 16655) (punctuation "." 16655 . 16656) (symbol "s" 16656 . 16657) (punctuation "." 16657 . 16658) (symbol "car" 16658 . 16661)))
          ("case_Lisp_Int" . 
              ((CASE "case" 19765 . 19769) (symbol "Lisp_Int0" 19770 . 19779) (punctuation ":" 19779 . 19780) (CASE "case" 19781 . 19785) (symbol "Lisp_Int1" 19786 . 19795)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 31868 . 31907)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 34210 . 34215) . ((symbol "i##sym" 34216 . 34222)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 101424 . 101443) . 
              ((DO "do" 101449 . 101451) (semantic-list "{						\\
    static struct Lisp_Objfwd const o_fwd	\\
      = {Lisp_Fwd_Obj, &globals.f_##vname};	\\
    defvar_lisp (&o_fwd, lname);		\\
  }" 101452 . 101590) (WHILE "while" 101591 . 101596) (semantic-list "(false)" 101597 . 101604)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 101835 . 101854) . 
              ((DO "do" 101860 . 101862) (semantic-list "{						\\
    static struct Lisp_Boolfwd const b_fwd	\\
      = {Lisp_Fwd_Bool, &globals.f_##vname};	\\
    defvar_bool (&b_fwd, lname);		\\
  }" 101863 . 102003) (WHILE "while" 102004 . 102009) (semantic-list "(false)" 102010 . 102017)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 136622 . 136640) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 136654 . 136799)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 170413 . 170426) . 
              ((DO "do" 170433 . 170435) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 170436 . 170556) (WHILE "while" 170557 . 170562) (semantic-list "(false)" 170563 . 170570)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 174816 . 174825) . 
              ((symbol "Lisp_Object" 174835 . 174846) (symbol "name" 174847 . 174851) (punctuation "=" 174852 . 174853) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 174854 . 174905)))
          ("eassert" (spp-arg-list ("cond") 6497 . 6503) . ((semantic-list "((void) (false && (cond)))" 6504 . 6530)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 14705 . 14711) . ((semantic-list "((XLI ((x)) == XLI ((y)))                                 \\
   || (symbols_with_pos_enabled                             \\
       && (SYMBOL_WITH_POS_P ((x))                          \\
           ? (BARE_SYMBOL_P ((y))                           \\
              ? XLI (XSYMBOL_WITH_POS((x))->sym) == XLI (y) \\
              : SYMBOL_WITH_POS_P((y))                      \\
                && (XLI (XSYMBOL_WITH_POS((x))->sym)        \\
                    == XLI (XSYMBOL_WITH_POS((y))->sym)))   \\
           : (SYMBOL_WITH_POS_P ((y))                       \\
              && BARE_SYMBOL_P ((x))                        \\
              && (XLI (x) == XLI ((XSYMBOL_WITH_POS ((y)))->sym))))))" 14752 . 15439)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 31929 . 31981)))
          ("ROUNDUP" (spp-arg-list ("x" "y") 34942 . 34948) . ((semantic-list "(POWER_OF_2 (y)					\\
                       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
                       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 34949 . 35095)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 40005 . 40032)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 47640 . 47646) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 47647 . 47693)))
          ("IEEE_FLOATING_POINT" . ((semantic-list "(FLT_RADIX == 2 && FLT_MANT_DIG == 24 \\
			     && FLT_MIN_EXP == -125 && FLT_MAX_EXP == 128)" 91229 . 91322)))
          ("CALLN" (spp-arg-list ("f" "...") 98047 . 98055) . ((symbol "CALLMANY" 98056 . 98064) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 98065 . 98102)))
          ("CHILD_SETUP_ERROR_DESC" . ((string "\"Doing vfork\"" 159157 . 159170)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 169433 . 169442) (symbol "sa_avail" 169443 . 169451) (punctuation "=" 169452 . 169453) (symbol "MAX_ALLOCA" 169454 . 169464) (punctuation ";" 169464 . 169465) (symbol "specpdl_ref" 169470 . 169481) (symbol "sa_count" 169482 . 169490) (punctuation "=" 169491 . 169492) (symbol "SPECPDL_INDEX" 169493 . 169506) (semantic-list "()" 169507 . 169509)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 172627 . 172638) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 172639 . 172661) (semantic-list "(buf, nelt, 0)" 172662 . 172676)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 174924 . 174936) . 
              ((symbol "Lisp_Object" 174946 . 174957) (symbol "name" 174958 . 174962) (punctuation "=" 174963 . 174964) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 174965 . 175060)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 176283 . 176299) . 
              ((symbol "Lisp_Object" 176307 . 176318) (symbol "name" 176319 . 176323) (punctuation "=" 176324 . 176325) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(struct Lisp_String) {{{len, -1, 0, (unsigned char *) (str)}}}), \\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 176338 . 176527)))
          ("FOR_EACH_TAIL_SAFE" (spp-arg-list ("tail") 177348 . 177354) . ((symbol "FOR_EACH_TAIL_INTERNAL" 177359 . 177381) (semantic-list "(tail, (void) ((tail) = Qnil), false)" 177382 . 177419)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 8562 . 8597)))
          ("GCALIGNED_UNION_MEMBER" . 
              ((CHAR "char" 11020 . 11024) (symbol "alignas" 11025 . 11032) (semantic-list "(GCALIGNMENT)" 11033 . 11046) (symbol "gcaligned" 11047 . 11056) (punctuation ";" 11056 . 11057)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 15637 . 15640) . ((symbol "TAGGEDP" 15641 . 15648) (semantic-list "(x, Lisp_Float)" 15649 . 15664)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 15867 . 15872) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 15878 . 15930)))
          ("lisp_h_SYMBOL_TRAPPED_WRITE_P" (spp-arg-list ("sym") 15968 . 15973) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write)" 15974 . 16008)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 32003 . 32074)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 46204 . 46213) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 46223 . 46299)))
          ("__builtin_unwind_init" (spp-arg-list nil 131067 . 131069) . ((semantic-list "((void) 0)" 131070 . 131080)))
          ("pure_list" (spp-arg-list ("...") 132107 . 132112) . ((symbol "pure_listn" 132117 . 132127) (semantic-list "(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 132128 . 132187)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 175079 . 175094) . 
              ((symbol "Lisp_Object" 175103 . 175114) (symbol "name" 175115 . 175119) (punctuation "=" 175120 . 175121) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 175122 . 175235)))
          ("GCALIGNED_STRUCT")
          ("lisp_h_XLI" (spp-arg-list ("o") 13188 . 13191) . ((semantic-list "(o)" 13192 . 13195)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 16818 . 16821) . ((symbol "XUFIXNUM_RAW" 16822 . 16834) (semantic-list "(a)" 16835 . 16838)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 17984 . 17988)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 31460 . 31477) . 
              ((EXTERN "extern" 31482 . 31488) (symbol "Lisp_Object" 31489 . 31500) (symbol "fnname" 31501 . 31507) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 31508 . 31519) (symbol "maxargs" 31523 . 31530)) 31508 . 31530)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 32096 . 32180)))
          ("XSETINT" (spp-arg-list ("a" "b") 45527 . 45533) . ((semantic-list "((a) = make_fixnum (b))" 45534 . 45557)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 47490 . 47496) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 47497 . 47539)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 77620 . 77630) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 77638 . 77684)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 171781 . 171799) . 
              ((DO "do" 171811 . 171813) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	/* Although only the first nelt words need clearing,   \\
	   typically EXTRA is 0 or small so just use xzalloc;  \\
	   this is simpler and often faster.  */	       \\
	(buf) = xzalloc (alloca_nbytes);		       \\
	record_unwind_protect_array (buf, nelt);	       \\
      }							       \\
  }" 171814 . 172518) (WHILE "while" 172519 . 172524) (semantic-list "(false)" 172525 . 172532)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 175254 . 175272) . 
              ((symbol "Lisp_Object" 175283 . 175294) (symbol "name" 175295 . 175299) (punctuation "=" 175314 . 175315) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 175316 . 175453)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1531 . 1541) . 
              ((symbol "type" 1542 . 1546) (CONST "const" 1547 . 1552) (symbol "id" 1553 . 1555) (symbol "EXTERNALLY_VISIBLE" 1556 . 1574)))
          ("max" (spp-arg-list ("a" "b") 1910 . 1916) . ((semantic-list "((a) > (b) ? (a) : (b))" 1917 . 1940)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2040 . 2045) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2046 . 2078)))
          ("INTTYPEBITS" . ((semantic-list "(GCTYPEBITS - 1)" 8239 . 8255)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9016 . 9042)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 14161 . 14179) . ((semantic-list "((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 14185 . 14239)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 15736 . 15744) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 15750 . 15834)))
          ("lisp_h_SYMBOL_WITH_POS_P" (spp-arg-list ("x") 16150 . 16153) . ((symbol "PSEUDOVECTORP" 16154 . 16167) (semantic-list "((x), PVEC_SYMBOL_WITH_POS)" 16168 . 16195)))
          ("lisp_h_BARE_SYMBOL_P" (spp-arg-list ("x") 16224 . 16227) . ((symbol "TAGGEDP" 16228 . 16235) (semantic-list "((x), Lisp_Symbol)" 16236 . 16254)))
          ("lisp_h_TAGGEDP" (spp-arg-list ("a" "tag") 16430 . 16438) . ((semantic-list "(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 16444 . 16560)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 32202 . 32299)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 33596 . 33602) . ((symbol "TAG_PTR" 33607 . 33614) (semantic-list "(Lisp_Symbol, (char *) (intptr_t) ((i##name) * sizeof *lispsym))" 33615 . 33679)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 47230 . 47236) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 47237 . 47275)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 71115 . 71121) . ((symbol "longjmp" 71122 . 71129) (semantic-list "(j, v)" 71130 . 71136)))
          ("INT_TO_INTEGER" (spp-arg-list ("expr") 86423 . 86429) . ((semantic-list "(EXPR_SIGNED (expr) ? make_int (expr) : make_uint (expr))" 86434 . 86491)))
          ("CALLMANY" (spp-arg-list ("f" "array") 97608 . 97618) . ((semantic-list "(f)" 97619 . 97622) (semantic-list "(ARRAYELTS (array), array)" 97623 . 97649)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 158586 . 158596)))
          ("eabs" (spp-arg-list ("x") 169082 . 169085) . ((semantic-list "((x) < 0 ? -(x) : (x))" 169094 . 169116)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 169641 . 169647) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : record_xmalloc (size))" 169648 . 169735)))
          ("min" (spp-arg-list ("a" "b") 1952 . 1958) . ((semantic-list "((a) < (b) ? (a) : (b))" 1959 . 1982)))
          ("LISP_WORDS_ARE_POINTERS" . ((semantic-list "(EMACS_INT_MAX == INTPTR_MAX)" 11534 . 11563)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 32321 . 32431)))
          ("LISP_WORD_TAG" (spp-arg-list ("tag") 33187 . 33192) . ((semantic-list "((Lisp_Word_tag) (tag) << (USE_LSB_TAG ? 0 : VALBITS))" 33197 . 33251)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 47360 . 47366) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 47367 . 47403)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 47563 . 47569) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 47570 . 47613)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 52795 . 52868)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 102036 . 102055) . 
              ((DO "do" 102061 . 102063) (semantic-list "{						\\
    static struct Lisp_Intfwd const i_fwd	\\
      = {Lisp_Fwd_Int, &globals.f_##vname};	\\
    defvar_int (&i_fwd, lname);			\\
  }" 102064 . 102202) (WHILE "while" 102203 . 102208) (semantic-list "(false)" 102209 . 102216)))
          ("list" (spp-arg-list ("...") 132014 . 132019) . ((symbol "listn" 132024 . 132029) (semantic-list "(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 132030 . 132089)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "false" 173449 . 173454)))
          ("FOR_EACH_TAIL" (spp-arg-list ("tail") 177123 . 177129) . ((symbol "FOR_EACH_TAIL_INTERNAL" 177134 . 177156) (semantic-list "(tail, circular_list (tail), true)" 177157 . 177191)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3248 . 3257)))
          ("pD" . ((string "\"t\"" 5101 . 5104)))
          ("GCALIGNED" (spp-arg-list ("type") 11214 . 11220) . ((semantic-list "(alignof (type) % GCALIGNMENT == 0)" 11221 . 11256)))
          ("lisp_h_XIL" (spp-arg-list ("i") 13216 . 13219) . ((semantic-list "(i)" 13220 . 13223)))
          ("lisp_h_CHECK_FIXNUM" (spp-arg-list ("x") 14025 . 14028) . ((symbol "CHECK_TYPE" 14029 . 14039) (semantic-list "(FIXNUMP (x), Qfixnump, x)" 14040 . 14066)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 16587 . 16590) . ((symbol "TAGGEDP" 16591 . 16598) (semantic-list "(x, Lisp_Vectorlike)" 16599 . 16619)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 19706 . 19742)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 34578 . 34582)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 37502 . 37533)))
          ("PVECHEADERSIZE" (spp-arg-list ("code" "lispsize" "restsize") 46322 . 46348) . ((semantic-list "(PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS) \\
   | ((restsize) << PSEUDOVECTOR_SIZE_BITS) | (lispsize))" 46353 . 46468)))
          ("XSETCONDVAR" (spp-arg-list ("a" "b") 47839 . 47845) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CONDVAR))" 47846 . 47885)))
          ("VECSIZE" (spp-arg-list ("type") 62341 . 62347) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 62357 . 62416)))
          ("TYPE_RANGED_FIXNUMP" (spp-arg-list ("type" "x") 92812 . 92821) . ((semantic-list "(FIXNUMP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XFIXNUM (x) : 0 <= XFIXNUM (x)) \\
   && XFIXNUM (x) <= TYPE_MAXIMUM (type))" 92826 . 92975)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 169960 . 169985) . 
              ((DO "do" 169993 . 169995) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 169996 . 170307) (WHILE "while" 170308 . 170313) (semantic-list "(false)" 170314 . 170321)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 174386 . 174392) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 174397 . 174448)))
          ("lisp_h_BASE2_EQ" (spp-arg-list ("x" "y") 14360 . 14366) . ((semantic-list "(BASE_EQ (x, y)					    \\
   || (symbols_with_pos_enabled				    \\
       && SYMBOL_WITH_POS_P (x)				    \\
       && BASE_EQ (XSYMBOL_WITH_POS (x)->sym, y)))" 14378 . 14536)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 16034 . 16039) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 16045 . 16117)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 31666 . 31692)))
          ("POWER_OF_2" (spp-arg-list ("n") 34667 . 34670) . ((semantic-list "(((n) & ((n) - 1)) == 0)" 34671 . 34695)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 39945 . 39975)))
          ("XSETCONS" (spp-arg-list ("a" "b") 45630 . 45636) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 45637 . 45673)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 46870 . 46888) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 46895 . 47048)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 47165 . 47171) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 47172 . 47211)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "lastlispfield") 62632 . 62653) . ((semantic-list "(offsetof (type, lastlispfield) + word_size < header_size		\\
   ? 0 : (offsetof (type, lastlispfield) + word_size - header_size) / word_size)" 62661 . 62802)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 96930 . 96984) . 
              ((symbol "SUBR_SECTION_ATTRIBUTE" 96989 . 97011) (STATIC "static" 97059 . 97065) (UNION "union" 97066 . 97071) (symbol "Aligned_Lisp_Subr" 97072 . 97089) (symbol "sname" 97090 . 97095) (punctuation "=" 97096 . 97097) (semantic-list "{{{ PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },			    \\
       { .a ## maxargs = fnname },				    \\
       minargs, maxargs, lname, {intspec}, lisp_h_Qnil}}" 97132 . 97283) (punctuation ";" 97283 . 97284) (symbol "Lisp_Object" 97294 . 97305) (symbol "fnname" 97306 . 97312)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 102239 . 102258) . 
              ((DO "do" 102265 . 102267) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd const ko_fwd		\\
      = {Lisp_Fwd_Kboard_Obj, offsetof (KBOARD, vname##_)};	\\
    defvar_kboard (&ko_fwd, lname);				\\
  }" 102268 . 102438) (WHILE "while" 102439 . 102444) (semantic-list "(false)" 102445 . 102452)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 169531 . 169537) . ((semantic-list "(sa_avail -= (size), alloca (size))" 169538 . 169573)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 4094 . 4095)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1744 . 1754) . 
              ((EXTERN "extern" 1755 . 1761) (symbol "DECLARE_GDB_SYM" 1762 . 1777) (semantic-list "(type, id)" 1778 . 1788)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 9216 . 9261)))
          ("lisp_h_NILP" (spp-arg-list ("x") 15684 . 15687) . ((symbol "BASE_EQ" 15689 . 15696) (semantic-list "(x, Qnil)" 15697 . 15706)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 16726 . 16729) . ((semantic-list "(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 16735 . 16797)))
          ("XUNTAG" (spp-arg-list ("a" "type" "ctype") 28675 . 28691) . ((semantic-list "((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 28692 . 28751)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 33985 . 33991) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 33996 . 34019) (semantic-list "(Lisp_Object, name)" 34020 . 34039) (symbol "DEFINE_GDB_SYMBOL_END" 34044 . 34065) (semantic-list "(LISPSYM_INITIALLY (name))" 34066 . 34092)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 45692 . 45698) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 45699 . 45741)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 47296 . 47302) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 47303 . 47343)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 52933 . 52938) . 
              ((DO "do" 52946 . 52948) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = -1;		\\
  }" 52949 . 53104) (WHILE "while" 53105 . 53110) (semantic-list "(false)" 53111 . 53118)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 119705 . 119722) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 119729 . 119896)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 136965 . 136983) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 136996 . 137128)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_type >= 0)" 157537 . 157555)))
          ("SAFE_FREE_UNBIND_TO" (spp-arg-list ("count" "val") 171392 . 171404) . ((symbol "safe_free_unbind_to" 171409 . 171428) (semantic-list "(count, sa_count, val)" 171429 . 171451)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1819 . 1824) . ((punctuation ";" 1825 . 1826)))
          ("GCTYPEBITS" . ((number "3" 2185 . 2186)))
          ("lisp_h_Qnil" . ((number "0" 13304 . 13305)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 16681 . 16684) . 
              ((symbol "XCONS" 16685 . 16690) (semantic-list "(c)" 16691 . 16694) (punctuation "-" 16694 . 16695) (punctuation ">" 16695 . 16696) (symbol "u" 16696 . 16697) (punctuation "." 16697 . 16698) (symbol "s" 16698 . 16699) (punctuation "." 16699 . 16700) (symbol "u" 16700 . 16701) (punctuation "." 16701 . 16702) (symbol "cdr" 16702 . 16705)))
          ("LISP_INITIALLY" (spp-arg-list ("w") 24265 . 24268) . ((semantic-list "(w)" 24269 . 24272)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 31722 . 31735)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 37257 . 37268)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 41961 . 41964) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 41969 . 42047)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 45760 . 45766) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 45767 . 45805)))
          ("sys_setjmp" (spp-arg-list ("j") 71080 . 71083) . ((symbol "setjmp" 71084 . 71090) (semantic-list "(j)" 71091 . 71094)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 101630 . 101649) . 
              ((DO "do" 101654 . 101656) (semantic-list "{						\\
    static struct Lisp_Objfwd const o_fwd	\\
      = {Lisp_Fwd_Obj, &globals.f_##vname};	\\
    defvar_lisp_nopro (&o_fwd, lname);		\\
  }" 101657 . 101801) (WHILE "while" 101802 . 101807) (semantic-list "(false)" 101808 . 101815)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 174744 . 174756) . 
              ((symbol "Lisp_Object" 174757 . 174768) (symbol "name" 174769 . 174773) (punctuation "=" 174774 . 174775) (symbol "AUTO_CONS_EXPR" 174776 . 174790) (semantic-list "(a, b)" 174791 . 174797)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 178794 . 178825) . ((FOR "for" 178831 . 178834) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 178835 . 178981)))
          ("GCALIGNMENT" . ((number "1" 9916 . 9917)))
          ("lisp_h_XLP" (spp-arg-list ("o") 13244 . 13247) . ((semantic-list "((void *) (uintptr_t) (o))" 13248 . 13274)))
          ("lisp_h_PSEUDOVECTORP" (spp-arg-list ("a" "code") 13689 . 13697) . ((semantic-list "(lisp_h_VECTORLIKEP((a)) &&                                   \\
   ((XUNTAG ((a), Lisp_Vectorlike, union vectorlike_header)->size     \\
     & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))                    \\
    == (PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))))" 13729 . 13996)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 31757 . 31763)))
          ("XSETFLOAT" (spp-arg-list ("a" "b") 45877 . 45883) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 45884 . 45921)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 46685 . 46697) . ((symbol "XSETTYPED_PSEUDOVECTOR" 46702 . 46724) (semantic-list "(a, b,					\\
			  (XUNTAG (a, Lisp_Vectorlike,		\\
				   union vectorlike_header)	\\
			   ->size),				\\
			  code)" 46725 . 46839)))
          ("XSETNATIVE_COMP_UNIT" (spp-arg-list ("a" "b") 47914 . 47920) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_NATIVE_COMP_UNIT))" 47921 . 47969)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 73756 . 73767))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 111754 . 111798)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 139566 . 139569)))
          ("EMACS_LISP_H")
          ("pI" . ((string "\"ll\"" 3811 . 3815)))
          ("AVOID" . 
              ((symbol "_Noreturn" 5191 . 5200) (symbol "ATTRIBUTE_COLD" 5201 . 5215) (VOID "void" 5216 . 5220)))
          ("eassume" (spp-arg-list ("cond") 6575 . 6581) . ((symbol "assume" 6582 . 6588) (semantic-list "(cond)" 6589 . 6595)))
          ("lisp_h_BASE_EQ" (spp-arg-list ("x" "y") 14309 . 14315) . ((semantic-list "(XLI (x) == XLI (y))" 14316 . 14336)))
          ("lisp_h_FIXNUMP" (spp-arg-list ("x") 15463 . 15466) . ((semantic-list "(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 15472 . 15615)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 20088 . 20094) . ((ENUM "enum" 20095 . 20099) (symbol "TYPE" 20100 . 20104)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 31785 . 31798)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 33342 . 33352) . ((symbol "LISP_INITIALLY" 33357 . 33371) (semantic-list "((Lisp_Word) ((untagged_ptr) (ptr) + LISP_WORD_TAG (tag)))" 33372 . 33430)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 45824 . 45830) . ((semantic-list "((a) = make_lisp_symbol (b))" 45831 . 45859)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 46493 . 46522) . ((semantic-list "((v)->header.size = PVECHEADERSIZE (code, lispsize, restsize))" 46528 . 46590)))
          ("XSETMUTEX" (spp-arg-list ("a" "b") 47775 . 47781) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_MUTEX))" 47782 . 47819)))
          ("SUBR_SECTION_ATTRIBUTE" . ((symbol "ATTRIBUTE_SECTION" 95366 . 95383) (semantic-list "(\".subrs\")" 95384 . 95394)))
          ("ALLOCATE_PLAIN_PSEUDOVECTOR" (spp-arg-list ("type" "tag") 136371 . 136382) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type), 0, 0, tag))" 136387 . 136447)))
          ("IS_DAEMON" . ((semantic-list "(daemon_type != 0)" 157495 . 157513)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 174291 . 174297) . ((symbol "make_lisp_ptr" 174302 . 174315) (semantic-list "(&((struct Lisp_Cons) {{{a, {b}}}}), Lisp_Cons)" 174316 . 174363)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 175822 . 175833) . ((symbol "AUTO_STRING_WITH_LEN" 175838 . 175858) (semantic-list "(name, str, strlen (str))" 175859 . 175884)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 4467 . 4475)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 14094 . 14097) . ((symbol "CHECK_TYPE" 14098 . 14108) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 14109 . 14135)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 31820 . 31846)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 45577 . 45583) . ((semantic-list "((a) = make_fixed_natnum (b))" 45584 . 45613)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 47082 . 47088) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 47093 . 47145)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 47422 . 47428) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 47429 . 47467)))
          ("XSETTHREAD" (spp-arg-list ("a" "b") 47712 . 47718) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_THREAD))" 47719 . 47757)))
          ("SAFE_FREE" (spp-arg-list nil 170644 . 170646) . ((symbol "safe_free" 170647 . 170656) (semantic-list "(sa_count)" 170657 . 170667)))
          ("FOR_EACH_TAIL_INTERNAL" (spp-arg-list ("tail" "cycle" "check_quit") 178312 . 178337) . ((FOR "for" 178344 . 178347) (semantic-list "(struct for_each_tail_internal li = { tail, 2, 0, 2 };		\\
       CONSP (tail);							\\
       ((tail) = XCDR (tail),						\\
	((--li.q != 0							\\
	  || ((check_quit) ? maybe_quit () : (void) 0, 0 < --li.n)	\\
	  || (li.q = li.n = li.max <<= 1, li.n >>= USHRT_WIDTH,		\\
	      li.tortoise = (tail), false))				\\
	 && BASE_EQ (tail, li.tortoise))				\\
	? (cycle) : (void) 0))" 178348 . 178721)))
          )
)
    (semanticdb-table "semanticdb-table-15865fefb7e6"
      :file "globals.h"
      :fsize 314593
      :lastmodtime '(25406 23552 196921 646000))
    (semanticdb-table "semanticdb-table-158660098c98"
      :file "comp.h"
      :fsize 3153
      :lastmodtime '(25343 18723 220623 883000))
    (semanticdb-table "semanticdb-table-15865ee9ca5a"
      :file "thread.h"
      :fsize 10009
      :lastmodtime '(25343 18723 296620 465000))
    (semanticdb-table "semanticdb-table-158660090eb8"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CONFIG_H" variable (:constant-flag t) nil [1131 1145])
            ("AMPERSAND_FULL_NAME" variable (:constant-flag t) nil [1341 1360])
            ("COPYRIGHT" variable (:constant-flag t) nil [2560 2569])
            ("DEFAULT_SOUND_DEVICE" variable (:constant-flag t) nil [2854 2874])
            ("DIRECTORY_SEP" variable (:constant-flag t) nil [3026 3039])
            ("DIR_TO_FD" variable (:constant-flag t) nil [3227 3236])
            ("EMACS_CONFIGURATION" variable (:constant-flag t) nil [3931 3950])
            ("EMACS_CONFIG_FEATURES" variable (:constant-flag t) nil [4047 4068])
            ("EMACS_CONFIG_OPTIONS" variable (:constant-flag t) nil [4401 4421])
            ("FLEXIBLE_ARRAY_MEMBER" variable (:constant-flag t) nil [5261 5282])
            ("FUNC_REALPATH_WORKS" variable (:constant-flag t) nil [6071 6090])
            ("GCC_LINT" variable (:constant-flag t) nil [6239 6247])
            ("GC_SETJMP_WORKS" variable (:constant-flag t) nil [6891 6906])
            ("GDK_DISABLE_DEPRECATION_WARNINGS" variable (:constant-flag t) nil [6978 7010])
            ("GETGROUPS_T" variable (:constant-flag t) nil [7136 7147])
            ("GETTIMEOFDAY_TIMEZONE" variable (:constant-flag t) nil [7407 7428])
            ("GETXATTR_WITH_POSIX_ACLS" variable (:constant-flag t) nil [7549 7573])
            ("GLIB_DISABLE_DEPRECATION_WARNINGS" variable (:constant-flag t) nil [7641 7674])
            ("GNULIB_CANONICALIZE_LGPL" variable (:constant-flag t) nil [7919 7943])
            ("GNULIB_CLOSE_STREAM" variable (:constant-flag t) nil [8106 8125])
            ("GNULIB_FACCESSAT" variable (:constant-flag t) nil [8285 8301])
            ("GNULIB_FDOPENDIR" variable (:constant-flag t) nil [8461 8477])
            ("GNULIB_FSCANF" variable (:constant-flag t) nil [8634 8647])
            ("GNULIB_MKOSTEMP" variable (:constant-flag t) nil [8806 8821])
            ("GNULIB_SCANF" variable (:constant-flag t) nil [9490 9502])
            ("GNULIB_STDIO_SINGLE_THREAD" variable (:constant-flag t) nil [9936 9962])
            ("GNULIB_TEMPNAME" variable (:constant-flag t) nil [10121 10136])
            ("GNU_LINUX" variable (:constant-flag t) nil [10205 10214])
            ("HAVE_ACCEPT4" variable (:constant-flag t) nil [10428 10440])
            ("HAVE_ACL_DELETE_DEF_FILE" variable (:constant-flag t) nil [11053 11077])
            ("HAVE_ACL_ENTRIES" variable (:constant-flag t) nil [11349 11365])
            ("HAVE_ACL_EXTENDED_FILE" variable (:constant-flag t) nil [11441 11463])
            ("HAVE_ACL_FIRST_ENTRY" variable (:constant-flag t) nil [11533 11553])
            ("HAVE_ACL_FREE" variable (:constant-flag t) nil [11620 11633])
            ("HAVE_ACL_FROM_MODE" variable (:constant-flag t) nil [11798 11816])
            ("HAVE_ACL_FROM_TEXT" variable (:constant-flag t) nil [11888 11906])
            ("HAVE_ACL_GET_FD" variable (:constant-flag t) nil [11975 11990])
            ("HAVE_ACL_GET_FILE" variable (:constant-flag t) nil [12061 12078])
            ("HAVE_ACL_LIBACL_H" variable (:constant-flag t) nil [12152 12169])
            ("HAVE_ACL_SET_FD" variable (:constant-flag t) nil [12238 12253])
            ("HAVE_ACL_SET_FILE" variable (:constant-flag t) nil [12324 12341])
            ("HAVE_ALIGNED_ALLOC" variable (:constant-flag t) nil [12700 12718])
            ("HAVE_ALLOCA" variable (:constant-flag t) nil [12852 12863])
            ("HAVE_ALLOCA_H" variable (:constant-flag t) nil [12914 12927])
            ("HAVE_ALSA" variable (:constant-flag t) nil [12979 12988])
            ("HAVE_BUG_BIG_NANOSLEEP" variable (:constant-flag t) nil [13145 13167])
            ("HAVE_BYTESWAP_H" variable (:constant-flag t) nil [13239 13254])
            ("HAVE_CANONICALIZE_FILE_NAME" variable (:constant-flag t) nil [13335 13362])
            ("HAVE_CFMAKERAW" variable (:constant-flag t) nil [13430 13444])
            ("HAVE_CFSETSPEED" variable (:constant-flag t) nil [13513 13528])
            ("HAVE_CLOCK_GETRES" variable (:constant-flag t) nil [13599 13616])
            ("HAVE_CLOCK_GETTIME" variable (:constant-flag t) nil [13688 13706])
            ("HAVE_CLOCK_SETTIME" variable (:constant-flag t) nil [13778 13796])
            ("HAVE_COPY_FILE_RANGE" variable (:constant-flag t) nil [14036 14056])
            ("HAVE_C_VARARRAYS" variable (:constant-flag t) nil [14506 14522])
            ("HAVE_DBUS" variable (:constant-flag t) nil [14687 14696])
            ("HAVE_DBUS_TYPE_IS_VALID" variable (:constant-flag t) nil [14773 14796])
            ("HAVE_DBUS_VALIDATE_BUS_NAME" variable (:constant-flag t) nil [14877 14904])
            ("HAVE_DBUS_VALIDATE_INTERFACE" variable (:constant-flag t) nil [14986 15014])
            ("HAVE_DBUS_VALIDATE_MEMBER" variable (:constant-flag t) nil [15093 15118])
            ("HAVE_DBUS_VALIDATE_PATH" variable (:constant-flag t) nil [15195 15218])
            ("HAVE_DBUS_WATCH_GET_UNIX_FD" variable (:constant-flag t) nil [15299 15326])
            ("HAVE_DECL_ALARM" variable (:constant-flag t) nil [15422 15437])
            ("HAVE_DECL_ALIGNED_ALLOC" variable (:constant-flag t) nil [15541 15564])
            ("HAVE_DECL_CLEARERR_UNLOCKED" variable (:constant-flag t) nil [15672 15699])
            ("HAVE_DECL_ECVT" variable (:constant-flag t) nil [15908 15922])
            ("HAVE_DECL_EXECVPE" variable (:constant-flag t) nil [16020 16037])
            ("HAVE_DECL_FCLOSEALL" variable (:constant-flag t) nil [16137 16156])
            ("HAVE_DECL_FCVT" variable (:constant-flag t) nil [16251 16265])
            ("HAVE_DECL_FDOPENDIR" variable (:constant-flag t) nil [16365 16384])
            ("HAVE_DECL_FEOF_UNLOCKED" variable (:constant-flag t) nil [16488 16511])
            ("HAVE_DECL_FERROR_UNLOCKED" variable (:constant-flag t) nil [16617 16642])
            ("HAVE_DECL_FFLUSH_UNLOCKED" variable (:constant-flag t) nil [16748 16773])
            ("HAVE_DECL_FGETS_UNLOCKED" variable (:constant-flag t) nil [16878 16902])
            ("HAVE_DECL_FPUTC_UNLOCKED" variable (:constant-flag t) nil [17007 17031])
            ("HAVE_DECL_FPUTS_UNLOCKED" variable (:constant-flag t) nil [17136 17160])
            ("HAVE_DECL_FREAD_UNLOCKED" variable (:constant-flag t) nil [17265 17289])
            ("HAVE_DECL_FWRITE_UNLOCKED" variable (:constant-flag t) nil [17395 17420])
            ("HAVE_DECL_GCVT" variable (:constant-flag t) nil [17515 17529])
            ("HAVE_DECL_GETCHAR_UNLOCKED" variable (:constant-flag t) nil [17636 17662])
            ("HAVE_DECL_GETC_UNLOCKED" variable (:constant-flag t) nil [17766 17789])
            ("HAVE_DECL_GETDTABLESIZE" variable (:constant-flag t) nil [17893 17916])
            ("HAVE_DECL_LOCALTIME_R" variable (:constant-flag t) nil [18136 18157])
            ("HAVE_DECL_MEMMEM" variable (:constant-flag t) nil [18254 18270])
            ("HAVE_DECL_MEMRCHR" variable (:constant-flag t) nil [18368 18385])
            ("HAVE_DECL_POSIX_SPAWN_SETSID" variable (:constant-flag t) nil [18494 18522])
            ("HAVE_DECL_PUTCHAR_UNLOCKED" variable (:constant-flag t) nil [18629 18655])
            ("HAVE_DECL_PUTC_UNLOCKED" variable (:constant-flag t) nil [18759 18782])
            ("HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC" variable (:constant-flag t) nil [18898 18933])
            ("HAVE_DECL_SECCOMP_SET_MODE_FILTER" variable (:constant-flag t) nil [19047 19080])
            ("HAVE_DECL_STRMODE" variable (:constant-flag t) nil [19178 19195])
            ("HAVE_DECL_STRNLEN" variable (:constant-flag t) nil [19293 19310])
            ("HAVE_DECL_STRTOIMAX" variable (:constant-flag t) nil [19410 19429])
            ("HAVE_DECL___FPENDING" variable (:constant-flag t) nil [19764 19784])
            ("HAVE_DIRENT_H" variable (:constant-flag t) nil [19854 19867])
            ("HAVE_DLADDR" variable (:constant-flag t) nil [20009 20020])
            ("HAVE_ENDGRENT" variable (:constant-flag t) nil [20247 20260])
            ("HAVE_ENDPWENT" variable (:constant-flag t) nil [20327 20340])
            ("HAVE_ENVIRON_DECL" variable (:constant-flag t) nil [20405 20422])
            ("HAVE_EXECINFO_H" variable (:constant-flag t) nil [20581 20596])
            ("HAVE_EXPLICIT_BZERO" variable (:constant-flag t) nil [20669 20688])
            ("HAVE_FACCESSAT" variable (:constant-flag t) nil [20853 20867])
            ("HAVE_FCHDIR" variable (:constant-flag t) nil [21007 21018])
            ("HAVE_FCHMOD" variable (:constant-flag t) nil [21083 21094])
            ("HAVE_FCHMODAT" variable (:constant-flag t) nil [21161 21174])
            ("HAVE_FCNTL" variable (:constant-flag t) nil [21238 21248])
            ("HAVE_FDOPENDIR" variable (:constant-flag t) nil [21316 21330])
            ("HAVE_FORK" variable (:constant-flag t) nil [21393 21402])
            ("HAVE_FREEIFADDRS" variable (:constant-flag t) nil [21472 21488])
            ("HAVE_FREETYPE" variable (:constant-flag t) nil [21566 21579])
            ("HAVE_FREE_POSIX" variable (:constant-flag t) nil [21660 21675])
            ("HAVE_FSEEKO" variable (:constant-flag t) nil [21763 21774])
            ("HAVE_FSTATAT" variable (:constant-flag t) nil [21840 21852])
            ("HAVE_FSYNC" variable (:constant-flag t) nil [21916 21926])
            ("HAVE_FT_FACE_GETCHARVARIANTINDEX" variable (:constant-flag t) nil [22012 22044])
            ("HAVE_FUTIMENS" variable (:constant-flag t) nil [22111 22124])
            ("HAVE_FUTIMES" variable (:constant-flag t) nil [22190 22202])
            ("HAVE_FUTIMESAT" variable (:constant-flag t) nil [22270 22284])
            ("HAVE_GAI_STRERROR" variable (:constant-flag t) nil [22355 22372])
            ("HAVE_GETADDRINFO_A" variable (:constant-flag t) nil [22599 22617])
            ("HAVE_GETCWD" variable (:constant-flag t) nil [22682 22693])
            ("HAVE_GETDTABLESIZE" variable (:constant-flag t) nil [22765 22783])
            ("HAVE_GETGRENT" variable (:constant-flag t) nil [22850 22863])
            ("HAVE_GETHOSTNAME" variable (:constant-flag t) nil [23031 23047])
            ("HAVE_GETIFADDRS" variable (:constant-flag t) nil [23116 23131])
            ("HAVE_GETOPT_H" variable (:constant-flag t) nil [23201 23214])
            ("HAVE_GETOPT_LONG_ONLY" variable (:constant-flag t) nil [23289 23310])
            ("HAVE_GETPAGESIZE" variable (:constant-flag t) nil [23380 23396])
            ("HAVE_GETPT" variable (:constant-flag t) nil [23460 23470])
            ("HAVE_GETPWENT" variable (:constant-flag t) nil [23537 23550])
            ("HAVE_GETRANDOM" variable (:constant-flag t) nil [23618 23632])
            ("HAVE_GETRLIMIT" variable (:constant-flag t) nil [23700 23714])
            ("HAVE_GETRUSAGE" variable (:constant-flag t) nil [23782 23796])
            ("HAVE_GETSOCKNAME" variable (:constant-flag t) nil [23866 23882])
            ("HAVE_GETTIMEOFDAY" variable (:constant-flag t) nil [23953 23970])
            ("HAVE_GET_CURRENT_DIR_NAME" variable (:constant-flag t) nil [24049 24074])
            ("HAVE_GIF" variable (:constant-flag t) nil [24207 24215])
            ("HAVE_GLIB" variable (:constant-flag t) nil [24267 24276])
            ("HAVE_GMP_H" variable (:constant-flag t) nil [24431 24441])
            ("HAVE_GNUTLS" variable (:constant-flag t) nil [24483 24494])
            ("HAVE_GRANTPT" variable (:constant-flag t) nil [24638 24650])
            ("HAVE_GSETTINGS" variable (:constant-flag t) nil [24700 24714])
            ("HAVE_GTK3" variable (:constant-flag t) nil [24769 24778])
            ("HAVE_HARFBUZZ" variable (:constant-flag t) nil [25155 25168])
            ("HAVE_IEEE754_H" variable (:constant-flag t) nil [25239 25253])
            ("HAVE_IFADDRS_H" variable (:constant-flag t) nil [25324 25338])
            ("HAVE_IMAGEMAGICK" variable (:constant-flag t) nil [25390 25406])
            ("HAVE_INOTIFY" variable (:constant-flag t) nil [25525 25537])
            ("HAVE_INTTYPES_H" variable (:constant-flag t) nil [25609 25624])
            ("HAVE_ISBLANK" variable (:constant-flag t) nil [25690 25702])
            ("HAVE_ISWCTYPE" variable (:constant-flag t) nil [25769 25782])
            ("HAVE_JPEG" variable (:constant-flag t) nil [25861 25870])
            ("HAVE_JSON" variable (:constant-flag t) nil [25913 25922])
            ("HAVE_LANGINFO_CODESET" variable (:constant-flag t) nil [26608 26629])
            ("HAVE_LANGINFO__NL_PAPER_WIDTH" variable (:constant-flag t) nil [26714 26743])
            ("HAVE_LCHMOD" variable (:constant-flag t) nil [26808 26819])
            ("HAVE_LCMS2" variable (:constant-flag t) nil [26890 26900])
            ("HAVE_LIBOTF" variable (:constant-flag t) nil [27661 27672])
            ("HAVE_LIBSELINUX" variable (:constant-flag t) nil [27818 27833])
            ("HAVE_LIBSYSTEMD" variable (:constant-flag t) nil [27879 27894])
            ("HAVE_LIBXML2" variable (:constant-flag t) nil [27965 27977])
            ("HAVE_LIMITS_H" variable (:constant-flag t) nil [28146 28159])
            ("HAVE_LINUX_FILTER_H" variable (:constant-flag t) nil [28235 28254])
            ("HAVE_LINUX_FS_H" variable (:constant-flag t) nil [28326 28341])
            ("HAVE_LINUX_SECCOMP_H" variable (:constant-flag t) nil [28418 28438])
            ("HAVE_LINUX_SYSINFO" variable (:constant-flag t) nil [28504 28522])
            ("HAVE_LOCALTIME_R" variable (:constant-flag t) nil [28716 28732])
            ("HAVE_LOG2" variable (:constant-flag t) nil [28795 28804])
            ("HAVE_LONG_LONG_INT" variable (:constant-flag t) nil [28878 28896])
            ("HAVE_LRAND48" variable (:constant-flag t) nil [28962 28974])
            ("HAVE_LSTAT" variable (:constant-flag t) nil [29038 29048])
            ("HAVE_LUTIMES" variable (:constant-flag t) nil [29114 29126])
            ("HAVE_MAGICKAUTOORIENTIMAGE" variable (:constant-flag t) nil [29474 29500])
            ("HAVE_MAGICKEXPORTIMAGEPIXELS" variable (:constant-flag t) nil [29582 29610])
            ("HAVE_MAGICKMERGEIMAGELAYERS" variable (:constant-flag t) nil [29691 29718])
            ("HAVE_MAGICKRELINQUISHMEMORY" variable (:constant-flag t) nil [29799 29826])
            ("HAVE_MALLOC_H" variable (:constant-flag t) nil [29986 29999])
            ("HAVE_MALLOC_POSIX" variable (:constant-flag t) nil [30188 30205])
            ("HAVE_MALLOC_TRIM" variable (:constant-flag t) nil [30275 30291])
            ("HAVE_MBSTATE_T" variable (:constant-flag t) nil [30354 30368])
            ("HAVE_MEMMEM" variable (:constant-flag t) nil [30433 30444])
            ("HAVE_MEMPCPY" variable (:constant-flag t) nil [30510 30522])
            ("HAVE_MEMRCHR" variable (:constant-flag t) nil [30588 30600])
            ("HAVE_MINMAX_IN_SYS_PARAM_H" variable (:constant-flag t) nil [30962 30988])
            ("HAVE_MKOSTEMP" variable (:constant-flag t) nil [31055 31068])
            ("HAVE_MMAP" variable (:constant-flag t) nil [31140 31149])
            ("HAVE_MODULES" variable (:constant-flag t) nil [31300 31312])
            ("HAVE_NET_IF_H" variable (:constant-flag t) nil [31881 31894])
            ("HAVE_NEWLOCALE" variable (:constant-flag t) nil [31962 31976])
            ("HAVE_OTF_GET_VARIATION_GLYPHS" variable (:constant-flag t) nil [32310 32339])
            ("HAVE_PDUMPER" variable (:constant-flag t) nil [32511 32523])
            ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" variable (:constant-flag t) nil [32599 32633])
            ("HAVE_PIPE2" variable (:constant-flag t) nil [32764 32774])
            ("HAVE_PNG" variable (:constant-flag t) nil [32833 32841])
            ("HAVE_POSIX_MADVISE" variable (:constant-flag t) nil [32913 32931])
            ("HAVE_POSIX_OPENPT" variable (:constant-flag t) nil [33097 33114])
            ("HAVE_POSIX_SPAWN" variable (:constant-flag t) nil [33184 33200])
            ("HAVE_POSIX_SPAWNATTR_SETFLAGS" variable (:constant-flag t) nil [33283 33312])
            ("HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR_NP" variable (:constant-flag t) nil [33546 33587])
            ("HAVE_PROCFS" variable (:constant-flag t) nil [33646 33657])
            ("HAVE_PSELECT" variable (:constant-flag t) nil [33723 33735])
            ("HAVE_PTHREAD" variable (:constant-flag t) nil [33891 33903])
            ("HAVE_PTHREAD_H" variable (:constant-flag t) nil [33974 33988])
            ("HAVE_PTHREAD_SETNAME_NP" variable (:constant-flag t) nil [34065 34088])
            ("HAVE_PTHREAD_SIGMASK" variable (:constant-flag t) nil [34497 34517])
            ("HAVE_PTYS" variable (:constant-flag t) nil [34578 34587])
            ("HAVE_PTY_H" variable (:constant-flag t) nil [34654 34664])
            ("HAVE_PWD_H" variable (:constant-flag t) nil [34731 34741])
            ("HAVE_RANDOM" variable (:constant-flag t) nil [34806 34817])
            ("HAVE_READLINK" variable (:constant-flag t) nil [34969 34982])
            ("HAVE_READLINKAT" variable (:constant-flag t) nil [35051 35066])
            ("HAVE_REALPATH" variable (:constant-flag t) nil [35133 35146])
            ("HAVE_RECVFROM" variable (:constant-flag t) nil [35213 35226])
            ("HAVE_RINT" variable (:constant-flag t) nil [35289 35298])
            ("HAVE_RSVG" variable (:constant-flag t) nil [35346 35355])
            ("HAVE_SANITIZER_LSAN_INTERFACE_H" variable (:constant-flag t) nil [35443 35474])
            ("HAVE_SBRK" variable (:constant-flag t) nil [35537 35546])
            ("HAVE_SCHED_GETAFFINITY" variable (:constant-flag t) nil [35622 35644])
            ("HAVE_SCHED_GETAFFINITY_LIKE_GLIBC" variable (:constant-flag t) nil [35731 35764])
            ("HAVE_SELECT" variable (:constant-flag t) nil [35936 35947])
            ("HAVE_SENDTO" variable (:constant-flag t) nil [36012 36023])
            ("HAVE_SETITIMER" variable (:constant-flag t) nil [36184 36198])
            ("HAVE_SETLOCALE" variable (:constant-flag t) nil [36266 36280])
            ("HAVE_SETRLIMIT" variable (:constant-flag t) nil [36348 36362])
            ("HAVE_SHUTDOWN" variable (:constant-flag t) nil [36429 36442])
            ("HAVE_SIGDESCR_NP" variable (:constant-flag t) nil [36593 36609])
            ("HAVE_SIGSETJMP" variable (:constant-flag t) nil [36954 36968])
            ("HAVE_SIGSET_T" variable (:constant-flag t) nil [37037 37050])
            ("HAVE_SNPRINTF" variable (:constant-flag t) nil [37117 37130])
            ("HAVE_SOCKETS" variable (:constant-flag t) nil [37202 37214])
            ("HAVE_SOUND" variable (:constant-flag t) nil [37271 37281])
            ("HAVE_SPAWN_H" variable (:constant-flag t) nil [37442 37454])
            ("HAVE_SQLITE3" variable (:constant-flag t) nil [37531 37543])
            ("HAVE_SQLITE3_LOAD_EXTENSION" variable (:constant-flag t) nil [37613 37640])
            ("HAVE_STACK_OVERFLOW_HANDLING" variable (:constant-flag t) nil [37720 37748])
            ("HAVE_STATEMENT_EXPRESSIONS" variable (:constant-flag t) nil [37890 37916])
            ("HAVE_STDALIGN_H" variable (:constant-flag t) nil [37988 38003])
            ("HAVE_STDBOOL_H" variable (:constant-flag t) nil [38074 38088])
            ("HAVE_STDINT_H" variable (:constant-flag t) nil [38250 38263])
            ("HAVE_STDIO_EXT_H" variable (:constant-flag t) nil [38336 38352])
            ("HAVE_STDIO_H" variable (:constant-flag t) nil [38421 38433])
            ("HAVE_STDLIB_H" variable (:constant-flag t) nil [38503 38516])
            ("HAVE_STPCPY" variable (:constant-flag t) nil [38581 38592])
            ("HAVE_STRINGS_H" variable (:constant-flag t) nil [38663 38677])
            ("HAVE_STRING_H" variable (:constant-flag t) nil [38747 38760])
            ("HAVE_STRSIGNAL" variable (:constant-flag t) nil [38828 38842])
            ("HAVE_STRTOIMAX" variable (:constant-flag t) nil [38910 38924])
            ("HAVE_STRUCT_ATTRIBUTE_ALIGNED" variable (:constant-flag t) nil [39124 39153])
            ("HAVE_STRUCT_DIRENT_D_TYPE" variable (:constant-flag t) nil [39259 39284])
            ("HAVE_STRUCT_IFREQ_IFR_ADDR" variable (:constant-flag t) nil [39359 39385])
            ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" variable (:constant-flag t) nil [39583 39614])
            ("HAVE_STRUCT_IFREQ_IFR_FLAGS" variable (:constant-flag t) nil [39690 39717])
            ("HAVE_STRUCT_IFREQ_IFR_HWADDR" variable (:constant-flag t) nil [39794 39822])
            ("HAVE_STRUCT_IFREQ_IFR_NETMASK" variable (:constant-flag t) nil [39900 39929])
            ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" variable (:constant-flag t) nil [40488 40520])
            ("HAVE_STRUCT_TM_TM_ZONE" variable (:constant-flag t) nil [40967 40989])
            ("HAVE_STRUCT_UNIPAIR_UNICODE" variable (:constant-flag t) nil [41065 41092])
            ("HAVE_SYMLINK" variable (:constant-flag t) nil [41158 41170])
            ("HAVE_SYNC" variable (:constant-flag t) nil [41233 41242])
            ("HAVE_SYS_ACL_H" variable (:constant-flag t) nil [41469 41483])
            ("HAVE_SYS_CDEFS_H" variable (:constant-flag t) nil [41652 41668])
            ("HAVE_SYS_MOUNT_H" variable (:constant-flag t) nil [42135 42151])
            ("HAVE_SYS_PARAM_H" variable (:constant-flag t) nil [42224 42240])
            ("HAVE_SYS_RANDOM_H" variable (:constant-flag t) nil [42406 42423])
            ("HAVE_SYS_RESOURCE_H" variable (:constant-flag t) nil [42499 42518])
            ("HAVE_SYS_SELECT_H" variable (:constant-flag t) nil [42592 42609])
            ("HAVE_SYS_SOCKET_H" variable (:constant-flag t) nil [42683 42700])
            ("HAVE_SYS_SOUNDCARD_H" variable (:constant-flag t) nil [42777 42797])
            ("HAVE_SYS_STATFS_H" variable (:constant-flag t) nil [42871 42888])
            ("HAVE_SYS_STAT_H" variable (:constant-flag t) nil [42960 42975])
            ("HAVE_SYS_SYSINFO_H" variable (:constant-flag t) nil [43144 43162])
            ("HAVE_SYS_TIME_H" variable (:constant-flag t) nil [43428 43443])
            ("HAVE_SYS_TYPES_H" variable (:constant-flag t) nil [43516 43532])
            ("HAVE_SYS_UN_H" variable (:constant-flag t) nil [43602 43615])
            ("HAVE_SYS_UTSNAME_H" variable (:constant-flag t) nil [43690 43708])
            ("HAVE_SYS_VFS_H" variable (:constant-flag t) nil [43779 43793])
            ("HAVE_SYS_WAIT_H" variable (:constant-flag t) nil [43970 43985])
            ("HAVE_TERM_H" variable (:constant-flag t) nil [44053 44064])
            ("HAVE_TIFF" variable (:constant-flag t) nil [44133 44142])
            ("HAVE_TIMEGM" variable (:constant-flag t) nil [44207 44218])
            ("HAVE_TIMERFD" variable (:constant-flag t) nil [44300 44312])
            ("HAVE_TIMER_GETOVERRUN" variable (:constant-flag t) nil [44387 44408])
            ("HAVE_TIMER_SETTIME" variable (:constant-flag t) nil [44480 44498])
            ("HAVE_TIMESPEC_GET" variable (:constant-flag t) nil [44562 44579])
            ("HAVE_TM_GMTOFF" variable (:constant-flag t) nil [44835 44849])
            ("HAVE_TM_ZONE" variable (:constant-flag t) nil [44967 44979])
            ("HAVE_TRUNC" variable (:constant-flag t) nil [45128 45138])
            ("HAVE_TYPEOF" variable (:constant-flag t) nil [45204 45215])
            ("HAVE_UNISTD_H" variable (:constant-flag t) nil [45466 45479])
            ("HAVE_UNSIGNED_LONG_LONG_INT" variable (:constant-flag t) nil [45562 45589])
            ("HAVE_UTIMENSAT" variable (:constant-flag t) nil [45739 45753])
            ("HAVE_UTMP_H" variable (:constant-flag t) nil [45821 45832])
            ("HAVE_VALGRIND_VALGRIND_H" variable (:constant-flag t) nil [45913 45937])
            ("HAVE_VFORK" variable (:constant-flag t) nil [46001 46011])
            ("HAVE_WCHAR_H" variable (:constant-flag t) nil [46229 46241])
            ("HAVE_WCHAR_T" variable (:constant-flag t) nil [46298 46310])
            ("HAVE_WEBP" variable (:constant-flag t) nil [46358 46367])
            ("HAVE_WINDOW_SYSTEM" variable (:constant-flag t) nil [46421 46439])
            ("HAVE_WORKING_FORK" variable (:constant-flag t) nil [46576 46593])
            ("HAVE_WORKING_UTIMES" variable (:constant-flag t) nil [46779 46798])
            ("HAVE_WORKING_VFORK" variable (:constant-flag t) nil [46846 46864])
            ("HAVE_X11" variable (:constant-flag t) nil [47028 47036])
            ("HAVE_X11R6" variable (:constant-flag t) nil [47114 47124])
            ("HAVE_X11R6_XIM" variable (:constant-flag t) nil [47193 47207])
            ("HAVE_XCOMPOSITE" variable (:constant-flag t) nil [47556 47571])
            ("HAVE_XDBE" variable (:constant-flag t) nil [47633 47642])
            ("HAVE_XDESTROYSUBWINDOWS" variable (:constant-flag t) nil [47719 47742])
            ("HAVE_XDISPLAYCELLS" variable (:constant-flag t) nil [47814 47832])
            ("HAVE_XFIXES" variable (:constant-flag t) nil [47896 47907])
            ("HAVE_XIBARRIERRELEASEPOINTERINFO_DEVICEID" variable (:constant-flag t) nil [48067 48108])
            ("HAVE_XICCALLBACK_CALLBACK" variable (:constant-flag t) nil [48182 48207])
            ("HAVE_XIGESTURECLASSINFO_TYPE" variable (:constant-flag t) nil [48284 48312])
            ("HAVE_XIM" variable (:constant-flag t) nil [48362 48370])
            ("HAVE_XINERAMA" variable (:constant-flag t) nil [48436 48449])
            ("HAVE_XINPUT2" variable (:constant-flag t) nil [48537 48549])
            ("HAVE_XISCROLLCLASSINFO_TYPE" variable (:constant-flag t) nil [48625 48652])
            ("HAVE_XITOUCHCLASSINFO_TYPE" variable (:constant-flag t) nil [48727 48753])
            ("HAVE_XKB" variable (:constant-flag t) nil [48814 48822])
            ("HAVE_XKBFREENAMES" variable (:constant-flag t) nil [48893 48910])
            ("HAVE_XKBREFRESHKEYBOARDMAPPING" variable (:constant-flag t) nil [48994 49024])
            ("HAVE_XPM" variable (:constant-flag t) nil [49091 49099])
            ("HAVE_XRANDR" variable (:constant-flag t) nil [49163 49174])
            ("HAVE_XRENDER" variable (:constant-flag t) nil [49229 49241])
            ("HAVE_XRMSETDATABASE" variable (:constant-flag t) nil [49314 49333])
            ("HAVE_XSCREENNUMBEROFSCREEN" variable (:constant-flag t) nil [49413 49439])
            ("HAVE_XSCREENRESOURCESTRING" variable (:constant-flag t) nil [49519 49545])
            ("HAVE_XSHAPE" variable (:constant-flag t) nil [49630 49641])
            ("HAVE_XSYNC" variable (:constant-flag t) nil [49720 49730])
            ("HAVE_XSYNCTRIGGERFENCE" variable (:constant-flag t) nil [49806 49828])
            ("HAVE_XWIDGETS" variable (:constant-flag t) nil [49888 49901])
            ("HAVE_X_I18N" variable (:constant-flag t) nil [49959 49970])
            ("HAVE_X_SM" variable (:constant-flag t) nil [50035 50044])
            ("HAVE_X_WINDOWS" variable (:constant-flag t) nil [50114 50128])
            ("HAVE_ZLIB" variable (:constant-flag t) nil [50194 50203])
            ("HAVE__SETJMP" variable (:constant-flag t) nil [50263 50275])
            ("HAVE___BUILTIN_EXPECT" variable (:constant-flag t) nil [50383 50404])
            ("HAVE___BUILTIN_FRAME_ADDRESS" variable (:constant-flag t) nil [50620 50648])
            ("HAVE___BUILTIN_UNWIND_INIT" variable (:constant-flag t) nil [50728 50754])
            ("HAVE___EXECUTABLE_START" variable (:constant-flag t) nil [50831 50854])
            ("_GL_INLINE" variable (:constant-flag t) nil [54023 54033])
            ("_GL_EXTERN_INLINE" variable (:constant-flag t) nil [54050 54067])
            ("_GL_EXTERN_INLINE_IN_USE" variable (:constant-flag t) nil [54091 54115])
            ("_GL_INLINE" variable (:constant-flag t) nil [54441 54451])
            ("_GL_EXTERN_INLINE" variable (:constant-flag t) nil [54483 54500])
            ("_GL_EXTERN_INLINE_IN_USE" variable (:constant-flag t) nil [54517 54541])
            ("_GL_INLINE_HEADER_BEGIN" variable (:constant-flag t) nil [55560 55583])
            ("_GL_INLINE_HEADER_END" variable (:constant-flag t) nil [55593 55614])
            ("HAVE___INLINE" variable (:constant-flag t) nil [55698 55711])
            ("INTERRUPT_INPUT" variable (:constant-flag t) nil [56202 56217])
            ("IS_ANY_SEP" variable (:constant-flag t) nil [56287 56297])
            ("IS_DEVICE_SEP" variable (:constant-flag t) nil [56392 56405])
            ("IS_DIRECTORY_SEP" variable (:constant-flag t) nil [56480 56496])
            ("LINUX_SYSINFO_UNIT" variable (:constant-flag t) nil [56781 56799])
            ("LSTAT_FOLLOWS_SLASHED_SYMLINK" variable (:constant-flag t) nil [56899 56928])
            ("MALLOC_0_IS_NONNULL" variable (:constant-flag t) nil [57448 57467])
            ("__USE_MINGW_ANSI_STDIO" variable (:constant-flag t) nil [57550 57572])
            ("MODULES_SUFFIX" variable (:constant-flag t) nil [57734 57748])
            ("NARROWPROTO" variable (:constant-flag t) nil [57913 57924])
            ("NATIVE_ELISP_SUFFIX" variable (:constant-flag t) nil [57985 58004])
            ("NEED_MKTIME_INTERNAL" variable (:constant-flag t) nil [58332 58352])
            ("NEED_MKTIME_WORKING" variable (:constant-flag t) nil [58611 58630])
            ("NULL_DEVICE" variable (:constant-flag t) nil [59114 59125])
            ("PACKAGE_BUGREPORT" variable (:constant-flag t) nil [59416 59433])
            ("PACKAGE_NAME" variable (:constant-flag t) nil [59514 59526])
            ("PACKAGE_STRING" variable (:constant-flag t) nil [59607 59621])
            ("PACKAGE_TARNAME" variable (:constant-flag t) nil [59710 59725])
            ("PACKAGE_URL" variable (:constant-flag t) nil [59791 59802])
            ("PACKAGE_VERSION" variable (:constant-flag t) nil [59895 59910])
            ("POLL_FOR_INPUT" variable (:constant-flag t) nil [60174 60188])
            ("PROMOTED_MODE_T" variable (:constant-flag t) nil [60294 60309])
            ("PTY_ITERATION" variable (:constant-flag t) nil [60835 60848])
            ("PTY_NAME_SPRINTF" variable (:constant-flag t) nil [60968 60984])
            ("PTY_OPEN" variable (:constant-flag t) nil [61041 61049])
            ("PTY_TTY_NAME_SPRINTF" variable (:constant-flag t) nil [61272 61292])
            ("SEPCHAR" variable (:constant-flag t) nil [62218 62225])
            ("SIGNALS_VIA_CHARACTERS" variable (:constant-flag t) nil [62392 62414])
            ("SIZEOF_LONG" variable (:constant-flag t) nil [62603 62614])
            ("SIZEOF_SPEED_T" variable (:constant-flag t) nil [62678 62692])
            ("STAT_STATFS2_FRSIZE" variable (:constant-flag t) nil [63899 63918])
            ("STAT_STATVFS" variable (:constant-flag t) nil [64298 64310])
            ("STDC_HEADERS" variable (:constant-flag t) nil [64613 64625])
            ("SYSTEM_MALLOC" variable (:constant-flag t) nil [64788 64801])
            ("SYSTEM_TYPE" variable (:constant-flag t) nil [64881 64892])
            ("TERMINFO" variable (:constant-flag t) nil [65052 65060])
            ("TERMINFO_DEFINES_BC" variable (:constant-flag t) nil [65155 65174])
            ("TERM_HEADER" variable (:constant-flag t) nil [65245 65256])
            ("THREADS_ENABLED" variable (:constant-flag t) nil [65330 65345])
            ("TIME_T_IS_SIGNED" variable (:constant-flag t) nil [65396 65412])
            ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" variable (:constant-flag t) nil [65668 65713])
            ("UNIX98_PTYS" variable (:constant-flag t) nil [65948 65959])
            ("USABLE_FIONREAD" variable (:constant-flag t) nil [66012 66027])
            ("USABLE_SIGIO" variable (:constant-flag t) nil [66077 66089])
            ("USER_FULL_NAME" variable (:constant-flag t) nil [66224 66238])
            ("USE_ACL" variable (:constant-flag t) nil [66326 66333])
            ("USE_CAIRO" variable (:constant-flag t) nil [66449 66458])
            ("USE_CAIRO_XCB" variable (:constant-flag t) nil [66525 66538])
            ("USE_FILE_NOTIFY" variable (:constant-flag t) nil [66597 66612])
            ("USE_GTK" variable (:constant-flag t) nil [66656 66663])
            ("_ALL_SOURCE" variable (:constant-flag t) nil [67033 67044])
            ("_DARWIN_C_SOURCE" variable (:constant-flag t) nil [67131 67147])
            ("__EXTENSIONS__" variable (:constant-flag t) nil [67234 67248])
            ("_HPUX_ALT_XOPEN_SOCKET_API" variable (:constant-flag t) nil [67515 67541])
            ("_NETBSD_SOURCE" variable (:constant-flag t) nil [67896 67910])
            ("_OPENBSD_SOURCE" variable (:constant-flag t) nil [68058 68073])
            ("_POSIX_PTHREAD_SEMANTICS" variable (:constant-flag t) nil [68416 68440])
            ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" variable (:constant-flag t) nil [68566 68601])
            ("__STDC_WANT_IEC_60559_BFP_EXT__" variable (:constant-flag t) nil [68723 68754])
            ("__STDC_WANT_IEC_60559_DFP_EXT__" variable (:constant-flag t) nil [68876 68907])
            ("__STDC_WANT_IEC_60559_FUNCS_EXT__" variable (:constant-flag t) nil [69031 69064])
            ("__STDC_WANT_IEC_60559_TYPES_EXT__" variable (:constant-flag t) nil [69188 69221])
            ("__STDC_WANT_LIB_EXT2__" variable (:constant-flag t) nil [69334 69356])
            ("__STDC_WANT_MATH_SPEC_FUNCS__" variable (:constant-flag t) nil [69471 69500])
            ("_TANDEM_SOURCE" variable (:constant-flag t) nil [69582 69596])
            ("USE_TOOLKIT_SCROLL_BARS" variable (:constant-flag t) nil [69827 69850])
            ("USE_UNLOCKED_IO" variable (:constant-flag t) nil [69908 69923])
            ("USE_XIM" variable (:constant-flag t) nil [70137 70144])
            ("USG" variable (:constant-flag t) nil [70283 70286])
            ("_GL_GNUC_PREREQ" variable (:constant-flag t) nil [71719 71734])
            ("_USE_STD_STAT" variable (:constant-flag t) nil [74362 74375])
            ("_GL_ASYNC_SAFE" variable (:constant-flag t) nil [76483 76497])
            ("_GL_HAS_ATTRIBUTE" variable (:constant-flag t) nil [76827 76844])
            ("_GL_ATTR_alloc_size" variable (:constant-flag t) nil [76876 76895])
            ("_GL_ATTR_always_inline" variable (:constant-flag t) nil [76928 76950])
            ("_GL_ATTR_artificial" variable (:constant-flag t) nil [76983 77002])
            ("_GL_ATTR_cold" variable (:constant-flag t) nil [77035 77048])
            ("_GL_ATTR_const" variable (:constant-flag t) nil [77081 77095])
            ("_GL_ATTR_deprecated" variable (:constant-flag t) nil [77129 77148])
            ("_GL_ATTR_diagnose_if" variable (:constant-flag t) nil [77181 77201])
            ("_GL_ATTR_error" variable (:constant-flag t) nil [77213 77227])
            ("_GL_ATTR_externally_visible" variable (:constant-flag t) nil [77260 77287])
            ("_GL_ATTR_fallthrough" variable (:constant-flag t) nil [77320 77340])
            ("_GL_ATTR_format" variable (:constant-flag t) nil [77373 77388])
            ("_GL_ATTR_leaf" variable (:constant-flag t) nil [77421 77434])
            ("_GL_ATTR_malloc" variable (:constant-flag t) nil [77467 77482])
            ("_GL_ATTR_may_alias" variable (:constant-flag t) nil [77567 77585])
            ("_GL_ATTR_noinline" variable (:constant-flag t) nil [77626 77643])
            ("_GL_ATTR_nonnull" variable (:constant-flag t) nil [77676 77692])
            ("_GL_ATTR_nonstring" variable (:constant-flag t) nil [77725 77743])
            ("_GL_ATTR_nothrow" variable (:constant-flag t) nil [77776 77792])
            ("_GL_ATTR_packed" variable (:constant-flag t) nil [77825 77840])
            ("_GL_ATTR_pure" variable (:constant-flag t) nil [77873 77886])
            ("_GL_ATTR_returns_nonnull" variable (:constant-flag t) nil [77920 77944])
            ("_GL_ATTR_sentinel" variable (:constant-flag t) nil [77977 77994])
            ("_GL_ATTR_unused" variable (:constant-flag t) nil [78027 78042])
            ("_GL_ATTR_warn_unused_result" variable (:constant-flag t) nil [78075 78102])
            ("_GL_HAS_C_ATTRIBUTE" variable (:constant-flag t) nil [78397 78416])
            ("_GL_ATTRIBUTE_ALLOC_SIZE" variable (:constant-flag t) nil [78918 78942])
            ("_GL_ATTRIBUTE_ALWAYS_INLINE" variable (:constant-flag t) nil [79248 79275])
            ("_GL_ATTRIBUTE_ARTIFICIAL" variable (:constant-flag t) nil [79612 79636])
            ("_GL_ATTRIBUTE_COLD" variable (:constant-flag t) nil [80152 80170])
            ("_GL_ATTRIBUTE_CONST" variable (:constant-flag t) nil [80692 80711])
            ("_GL_ATTRIBUTE_DEALLOC" variable (:constant-flag t) nil [81213 81234])
            ("_GL_ATTRIBUTE_DEALLOC_FREE" variable (:constant-flag t) nil [81463 81489])
            ("_GL_ATTRIBUTE_DEPRECATED" variable (:constant-flag t) nil [82061 82085])
            ("_GL_ATTRIBUTE_ERROR" variable (:constant-flag t) nil [82766 82785])
            ("_GL_ATTRIBUTE_WARNING" variable (:constant-flag t) nil [82800 82821])
            ("_GL_ATTRIBUTE_EXTERNALLY_VISIBLE" variable (:constant-flag t) nil [83151 83183])
            ("_GL_ATTRIBUTE_FALLTHROUGH" variable (:constant-flag t) nil [83731 83756])
            ("_GL_ATTRIBUTE_FORMAT" variable (:constant-flag t) nil [84358 84378])
            ("_GL_ATTRIBUTE_LEAF" variable (:constant-flag t) nil [84778 84796])
            ("_GL_ATTRIBUTE_MALLOC" variable (:constant-flag t) nil [85045 85065])
            ("_GL_ATTRIBUTE_MAY_ALIAS" variable (:constant-flag t) nil [85504 85527])
            ("_GL_ATTRIBUTE_MAYBE_UNUSED" variable (:constant-flag t) nil [86126 86152])
            ("_GL_UNUSED" variable (:constant-flag t) nil [86308 86318])
            ("_UNUSED_PARAMETER_" variable (:constant-flag t) nil [86394 86412])
            ("_GL_ATTRIBUTE_NODISCARD" variable (:constant-flag t) nil [86946 86969])
            ("_GL_ATTRIBUTE_NOINLINE" variable (:constant-flag t) nil [87208 87230])
            ("_GL_ATTRIBUTE_NONNULL" variable (:constant-flag t) nil [87577 87598])
            ("_GL_ATTRIBUTE_NONSTRING" variable (:constant-flag t) nil [87954 87977])
            ("_GL_ATTRIBUTE_NOTHROW" variable (:constant-flag t) nil [88298 88319])
            ("_GL_ATTRIBUTE_PACKED" variable (:constant-flag t) nil [88729 88749])
            ("_GL_ATTRIBUTE_PURE" variable (:constant-flag t) nil [89243 89261])
            ("_GL_ATTRIBUTE_RETURNS_NONNULL" variable (:constant-flag t) nil [89537 89566])
            ("_GL_ATTRIBUTE_SENTINEL" variable (:constant-flag t) nil [89983 90005])
            ("_GL_ATTRIBUTE_UNUSED" variable (:constant-flag t) nil [90171 90191])
            ("_GL_UNUSED_LABEL" variable (:constant-flag t) nil [90674 90690])
            ("_GL_CMP" variable (:constant-flag t) nil [92174 92181])
            ("my_strftime" variable (:constant-flag t) nil [92465 92476])
            ("restrict" variable (:constant-flag t) nil [94241 94249])
            ("subprocesses" variable (:constant-flag t) nil [94981 94993])
            ("true" variable (:constant-flag t) nil [97961 97965])
            ("conf_post.h" include (:system-flag t) nil [98225 98247]))          
      :file "config.h"
      :pointmax 98315
      :fsize 98316
      :lastmodtime '(25406 23255 105313 72000)
      :unmatched-syntax '((close-paren 54240 . 54241) (symbol 54209 . 54240) (symbol 54201 . 54208) (punctuation 54200 . 54201) (punctuation 54198 . 54199) (punctuation 54197 . 54198) (close-paren 54012 . 54013) (symbol 53981 . 54012) (symbol 53973 . 53980) (punctuation 53972 . 53973) (punctuation 53970 . 53971) (punctuation 53969 . 53970) (close-paren 53960 . 53961) (semantic-list 53823 . 53960) (punctuation 53821 . 53822) (symbol "1" 53792 . 53812) (punctuation 53790 . 53791) (punctuation 53789 . 53790) (symbol "1" 53768 . 53788) (symbol 53760 . 53767) (punctuation 53758 . 53759))
      :lexical-table 
        '(("AMPERSAND_FULL_NAME" . ((number "1" 1361 . 1362)))
          ("DIRECTORY_SEP" . ((string "'/'" 3040 . 3043)))
          ("GETTIMEOFDAY_TIMEZONE" . ((VOID "void" 7429 . 7433)))
          ("GNULIB_TEMPNAME" . ((number "1" 10137 . 10138)))
          ("HAVE_ACCEPT4" . ((number "1" 10441 . 10442)))
          ("HAVE_DBUS_TYPE_IS_VALID" . ((number "1" 14797 . 14798)))
          ("HAVE_DECL_GCVT" . ((number "1" 17530 . 17531)))
          ("HAVE_FSTATAT" . ((number "1" 21853 . 21854)))
          ("HAVE_GETCWD" . ((number "1" 22694 . 22695)))
          ("HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR_NP" . ((number "1" 33588 . 33589)))
          ("HAVE_PTHREAD" . ((number "1" 33904 . 33905)))
          ("HAVE_PTHREAD_H" . ((number "1" 33989 . 33990)))
          ("HAVE_SCHED_GETAFFINITY_LIKE_GLIBC" . ((number "1" 35765 . 35766)))
          ("HAVE_SETRLIMIT" . ((number "1" 36363 . 36364)))
          ("HAVE_SOUND" . ((number "1" 37282 . 37283)))
          ("HAVE_STATEMENT_EXPRESSIONS" . ((number "1" 37917 . 37918)))
          ("HAVE_STDINT_H" . ((number "1" 38264 . 38265)))
          ("HAVE_STPCPY" . ((number "1" 38593 . 38594)))
          ("HAVE_SYS_ACL_H" . ((number "1" 41484 . 41485)))
          ("HAVE_SYS_PARAM_H" . ((number "1" 42241 . 42242)))
          ("HAVE_SYS_RESOURCE_H" . ((number "1" 42519 . 42520)))
          ("HAVE_SYS_STATFS_H" . ((number "1" 42889 . 42890)))
          ("HAVE_TERM_H" . ((number "1" 44065 . 44066)))
          ("HAVE_TIFF" . ((number "1" 44143 . 44144)))
          ("HAVE_WINDOW_SYSTEM" . ((number "1" 46440 . 46441)))
          ("HAVE_X11R6" . ((number "1" 47125 . 47126)))
          ("HAVE_XIGESTURECLASSINFO_TYPE" . ((number "1" 48313 . 48314)))
          ("HAVE_XINERAMA" . ((number "1" 48450 . 48451)))
          ("HAVE___BUILTIN_FRAME_ADDRESS" . ((number "1" 50649 . 50650)))
          ("NARROWPROTO" . ((number "1" 57925 . 57926)))
          ("PACKAGE_TARNAME" . ((string "\"emacs\"" 59726 . 59733)))
          ("TERM_HEADER" . ((string "\"gtkutil.h\"" 65257 . 65268)))
          ("USE_CAIRO_XCB" . ((number "1" 66539 . 66540)))
          ("_TANDEM_SOURCE" . ((number "1" 69597 . 69598)))
          ("_GL_ATTR_always_inline" . ((symbol "_GL_GNUC_PREREQ" 76951 . 76966) (semantic-list "(3, 2)" 76967 . 76973)))
          ("_GL_ATTR_pure" . ((symbol "_GL_GNUC_PREREQ" 77887 . 77902) (semantic-list "(2, 96)" 77903 . 77910)))
          ("_GL_ATTRIBUTE_MAYBE_UNUSED" . ((symbol "_GL_ATTRIBUTE_UNUSED" 86153 . 86173)))
          ("_GL_ATTRIBUTE_NODISCARD")
          ("GCC_LINT" . ((number "1" 6248 . 6249)))
          ("HAVE_CFSETSPEED" . ((number "1" 13529 . 13530)))
          ("HAVE_C_VARARRAYS" . ((number "1" 14523 . 14524)))
          ("HAVE_DECL_FEOF_UNLOCKED" . ((number "1" 16512 . 16513)))
          ("HAVE_DECL_FERROR_UNLOCKED" . ((number "1" 16643 . 16644)))
          ("HAVE_DECL_FFLUSH_UNLOCKED" . ((number "1" 16774 . 16775)))
          ("HAVE_DECL_FREAD_UNLOCKED" . ((number "1" 17290 . 17291)))
          ("HAVE_DECL_GETC_UNLOCKED" . ((number "1" 17790 . 17791)))
          ("HAVE_DECL_PUTCHAR_UNLOCKED" . ((number "1" 18656 . 18657)))
          ("HAVE_FUTIMESAT" . ((number "1" 22285 . 22286)))
          ("HAVE_GAI_STRERROR" . ((number "1" 22373 . 22374)))
          ("HAVE_LANGINFO_CODESET" . ((number "1" 26630 . 26631)))
          ("HAVE_LOCALTIME_R" . ((number "1" 28733 . 28734)))
          ("HAVE_MAGICKRELINQUISHMEMORY" . ((number "1" 29827 . 29828)))
          ("HAVE_MODULES" . ((number "1" 31313 . 31314)))
          ("HAVE_POSIX_OPENPT" . ((number "1" 33115 . 33116)))
          ("HAVE_PTYS" . ((number "1" 34588 . 34589)))
          ("HAVE_RINT" . ((number "1" 35299 . 35300)))
          ("HAVE_SANITIZER_LSAN_INTERFACE_H" . ((number "1" 35475 . 35476)))
          ("HAVE_STRUCT_IFREQ_IFR_NETMASK" . ((number "1" 39930 . 39931)))
          ("HAVE_TIMER_GETOVERRUN" . ((number "1" 44409 . 44410)))
          ("HAVE_UTMP_H" . ((number "1" 45833 . 45834)))
          ("HAVE_XKB" . ((number "1" 48823 . 48824)))
          ("HAVE_XPM" . ((number "1" 49100 . 49101)))
          ("HAVE_X_I18N" . ((number "1" 49971 . 49972)))
          ("MALLOC_0_IS_NONNULL" . ((number "1" 57468 . 57469)))
          ("PROMOTED_MODE_T" . ((symbol "mode_t" 60310 . 60316)))
          ("SIZEOF_SPEED_T" . ((number "4" 62693 . 62694)))
          ("USE_CAIRO" . ((number "1" 66459 . 66460)))
          ("_GL_ATTR_artificial" . ((symbol "_GL_GNUC_PREREQ" 77003 . 77018) (semantic-list "(4, 3)" 77019 . 77025)))
          ("_GL_ATTR_format" . ((symbol "_GL_GNUC_PREREQ" 77389 . 77404) (semantic-list "(2, 7)" 77405 . 77411)))
          ("_GL_ATTRIBUTE_FORMAT" (spp-arg-list ("spec") 84378 . 84384))
          ("restrict" . ((symbol "__restrict__" 94250 . 94262)))
          ("COPYRIGHT" . ((string "\"Copyright (C) 2022 Free Software Foundation, Inc.\"" 2570 . 2621)))
          ("GNULIB_CANONICALIZE_LGPL" . ((number "1" 7944 . 7945)))
          ("HAVE_DBUS" . ((number "1" 14697 . 14698)))
          ("HAVE_DBUS_VALIDATE_INTERFACE" . ((number "1" 15015 . 15016)))
          ("HAVE_DECL_FPUTC_UNLOCKED" . ((number "1" 17032 . 17033)))
          ("HAVE_ENDPWENT" . ((number "1" 20341 . 20342)))
          ("HAVE_ENVIRON_DECL" . ((number "1" 20423 . 20424)))
          ("HAVE_EXECINFO_H" . ((number "1" 20597 . 20598)))
          ("HAVE_FSYNC" . ((number "1" 21927 . 21928)))
          ("HAVE_FUTIMES" . ((number "1" 22203 . 22204)))
          ("HAVE_GETDTABLESIZE" . ((number "1" 22784 . 22785)))
          ("HAVE_GETRUSAGE" . ((number "1" 23797 . 23798)))
          ("HAVE_GMP_H" . ((number "1" 24442 . 24443)))
          ("HAVE_MEMPCPY" . ((number "1" 30523 . 30524)))
          ("HAVE_PTHREAD_SIGMASK" . ((number "1" 34518 . 34519)))
          ("HAVE_RECVFROM" . ((number "1" 35227 . 35228)))
          ("HAVE_SCHED_GETAFFINITY" . ((number "1" 35645 . 35646)))
          ("HAVE_STDLIB_H" . ((number "1" 38517 . 38518)))
          ("HAVE_STRUCT_IFREQ_IFR_HWADDR" . ((number "1" 39823 . 39824)))
          ("HAVE_SYS_UN_H" . ((number "1" 43616 . 43617)))
          ("HAVE_WORKING_FORK" . ((number "1" 46594 . 46595)))
          ("HAVE_XDESTROYSUBWINDOWS" . ((number "1" 47743 . 47744)))
          ("HAVE_XFIXES" . ((number "1" 47908 . 47909)))
          ("HAVE_XITOUCHCLASSINFO_TYPE" . ((number "1" 48754 . 48755)))
          ("HAVE_XKBREFRESHKEYBOARDMAPPING" . ((number "1" 49025 . 49026)))
          ("HAVE_XRMSETDATABASE" . ((number "1" 49334 . 49335)))
          ("HAVE___BUILTIN_UNWIND_INIT" . ((number "1" 50755 . 50756)))
          ("IS_DIRECTORY_SEP" (spp-arg-list ("_c_") 56496 . 56501) . ((semantic-list "((_c_) == DIRECTORY_SEP)" 56502 . 56526)))
          ("NATIVE_ELISP_SUFFIX" . ((string "\".eln\"" 58005 . 58011)))
          ("PACKAGE_BUGREPORT" . ((string "\"bug-gnu-emacs@gnu.org\"" 59434 . 59457)))
          ("USABLE_SIGIO" . ((number "1" 66090 . 66091)))
          ("USE_ACL" . ((number "1" 66334 . 66335)))
          ("USE_GTK" . ((number "1" 66664 . 66665)))
          ("USE_UNLOCKED_IO" . ((symbol "GNULIB_STDIO_SINGLE_THREAD" 69924 . 69950)))
          ("_USE_STD_STAT" . ((number "1" 74376 . 74377)))
          ("_GL_ATTR_may_alias" . ((symbol "_GL_GNUC_PREREQ" 77586 . 77601) (semantic-list "(3, 3)" 77602 . 77608)))
          ("_GL_ATTRIBUTE_CONST")
          ("my_strftime" . ((symbol "nstrftime" 92477 . 92486)))
          ("subprocesses" . ((number "1" 94994 . 94995)))
          ("DIR_TO_FD" (spp-arg-list ("Dir_p") 3236 . 3243) . ((punctuation "-" 3244 . 3245) (number "1" 3245 . 3246)))
          ("GC_SETJMP_WORKS" . ((number "1" 6907 . 6908)))
          ("GETXATTR_WITH_POSIX_ACLS" . ((number "1" 7574 . 7575)))
          ("HAVE_DECL_FPUTS_UNLOCKED" . ((number "1" 17161 . 17162)))
          ("HAVE_DECL_LOCALTIME_R" . ((number "1" 18158 . 18159)))
          ("HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC" . ((number "1" 18934 . 18935)))
          ("HAVE_FT_FACE_GETCHARVARIANTINDEX" . ((number "1" 22045 . 22046)))
          ("HAVE_GETOPT_LONG_ONLY" . ((number "1" 23311 . 23312)))
          ("HAVE_GETRLIMIT" . ((number "1" 23715 . 23716)))
          ("HAVE_GRANTPT" . ((number "1" 24651 . 24652)))
          ("HAVE_INOTIFY" . ((number "1" 25538 . 25539)))
          ("HAVE_INTTYPES_H" . ((number "1" 25625 . 25626)))
          ("HAVE_LCHMOD" . ((number "1" 26820 . 26821)))
          ("HAVE_LIBOTF" . ((number "1" 27673 . 27674)))
          ("HAVE_LSTAT" . ((number "1" 29049 . 29050)))
          ("HAVE_MALLOC_H" . ((number "1" 30000 . 30001)))
          ("HAVE_MMAP" . ((number "1" 31150 . 31151)))
          ("HAVE_OTF_GET_VARIATION_GLYPHS" . ((number "1" 32340 . 32341)))
          ("HAVE_POSIX_SPAWNATTR_SETFLAGS" . ((number "1" 33313 . 33314)))
          ("HAVE_SHUTDOWN" . ((number "1" 36443 . 36444)))
          ("HAVE_SPAWN_H" . ((number "1" 37455 . 37456)))
          ("HAVE_SYS_MOUNT_H" . ((number "1" 42152 . 42153)))
          ("HAVE_SYS_TIME_H" . ((number "1" 43444 . 43445)))
          ("HAVE_TIMEGM" . ((number "1" 44219 . 44220)))
          ("HAVE_VFORK" . ((number "1" 46012 . 46013)))
          ("HAVE_XISCROLLCLASSINFO_TYPE" . ((number "1" 48653 . 48654)))
          ("HAVE_X_WINDOWS" . ((number "1" 50129 . 50130)))
          ("_GL_INLINE_HEADER_END")
          ("INTERRUPT_INPUT" . ((number "1" 56218 . 56219)))
          ("IS_ANY_SEP" (spp-arg-list ("_c_") 56297 . 56302) . ((semantic-list "(IS_DIRECTORY_SEP (_c_))" 56303 . 56327)))
          ("NULL_DEVICE" . ((string "\"/dev/null\"" 59126 . 59137)))
          ("PACKAGE_NAME" . ((string "\"GNU Emacs\"" 59527 . 59538)))
          ("SYSTEM_TYPE" . ((string "\"gnu/linux\"" 64893 . 64904)))
          ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" . ((number "1" 65714 . 65715)))
          ("_OPENBSD_SOURCE" . ((number "1" 68074 . 68075)))
          ("__STDC_WANT_IEC_60559_TYPES_EXT__" . ((number "1" 69222 . 69223)))
          ("_GL_ATTR_const" . ((symbol "_GL_GNUC_PREREQ" 77096 . 77111) (semantic-list "(2, 95)" 77112 . 77119)))
          ("_GL_ATTR_diagnose_if" . ((number "0" 77202 . 77203)))
          ("_GL_ATTR_sentinel" . ((symbol "_GL_GNUC_PREREQ" 77995 . 78010) (semantic-list "(4, 0)" 78011 . 78017)))
          ("_UNUSED_PARAMETER_" . ((symbol "_GL_ATTRIBUTE_MAYBE_UNUSED" 86413 . 86439)))
          ("_GL_ATTRIBUTE_PACKED")
          ("_GL_CMP" (spp-arg-list ("n1" "n2") 92181 . 92189) . ((semantic-list "(((n1) > (n2)) - ((n1) < (n2)))" 92190 . 92221)))
          ("EMACS_CONFIG_FEATURES" . ((string "\"ACL CAIRO DBUS FREETYPE GIF GLIB GMP GNUTLS GSETTINGS HARFBUZZ IMAGEMAGICK JPEG JSON LCMS2 LIBOTF LIBSELINUX LIBSYSTEMD LIBXML2 MODULES NOTIFY INOTIFY PDUMPER PNG RSVG SECCOMP SOUND SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS WEBP X11 XDBE XIM XINPUT2 XPM XWIDGETS GTK3 ZLIB\"" 4069 . 4342)))
          ("HAVE_ACL_DELETE_DEF_FILE" . ((number "1" 11078 . 11079)))
          ("HAVE_ACL_GET_FILE" . ((number "1" 12079 . 12080)))
          ("HAVE_ACL_SET_FILE" . ((number "1" 12342 . 12343)))
          ("HAVE_ALIGNED_ALLOC" . ((number "1" 12719 . 12720)))
          ("HAVE_BUG_BIG_NANOSLEEP" . ((number "1" 13168 . 13169)))
          ("HAVE_CLOCK_GETRES" . ((number "1" 13617 . 13618)))
          ("HAVE_DBUS_VALIDATE_MEMBER" . ((number "1" 15119 . 15120)))
          ("HAVE_DECL_FGETS_UNLOCKED" . ((number "1" 16903 . 16904)))
          ("HAVE_DECL_POSIX_SPAWN_SETSID" . ((number "1" 18523 . 18524)))
          ("HAVE_DECL_SECCOMP_SET_MODE_FILTER" . ((number "1" 19081 . 19082)))
          ("HAVE_FREEIFADDRS" . ((number "1" 21489 . 21490)))
          ("HAVE_GLIB" . ((number "1" 24277 . 24278)))
          ("HAVE_GSETTINGS" . ((number "1" 24715 . 24716)))
          ("HAVE_GTK3" . ((number "1" 24779 . 24780)))
          ("HAVE_IFADDRS_H" . ((number "1" 25339 . 25340)))
          ("HAVE_LANGINFO__NL_PAPER_WIDTH" . ((number "1" 26744 . 26745)))
          ("HAVE_LIMITS_H" . ((number "1" 28160 . 28161)))
          ("HAVE_LOG2" . ((number "1" 28805 . 28806)))
          ("HAVE_MAGICKMERGEIMAGELAYERS" . ((number "1" 29719 . 29720)))
          ("HAVE_MALLOC_POSIX" . ((number "1" 30206 . 30207)))
          ("HAVE_MINMAX_IN_SYS_PARAM_H" . ((number "1" 30989 . 30990)))
          ("HAVE_MKOSTEMP" . ((number "1" 31069 . 31070)))
          ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" . ((number "1" 32634 . 32635)))
          ("HAVE_POSIX_SPAWN" . ((number "1" 33201 . 33202)))
          ("HAVE_TRUNC" . ((number "1" 45139 . 45140)))
          ("HAVE_X11" . ((number "1" 47037 . 47038)))
          ("HAVE_XRENDER" . ((number "1" 49242 . 49243)))
          ("_GL_INLINE" . ((EXTERN "extern" 54452 . 54458) (INLINE "inline" 54459 . 54465)))
          ("LSTAT_FOLLOWS_SLASHED_SYMLINK" . ((number "1" 56929 . 56930)))
          ("PACKAGE_STRING" . ((string "\"GNU Emacs 29.0.50\"" 59622 . 59641)))
          ("STDC_HEADERS" . ((number "1" 64626 . 64627)))
          ("USER_FULL_NAME" . 
              ((symbol "pw" 66239 . 66241) (punctuation "-" 66241 . 66242) (punctuation ">" 66242 . 66243) (symbol "pw_gecos" 66243 . 66251)))
          ("_GL_ATTR_alloc_size" . ((symbol "_GL_GNUC_PREREQ" 76896 . 76911) (semantic-list "(4, 3)" 76912 . 76918)))
          ("_GL_ATTR_deprecated" . ((symbol "_GL_GNUC_PREREQ" 77149 . 77164) (semantic-list "(3, 1)" 77165 . 77171)))
          ("_GL_ATTR_unused" . ((symbol "_GL_GNUC_PREREQ" 78043 . 78058) (semantic-list "(2, 7)" 78059 . 78065)))
          ("_GL_ATTR_warn_unused_result" . ((symbol "_GL_GNUC_PREREQ" 78103 . 78118) (semantic-list "(3, 4)" 78119 . 78125)))
          ("_GL_ATTRIBUTE_DEALLOC" (spp-arg-list ("f" "i") 81234 . 81240))
          ("_GL_ATTRIBUTE_EXTERNALLY_VISIBLE")
          ("GDK_DISABLE_DEPRECATION_WARNINGS" . ((number "1" 7011 . 7012)))
          ("GNULIB_FSCANF" . ((number "1" 8648 . 8649)))
          ("HAVE_ACL_FROM_TEXT" . ((number "1" 11907 . 11908)))
          ("HAVE_BYTESWAP_H" . ((number "1" 13255 . 13256)))
          ("HAVE_DBUS_VALIDATE_BUS_NAME" . ((number "1" 14905 . 14906)))
          ("HAVE_DECL_EXECVPE" . ((number "1" 16038 . 16039)))
          ("HAVE_DECL_GETCHAR_UNLOCKED" . ((number "1" 17663 . 17664)))
          ("HAVE_FACCESSAT" . ((number "1" 20868 . 20869)))
          ("HAVE_FREE_POSIX" . ((number "1" 21676 . 21677)))
          ("HAVE_ISWCTYPE" . ((number "1" 25783 . 25784)))
          ("HAVE_NET_IF_H" . ((number "1" 31895 . 31896)))
          ("HAVE_RSVG" . ((number "1" 35356 . 35357)))
          ("HAVE_SQLITE3" . ((number "1" 37544 . 37545)))
          ("HAVE_SYS_RANDOM_H" . ((number "1" 42424 . 42425)))
          ("HAVE_VALGRIND_VALGRIND_H" . ((number "1" 45938 . 45939)))
          ("_GL_INLINE_HEADER_BEGIN")
          ("IS_DEVICE_SEP" (spp-arg-list ("_c_") 56405 . 56410) . ((number "0" 56411 . 56412)))
          ("USABLE_FIONREAD" . ((number "1" 66028 . 66029)))
          ("_ALL_SOURCE" . ((number "1" 67045 . 67046)))
          ("__EXTENSIONS__" . ((number "1" 67249 . 67250)))
          ("_GL_ATTR_cold" . ((symbol "_GL_GNUC_PREREQ" 77049 . 77064) (semantic-list "(4, 3)" 77065 . 77071)))
          ("_GL_HAS_C_ATTRIBUTE" (spp-arg-list ("attr") 78416 . 78422) . ((number "0" 78423 . 78424)))
          ("_GL_ATTRIBUTE_ARTIFICIAL")
          ("_GL_ATTRIBUTE_WARNING" (spp-arg-list ("msg") 82821 . 82826))
          ("_GL_ATTRIBUTE_LEAF")
          ("_GL_ATTRIBUTE_MAY_ALIAS")
          ("_GL_ATTRIBUTE_SENTINEL" (spp-arg-list ("pos") 90005 . 90010))
          ("FLEXIBLE_ARRAY_MEMBER")
          ("FUNC_REALPATH_WORKS" . ((number "1" 6091 . 6092)))
          ("HAVE_ALLOCA_H" . ((number "1" 12928 . 12929)))
          ("HAVE_DECL_ALIGNED_ALLOC" . ((number "1" 15565 . 15566)))
          ("HAVE_DECL_FCLOSEALL" . ((number "1" 16157 . 16158)))
          ("HAVE_DECL_FDOPENDIR" . ((number "1" 16385 . 16386)))
          ("HAVE_DECL_STRTOIMAX" . ((number "1" 19430 . 19431)))
          ("HAVE_DIRENT_H" . ((number "1" 19868 . 19869)))
          ("HAVE_FCHDIR" . ((number "1" 21019 . 21020)))
          ("HAVE_FCHMODAT" . ((number "1" 21175 . 21176)))
          ("HAVE_FCNTL" . ((number "1" 21249 . 21250)))
          ("HAVE_GETADDRINFO_A" . ((number "1" 22618 . 22619)))
          ("HAVE_GETTIMEOFDAY" . ((number "1" 23971 . 23972)))
          ("HAVE_LINUX_FS_H" . ((number "1" 28342 . 28343)))
          ("HAVE_MEMMEM" . ((number "1" 30445 . 30446)))
          ("HAVE_NEWLOCALE" . ((number "1" 31977 . 31978)))
          ("HAVE_POSIX_MADVISE" . ((number "1" 32932 . 32933)))
          ("HAVE_RANDOM" . ((number "1" 34818 . 34819)))
          ("HAVE_SETLOCALE" . ((number "1" 36281 . 36282)))
          ("HAVE_SIGSET_T" . ((number "1" 37051 . 37052)))
          ("HAVE_STDIO_EXT_H" . ((number "1" 38353 . 38354)))
          ("HAVE_STRTOIMAX" . ((number "1" 38925 . 38926)))
          ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" . ((number "1" 40521 . 40522)))
          ("HAVE_STRUCT_TM_TM_ZONE" . ((number "1" 40990 . 40991)))
          ("HAVE_SYS_SELECT_H" . ((number "1" 42610 . 42611)))
          ("HAVE_SYS_SYSINFO_H" . ((number "1" 43163 . 43164)))
          ("HAVE_TM_GMTOFF" . ((number "1" 44850 . 44851)))
          ("HAVE_WORKING_VFORK" . ((number "1" 46865 . 46866)))
          ("HAVE_XSYNCTRIGGERFENCE" . ((number "1" 49829 . 49830)))
          ("_GL_EXTERN_INLINE" . ((EXTERN "extern" 54501 . 54507)))
          ("MODULES_SUFFIX" . ((string "\".so\"" 57749 . 57754)))
          ("NEED_MKTIME_WORKING" . ((number "1" 58631 . 58632)))
          ("PTY_OPEN" . 
              ((DO "do" 61050 . 61052) (semantic-list "{ fd = posix_openpt (O_RDWR | O_CLOEXEC | O_NOCTTY); if (fd < 0 && errno == EINVAL) fd = posix_openpt (O_RDWR | O_NOCTTY); }" 61053 . 61177) (WHILE "while" 61178 . 61183) (semantic-list "(false)" 61184 . 61191)))
          ("SIGNALS_VIA_CHARACTERS" . ((number "1" 62415 . 62416)))
          ("STAT_STATVFS" . ((number "1" 64311 . 64312)))
          ("THREADS_ENABLED" . ((number "1" 65346 . 65347)))
          ("_HPUX_ALT_XOPEN_SOCKET_API" . ((number "1" 67542 . 67543)))
          ("_NETBSD_SOURCE" . ((number "1" 67911 . 67912)))
          ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" . ((number "1" 68602 . 68603)))
          ("__STDC_WANT_IEC_60559_BFP_EXT__" . ((number "1" 68755 . 68756)))
          ("_GL_HAS_ATTRIBUTE" (spp-arg-list ("attr") 76844 . 76850) . ((symbol "_GL_ATTR_##attr" 76851 . 76866)))
          ("_GL_ATTR_malloc" . ((symbol "_GL_GNUC_PREREQ" 77483 . 77498) (semantic-list "(3, 0)" 77499 . 77505)))
          ("_GL_ATTR_noinline" . ((symbol "_GL_GNUC_PREREQ" 77644 . 77659) (semantic-list "(3, 1)" 77660 . 77666)))
          ("_GL_ATTR_nonnull" . ((symbol "_GL_GNUC_PREREQ" 77693 . 77708) (semantic-list "(3, 3)" 77709 . 77715)))
          ("_GL_ATTRIBUTE_ALWAYS_INLINE")
          ("_GL_ATTRIBUTE_DEALLOC_FREE" . ((symbol "_GL_ATTRIBUTE_DEALLOC" 81490 . 81511) (semantic-list "(free, 1)" 81512 . 81521)))
          ("_GL_ATTRIBUTE_PURE")
          ("GNULIB_CLOSE_STREAM" . ((number "1" 8126 . 8127)))
          ("GNULIB_MKOSTEMP" . ((number "1" 8822 . 8823)))
          ("GNULIB_SCANF" . ((number "1" 9503 . 9504)))
          ("HAVE_ACL_FIRST_ENTRY" . ((number "1" 11554 . 11555)))
          ("HAVE_ACL_FREE" . ((number "1" 11634 . 11635)))
          ("HAVE_ACL_GET_FD" . ((number "1" 11991 . 11992)))
          ("HAVE_CLOCK_GETTIME" . ((number "1" 13707 . 13708)))
          ("HAVE_DBUS_WATCH_GET_UNIX_FD" . ((number "1" 15327 . 15328)))
          ("HAVE_FORK" . ((number "1" 21403 . 21404)))
          ("HAVE_FSEEKO" . ((number "1" 21775 . 21776)))
          ("HAVE_GETGRENT" . ((number "1" 22864 . 22865)))
          ("HAVE_GETPT" . ((number "1" 23471 . 23472)))
          ("HAVE_GETSOCKNAME" . ((number "1" 23883 . 23884)))
          ("HAVE_JPEG" . ((number "1" 25871 . 25872)))
          ("HAVE_LCMS2" . ((number "1" 26901 . 26902)))
          ("HAVE_LIBSYSTEMD" . ((number "1" 27895 . 27896)))
          ("HAVE_LUTIMES" . ((number "1" 29127 . 29128)))
          ("HAVE_MAGICKAUTOORIENTIMAGE" . ((number "1" 29501 . 29502)))
          ("HAVE_PDUMPER" . ((number "1" 32524 . 32525)))
          ("HAVE_PROCFS" . ((number "1" 33658 . 33659)))
          ("HAVE_REALPATH" . ((number "1" 35147 . 35148)))
          ("HAVE_SBRK" . ((number "1" 35547 . 35548)))
          ("HAVE_STDALIGN_H" . ((number "1" 38004 . 38005)))
          ("HAVE_SYMLINK" . ((number "1" 41171 . 41172)))
          ("HAVE_SYNC" . ((number "1" 41243 . 41244)))
          ("HAVE_SYS_SOCKET_H" . ((number "1" 42701 . 42702)))
          ("HAVE_SYS_STAT_H" . ((number "1" 42976 . 42977)))
          ("HAVE_SYS_WAIT_H" . ((number "1" 43986 . 43987)))
          ("HAVE_TIMERFD" . ((number "1" 44313 . 44314)))
          ("HAVE_XCOMPOSITE" . ((number "1" 47572 . 47573)))
          ("HAVE_XIM" . ((number "1" 48371 . 48372)))
          ("HAVE_XRANDR" . ((number "1" 49175 . 49176)))
          ("HAVE_XSHAPE" . ((number "1" 49642 . 49643)))
          ("HAVE_XWIDGETS" . ((number "1" 49902 . 49903)))
          ("NEED_MKTIME_INTERNAL" . ((number "1" 58353 . 58354)))
          ("PTY_ITERATION" . 
              ((INT "int" 60849 . 60852) (symbol "i" 60853 . 60854) (punctuation ";" 60854 . 60855) (FOR "for" 60856 . 60859) (semantic-list "(i = 0; i < 1; i++)" 60860 . 60879)))
          ("SEPCHAR" . ((string "':'" 62226 . 62229)))
          ("SIZEOF_LONG" . ((number "8" 62615 . 62616)))
          ("TERMINFO" . ((number "1" 65061 . 65062)))
          ("TIME_T_IS_SIGNED" . ((number "1" 65413 . 65414)))
          ("UNIX98_PTYS" . ((number "1" 65960 . 65961)))
          ("USE_FILE_NOTIFY" . ((number "1" 66613 . 66614)))
          ("__STDC_WANT_LIB_EXT2__" . ((number "1" 69357 . 69358)))
          ("USE_XIM" . ((number "1" 70145 . 70146)))
          ("_GL_ATTR_nonstring" . ((symbol "_GL_GNUC_PREREQ" 77744 . 77759) (semantic-list "(8, 0)" 77760 . 77766)))
          ("_GL_ATTRIBUTE_ALLOC_SIZE" (spp-arg-list ("args") 78942 . 78948))
          ("_GL_ATTRIBUTE_MALLOC")
          ("_GL_ATTRIBUTE_RETURNS_NONNULL")
          ("true" . ((semantic-list "(!false)" 97966 . 97974)))
          ("EMACS_CONFIG_H")
          ("HAVE_ACL_ENTRIES" . ((number "1" 11366 . 11367)))
          ("HAVE_DECL_CLEARERR_UNLOCKED" . ((number "1" 15700 . 15701)))
          ("HAVE_FUTIMENS" . ((number "1" 22125 . 22126)))
          ("HAVE_GETIFADDRS" . ((number "1" 23132 . 23133)))
          ("HAVE_HARFBUZZ" . ((number "1" 25169 . 25170)))
          ("HAVE_IMAGEMAGICK" . ((number "1" 25407 . 25408)))
          ("HAVE_LINUX_SECCOMP_H" . ((number "1" 28439 . 28440)))
          ("HAVE_LONG_LONG_INT" . ((number "1" 28897 . 28898)))
          ("HAVE_READLINK" . ((number "1" 34983 . 34984)))
          ("HAVE_SENDTO" . ((number "1" 36024 . 36025)))
          ("HAVE_SIGDESCR_NP" . ((number "1" 36610 . 36611)))
          ("HAVE_SNPRINTF" . ((number "1" 37131 . 37132)))
          ("HAVE_STRUCT_IFREQ_IFR_FLAGS" . ((number "1" 39718 . 39719)))
          ("HAVE_SYS_CDEFS_H" . ((number "1" 41669 . 41670)))
          ("HAVE_SYS_TYPES_H" . ((number "1" 43533 . 43534)))
          ("HAVE_UNSIGNED_LONG_LONG_INT" . ((number "1" 45590 . 45591)))
          ("HAVE_WCHAR_T" . ((number "1" 46311 . 46312)))
          ("HAVE_WEBP" . ((number "1" 46368 . 46369)))
          ("HAVE_XDISPLAYCELLS" . ((number "1" 47833 . 47834)))
          ("HAVE_XINPUT2" . ((number "1" 48550 . 48551)))
          ("HAVE_XSCREENRESOURCESTRING" . ((number "1" 49546 . 49547)))
          ("HAVE_XSYNC" . ((number "1" 49731 . 49732)))
          ("HAVE_X_SM" . ((number "1" 50045 . 50046)))
          ("_GL_EXTERN_INLINE_IN_USE")
          ("LINUX_SYSINFO_UNIT" . ((number "1" 56800 . 56801)))
          ("PACKAGE_URL" . ((string "\"https://www.gnu.org/software/emacs/\"" 59803 . 59840)))
          ("__STDC_WANT_IEC_60559_DFP_EXT__" . ((number "1" 68908 . 68909)))
          ("__STDC_WANT_MATH_SPEC_FUNCS__" . ((number "1" 69501 . 69502)))
          ("_GL_ATTR_error" . ((symbol "_GL_GNUC_PREREQ" 77228 . 77243) (semantic-list "(4, 3)" 77244 . 77250)))
          ("_GL_ATTR_externally_visible" . ((symbol "_GL_GNUC_PREREQ" 77288 . 77303) (semantic-list "(4, 1)" 77304 . 77310)))
          ("_GL_ATTRIBUTE_DEPRECATED")
          ("_GL_ATTRIBUTE_NOINLINE")
          ("_GL_ATTRIBUTE_UNUSED")
          ("_GL_UNUSED_LABEL")
          ("EMACS_CONFIGURATION" . ((string "\"x86_64-pc-linux-gnu\"" 3951 . 3972)))
          ("GNULIB_FDOPENDIR" . ((number "1" 8478 . 8479)))
          ("HAVE_ACL_LIBACL_H" . ((number "1" 12170 . 12171)))
          ("HAVE_CANONICALIZE_FILE_NAME" . ((number "1" 13363 . 13364)))
          ("HAVE_COPY_FILE_RANGE" . ((number "1" 14057 . 14058)))
          ("HAVE_DBUS_VALIDATE_PATH" . ((number "1" 15219 . 15220)))
          ("HAVE_DECL_GETDTABLESIZE" . ((number "1" 17917 . 17918)))
          ("HAVE_DECL___FPENDING" . ((number "1" 19785 . 19786)))
          ("HAVE_GETHOSTNAME" . ((number "1" 23048 . 23049)))
          ("HAVE_GETRANDOM" . ((number "1" 23633 . 23634)))
          ("HAVE_IEEE754_H" . ((number "1" 25254 . 25255)))
          ("HAVE_ISBLANK" . ((number "1" 25703 . 25704)))
          ("HAVE_JSON" . ((number "1" 25923 . 25924)))
          ("HAVE_LIBXML2" . ((number "1" 27978 . 27979)))
          ("HAVE_LRAND48" . ((number "1" 28975 . 28976)))
          ("HAVE_PTHREAD_SETNAME_NP" . ((number "1" 34089 . 34090)))
          ("HAVE_PTY_H" . ((number "1" 34665 . 34666)))
          ("HAVE_SIGSETJMP" . ((number "1" 36969 . 36970)))
          ("HAVE_STRING_H" . ((number "1" 38761 . 38762)))
          ("HAVE_STRSIGNAL" . ((number "1" 38843 . 38844)))
          ("HAVE_STRUCT_DIRENT_D_TYPE" . ((number "1" 39285 . 39286)))
          ("HAVE_STRUCT_IFREQ_IFR_ADDR" . ((number "1" 39386 . 39387)))
          ("HAVE_WCHAR_H" . ((number "1" 46242 . 46243)))
          ("HAVE_ZLIB" . ((number "1" 50204 . 50205)))
          ("HAVE___BUILTIN_EXPECT" . ((number "1" 50405 . 50406)))
          ("HAVE___INLINE" . ((number "1" 55712 . 55713)))
          ("POLL_FOR_INPUT" . ((number "1" 60189 . 60190)))
          ("PTY_TTY_NAME_SPRINTF" . ((semantic-list "{ char *ptyname = 0; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); if (grantpt (fd) != -1 && unlockpt (fd) != -1) ptyname = ptsname(fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (!ptyname) { emacs_close (fd); return -1; } snprintf (pty_name, PTY_NAME_SIZE, \"%s\", ptyname); }" 61293 . 61642)))
          ("__STDC_WANT_IEC_60559_FUNCS_EXT__" . ((number "1" 69065 . 69066)))
          ("USG")
          ("GLIB_DISABLE_DEPRECATION_WARNINGS" . ((number "1" 7675 . 7676)))
          ("GNULIB_FACCESSAT" . ((number "1" 8302 . 8303)))
          ("GNU_LINUX")
          ("HAVE_ACL_EXTENDED_FILE" . ((number "1" 11464 . 11465)))
          ("HAVE_DECL_FWRITE_UNLOCKED" . ((number "1" 17421 . 17422)))
          ("HAVE_DECL_STRNLEN" . ((number "1" 19311 . 19312)))
          ("HAVE_ENDGRENT" . ((number "1" 20261 . 20262)))
          ("HAVE_FCHMOD" . ((number "1" 21095 . 21096)))
          ("HAVE_FREETYPE" . ((number "1" 21580 . 21581)))
          ("HAVE_GETOPT_H" . ((number "1" 23215 . 23216)))
          ("HAVE_GIF" . ((number "1" 24216 . 24217)))
          ("HAVE_LINUX_FILTER_H" . ((number "1" 28255 . 28256)))
          ("HAVE_LINUX_SYSINFO" . ((number "1" 28523 . 28524)))
          ("HAVE_MAGICKEXPORTIMAGEPIXELS" . ((number "1" 29611 . 29612)))
          ("HAVE_MBSTATE_T" . ((number "1" 30369 . 30370)))
          ("HAVE_MEMRCHR" . ((number "1" 30601 . 30602)))
          ("HAVE_PIPE2" . ((number "1" 32775 . 32776)))
          ("HAVE_SETITIMER" . ((number "1" 36199 . 36200)))
          ("HAVE_SQLITE3_LOAD_EXTENSION" . ((number "1" 37641 . 37642)))
          ("HAVE_STRUCT_ATTRIBUTE_ALIGNED" . ((number "1" 39154 . 39155)))
          ("HAVE_STRUCT_UNIPAIR_UNICODE" . ((number "1" 41093 . 41094)))
          ("HAVE_SYS_SOUNDCARD_H" . ((number "1" 42798 . 42799)))
          ("HAVE_SYS_UTSNAME_H" . ((number "1" 43709 . 43710)))
          ("HAVE_TIMER_SETTIME" . ((number "1" 44499 . 44500)))
          ("HAVE_UNISTD_H" . ((number "1" 45480 . 45481)))
          ("HAVE_X11R6_XIM" . ((number "1" 47208 . 47209)))
          ("HAVE_XDBE" . ((number "1" 47643 . 47644)))
          ("HAVE_XIBARRIERRELEASEPOINTERINFO_DEVICEID" . ((number "1" 48109 . 48110)))
          ("HAVE___EXECUTABLE_START" . ((number "1" 50855 . 50856)))
          ("PTY_NAME_SPRINTF")
          ("_GL_GNUC_PREREQ" (spp-arg-list ("major" "minor") 71734 . 71748) . ((semantic-list "((major) < __GNUC__ + ((minor) <= __GNUC_MINOR__))" 71755 . 71805)))
          ("_GL_ASYNC_SAFE")
          ("_GL_ATTR_fallthrough" . ((symbol "_GL_GNUC_PREREQ" 77341 . 77356) (semantic-list "(7, 0)" 77357 . 77363)))
          ("_GL_ATTR_leaf" . ((symbol "_GL_GNUC_PREREQ" 77435 . 77450) (semantic-list "(4, 6)" 77451 . 77457)))
          ("_GL_ATTRIBUTE_ERROR" (spp-arg-list ("msg") 82785 . 82790))
          ("_GL_ATTRIBUTE_NONSTRING")
          ("_GL_ATTRIBUTE_NOTHROW")
          ("DEFAULT_SOUND_DEVICE" . ((string "\"/dev/dsp\"" 2875 . 2885)))
          ("EMACS_CONFIG_OPTIONS" . ((string "\"--with-mailutils --with-sound --with-x-toolkit --with-imagemagick --with-json --with-file-notification --with-xwidgets --with-x\"" 4422 . 4551)))
          ("GNULIB_STDIO_SINGLE_THREAD" . ((number "1" 9963 . 9964)))
          ("HAVE_ACL_SET_FD" . ((number "1" 12254 . 12255)))
          ("HAVE_ALSA" . ((number "1" 12989 . 12990)))
          ("HAVE_CLOCK_SETTIME" . ((number "1" 13797 . 13798)))
          ("HAVE_DECL_ALARM" . ((number "1" 15438 . 15439)))
          ("HAVE_DECL_ECVT" . ((number "1" 15923 . 15924)))
          ("HAVE_DECL_MEMRCHR" . ((number "1" 18386 . 18387)))
          ("HAVE_DECL_PUTC_UNLOCKED" . ((number "1" 18783 . 18784)))
          ("HAVE_DECL_STRMODE" . ((number "0" 19196 . 19197)))
          ("HAVE_DLADDR" . ((number "1" 20021 . 20022)))
          ("HAVE_GETPAGESIZE" . ((number "1" 23397 . 23398)))
          ("HAVE_LIBSELINUX" . ((number "1" 27834 . 27835)))
          ("HAVE_READLINKAT" . ((number "1" 35067 . 35068)))
          ("HAVE_SOCKETS" . ((number "1" 37215 . 37216)))
          ("HAVE_STDBOOL_H" . ((number "1" 38089 . 38090)))
          ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" . ((number "1" 39615 . 39616)))
          ("HAVE_TM_ZONE" . ((number "1" 44980 . 44981)))
          ("HAVE_TYPEOF" . ((number "1" 45216 . 45217)))
          ("HAVE_UTIMENSAT" . ((number "1" 45754 . 45755)))
          ("HAVE_WORKING_UTIMES" . ((number "1" 46799 . 46800)))
          ("HAVE_XKBFREENAMES" . ((number "1" 48911 . 48912)))
          ("HAVE__SETJMP" . ((number "1" 50276 . 50277)))
          ("__USE_MINGW_ANSI_STDIO" . ((number "1" 57573 . 57574)))
          ("PACKAGE_VERSION" . ((string "\"29.0.50\"" 59911 . 59920)))
          ("STAT_STATFS2_FRSIZE" . ((number "1" 63919 . 63920)))
          ("USE_TOOLKIT_SCROLL_BARS" . ((number "1" 69851 . 69852)))
          ("_GL_ATTR_nothrow" . ((symbol "_GL_GNUC_PREREQ" 77793 . 77808) (semantic-list "(3, 3)" 77809 . 77815)))
          ("_GL_ATTR_returns_nonnull" . ((symbol "_GL_GNUC_PREREQ" 77945 . 77960) (semantic-list "(4, 9)" 77961 . 77967)))
          ("_GL_UNUSED" . ((symbol "_GL_ATTRIBUTE_MAYBE_UNUSED" 86319 . 86345)))
          ("_GL_ATTRIBUTE_NONNULL" (spp-arg-list ("args") 87598 . 87604))
          ("GETGROUPS_T" . ((symbol "gid_t" 7148 . 7153)))
          ("HAVE_ACL_FROM_MODE" . ((number "1" 11817 . 11818)))
          ("HAVE_ALLOCA" . ((number "1" 12864 . 12865)))
          ("HAVE_CFMAKERAW" . ((number "1" 13445 . 13446)))
          ("HAVE_DECL_FCVT" . ((number "1" 16266 . 16267)))
          ("HAVE_DECL_MEMMEM" . ((number "1" 18271 . 18272)))
          ("HAVE_EXPLICIT_BZERO" . ((number "1" 20689 . 20690)))
          ("HAVE_FDOPENDIR" . ((number "1" 21331 . 21332)))
          ("HAVE_GETPWENT" . ((number "1" 23551 . 23552)))
          ("HAVE_GET_CURRENT_DIR_NAME" . ((number "1" 24075 . 24076)))
          ("HAVE_GNUTLS" . ((number "1" 24495 . 24496)))
          ("HAVE_MALLOC_TRIM" . ((number "1" 30292 . 30293)))
          ("HAVE_PNG" . ((number "1" 32842 . 32843)))
          ("HAVE_PSELECT" . ((number "1" 33736 . 33737)))
          ("HAVE_PWD_H" . ((number "1" 34742 . 34743)))
          ("HAVE_SELECT" . ((number "1" 35948 . 35949)))
          ("HAVE_STACK_OVERFLOW_HANDLING" . ((number "1" 37749 . 37750)))
          ("HAVE_STDIO_H" . ((number "1" 38434 . 38435)))
          ("HAVE_STRINGS_H" . ((number "1" 38678 . 38679)))
          ("HAVE_SYS_VFS_H" . ((number "1" 43794 . 43795)))
          ("HAVE_TIMESPEC_GET" . ((number "1" 44580 . 44581)))
          ("HAVE_XICCALLBACK_CALLBACK" . ((number "1" 48208 . 48209)))
          ("HAVE_XSCREENNUMBEROFSCREEN" . ((number "1" 49440 . 49441)))
          ("SYSTEM_MALLOC" . ((number "1" 64802 . 64803)))
          ("TERMINFO_DEFINES_BC" . ((number "1" 65175 . 65176)))
          ("_DARWIN_C_SOURCE" . ((number "1" 67148 . 67149)))
          ("_POSIX_PTHREAD_SEMANTICS" . ((number "1" 68441 . 68442)))
          ("_GL_ATTR_packed" . ((symbol "_GL_GNUC_PREREQ" 77841 . 77856) (semantic-list "(2, 7)" 77857 . 77863)))
          ("_GL_ATTRIBUTE_COLD")
          ("_GL_ATTRIBUTE_FALLTHROUGH" . ((semantic-list "((void) 0)" 83757 . 83767)))
          )
)
    (semanticdb-table "semanticdb-table-158660019c64"
      :file "conf_post.h"
      :fsize 15588
      :lastmodtime '(25398 32925 648306 303000))
    (semanticdb-table "semanticdb-table-15865ff7952e"
      :major-mode c-mode
      :tags 
        '( ("EMACS_BLOCKINPUT_H" variable (:constant-flag t) nil [825 843])
            ("interrupt_input_blocked" variable
               (:typemodifiers ("extern" "volatile")
                :type "int")
                nil [1912 1956])
            ("block_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2014 2019]))                  
                :type "void")
                nil [1996 2052])
            ("unblock_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2081 2086]))                  
                :type "void")
                nil [2054 2087])
            ("totally_unblock_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2123 2128]))                  
                :type "void")
                nil [2088 2129])
            ("unblock_input_to" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [2160 2164]))                  
                :type "void")
                nil [2130 2165])
            ("input_blocked_p" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2225 2230]))                  
                :type "bool")
                nil [2203 2272]))          
      :file "blockinput.h"
      :pointmax 2325
      :fsize 2324
      :lastmodtime '(25069 61173 197351 228000)
      :unmatched-syntax '((symbol 2274 . 2291) (symbol 2196 . 2202) (symbol 1989 . 1995) (symbol 845 . 864))
      :lexical-table 
        '(("EMACS_BLOCKINPUT_H")
          )
)
    (semanticdb-table "semanticdb-table-15865ff86950"
      :major-mode c-mode
      :tags 
        '( ("EMACS_COMMANDS_H" variable (:constant-flag t) nil [795 811])
            ("lisp.h" include nil nil [813 830])
            ("Ctl" variable (:constant-flag t) nil [840 843])
            ("unread_switch_frame" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1256 1295])
            ("INTERACTIVE" variable (:constant-flag t) nil [1359 1370]))          
      :file "commands.h"
      :pointmax 1451
      :fsize 1450
      :lastmodtime '(25069 61173 205351 200000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMACS_COMMANDS_H")
          ("INTERACTIVE" . ((semantic-list "(NILP (Vexecuting_kbd_macro) && !noninteractive)" 1371 . 1419)))
          ("Ctl" (spp-arg-list ("c") 843 . 846) . ((semantic-list "((c)&037)" 847 . 856)))
          )
)
    (semanticdb-table "semanticdb-table-15865ff7e86c"
      :major-mode c-mode
      :tags 
        '( ("EMACS_KEYBOARD_H" variable (:constant-flag t) nil [801 817])
            ("coding.h" include nil nil [819 838])
            ("termhooks.h" include nil nil [892 914])
            ("xterm.h" include nil nil [932 951])
            ("KVAR" variable (:constant-flag t) nil [1196 1200])
            ("KBOARD" type
               (:typedef ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [3306 3335])
            ("kboard" type
               (:members 
                  ( ("next_kboard" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3358 3378])
                    ("Voverriding_terminal_local_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3720 3764])
                    ("Vlast_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3890 3917])
                    ("Vreal_last_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4003 4035])
                    ("Vkeyboard_translate_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4111 4150])
                    ("Vlast_repeatable_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4214 4252])
                    ("Vprefix_arg_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4324 4349])
                    ("Vlast_prefix_arg_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4423 4453])
                    ("kbd_queue_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4509 4532])
                    ("defining_kbd_macro_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4593 4625])
                    ("kbd_macro_buffer" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4695 4725])
                    ("kbd_macro_ptr" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4790 4817])
                    ("kbd_macro_end" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5356 5383])
                    ("kbd_macro_bufsize" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5436 5464])
                    ("Vlast_kbd_macro_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5515 5544])
                    ("Vsystem_key_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5609 5640])
                    ("system_key_syms_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5688 5717])
                    ("Vwindow_system_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5767 5795])
                    ("Vlocal_function_key_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5910 5947])
                    ("Vinput_decode_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6140 6171])
                    ("Vdefault_minibuffer_frame_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6255 6294])
                    ("reference_count" variable (:type "int") (reparse-symbol classsubparts) [6441 6461])
                    ("echo_string_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6589 6614])
                    ("kbd_queue_has_data" variable (:type ("bool_bf" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7165 7192])
                    ("immediate_echo" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7250 7277])
                    ("echo_prompt_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7356 7381]))                  
                :type "struct")
                nil [3336 7386])
            ("kset_default_minibuffer_frame" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7431 7449])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7450 7466]))                  
                :type "void")
                nil [7395 7510])
            ("kset_defining_kbd_macro" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7548 7566])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7567 7583]))                  
                :type "void")
                nil [7518 7620])
            ("kset_input_decode_map" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7656 7674])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7675 7691]))                  
                :type "void")
                nil [7628 7727])
            ("kset_last_command" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7759 7777])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7778 7794]))                  
                :type "void")
                nil [7735 7826])
            ("kset_last_kbd_macro" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7860 7878])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7879 7895]))                  
                :type "void")
                nil [7834 7929])
            ("kset_prefix_arg" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7959 7977])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7978 7994]))                  
                :type "void")
                nil [7937 8024])
            ("kset_system_key_alist" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8060 8078])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8079 8095]))                  
                :type "void")
                nil [8032 8131])
            ("kset_window_system" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8164 8182])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8183 8199]))                  
                :type "void")
                nil [8139 8232])
            ("buffered_input_event" type
               (:members 
                  ( ("EVENT_KIND_WIDTH" variable (:type "int") (reparse-symbol classsubparts) [8293 8310])
                    ("ie" variable (:type ("input_event" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [8313 8335])
                    ("sie" variable (:type ("selection_input_event" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [8380 8413]))                  
                :type "union")
                nil [8234 8423])
            ("initial_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("KBOARD" type (:type "class") nil nil))
                nil [8480 8510])
            ("current_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("KBOARD" type (:type "class") nil nil))
                nil [8799 8829])
            ("num_input_events" variable
               (:typemodifiers ("extern")
                :type ("uintmax_t" type (:type "class") nil nil))
                nil [8909 8943])
            ("point_before_last_command_or_undo" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [9089 9140])
            ("buffer_before_last_command_or_undo" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [9292 9349])
            ("prev_buffer" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [9351 9385])
            ("poll_suppress_count" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [9453 9484])
            ("this_command_keys" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9723 9760])
            ("this_command_key_count" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [9761 9801])
            ("internal_last_event_frame" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10112 10157])
            ("item_properties" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10398 10433])
            ("ITEM_PROPERTY_ITEM" variable (:constant-flag t) nil [10612 10630])
            ("ITEM_PROPERTY_NAME" variable (:constant-flag t) nil [10665 10683])
            ("ITEM_PROPERTY_DEF" variable (:constant-flag t) nil [10775 10792])
            ("ITEM_PROPERTY_MAP" variable (:constant-flag t) nil [10864 10881])
            ("ITEM_PROPERTY_TYPE" variable (:constant-flag t) nil [10923 10941])
            ("ITEM_PROPERTY_KEYEQ" variable (:constant-flag t) nil [11013 11032])
            ("ITEM_PROPERTY_SELECTED" variable (:constant-flag t) nil [11115 11137])
            ("ITEM_PROPERTY_HELP" variable (:constant-flag t) nil [11194 11212])
            ("ITEM_PROPERTY_ENABLE" variable (:constant-flag t) nil [11310 11330])
            ("menu_items" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12323 12353])
            ("menu_items_inuse" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [12493 12522])
            ("menu_items_allocated" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12582 12614])
            ("menu_items_used" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12680 12707])
            ("menu_items_n_panes" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12806 12836])
            ("MENU_ITEMS_PANE_NAME" variable (:constant-flag t) nil [12846 12866])
            ("MENU_ITEMS_PANE_PREFIX" variable (:constant-flag t) nil [12877 12899])
            ("MENU_ITEMS_PANE_LENGTH" variable (:constant-flag t) nil [12910 12932])
            ("menu_item_idx" type
               (:members 
                  ( ("MENU_ITEMS_ITEM_NAME" variable
                       (:constant-flag t
                        :default-value (12982 12983)
                        :type "int")
                        (reparse-symbol enumsubparts) [12959 12983])
                    ("MENU_ITEMS_ITEM_ENABLE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [12987 13010])
                    ("MENU_ITEMS_ITEM_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13013 13035])
                    ("MENU_ITEMS_ITEM_EQUIV_KEY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13038 13064])
                    ("MENU_ITEMS_ITEM_DEFINITION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13067 13094])
                    ("MENU_ITEMS_ITEM_TYPE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13097 13118])
                    ("MENU_ITEMS_ITEM_SELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13121 13146])
                    ("MENU_ITEMS_ITEM_HELP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13149 13170])
                    ("MENU_ITEMS_ITEM_LENGTH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13173 13197]))                  
                :type "enum")
                nil [12936 13198])
            ("" type
               (:members 
                  ( ("KBD_BUFFER_SIZE" variable
                       (:constant-flag t
                        :default-value (13231 13235)
                        :type "int")
                        (reparse-symbol enumsubparts) [13213 13235]))                  
                :type "enum")
                nil [13200 13240])
            ("unuse_menu_items" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13272 13277]))                  
                :type "void")
                nil [13242 13278])
            ("ENCODE_MENU_STRING" variable (:constant-flag t) nil [13595 13613])
            ("ENCODE_MENU_STRING" variable (:constant-flag t) nil [13672 13690])
            ("EVENT_HAS_PARAMETERS" variable (:constant-flag t) nil [13998 14018])
            ("EVENT_HEAD" variable (:constant-flag t) nil [14136 14146])
            ("EVENT_START" variable (:constant-flag t) nil [14296 14307])
            ("EVENT_END" variable (:constant-flag t) nil [14353 14362])
            ("EVENT_CLICK_COUNT" variable (:constant-flag t) nil [14477 14494])
            ("POSN_WINDOW" variable (:constant-flag t) nil [14586 14597])
            ("POSN_POSN" variable (:constant-flag t) nil [14630 14639])
            ("POSN_SET_POSN" variable (:constant-flag t) nil [14683 14696])
            ("POSN_WINDOW_POSN" variable (:constant-flag t) nil [14742 14758])
            ("POSN_TIMESTAMP" variable (:constant-flag t) nil [14813 14827])
            ("POSN_SCROLLBAR_PART" variable (:constant-flag t) nil [14893 14912])
            ("POSN_STRING" variable (:constant-flag t) nil [15096 15107])
            ("POSN_INBUFFER_P" variable (:constant-flag t) nil [15220 15235])
            ("POSN_BUFFER_POSN" variable (:constant-flag t) nil [15278 15294])
            ("EVENT_HEAD_KIND" variable (:constant-flag t) nil [15385 15400])
            ("input_available_clear_time" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15543 15594])
            ("kbd_buffer" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type ("buffered_input_event" type (:type "union") nil nil))
                nil [15596 15658])
            ("kbd_fetch_ptr" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffered_input_event" type (:type "union") nil nil))
                nil [15659 15708])
            ("kbd_store_ptr" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffered_input_event" type (:type "union") nil nil))
                nil [15709 15758])
            ("ignore_mouse_drag_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [15760 15792])
            ("parse_modifiers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15830 15842]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15794 15843])
            ("reorder_modifiers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15882 15894]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15844 15895])
            ("read_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [15926 15930])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15931 15943])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15944 15956])
                    ("" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [15987 15994])
                    ("" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15995 16013]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15896 16014])
            ("parse_solitary_modifier" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16051 16070]))                  
                :type "int")
                nil [16015 16071])
            ("real_this_command" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16144 16181])
            ("quit_char" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [16183 16204])
            ("input_was_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [16205 16235])
            ("timers_run" variable
               (:typemodifiers ("extern")
                :type "unsigned int")
                nil [16236 16267])
            ("menu_separator_name_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16304 16317]))                  
                :type "bool")
                nil [16269 16318])
            ("parse_menu_item" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16348 16360])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [16361 16365]))                  
                :type "bool")
                nil [16319 16366])
            ("init_raw_keybuf_count" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16403 16408]))                  
                :type "void")
                nil [16368 16409])
            ("allocate_kboard" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16442 16454]))                  
                :type ("KBOARD" type (:type "class") nil nil))
                nil [16410 16455])
            ("delete_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16483 16492]))                  
                :type "void")
                nil [16456 16493])
            ("not_single_kboard_state" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16531 16540]))                  
                :type "void")
                nil [16494 16541])
            ("push_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16567 16583]))                  
                :type "void")
                nil [16542 16584])
            ("push_frame_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16616 16631]))                  
                :type "void")
                nil [16585 16632])
            ("pop_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16657 16662]))                  
                :type "void")
                nil [16633 16663])
            ("temporarily_switch_to_single_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16713 16728]))                  
                :type "void")
                nil [16664 16729])
            ("input_poll_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [16761 16765]))                  
                :type "void")
                nil [16730 16766])
            ("start_polling" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16794 16799]))                  
                :type "void")
                nil [16767 16800])
            ("stop_polling" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16827 16832]))                  
                :type "void")
                nil [16801 16833])
            ("set_poll_suppress_count" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [16871 16875]))                  
                :type "void")
                nil [16834 16876])
            ("gobble_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16902 16907]))                  
                :type "int")
                nil [16877 16908])
            ("input_polling_used" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16941 16946]))                  
                :type "bool")
                nil [16909 16947])
            ("clear_input_pending" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16981 16986]))                  
                :type "void")
                nil [16948 16987])
            ("requeued_events_pending_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [17027 17032]))                  
                :type "bool")
                nil [16988 17033])
            ("bind_polling_period" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [17067 17071]))                  
                :type "void")
                nil [17034 17072])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [17105 17121])
            ("stuff_buffered_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17156 17168]))                  
                :type "void")
                nil [17122 17169])
            ("clear_waiting_for_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [17207 17212]))                  
                :type "void")
                nil [17170 17213])
            ("swallow_events" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [17242 17247]))                  
                :type "void")
                nil [17214 17248])
            ("lucid_event_type_list_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17286 17298]))                  
                :type "bool")
                nil [17249 17299])
            ("kbd_buffer_store_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17336 17357]))                  
                :type "void")
                nil [17300 17358])
            ("kbd_buffer_store_buffered_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffered_input_event" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [17404 17433])
                    ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17444 17465]))                  
                :type "void")
                nil [17359 17466])
            ("kbd_buffer_store_event_hold" function
               (:arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17508 17534])
                    ("hold_quit" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17543 17573]))                  
                :type "void")
                nil [17474 17823])
            ("poll_for_input_1" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [17854 17859]))                  
                :type "void")
                nil [17824 17860])
            ("show_help_echo" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17889 17901])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17902 17914])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17915 17927])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17956 17968]))                  
                :type "void")
                nil [17861 17969])
            ("gen_help_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17998 18010])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18011 18023])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18024 18036])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18065 18077])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18078 18088]))                  
                :type "void")
                nil [17970 18089])
            ("kbd_buffer_store_help_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18131 18143])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18144 18156]))                  
                :type "void")
                nil [18090 18157])
            ("menu_item_eval_property" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18202 18214]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [18158 18215])
            ("kbd_buffer_events_waiting" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18255 18260]))                  
                :type "bool")
                nil [18216 18261])
            ("add_user_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [18291 18295])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18296 18309]))                  
                :type "void")
                nil [18262 18310])
            ("tty_read_avail_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18345 18363])
                    ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18364 18385]))                  
                :type "int")
                nil [18312 18386])
            ("timer_check" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18423 18428]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18387 18429])
            ("mark_kboards" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18456 18461]))                  
                :type "void")
                nil [18430 18462])
            ("lispy_function_keys" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [18534 18581])
            ("DEV_TTY" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [18590 18618]))          
      :file "keyboard.h"
      :pointmax 18669
      :fsize 18668
      :lastmodtime '(25343 18723 260622 84000)
      :unmatched-syntax '((symbol 18620 . 18637) (symbol 17467 . 17473) (semantic-list 17099 . 17104) (symbol 17084 . 17098) (INT 17080 . 17083) (EXTERN 17073 . 17079) (punctuation 8291 . 8292) (symbol 8286 . 8290) (symbol "event_kind" 8265 . 8285) (ENUM "enum" 8265 . 8285) (symbol 8132 . 8138) (symbol 8025 . 8031) (symbol 7930 . 7936) (symbol 7827 . 7833) (symbol 7728 . 7734) (symbol 7621 . 7627) (symbol 7511 . 7517) (symbol 7388 . 7394) (symbol 1087 . 1106))
      :lexical-table 
        '(("ITEM_PROPERTY_ITEM" . ((number "0" 10631 . 10632)))
          ("EVENT_HEAD" (spp-arg-list ("event") 14146 . 14153) . ((semantic-list "(EVENT_HAS_PARAMETERS (event) ? XCAR (event) : (event))" 14158 . 14213)))
          ("POSN_TIMESTAMP" (spp-arg-list ("posn") 14827 . 14833) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (CDR_SAFE (posn)))))" 14834 . 14884)))
          ("EVENT_HEAD_KIND" (spp-arg-list ("event_head") 15400 . 15412) . ((semantic-list "(Fget ((event_head), Qevent_kind))" 15417 . 15451)))
          ("ITEM_PROPERTY_TYPE" . ((number "4" 10942 . 10943)))
          ("POSN_STRING" (spp-arg-list ("posn") 15107 . 15113) . ((semantic-list "(Fnth (make_fixnum (4), (posn)))" 15114 . 15146)))
          ("ITEM_PROPERTY_NAME" . ((number "1" 10684 . 10685)))
          ("EVENT_END" (spp-arg-list ("event") 14362 . 14369) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (event))))" 14370 . 14410)))
          ("POSN_SET_POSN" (spp-arg-list ("posn" "x") 14696 . 14704) . ((semantic-list "(XSETCAR (XCDR (posn), (x)))" 14705 . 14733)))
          ("POSN_BUFFER_POSN" (spp-arg-list ("posn") 15294 . 15300) . ((semantic-list "(Fnth (make_fixnum (5), (posn)))" 15301 . 15333)))
          ("ITEM_PROPERTY_DEF" . ((number "2" 10793 . 10794)))
          ("ITEM_PROPERTY_SELECTED" . ((number "6" 11138 . 11139)))
          ("ITEM_PROPERTY_ENABLE" . ((number "8" 11331 . 11332)))
          ("MENU_ITEMS_PANE_PREFIX" . ((number "2" 12900 . 12901)))
          ("ITEM_PROPERTY_MAP" . ((number "3" 10882 . 10883)))
          ("ITEM_PROPERTY_HELP" . ((number "7" 11213 . 11214)))
          ("KVAR" (spp-arg-list ("kboard" "field") 1200 . 1215) . ((semantic-list "((kboard)->field ## _)" 1216 . 1238)))
          ("EMACS_KEYBOARD_H")
          ("ITEM_PROPERTY_KEYEQ" . ((number "5" 11033 . 11034)))
          ("ENCODE_MENU_STRING" (spp-arg-list ("str") 13690 . 13695) . ((symbol "ENCODE_SYSTEM" 13696 . 13709) (semantic-list "(str)" 13710 . 13715)))
          ("EVENT_START" (spp-arg-list ("event") 14307 . 14314) . ((semantic-list "(CAR_SAFE (CDR_SAFE (event)))" 14315 . 14344)))
          ("POSN_SCROLLBAR_PART" (spp-arg-list ("posn") 14912 . 14918) . ((semantic-list "(Fnth (make_fixnum (4), (posn)))" 14919 . 14951)))
          ("MENU_ITEMS_PANE_NAME" . ((number "1" 12867 . 12868)))
          ("MENU_ITEMS_PANE_LENGTH" . ((number "3" 12933 . 12934)))
          ("EVENT_CLICK_COUNT" (spp-arg-list ("event") 14494 . 14501) . ((semantic-list "(Fnth (make_fixnum (2), (event)))" 14502 . 14535)))
          ("POSN_POSN" (spp-arg-list ("posn") 14639 . 14645) . ((semantic-list "(CAR_SAFE (CDR_SAFE (posn)))" 14646 . 14674)))
          ("POSN_WINDOW_POSN" (spp-arg-list ("posn") 14758 . 14764) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (posn))))" 14765 . 14804)))
          ("POSN_INBUFFER_P" (spp-arg-list ("posn") 15235 . 15241) . ((semantic-list "(NILP (POSN_STRING (posn)))" 15242 . 15269)))
          ("EVENT_HAS_PARAMETERS" (spp-arg-list ("event") 14018 . 14025) . ((semantic-list "(CONSP (event))" 14026 . 14041)))
          ("POSN_WINDOW" (spp-arg-list ("posn") 14597 . 14603) . ((semantic-list "(CAR_SAFE (posn))" 14604 . 14621)))
          )
)
    (semanticdb-table "semanticdb-table-15865ed05074"
      :major-mode c-mode
      :tags 
        '( ("DISPEXTERN_H_INCLUDED" variable (:constant-flag t) nil [862 883])
            ("character.h" include nil nil [885 907])
            ("X11/Xlib.h" include (:system-flag t) nil [932 953])
            ("X11/extensions/Xrender.h" include (:system-flag t) nil [1050 1086])
            ("Emacs_Color" type
               (:typedef ("XColor" type (:type "class") nil nil)
                :type "typedef")
                nil [1095 1122])
            ("Emacs_Cursor" type
               (:typedef ("Cursor" type (:type "class") nil nil)
                :type "typedef")
                nil [1123 1151])
            ("No_Cursor" variable (:constant-flag t) nil [1160 1169])
            ("Emacs_Rectangle" type
               (:typedef ("XRectangle" type (:type "class") nil nil)
                :type "typedef")
                nil [1231 1266])
            ("Emacs_GC" type
               (:typedef ("XGCValues" type (:type "class") nil nil)
                :type "typedef")
                nil [1267 1294])
            ("c-strcase.h" include (:system-flag t) nil [2101 2123])
            ("xstrcasecmp" function
               (:arguments 
                  ( ("a" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [2148 2162])
                    ("b" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [2163 2177]))                  
                :type "int")
                nil [2131 2211])
            ("X11/Xresource.h" include (:system-flag t) nil [2235 2261])
            ("Display_Info" type
               (:typedef ("x_display_info" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [2284 2327])
            ("NativeRectangle" variable (:constant-flag t) nil [2450 2465])
            ("Emacs_Pix_Container" type
               (:typedef ("" type
                     (:members 
                        ( ("width" variable (:type "int") (reparse-symbol classsubparts) [2555 2573])
                          ("height" variable (:type "int") (reparse-symbol classsubparts) [2555 2573])
                          ("data" variable
                             (:pointer 1
                              :type "char")
                              (reparse-symbol classsubparts) [2597 2608])
                          ("bytes_per_line" variable (:type "int") (reparse-symbol classsubparts) [2641 2660])
                          ("bits_per_pixel" variable (:type "int") (reparse-symbol classsubparts) [2695 2714]))                        
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [2536 2770])
            ("Emacs_Pixmap" type
               (:typedef ("Emacs_Pix_Container" type (:type "class") nil nil)
                :type "typedef")
                nil [2771 2812])
            ("Emacs_Pix_Context" type
               (:typedef ("Emacs_Pix_Container" type (:type "class") nil nil)
                :type "typedef")
                nil [2813 2859])
            ("time.h" include (:system-flag t) nil [3741 3759])
            ("fontset.h" include nil nil [3760 3781])
            ("text_cursor_kinds" type
               (:members 
                  ( ("DEFAULT_CURSOR" variable
                       (:constant-flag t
                        :default-value (3984 3986)
                        :type "int")
                        (reparse-symbol enumsubparts) [3967 3986])
                    ("NO_CURSOR" variable
                       (:constant-flag t
                        :default-value (4002 4004)
                        :type "int")
                        (reparse-symbol enumsubparts) [3990 4004])
                    ("FILLED_BOX_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4008 4026])
                    ("HOLLOW_BOX_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4029 4047])
                    ("BAR_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4050 4061])
                    ("HBAR_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4064 4077]))                  
                :type "enum")
                nil [3940 4078])
            ("window_part" type
               (:members 
                  ( ("ON_NOTHING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4153 4164])
                    ("ON_TEXT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4167 4175])
                    ("ON_MODE_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4178 4191])
                    ("ON_VERTICAL_BORDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4194 4213])
                    ("ON_HEADER_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4216 4231])
                    ("ON_TAB_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4234 4246])
                    ("ON_LEFT_FRINGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4249 4264])
                    ("ON_RIGHT_FRINGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4267 4283])
                    ("ON_LEFT_MARGIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4286 4301])
                    ("ON_RIGHT_MARGIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4304 4320])
                    ("ON_VERTICAL_SCROLL_BAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4323 4346])
                    ("ON_HORIZONTAL_SCROLL_BAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4349 4374])
                    ("ON_RIGHT_DIVIDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4377 4394])
                    ("ON_BOTTOM_DIVIDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4397 4416]))                  
                :type "enum")
                nil [4132 4417])
            ("FRINGE_ID_BITS" variable (:constant-flag t) nil [4491 4505])
            ("FRINGE_HEIGHT_BITS" variable (:constant-flag t) nil [4582 4600])
            ("IF_DEBUG" variable (:constant-flag t) nil [4970 4978])
            ("text_pos" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5418 5436])
                    ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5478 5496]))                  
                :type "struct")
                nil [5369 5499])
            ("BYTEPOS" variable (:constant-flag t) nil [5581 5588])
            ("CHARPOS" variable (:constant-flag t) nil [5616 5623])
            ("SET_TEXT_POS" variable (:constant-flag t) nil [5728 5740])
            ("INC_TEXT_POS" variable (:constant-flag t) nil [5870 5882])
            ("DEC_TEXT_POS" variable (:constant-flag t) nil [6159 6171])
            ("SET_TEXT_POS_FROM_MARKER" variable (:constant-flag t) nil [6461 6485])
            ("CLIP_TEXT_POS_FROM_MARKER" variable (:constant-flag t) nil [6667 6692])
            ("SET_MARKER_FROM_TEXT_POS" variable (:constant-flag t) nil [6944 6968])
            ("TEXT_POS_EQUAL_P" variable (:constant-flag t) nil [7154 7170])
            ("display_pos" type
               (:members 
                  ( ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [7573 7593])
                    ("overlay_string_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7874 7905])
                    ("string_pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [8014 8041])
                    ("dpvec_index" variable (:type "int") (reparse-symbol classsubparts) [8323 8339]))                  
                :type "struct")
                nil [7514 8342])
            ("GLYPH" type
               (:typedef ("" type
                     (:members 
                        ( ("ch" variable (:type "int") (reparse-symbol classsubparts) [8643 8650])
                          ("face_id" variable (:type "int") (reparse-symbol classsubparts) [8653 8665]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [8624 8674])
            ("GLYPH_CHAR" function
               (:arguments 
                  ( ("glyph" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8739 8751]))                  
                :type "int")
                nil [8723 8772])
            ("GLYPH_FACE" function
               (:arguments 
                  ( ("glyph" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8830 8842]))                  
                :type "int")
                nil [8814 8868])
            ("SET_GLYPH_CHAR" variable (:constant-flag t) nil [8878 8892])
            ("SET_GLYPH_FACE" variable (:constant-flag t) nil [8936 8950])
            ("SET_GLYPH" variable (:constant-flag t) nil [8999 9008])
            ("GLYPH_CODE_CHAR" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9168 9183]))                  
                :type "int")
                nil [9147 9264])
            ("GLYPH_CODE_FACE" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9294 9309]))                  
                :type "int")
                nil [9273 9388])
            ("SET_GLYPH_FROM_GLYPH_CODE" variable (:constant-flag t) nil [9398 9423])
            ("" type
               (:members 
                  ( ("GLYPH_MODE_LINE_FACE" variable
                       (:constant-flag t
                        :default-value (9806 9807)
                        :type "int")
                        (reparse-symbol enumsubparts) [9783 9807]))                  
                :type "enum")
                nil [9776 9810])
            ("glyph_type" type
               (:members 
                  ( ("CHAR_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9996 10007])
                    ("COMPOSITE_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10071 10087])
                    ("GLYPHLESS_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10139 10155])
                    ("IMAGE_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10194 10206])
                    ("STRETCH_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10271 10285])
                    ("XWIDGET_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10352 10367]))                  
                :type "enum")
                nil [9938 10368])
            ("glyph_slice" type
               (:members 
                  ( ("x" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [10465 10481])
                    ("y" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [10484 10500])
                    ("width" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [10503 10523])
                    ("height" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [10526 10547]))                  
                :type "struct")
                nil [10442 10550])
            ("glyph" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11700 11718])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [12063 12082])
                    ("pixel_width" variable (:type "short") (reparse-symbol classsubparts) [12112 12130])
                    ("ascent" variable (:type "short") (reparse-symbol classsubparts) [12173 12195])
                    ("descent" variable (:type "short") (reparse-symbol classsubparts) [12173 12195])
                    ("voffset" variable (:type "short") (reparse-symbol classsubparts) [12309 12323])
                    ("type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [12449 12467])
                    ("multibyte_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12658 12682])
                    ("left_box_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12839 12867])
                    ("right_box_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12870 12899])
                    ("overlaps_vertically_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13075 13109])
                    ("padding_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13739 13761])
                    ("glyph_not_available_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13971 14005])
                    ("avoid_cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14056 14083])
                    ("resolved_level" variable
                       (:suffix ":7"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [14153 14181])
                    ("bidi_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [14478 14501])
                    ("FACE_ID_BITS" variable (:constant-flag t) (reparse-symbol classsubparts) [14511 14523])
                    ("face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [14633 14665])
                    ("font_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [14948 14971])
                    ("slice" variable (:type ("" type
                         (:members 
                            ( ("img" variable (:type ("glyph_slice" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [15124 15147])
                              ("cmp" variable (:type ("" type
                                   (:members 
                                      ( ("from" variable (:type "int") (reparse-symbol classsubparts) [15277 15290])
                                        ("to" variable (:type "int") (reparse-symbol classsubparts) [15277 15290]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [15268 15297])
                              ("glyphless" variable (:type ("" type
                                   (:members 
                                      ( ("upper_xoff" variable (:type "short") (reparse-symbol classsubparts) [15383 15412])
                                        ("upper_yoff" variable (:type "short") (reparse-symbol classsubparts) [15383 15412])
                                        ("lower_xoff" variable (:type "short") (reparse-symbol classsubparts) [15419 15448])
                                        ("lower_yoff" variable (:type "short") (reparse-symbol classsubparts) [15419 15448]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [15368 15465]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [15037 15476])
                    ("u" variable (:type ("" type
                         (:members 
                            ( ("ch" variable (:type "unsigned int") (reparse-symbol classsubparts) [15625 15637])
                              ("cmp" variable (:type ("" type
                                   (:members 
                                      ( ("automatic" variable
                                           (:suffix ":1"
                                            :type ("bool_bf" type (:type "class") nil nil))
                                            (reparse-symbol classsubparts) [15783 15805])
                                        ("id" variable
                                           (:suffix ":31"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [15848 15868]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [15698 15879])
                              ("img_id" variable (:type "int") (reparse-symbol classsubparts) [15945 15956])
                              ("xwidget" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16006 16023])
                              ("stretch" variable (:type ("" type
                                   (:members 
                                      ( ("height" variable
                                           (:suffix ":16"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [16145 16167])
                                        ("ascent" variable
                                           (:suffix ":16"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [16213 16235]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [16088 16254])
                              ("glyphless" variable (:type ("" type
                                   (:members 
                                      ( ("method" variable
                                           (:suffix ":2"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [16399 16419])
                                        ("for_no_font" variable
                                           (:suffix ":1"
                                            :type ("bool_bf" type (:type "class") nil nil))
                                            (reparse-symbol classsubparts) [16489 16513])
                                        ("len" variable
                                           (:suffix ":4"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [16591 16608])
                                        ("ch" variable
                                           (:suffix ":25"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [16682 16699]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [16312 16716])
                              ("val" variable (:type "unsigned int") (reparse-symbol classsubparts) [16783 16796]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [15542 16803]))                  
                :type "struct")
                nil [10882 16806])
            ("FONT_TYPE_UNKNOWN" variable (:constant-flag t) nil [16869 16886])
            ("CHAR_GLYPH_SPACE_P" variable (:constant-flag t) nil [16924 16942])
            ("GLYPH_SLICE_EQUAL_P" variable (:constant-flag t) nil [17288 17307])
            ("GLYPH_EQUAL_P" variable (:constant-flag t) nil [17715 17728])
            ("GLYPH_CHAR_AND_FACE_EQUAL_P" variable (:constant-flag t) nil [18234 18261])
            ("SET_CHAR_GLYPH" variable (:constant-flag t) nil [18520 18534])
            ("SET_CHAR_GLYPH_FROM_GLYPH" variable (:constant-flag t) nil [18863 18888])
            ("SET_GLYPH_FROM_CHAR_GLYPH" variable (:constant-flag t) nil [19194 19219])
            ("GLYPH_INVALID_P" variable (:constant-flag t) nil [19442 19457])
            ("CHAR_GLYPH_PADDING_P" variable (:constant-flag t) nil [19533 19553])
            ("glyph_pool" type
               (:members 
                  ( ("glyphs" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [20300 20321])
                    ("nglyphs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20362 20380])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [20433 20453])
                    ("ncolumns" variable (:type "int") (reparse-symbol classsubparts) [20433 20453]))                  
                :type "struct")
                nil [20227 20456])
            ("glyph_matrix" type
               (:members 
                  ( ("pool" variable
                       (:pointer 1
                        :type ("glyph_pool" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [22062 22086])
                    ("rows" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [22189 22212])
                    ("rows_allocated" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22281 22306])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [22435 22445])
                    ("matrix_x" variable (:type "int") (reparse-symbol classsubparts) [22610 22633])
                    ("matrix_y" variable (:type "int") (reparse-symbol classsubparts) [22610 22633])
                    ("matrix_w" variable (:type "int") (reparse-symbol classsubparts) [22698 22721])
                    ("matrix_h" variable (:type "int") (reparse-symbol classsubparts) [22698 22721])
                    ("window_pixel_left" variable (:type "int") (reparse-symbol classsubparts) [23119 23159])
                    ("window_pixel_top" variable (:type "int") (reparse-symbol classsubparts) [23119 23159])
                    ("window_height" variable (:type "int") (reparse-symbol classsubparts) [23162 23194])
                    ("window_width" variable (:type "int") (reparse-symbol classsubparts) [23162 23194])
                    ("window_vscroll" variable (:type "int") (reparse-symbol classsubparts) [23197 23216])
                    ("left_margin_glyphs" variable (:type "int") (reparse-symbol classsubparts) [23329 23373])
                    ("right_margin_glyphs" variable (:type "int") (reparse-symbol classsubparts) [23329 23373])
                    ("no_scrolling_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [23545 23572])
                    ("tab_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [23644 23667])
                    ("header_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [23747 23773])
                    ("buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [23980 24002])
                    ("begv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24104 24123])
                    ("zv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24104 24123]))                  
                :type "struct")
                nil [21879 24126])
            ("CHECK_MATRIX" variable (:constant-flag t) nil [24411 24423])
            ("glyph_row_area" type
               (:members 
                  ( ("ANY_AREA" variable
                       (:constant-flag t
                        :default-value (24795 24797)
                        :type "int")
                        (reparse-symbol enumsubparts) [24784 24797])
                    ("LEFT_MARGIN_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [24801 24818])
                    ("TEXT_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [24821 24831])
                    ("RIGHT_MARGIN_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [24834 24852])
                    ("LAST_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [24855 24866]))                  
                :type "enum")
                nil [24760 24867])
            ("glyph_row" type
               (:members 
                  ( ("glyphs" variable
                       (:pointer 1
                        :dereference 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [26894 26930])
                    ("used" variable
                       (:dereference 1
                        :type "short")
                        (reparse-symbol classsubparts) [27080 27106])
                    ("hash" variable (:type "unsigned int") (reparse-symbol classsubparts) [27234 27248])
                    ("x" variable (:type "int") (reparse-symbol classsubparts) [27622 27631])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [27622 27631])
                    ("pixel_width" variable (:type "int") (reparse-symbol classsubparts) [27832 27848])
                    ("ascent" variable (:type "int") (reparse-symbol classsubparts) [27967 27986])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [27967 27986])
                    ("phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [28200 28229])
                    ("phys_height" variable (:type "int") (reparse-symbol classsubparts) [28200 28229])
                    ("visible_height" variable (:type "int") (reparse-symbol classsubparts) [28436 28455])
                    ("extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [28587 28610])
                    ("start" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [29015 29040])
                    ("end" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [29473 29496])
                    ("minpos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [29873 29904])
                    ("maxpos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [29873 29904])
                    ("overlay_arrow_bitmap" variable (:type "int") (reparse-symbol classsubparts) [30074 30099])
                    ("left_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30165 30215])
                    ("right_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30282 30333])
                    ("left_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30399 30444])
                    ("right_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30511 30557])
                    ("left_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30601 30650])
                    ("right_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30695 30745])
                    ("left_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30789 30833])
                    ("right_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [30878 30923])
                    ("left_fringe_offset" variable
                       (:suffix ":8"
                        :type "signed int")
                        (reparse-symbol classsubparts) [30979 31026])
                    ("right_fringe_offset" variable
                       (:suffix ":8"
                        :type "signed int")
                        (reparse-symbol classsubparts) [31083 31131])
                    ("fringe_bitmap_periodic_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31274 31311])
                    ("redraw_fringe_bitmaps_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31378 31414])
                    ("enabled_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31647 31669])
                    ("truncated_on_left_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31768 31800])
                    ("truncated_on_right_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31803 31836])
                    ("continued_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31957 31981])
                    ("displays_text_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32107 32135])
                    ("ends_at_zv_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32186 32211])
                    ("fill_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32414 32438])
                    ("indicate_empty_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32555 32589])
                    ("contains_overlapping_glyphs_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32700 32742])
                    ("full_width_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32945 32970])
                    ("mode_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33028 33052])
                    ("tab_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33095 33118])
                    ("overlapped_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33198 33223])
                    ("ends_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33417 33454])
                    ("starts_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33647 33686])
                    ("overlapping_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33753 33779])
                    ("mouse_face_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33856 33881])
                    ("ends_in_newline_from_string_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33952 33994])
                    ("exact_window_width_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34137 34175])
                    ("cursor_in_fringe_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34256 34287])
                    ("ends_in_ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34361 34392])
                    ("indicate_bob_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34501 34528])
                    ("indicate_top_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34664 34696])
                    ("indicate_eob_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34804 34831])
                    ("indicate_bottom_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [34968 35003])
                    ("reversed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [35099 35122])
                    ("stipple_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [35197 35219])
                    ("continuation_lines_width" variable (:type "int") (reparse-symbol classsubparts) [35282 35311])
                    ("clip" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("Emacs_Rectangle" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [35480 35508]))                  
                :type "struct")
                nil [26103 35518])
            ("MATRIX_ROW" variable (:constant-flag t) nil [35856 35866])
            ("MATRIX_MODE_LINE_ROW" variable (:constant-flag t) nil [36060 36080])
            ("MATRIX_TAB_LINE_ROW" variable (:constant-flag t) nil [36327 36346])
            ("MATRIX_HEADER_LINE_ROW" variable (:constant-flag t) nil [36566 36588])
            ("MATRIX_FIRST_TEXT_ROW" variable (:constant-flag t) nil [36747 36768])
            ("MATRIX_ROW_GLYPH_START" variable (:constant-flag t) nil [37149 37171])
            ("MATRIX_ROW_USED" variable (:constant-flag t) nil [37319 37334])
            ("MATRIX_ROW_START_CHARPOS" variable (:constant-flag t) nil [37702 37726])
            ("MATRIX_ROW_START_BYTEPOS" variable (:constant-flag t) nil [37764 37788])
            ("MATRIX_ROW_END_CHARPOS" variable (:constant-flag t) nil [38094 38116])
            ("MATRIX_ROW_END_BYTEPOS" variable (:constant-flag t) nil [38154 38176])
            ("MATRIX_ROW_VPOS" variable (:constant-flag t) nil [38270 38285])
            ("MATRIX_BOTTOM_TEXT_ROW" variable (:constant-flag t) nil [38488 38510])
            ("MATRIX_ROW_EXTENDS_FACE_P" variable (:constant-flag t) nil [38753 38778])
            ("SET_MATRIX_ROW_ENABLED_P" variable (:constant-flag t) nil [38883 38907])
            ("MATRIX_ROW_ENABLED_P" variable (:constant-flag t) nil [38992 39012])
            ("MATRIX_ROW_DISPLAYS_TEXT_P" variable (:constant-flag t) nil [39186 39212])
            ("MR_PARTIALLY_VISIBLE" variable (:constant-flag t) nil [39274 39294])
            ("MR_PARTIALLY_VISIBLE_AT_TOP" variable (:constant-flag t) nil [39354 39381])
            ("MR_PARTIALLY_VISIBLE_AT_BOTTOM" variable (:constant-flag t) nil [39476 39506])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_P" variable (:constant-flag t) nil [39693 39723])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_TOP_P" variable (:constant-flag t) nil [39959 39996])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_BOTTOM_P" variable (:constant-flag t) nil [40175 40215])
            ("MATRIX_ROW_BOTTOM_Y" variable (:constant-flag t) nil [40365 40384])
            ("MATRIX_ROW_LAST_VISIBLE_P" variable (:constant-flag t) nil [40535 40560])
            ("MATRIX_ROW_CONTINUATION_LINE_P" variable (:constant-flag t) nil [40694 40724])
            ("MATRIX_ROW_ENDS_IN_MIDDLE_OF_CHAR_P" variable (:constant-flag t) nil [40971 41006])
            ("MATRIX_ROW_ENDS_IN_OVERLAY_STRING_P" variable (:constant-flag t) nil [41216 41251])
            ("MATRIX_ROW_STARTS_IN_MIDDLE_OF_CHAR_P" variable (:constant-flag t) nil [41385 41422])
            ("MATRIX_ROW_OVERLAPS_PRED_P" variable (:constant-flag t) nil [41668 41694])
            ("MATRIX_ROW_OVERLAPS_SUCC_P" variable (:constant-flag t) nil [41800 41826])
            ("space_glyph" variable
               (:typemodifiers ("extern")
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [41954 41986])
            ("display_completed" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [42062 42092])
            ("draw_glyphs_face" type
               (:members 
                  ( ("DRAW_NORMAL_TEXT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42388 42405])
                    ("DRAW_INVERSE_VIDEO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42408 42427])
                    ("DRAW_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42430 42442])
                    ("DRAW_MOUSE_FACE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42445 42461])
                    ("DRAW_IMAGE_RAISED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42464 42482])
                    ("DRAW_IMAGE_SUNKEN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [42485 42504]))                  
                :type "enum")
                nil [42362 42505])
            ("glyph_string" type
               (:members 
                  ( ("x" variable (:type "int") (reparse-symbol classsubparts) [42650 42656])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [42726 42739])
                    ("ybase" variable (:type "int") (reparse-symbol classsubparts) [42726 42739])
                    ("width" variable (:type "int") (reparse-symbol classsubparts) [42809 42819])
                    ("background_width" variable (:type "int") (reparse-symbol classsubparts) [42885 42906])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [43086 43097])
                    ("left_overhang" variable (:type "int") (reparse-symbol classsubparts) [43294 43312])
                    ("right_overhang" variable (:type "int") (reparse-symbol classsubparts) [43515 43534])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [43593 43609])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [43669 43686])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [43805 43827])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [43861 43886])
                    ("char2b" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [44063 44080])
                    ("nchars" variable (:type "int") (reparse-symbol classsubparts) [44083 44094])
                    ("hl" variable (:type ("draw_glyphs_face" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [44168 44193])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [44248 44266])
                    ("font" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [44321 44339])
                    ("cmp" variable
                       (:pointer 1
                        :type ("composition" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [44426 44450])
                    ("cmp_id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [44512 44529])
                    ("cmp_from" variable (:type "int") (reparse-symbol classsubparts) [44589 44610])
                    ("cmp_to" variable (:type "int") (reparse-symbol classsubparts) [44589 44610])
                    ("extends_to_end_of_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [44726 44763])
                    ("background_filled_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [44833 44865])
                    ("font_not_found_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [45058 45087])
                    ("stippled_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [45189 45212])
                    ("OVERLAPS_PRED" variable (:constant-flag t) (reparse-symbol classsubparts) [45222 45235])
                    ("OVERLAPS_SUCC" variable (:constant-flag t) (reparse-symbol classsubparts) [45254 45267])
                    ("OVERLAPS_BOTH" variable (:constant-flag t) (reparse-symbol classsubparts) [45286 45299])
                    ("OVERLAPS_ERASED_CURSOR" variable (:constant-flag t) (reparse-symbol classsubparts) [45341 45363])
                    ("for_overlaps" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [45795 45821])
                    ("padding_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [46027 46049])
                    ("gc" variable (:type ("GC" type (:type "class") nil nil)) (reparse-symbol classsubparts) [46136 46142])
                    ("first_glyph" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46417 46443])
                    ("img" variable
                       (:pointer 1
                        :type ("image" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46471 46489])
                    ("xwidget" variable
                       (:pointer 1
                        :type ("xwidget" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46511 46535])
                    ("slice" variable (:type ("glyph_slice" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [46553 46578])
                    ("clip_head" variable
                       (:pointer 1
                        :type ("glyph_string" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46763 46806])
                    ("clip_tail" variable
                       (:pointer 1
                        :type ("glyph_string" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46763 46806])
                    ("clip" variable
                       (:dereference 1
                        :type ("XRectangle" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [46847 46871])
                    ("num_clips" variable (:type "int") (reparse-symbol classsubparts) [46909 46923])
                    ("underline_position" variable (:type "int") (reparse-symbol classsubparts) [46927 46950])
                    ("underline_thickness" variable (:type "int") (reparse-symbol classsubparts) [46954 46978])
                    ("next" variable
                       (:pointer 1
                        :type ("glyph_string" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46982 47015])
                    ("prev" variable
                       (:pointer 1
                        :type ("glyph_string" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [46982 47015]))                  
                :type "struct")
                nil [42593 47018])
            ("MATRIX_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [47422 47445])
            ("MATRIX_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [47748 47773])
            ("MATRIX_TAB_LINE_HEIGHT" variable (:constant-flag t) nil [48074 48096])
            ("CURRENT_MODE_LINE_ACTIVE_FACE_ID_3" variable (:constant-flag t) nil [48769 48803])
            ("CURRENT_MODE_LINE_ACTIVE_FACE_ID" variable (:constant-flag t) nil [49272 49304])
            ("CURRENT_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [49645 49669])
            ("CURRENT_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [50238 50264])
            ("CURRENT_TAB_LINE_HEIGHT" variable (:constant-flag t) nil [50813 50836])
            ("DESIRED_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [51211 51235])
            ("DESIRED_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [51367 51393])
            ("DESIRED_TAB_LINE_HEIGHT" variable (:constant-flag t) nil [51524 51547])
            ("VCENTER_BASELINE_OFFSET" variable (:constant-flag t) nil [52666 52689])
            ("FONT_TOO_HIGH" variable (:constant-flag t) nil [53196 53209])
            ("lface_attribute_index" type
               (:members 
                  ( ("LFACE_FAMILY_INDEX" variable
                       (:constant-flag t
                        :default-value (53605 53606)
                        :type "int")
                        (reparse-symbol enumsubparts) [53584 53606])
                    ("LFACE_FOUNDRY_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53610 53630])
                    ("LFACE_SWIDTH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53633 53652])
                    ("LFACE_HEIGHT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53655 53674])
                    ("LFACE_WEIGHT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53677 53696])
                    ("LFACE_SLANT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53699 53717])
                    ("LFACE_UNDERLINE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53720 53742])
                    ("LFACE_INVERSE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53745 53765])
                    ("LFACE_FOREGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53768 53791])
                    ("LFACE_BACKGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53794 53817])
                    ("LFACE_STIPPLE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53820 53840])
                    ("LFACE_OVERLINE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53843 53864])
                    ("LFACE_STRIKE_THROUGH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53867 53894])
                    ("LFACE_BOX_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53897 53913])
                    ("LFACE_FONT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53916 53933])
                    ("LFACE_INHERIT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53936 53956])
                    ("LFACE_FONTSET_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53959 53979])
                    ("LFACE_DISTANT_FOREGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [53982 54013])
                    ("LFACE_EXTEND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54016 54035])
                    ("LFACE_VECTOR_SIZE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54038 54057]))                  
                :type "enum")
                nil [53553 54058])
            ("face_box_type" type
               (:members 
                  ( ("FACE_NO_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54141 54153])
                    ("FACE_SIMPLE_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54288 54304])
                    ("FACE_RAISED_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54414 54430])
                    ("FACE_SUNKEN_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54433 54450]))                  
                :type "enum")
                nil [54089 54451])
            ("face_underline_type" type
               (:members 
                  ( ("FACE_NO_UNDERLINE" variable
                       (:constant-flag t
                        :default-value (54525 54526)
                        :type "int")
                        (reparse-symbol enumsubparts) [54505 54526])
                    ("FACE_UNDER_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54530 54546])
                    ("FACE_UNDER_WAVE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [54549 54566]))                  
                :type "enum")
                nil [54476 54567])
            ("face" type
               (:members 
                  ( ("lface" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54989 55026])
                    ("id" variable (:type "int") (reparse-symbol classsubparts) [55148 55155])
                    ("gc" variable (:type ("GC" type (:type "class") nil nil)) (reparse-symbol classsubparts) [55327 55333])
                    ("stipple" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [55475 55493])
                    ("foreground" variable (:type "unsigned long") (reparse-symbol classsubparts) [55623 55648])
                    ("background" variable (:type "unsigned long") (reparse-symbol classsubparts) [55709 55734])
                    ("underline_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [55834 55864])
                    ("overline_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [55867 55896])
                    ("strike_through_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [55899 55934])
                    ("box_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [55937 55961])
                    ("font" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [55965 55983])
                    ("fontset" variable (:type "int") (reparse-symbol classsubparts) [56113 56125])
                    ("box_vertical_line_width" variable (:type "int") (reparse-symbol classsubparts) [56766 56794])
                    ("box_horizontal_line_width" variable (:type "int") (reparse-symbol classsubparts) [56797 56827])
                    ("underline_pixels_above_descent_line" variable (:type "int") (reparse-symbol classsubparts) [56998 57038])
                    ("box" variable
                       (:suffix ":2"
                        :type ("face_box_type" type (:type "enum") nil nil))
                        (reparse-symbol classsubparts) [57392 57424])
                    ("underline" variable
                       (:suffix ":2"
                        :type ("face_underline_type" type (:type "enum") nil nil))
                        (reparse-symbol classsubparts) [57458 57502])
                    ("use_box_color_for_shadows_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [57602 57642])
                    ("overline_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [57769 57792])
                    ("strike_through_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [57795 57824])
                    ("foreground_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [57984 58019])
                    ("background_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58022 58057])
                    ("underline_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58256 58290])
                    ("overline_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58293 58332])
                    ("strike_through_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58335 58380])
                    ("box_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58383 58417])
                    ("underline_at_descent_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58492 58532])
                    ("tty_bold_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58658 58681])
                    ("tty_italic_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58684 58709])
                    ("tty_underline_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58712 58740])
                    ("tty_reverse_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58743 58769])
                    ("tty_strike_through_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58772 58805])
                    ("colors_copied_bitwise_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58960 58996])
                    ("overstrike" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [59062 59085])
                    ("hash" variable (:type ("uintptr_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [59350 59365])
                    ("next" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [59439 59464])
                    ("prev" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [59439 59464])
                    ("ascii_face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [59637 59661])
                    ("extra" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [59766 59778]))                  
                :type "struct")
                nil [54870 59788])
            ("FACE_TTY_DEFAULT_COLOR" variable (:constant-flag t) nil [59873 59895])
            ("FACE_TTY_DEFAULT_FG_COLOR" variable (:constant-flag t) nil [60001 60026])
            ("FACE_TTY_DEFAULT_BG_COLOR" variable (:constant-flag t) nil [60132 60157])
            ("face_tty_specified_color" function
               (:arguments 
                  ( ("color" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [60324 60344]))                  
                :type "bool")
                nil [60293 60392])
            ("FACE_UNIBYTE_P" variable (:constant-flag t) nil [60457 60471])
            ("face_id" type
               (:members 
                  ( ("DEFAULT_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60630 60646])
                    ("MODE_LINE_ACTIVE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60649 60674])
                    ("MODE_LINE_INACTIVE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60677 60704])
                    ("TOOL_BAR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60707 60724])
                    ("FRINGE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60727 60742])
                    ("HEADER_LINE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60745 60765])
                    ("SCROLL_BAR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60768 60787])
                    ("BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60790 60805])
                    ("CURSOR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60808 60823])
                    ("MOUSE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60826 60840])
                    ("MENU_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60843 60856])
                    ("VERTICAL_BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60859 60883])
                    ("WINDOW_DIVIDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60886 60909])
                    ("WINDOW_DIVIDER_FIRST_PIXEL_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60912 60947])
                    ("WINDOW_DIVIDER_LAST_PIXEL_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60950 60984])
                    ("INTERNAL_BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [60987 61011])
                    ("CHILD_FRAME_BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [61014 61041])
                    ("TAB_BAR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [61044 61060])
                    ("TAB_LINE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [61063 61080])
                    ("BASIC_FACE_ID_SENTINEL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [61083 61107]))                  
                :type "enum")
                nil [60613 61108])
            ("MAX_FACE_ID" variable (:constant-flag t) nil [61118 61129])
            ("face_cache" type
               (:members 
                  ( ("buckets" variable
                       (:pointer 2
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61355 61377])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61439 61455])
                    ("faces_by_id" variable
                       (:pointer 2
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61528 61554])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [61628 61643])
                    ("used" variable (:type "int") (reparse-symbol classsubparts) [61646 61655])
                    ("menu_face_changed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [61743 61775]))                  
                :type "struct")
                nil [61287 61778])
            ("FACE_EXTENSIBLE_P" variable (:constant-flag t) nil [61788 61805])
            ("FACE_SUITABLE_FOR_ASCII_CHAR_P" function
               (:arguments 
                  ( ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [61964 61982]))                  
                :type "bool")
                nil [61927 62075])
            ("FACE_FOR_CHAR" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [62391 62407])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [62408 62426])
                    ("character" variable (:type "int") (reparse-symbol arg-sub-list) [62427 62441])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62450 62464])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62465 62484]))                  
                :type "int")
                nil [62372 62604])
            ("GLYPH_CHAR_VALID_P" function
               (:arguments 
                  ( ("g" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62695 62703]))                  
                :type "bool")
                nil [62670 62747])
            ("GLYPH_CODE_P" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62993 63008]))                  
                :type "bool")
                nil [62974 63318])
            ("face_change" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [63431 63455])
            ("BIDI_MAXDEPTH" variable (:constant-flag t) nil [63543 63556])
            ("bidi_type_t" type
               (:typedef ("" type
                     (:members 
                        ( ("UNKNOWN_BT" variable
                             (:constant-flag t
                              :default-value (64050 64051)
                              :type "int")
                              (reparse-symbol enumsubparts) [64037 64051])
                          ("STRONG_L" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64055 64064])
                          ("STRONG_R" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64094 64103])
                          ("WEAK_EN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64133 64141])
                          ("WEAK_AN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64166 64174])
                          ("WEAK_BN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64197 64205])
                          ("NEUTRAL_B" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64231 64241])
                          ("STRONG_AL" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64270 64280])
                          ("LRE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64317 64321])
                          ("LRO" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64355 64359])
                          ("RLE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64392 64396])
                          ("RLO" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64430 64434])
                          ("PDF" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64467 64471])
                          ("LRI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64504 64508])
                          ("RLI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64540 64544])
                          ("FSI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64576 64580])
                          ("PDI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64611 64615])
                          ("WEAK_ES" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64649 64657])
                          ("WEAK_ET" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64692 64700])
                          ("WEAK_CS" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64736 64744])
                          ("WEAK_NSM" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64770 64779])
                          ("NEUTRAL_S" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64805 64815])
                          ("NEUTRAL_WS" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64842 64853])
                          ("NEUTRAL_ON" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [64873 64906]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [64020 64919])
            ("bidi_bracket_type_t" type
               (:typedef ("" type
                     (:members 
                        ( ("BIDI_BRACKET_NONE" variable
                             (:constant-flag t
                              :default-value (65220 65221)
                              :type "int")
                              (reparse-symbol enumsubparts) [65200 65221])
                          ("BIDI_BRACKET_OPEN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [65225 65243])
                          ("BIDI_BRACKET_CLOSE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [65246 65266]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [65183 65287])
            ("bidi_dir_t" type
               (:typedef ("" type
                     (:members 
                        ( ("NEUTRAL_DIR" variable
                             (:constant-flag t
                              :default-value (65361 65362)
                              :type "int")
                              (reparse-symbol enumsubparts) [65347 65362])
                          ("L2R" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [65364 65368])
                          ("R2L" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [65369 65374]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [65332 65386])
            ("bidi_saved_info" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65497 65515])
                    ("type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65553 65570])
                    ("orig_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65611 65633]))                  
                :type "struct")
                nil [65470 65681])
            ("bidi_stack" type
               (:members 
                  ( ("next_for_neutral_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66039 66070])
                    ("next_for_neutral_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [66073 66108])
                    ("last_strong_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [66111 66141])
                    ("prev_for_neutral_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [66144 66179])
                    ("level" variable (:type "unsigned char") (reparse-symbol classsubparts) [66182 66202])
                    ("flags" variable (:type "unsigned char") (reparse-symbol classsubparts) [66205 66225]))                  
                :type "struct")
                nil [66017 66265])
            ("bidi_string_data" type
               (:members 
                  ( ("lstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66370 66390])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [66431 66454])
                    ("schars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66505 66522])
                    ("bufpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66610 66627])
                    ("from_disp_str" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [66677 66703])
                    ("unibyte" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [66771 66791]))                  
                :type "struct")
                nil [66342 66834])
            ("bidi_it" type
               (:members 
                  ( ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66907 66925])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66972 66990])
                    ("ch" variable (:type "int") (reparse-symbol classsubparts) [66993 67000])
                    ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67148 67165])
                    ("ch_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67268 67285])
                    ("type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67315 67332])
                    ("type_after_wn" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67423 67449])
                    ("orig_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67491 67513])
                    ("resolved_level" variable (:type "signed char") (reparse-symbol classsubparts) [67565 67592])
                    ("isolate_level" variable (:type "signed char") (reparse-symbol classsubparts) [67640 67666])
                    ("invalid_levels" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67720 67745])
                    ("invalid_isolates" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [67778 67805])
                    ("prev" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [67838 67866])
                    ("last_strong" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [67905 67940])
                    ("next_for_neutral" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [67983 68023])
                    ("prev_for_neutral" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [68062 68102])
                    ("next_for_ws" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [68133 68168])
                    ("bracket_pairing_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68208 68238])
                    ("bracket_enclosed_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68275 68309])
                    ("next_en_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68346 68368])
                    ("next_en_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68419 68444])
                    ("sos" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68481 68496])
                    ("scan_dir" variable (:type "int") (reparse-symbol classsubparts) [68547 68560])
                    ("disp_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [68613 68632])
                    ("disp_prop" variable (:type "int") (reparse-symbol classsubparts) [68678 68692])
                    ("stack_idx" variable (:type "int") (reparse-symbol classsubparts) [68823 68837])
                    ("level_stack" variable
                       (:dereference 1
                        :type ("bidi_stack" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [69080 69129])
                    ("string" variable (:type ("bidi_string_data" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [69163 69194])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [69221 69238])
                    ("paragraph_dir" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [69275 69300])
                    ("separator_limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [69337 69363])
                    ("first_elt" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [69409 69431])
                    ("new_paragraph" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [69476 69502])
                    ("frame_window_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [69546 69573]))                  
                :type "struct")
                nil [66888 69616])
            ("BIDI_AT_BASE_LEVEL" variable (:constant-flag t) nil [69715 69733])
            ("draw_fringe_bitmap_params" type
               (:members 
                  ( ("which" variable (:type "int") (reparse-symbol classsubparts) [70488 70498])
                    ("bits" variable
                       (:pointer 1
                        :type "unsigned short")
                        (reparse-symbol classsubparts) [70532 70553])
                    ("wd" variable (:type "int") (reparse-symbol classsubparts) [70556 70570])
                    ("h" variable (:type "int") (reparse-symbol classsubparts) [70556 70570])
                    ("dh" variable (:type "int") (reparse-symbol classsubparts) [70556 70570])
                    ("x" variable (:type "int") (reparse-symbol classsubparts) [70573 70582])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [70573 70582])
                    ("bx" variable (:type "int") (reparse-symbol classsubparts) [70585 70604])
                    ("nx" variable (:type "int") (reparse-symbol classsubparts) [70585 70604])
                    ("by" variable (:type "int") (reparse-symbol classsubparts) [70585 70604])
                    ("ny" variable (:type "int") (reparse-symbol classsubparts) [70585 70604])
                    ("cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [70607 70628])
                    ("overlay_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [70631 70653])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [70656 70674]))                  
                :type "struct")
                nil [70451 70677])
            ("MAX_FRINGE_BITMAPS" variable (:constant-flag t) nil [70687 70705])
            ("display_element_type" type
               (:members 
                  ( ("IT_CHARACTER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [72746 72759])
                    ("IT_COMPOSITION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [72810 72825])
                    ("IT_GLYPHLESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [72878 72891])
                    ("IT_IMAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [72914 72923])
                    ("IT_STRETCH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [72971 72982])
                    ("IT_EOB" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73020 73027])
                    ("IT_TRUNCATION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73190 73204])
                    ("IT_CONTINUATION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73274 73290])
                    ("IT_XWIDGET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73312 73324]))                  
                :type "enum")
                nil [72687 73325])
            ("prop_idx" type
               (:members 
                  ( ("FONTIFIED_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73435 73454])
                    ("FACE_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73457 73471])
                    ("INVISIBLE_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73474 73493])
                    ("DISPLAY_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73496 73513])
                    ("COMPOSITION_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73516 73537])
                    ("OVERLAY_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73605 73622])
                    ("LAST_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73645 73660]))                  
                :type "enum")
                nil [73417 73661])
            ("line_wrap_method" type
               (:members 
                  ( ("TRUNCATE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73750 73759])
                    ("WORD_WRAP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73762 73772])
                    ("WINDOW_WRAP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [73775 73788]))                  
                :type "enum")
                nil [73724 73789])
            ("glyphless_display_method" type
               (:members 
                  ( ("GLYPHLESS_DISPLAY_THIN_SPACE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74004 74033])
                    ("GLYPHLESS_DISPLAY_EMPTY_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74087 74115])
                    ("GLYPHLESS_DISPLAY_ACRONYM" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74167 74193])
                    ("GLYPHLESS_DISPLAY_HEX_CODE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74265 74295]))                  
                :type "enum")
                nil [73864 74296])
            ("it_slice" type
               (:members 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74318 74332])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74335 74349])
                    ("width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74352 74370])
                    ("height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74373 74392]))                  
                :type "struct")
                nil [74298 74395])
            ("it_method" type
               (:members 
                  ( ("GET_FROM_BUFFER" variable
                       (:constant-flag t
                        :default-value (74552 74553)
                        :type "int")
                        (reparse-symbol enumsubparts) [74534 74553])
                    ("GET_FROM_DISPLAY_VECTOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74557 74581])
                    ("GET_FROM_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74584 74600])
                    ("GET_FROM_C_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74603 74621])
                    ("GET_FROM_IMAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74624 74639])
                    ("GET_FROM_STRETCH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74642 74659])
                    ("GET_FROM_XWIDGET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74662 74679])
                    ("NUM_IT_METHODS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [74682 74698]))                  
                :type "enum")
                nil [74515 74699])
            ("IT_STACK_SIZE" variable (:constant-flag t) nil [74745 74758])
            ("composition_it" type
               (:members 
                  ( ("stop_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74911 74930])
                    ("id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [75052 75065])
                    ("ch" variable (:type "int") (reparse-symbol classsubparts) [75347 75354])
                    ("rule_idx" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [75596 75615])
                    ("lookback" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [75778 75797])
                    ("nglyphs" variable (:type "int") (reparse-symbol classsubparts) [75864 75876])
                    ("reversed_p" variable (:type "bool") (reparse-symbol classsubparts) [76052 76068])
                    ("parent_it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [76096 76117])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [76289 76307])
                    ("nchars" variable (:type "int") (reparse-symbol classsubparts) [76383 76402])
                    ("nbytes" variable (:type "int") (reparse-symbol classsubparts) [76383 76402])
                    ("from" variable (:type "int") (reparse-symbol classsubparts) [76470 76483])
                    ("to" variable (:type "int") (reparse-symbol classsubparts) [76470 76483])
                    ("width" variable (:type "int") (reparse-symbol classsubparts) [76606 76616]))                  
                :type "struct")
                nil [74827 76619])
            ("it" type
               (:members 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [76710 76729])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [76732 76749])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [76782 76798])
                    ("method" variable (:type ("it_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [76879 76901])
                    ("stop_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77035 77058])
                    ("prev_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77169 77189])
                    ("base_level_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77327 77353])
                    ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77674 77696])
                    ("narrowed_begv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77830 77854])
                    ("narrowed_zv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77947 77969])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [78132 78155])
                    ("string_nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [78367 78391])
                    ("multibyte_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78449 78473])
                    ("tab_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78531 78554])
                    ("header_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78613 78639])
                    ("string_from_display_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78772 78811])
                    ("string_from_prefix_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78903 78941])
                    ("from_disp_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [79045 79074])
                    ("ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [79206 79229])
                    ("avoid_cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [79289 79316])
                    ("dp" variable
                       (:pointer 1
                        :type ("Lisp_Char_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [79371 79398])
                    ("dpvec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [79750 79777])
                    ("dpend" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [79750 79777])
                    ("dpvec_char_len" variable (:type "int") (reparse-symbol classsubparts) [80043 80062])
                    ("dpvec_face_id" variable (:type "int") (reparse-symbol classsubparts) [80142 80160])
                    ("saved_face_id" variable (:type "int") (reparse-symbol classsubparts) [80327 80345])
                    ("ctl_chars" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [80671 80697])
                    ("start" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [80826 80851])
                    ("current" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [80963 80990])
                    ("n_overlay_strings" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [81351 81379])
                    ("overlay_strings_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [81633 81667])
                    ("OVERLAY_STRING_CHUNK_SIZE" variable (:constant-flag t) (reparse-symbol classsubparts) [81790 81815])
                    ("overlay_strings" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81821 81876])
                    ("string_overlays" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81940 81995])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82259 82278])
                    ("from_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82392 82417])
                    ("stack" variable
                       (:dereference 1
                        :type ("iterator_stack_entry" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [82663 84006])
                    ("iterator_stack_entry" type
                       (:members 
                          ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82699 82718])
                            ("string_nchars" variable (:type "int") (reparse-symbol classsubparts) [82723 82741])
                            ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82746 82768])
                            ("stop_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82773 82796])
                            ("prev_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82801 82821])
                            ("base_level_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [82826 82852])
                            ("cmp_it" variable (:type ("composition_it" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [82857 82886])
                            ("face_id" variable (:type "int") (reparse-symbol classsubparts) [82891 82903])
                            ("u" variable (:type ("" type
                                 (:members 
                                    ( ("image" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83021 83040])
                                                ("slice" variable (:type ("it_slice" type
                                                     (:prototype t
                                                      :type "struct")
                                                      nil nil)) (reparse-symbol classsubparts) [83042 83064])
                                                ("image_id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83066 83085]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [83011 83100])
                                      ("stretch" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83156 83175]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [83146 83192])
                                      ("xwidget" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83248 83267]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [83238 83284]))                                    
                                  :type "union")
                                  nil nil)) (reparse-symbol classsubparts) [82960 83293])
                            ("position" variable (:type ("text_pos" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [83346 83371])
                            ("current" variable (:type ("display_pos" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [83376 83403])
                            ("from_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83408 83433])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [83438 83463])
                            ("method" variable (:type ("it_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [83468 83490])
                            ("paragraph_embedding" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83495 83526])
                            ("multibyte_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83531 83555])
                            ("string_from_display_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83560 83599])
                            ("string_from_prefix_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83604 83642])
                            ("display_ellipsis_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83647 83678])
                            ("avoid_cursor_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83683 83710])
                            ("bidi_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83715 83734])
                            ("from_disp_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [83739 83768])
                            ("line_wrap" variable (:type ("line_wrap_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [83773 83805])
                            ("voffset" variable (:type "short") (reparse-symbol classsubparts) [83906 83920])
                            ("space_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83925 83949])
                            ("font_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [83954 83978]))                          
                        :type "struct")
                        (reparse-symbol classsubparts) [82663 84006])
                    ("sp" variable (:type "int") (reparse-symbol classsubparts) [84034 84041])
                    ("selective" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [84190 84210])
                    ("what" variable (:type ("display_element_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [84329 84360])
                    ("face_id" variable (:type "int") (reparse-symbol classsubparts) [84386 84398])
                    ("selective_display_ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [84472 84513])
                    ("ctl_arrow_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [84651 84675])
                    ("face_box_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [84732 84755])
                    ("start_of_box_run_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [84866 84897])
                    ("end_of_box_run_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85003 85032])
                    ("overlay_strings_at_end_processed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85108 85155])
                    ("ignore_overlay_strings_at_pos_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85263 85307])
                    ("glyph_not_available_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85393 85427])
                    ("starts_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85618 85657])
                    ("face_before_selective_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85777 85813])
                    ("constrain_row_ascent_descent_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [85961 86004])
                    ("line_number_produced_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [86105 86140])
                    ("line_wrap" variable (:type ("line_wrap_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [86144 86176])
                    ("base_face_id" variable (:type "int") (reparse-symbol classsubparts) [86327 86344])
                    ("c" variable (:type "int") (reparse-symbol classsubparts) [87178 87189])
                    ("len" variable (:type "int") (reparse-symbol classsubparts) [87178 87189])
                    ("cmp_it" variable (:type ("composition_it" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [87277 87306])
                    ("char_to_display" variable (:type "int") (reparse-symbol classsubparts) [87634 87654])
                    ("glyphless_method" variable (:type ("glyphless_display_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [87737 87784])
                    ("image_id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [87850 87869])
                    ("xwidget" variable
                       (:pointer 1
                        :type ("xwidget" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [87905 87929])
                    ("slice" variable (:type ("it_slice" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [87972 87994])
                    ("space_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [88065 88089])
                    ("voffset" variable (:type "short") (reparse-symbol classsubparts) [88151 88165])
                    ("tab_width" variable (:type "short") (reparse-symbol classsubparts) [88204 88220])
                    ("font_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [88286 88310])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [89527 89546])
                    ("position" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [89549 89574])
                    ("truncation_pixel_width" variable (:type "short") (reparse-symbol classsubparts) [89642 89697])
                    ("continuation_pixel_width" variable (:type "short") (reparse-symbol classsubparts) [89642 89697])
                    ("first_visible_x" variable (:type "int") (reparse-symbol classsubparts) [90065 90101])
                    ("last_visible_x" variable (:type "int") (reparse-symbol classsubparts) [90065 90101])
                    ("last_visible_y" variable (:type "int") (reparse-symbol classsubparts) [90211 90230])
                    ("extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [90334 90357])
                    ("max_extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [90412 90439])
                    ("override_ascent" variable (:type "int") (reparse-symbol classsubparts) [90563 90616])
                    ("override_descent" variable (:type "int") (reparse-symbol classsubparts) [90563 90616])
                    ("override_boff" variable (:type "int") (reparse-symbol classsubparts) [90563 90616])
                    ("glyph_row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [90714 90742])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [90804 90829])
                    ("nglyphs" variable (:type "int") (reparse-symbol classsubparts) [90952 90964])
                    ("pixel_width" variable (:type "int") (reparse-symbol classsubparts) [91049 91065])
                    ("ascent" variable (:type "int") (reparse-symbol classsubparts) [91182 91227])
                    ("descent" variable (:type "int") (reparse-symbol classsubparts) [91182 91227])
                    ("max_ascent" variable (:type "int") (reparse-symbol classsubparts) [91182 91227])
                    ("max_descent" variable (:type "int") (reparse-symbol classsubparts) [91182 91227])
                    ("phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [91230 91295])
                    ("phys_descent" variable (:type "int") (reparse-symbol classsubparts) [91230 91295])
                    ("max_phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [91230 91295])
                    ("max_phys_descent" variable (:type "int") (reparse-symbol classsubparts) [91230 91295])
                    ("current_x" variable (:type "int") (reparse-symbol classsubparts) [91558 91572])
                    ("continuation_lines_width" variable (:type "int") (reparse-symbol classsubparts) [91776 91805])
                    ("eol_pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [92182 92206])
                    ("current_y" variable (:type "int") (reparse-symbol classsubparts) [92330 92344])
                    ("first_vpos" variable (:type "int") (reparse-symbol classsubparts) [92412 92427])
                    ("vpos" variable (:type "int") (reparse-symbol classsubparts) [92554 92563])
                    ("hpos" variable (:type "int") (reparse-symbol classsubparts) [92742 92751])
                    ("lnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [92797 92812])
                    ("lnum_bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [92866 92889])
                    ("lnum_width" variable (:type "int") (reparse-symbol classsubparts) [93009 93024])
                    ("lnum_pixel_width" variable (:type "int") (reparse-symbol classsubparts) [93027 93048])
                    ("pt_lnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [93123 93141])
                    ("stretch_adjust" variable (:type "int") (reparse-symbol classsubparts) [93412 93431])
                    ("left_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [93497 93547])
                    ("right_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [93614 93665])
                    ("left_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [93709 93758])
                    ("right_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [93803 93853])
                    ("bidi_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [93953 93972])
                    ("bidi_it" variable (:type ("bidi_it" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [94024 94047])
                    ("paragraph_embedding" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94050 94081])
                    ("min_width_property" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94284 94315])
                    ("min_width_start" variable (:type "int") (reparse-symbol classsubparts) [94318 94338]))                  
                :type "struct")
                nil [76621 94341])
            ("IT_CHARPOS" variable (:constant-flag t) nil [94396 94406])
            ("IT_BYTEPOS" variable (:constant-flag t) nil [94447 94457])
            ("IT_STRING_CHARPOS" variable (:constant-flag t) nil [94498 94515])
            ("IT_STRING_BYTEPOS" variable (:constant-flag t) nil [94562 94579])
            ("ITERATOR_AT_END_P" variable (:constant-flag t) nil [94763 94780])
            ("ITERATOR_AT_END_OF_LINE_P" variable (:constant-flag t) nil [94991 95016])
            ("PRODUCE_GLYPHS" variable (:constant-flag t) nil [95263 95277])
            ("move_operation_enum" type
               (:members 
                  ( ("MOVE_TO_X" variable
                       (:constant-flag t
                        :default-value (96053 96057)
                        :type "int")
                        (reparse-symbol enumsubparts) [96041 96057])
                    ("MOVE_TO_Y" variable
                       (:constant-flag t
                        :default-value (96124 96128)
                        :type "int")
                        (reparse-symbol enumsubparts) [96112 96128])
                    ("MOVE_TO_VPOS" variable
                       (:constant-flag t
                        :default-value (96192 96196)
                        :type "int")
                        (reparse-symbol enumsubparts) [96177 96196])
                    ("MOVE_TO_POS" variable
                       (:constant-flag t
                        :default-value (96280 96284)
                        :type "int")
                        (reparse-symbol enumsubparts) [96266 96284]))                  
                :type "enum")
                nil [95962 96287])
            ("Mouse_HLInfo" type
               (:typedef ("" type
                     (:members 
                        ( ("mouse_face_beg_row" variable (:type "int") (reparse-symbol classsubparts) [96832 96893])
                          ("mouse_face_beg_col" variable (:type "int") (reparse-symbol classsubparts) [96832 96893])
                          ("mouse_face_beg_x" variable (:type "int") (reparse-symbol classsubparts) [96832 96893])
                          ("mouse_face_end_row" variable (:type "int") (reparse-symbol classsubparts) [96896 96957])
                          ("mouse_face_end_col" variable (:type "int") (reparse-symbol classsubparts) [96896 96957])
                          ("mouse_face_end_x" variable (:type "int") (reparse-symbol classsubparts) [96896 96957])
                          ("mouse_face_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96960 96990])
                          ("mouse_face_face_id" variable (:type "int") (reparse-symbol classsubparts) [96993 97016])
                          ("mouse_face_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [97019 97050])
                          ("mouse_face_mouse_frame" variable
                             (:pointer 1
                              :type ("frame" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil))
                              (reparse-symbol classsubparts) [97193 97230])
                          ("mouse_face_mouse_x" variable (:type "int") (reparse-symbol classsubparts) [97233 97276])
                          ("mouse_face_mouse_y" variable (:type "int") (reparse-symbol classsubparts) [97233 97276])
                          ("mouse_face_past_end" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [97382 97414])
                          ("mouse_face_defer" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [97471 97500])
                          ("mouse_face_hidden" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [97570 97600]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [96508 97616])
            ("reset_mouse_highlight" function
               (:arguments 
                  ( ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97653 97674]))                  
                :type "void")
                nil [97625 98202])
            ("run" type
               (:members 
                  ( ("desired_y" variable (:type "int") (reparse-symbol classsubparts) [98527 98552])
                    ("current_y" variable (:type "int") (reparse-symbol classsubparts) [98527 98552])
                    ("desired_vpos" variable (:type "int") (reparse-symbol classsubparts) [98604 98635])
                    ("current_vpos" variable (:type "int") (reparse-symbol classsubparts) [98604 98635])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [98688 98706])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [98688 98706]))                  
                :type "struct")
                nil [98462 98709])
            ("frame_parm_handler" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [98795 98810])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98811 98823])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98824 98836]))                  
                :type "void")
                nil [98767 98837])
            ("redisplay_interface" type
               (:members 
                  ( ("frame_parm_handlers" variable
                       (:pointer 1
                        :type ("frame_parm_handler" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [99020 99060])
                    ("produce_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("it" variable
                               (:pointer 1
                                :type ("it" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99180 99194]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [99156 99195])
                    ("write_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99306 99323])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99324 99346])
                            ("string" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99350 99371])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [99372 99397])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [99401 99409]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [99284 99410])
                    ("insert_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99436 99453])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99454 99476])
                            ("start" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99481 99501])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [99502 99527])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [99532 99540]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [99413 99541])
                    ("clear_end_of_line" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99671 99688])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99689 99711])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [99720 99745])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [99746 99752]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [99644 99753])
                    ("scroll_run_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99868 99885])
                            ("run" variable
                               (:pointer 1
                                :type ("run" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [99886 99902]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [99843 99903])
                    ("after_update_window_line_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100135 100152])
                            ("desired_row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100159 100189]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [100096 100190])
                    ("update_window_begin_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100322 100339]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [100288 100340])
                    ("update_window_end_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100676 100693])
                            ("cursor_on_p" variable (:type "bool") (reparse-symbol arg-sub-list) [100694 100711])
                            ("mouse_face_overwritten_p" variable (:type "bool") (reparse-symbol arg-sub-list) [100746 100776]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [100644 100777])
                    ("flush_display" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100867 100883]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [100844 100884])
                    ("clear_window_mouse_face" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [100986 101003]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [100953 101004])
                    ("get_glyph_overhangs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("glyph" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101124 101144])
                            ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101145 101161])
                            ("left" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [101193 101203])
                            ("right" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [101204 101215]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [101095 101216])
                    ("fix_overlapping_area" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101430 101447])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101448 101470])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [101503 101528])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [101529 101533]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [101400 101534])
                    ("draw_fringe_bitmap" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101666 101683])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101684 101706])
                            ("p" variable
                               (:pointer 1
                                :type ("draw_fringe_bitmap_params" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [101737 101773]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [101638 101774])
                    ("define_fringe_bitmap" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("which" variable (:type "int") (reparse-symbol arg-sub-list) [101861 101871])
                            ("bits" variable
                               (:pointer 1
                                :type "unsigned short")
                                (reparse-symbol arg-sub-list) [101872 101893])
                            ("h" variable (:type "int") (reparse-symbol arg-sub-list) [101926 101932])
                            ("wd" variable (:type "int") (reparse-symbol arg-sub-list) [101933 101940]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [101831 101941])
                    ("destroy_fringe_bitmap" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("which" variable (:type "int") (reparse-symbol arg-sub-list) [101975 101985]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [101944 101986])
                    ("compute_glyph_string_overhangs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("s" variable
                               (:pointer 1
                                :type ("glyph_string" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [102144 102167]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102104 102168])
                    ("draw_glyph_string" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("s" variable
                               (:pointer 1
                                :type ("glyph_string" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [102231 102254]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102204 102255])
                    ("define_frame_cursor" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [102330 102346])
                            ("cursor" variable (:type ("Emacs_Cursor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102347 102367]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102301 102368])
                    ("clear_frame_area" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [102456 102472])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [102473 102479])
                            ("y" variable (:type "int") (reparse-symbol arg-sub-list) [102480 102486])
                            ("width" variable (:type "int") (reparse-symbol arg-sub-list) [102515 102525])
                            ("height" variable (:type "int") (reparse-symbol arg-sub-list) [102526 102537]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102430 102538])
                    ("clear_under_internal_border" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [102734 102750]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102697 102751])
                    ("draw_window_cursor" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103026 103043])
                            ("glyph_row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103053 103081])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [103091 103097])
                            ("y" variable (:type "int") (reparse-symbol arg-sub-list) [103098 103104])
                            ("cursor_type" variable (:type ("text_cursor_kinds" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [103114 103149])
                            ("cursor_width" variable (:type "int") (reparse-symbol arg-sub-list) [103159 103176])
                            ("on_p" variable (:type "bool") (reparse-symbol arg-sub-list) [103177 103187])
                            ("active_p" variable (:type "bool") (reparse-symbol arg-sub-list) [103188 103202]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [102998 103203])
                    ("draw_vertical_window_border" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103312 103329])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [103369 103375])
                            ("y_0" variable (:type "int") (reparse-symbol arg-sub-list) [103376 103384])
                            ("y_1" variable (:type "int") (reparse-symbol arg-sub-list) [103385 103393]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [103275 103394])
                    ("draw_window_divider" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103501 103518])
                            ("x_0" variable (:type "int") (reparse-symbol arg-sub-list) [103529 103537])
                            ("x_1" variable (:type "int") (reparse-symbol arg-sub-list) [103538 103546])
                            ("y_0" variable (:type "int") (reparse-symbol arg-sub-list) [103547 103555])
                            ("y_1" variable (:type "int") (reparse-symbol arg-sub-list) [103556 103564]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [103472 103565])
                    ("shift_glyphs_for_insert" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103774 103790])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [103826 103832])
                            ("y" variable (:type "int") (reparse-symbol arg-sub-list) [103833 103839])
                            ("width" variable (:type "int") (reparse-symbol arg-sub-list) [103840 103850])
                            ("height" variable (:type "int") (reparse-symbol arg-sub-list) [103886 103897])
                            ("shift_by" variable (:type "int") (reparse-symbol arg-sub-list) [103898 103911]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [103741 103912])
                    ("show_hourglass" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [103992 104008]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [103968 104009])
                    ("hide_hourglass" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [104082 104098]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [104058 104099])
                    ("default_font_parameter" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [104222 104238])
                            ("parms" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104239 104257]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [104190 104258]))                  
                :type "struct")
                nil [98941 104293])
            ("HAVE_NATIVE_TRANSFORMS" variable (:constant-flag t) nil [104613 104635])
            ("timestamp" variable (:type ("timespec" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [104936 104962])
            ("pixmap" variable (:type ("Emacs_Pixmap" type (:type "class") nil nil)) nil [104997 105023])
            ("mask" variable (:type ("Emacs_Pixmap" type (:type "class") nil nil)) nil [104997 105023])
            ("cr_data" variable
               (:pointer 1
                :type "void")
                nil [105044 105058])
            ("ximg" variable
               (:pointer 1
                :type ("XImage" type (:type "class") nil nil))
                nil [105322 105346])
            ("mask_img" variable
               (:pointer 1
                :type ("XImage" type (:type "class") nil nil))
                nil [105322 105346])
            ("colors" variable
               (:pointer 1
                :type "unsigned long")
                nil [106101 106123])
            ("ncolors" variable (:type "int") nil [106126 106138])
            ("background" variable (:type "unsigned long") nil [106463 106488])
            ("face_foreground" variable (:type "unsigned long") nil [106582 106629])
            ("face_background" variable (:type "unsigned long") nil [106582 106629])
            ("face_font_size" variable (:type "int") nil [106735 106754])
            ("face_font_family" variable
               (:pointer 1
                :type "char")
                nil [106757 106780])
            ("background_transparent" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [106952 106987])
            ("background_valid" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [107090 107153])
            ("background_transparent_valid" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [107090 107153])
            ("width" variable (:type "int") nil [107197 107215])
            ("height" variable (:type "int") nil [107197 107215])
            ("DEFAULT_IMAGE_WIDTH" variable (:constant-flag t) nil [107323 107342])
            ("DEFAULT_IMAGE_HEIGHT" variable (:constant-flag t) nil [107354 107374])
            ("corners" variable
               (:dereference 1
                :type "int")
                nil [107570 107585])
            ("TOP_CORNER" variable (:constant-flag t) nil [107594 107604])
            ("LEFT_CORNER" variable (:constant-flag t) nil [107615 107626])
            ("BOT_CORNER" variable (:constant-flag t) nil [107637 107647])
            ("RIGHT_CORNER" variable (:constant-flag t) nil [107658 107670])
            ("ascent" variable (:type "int") nil [107812 107823])
            ("DEFAULT_IMAGE_ASCENT" variable (:constant-flag t) nil [107832 107852])
            ("CENTERED_IMAGE_ASCENT" variable (:constant-flag t) nil [107864 107885])
            ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [107935 107952])
            ("dependencies" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [108124 108149])
            ("relief" variable (:type "int") nil [108195 108206])
            ("hmargin" variable (:type "int") nil [108281 108302])
            ("vmargin" variable (:type "int") nil [108281 108302])
            ("type" variable
               (:pointer 1
                :type ("image_type" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108351 108381])
            ("load_failed_p" variable (:type "bool") nil [108454 108473])
            ("lisp_data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [108566 108588])
            ("hash" variable (:type ("EMACS_UINT" type (:type "class") nil nil)) nil [108660 108676])
            ("id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [108713 108726])
            ("next" variable
               (:pointer 1
                :type ("image" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108761 108787])
            ("prev" variable
               (:pointer 1
                :type ("image" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108761 108787])
            ("buckets" variable
               (:pointer 2
                :type ("image" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108959 108982])
            ("images" variable
               (:pointer 2
                :type ("image" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [109031 109053])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [109094 109109])
            ("used" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [109153 109168])
            ("refcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [109236 109255])
            ("IMAGE_CACHE_BUCKETS_SIZE" variable (:constant-flag t) nil [109333 109357])
            ("DEFAULT_TAB_BAR_BUTTON_MARGIN" variable (:constant-flag t) nil [110355 110384])
            ("DEFAULT_TAB_BAR_BUTTON_RELIEF" variable (:constant-flag t) nil [110395 110424])
            ("DEFAULT_TAB_BAR_IMAGE_HEIGHT" variable (:constant-flag t) nil [110496 110524])
            ("DEFAULT_TOOL_BAR_LABEL_SIZE" variable (:constant-flag t) nil [112304 112331])
            ("DEFAULT_TOOL_BAR_BUTTON_MARGIN" variable (:constant-flag t) nil [112391 112421])
            ("DEFAULT_TOOL_BAR_BUTTON_RELIEF" variable (:constant-flag t) nil [112432 112462])
            ("DEFAULT_TOOL_BAR_IMAGE_HEIGHT" variable (:constant-flag t) nil [112535 112564])
            ("TTY_CAP_INVERSE" variable (:constant-flag t) nil [113017 113032])
            ("TTY_CAP_UNDERLINE" variable (:constant-flag t) nil [113047 113064])
            ("TTY_CAP_BOLD" variable (:constant-flag t) nil [113078 113090])
            ("TTY_CAP_DIM" variable (:constant-flag t) nil [113105 113116])
            ("TTY_CAP_ITALIC" variable (:constant-flag t) nil [113131 113145])
            ("TTY_CAP_STRIKE_THROUGH" variable (:constant-flag t) nil [113161 113183])
            ("redisplaying_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116250 116277])
            ("display_working_on_window_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116278 116318])
            ("help_echo_showing_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116372 116404])
            ("help_echo_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116405 116459])
            ("help_echo_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116405 116459])
            ("help_echo_object" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116460 116523])
            ("previous_help_echo_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116460 116523])
            ("help_echo_pos" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [116524 116555])
            ("last_tab_bar_item" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [116556 116585])
            ("last_tool_bar_item" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [116586 116616])
            ("TRY_WINDOW_CHECK_MARGINS" variable (:constant-flag t) nil [120157 120181])
            ("TRY_WINDOW_IGNORE_FONTS_CHANGE" variable (:constant-flag t) nil [120199 120229])
            ("max_used_fringe_bitmap" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [120573 120607])
            ("RGB_PIXEL_COLOR" variable (:constant-flag t) nil [122310 122325])
            ("IMAGE_BACKGROUND" variable (:constant-flag t) nil [125578 125594])
            ("IMAGE_BACKGROUND_TRANSPARENT" variable (:constant-flag t) nil [125929 125957]))          
      :file "dispextern.h"
      :pointmax 131980
      :fsize 131979
      :lastmodtime '(25353 25709 778903 834000)
      :unmatched-syntax '((symbol 131922 . 131939) (punctuation 131886 . 131887) (close-paren 131885 . 131886) (punctuation 131884 . 131885) (symbol 131871 . 131883) (open-paren 131870 . 131871) (symbol 131845 . 131869) (VOID 131840 . 131844) (EXTERN 131833 . 131839) (punctuation 131831 . 131832) (close-paren 131830 . 131831) (punctuation 131829 . 131830) (symbol 131816 . 131828) (open-paren 131815 . 131816) (symbol 131797 . 131814) (BOOL 131792 . 131796) (EXTERN 131785 . 131791) (punctuation 131782 . 131783) (close-paren 131781 . 131782) (symbol 131767 . 131781) (ENUM 131762 . 131766) (punctuation 131718 . 131719) (punctuation 131717 . 131718) (CHAR 131712 . 131716) (CONST 131706 . 131711) (punctuation 131704 . 131705) (punctuation 131703 . 131704) (CHAR 131698 . 131702) (CONST 131692 . 131697) (punctuation 131648 . 131649) (symbol 131637 . 131648) (punctuation 131635 . 131636) (symbol 131624 . 131635) (punctuation 131580 . 131581) (symbol 131569 . 131580) (punctuation 131567 . 131568) (punctuation 131566 . 131567) (symbol 131560 . 131565) (STRUCT 131553 . 131559) (open-paren 131552 . 131553) (symbol 131530 . 131551) (symbol 131518 . 131529) (EXTERN 131511 . 131517) (punctuation 131509 . 131510) (close-paren 131508 . 131509) (symbol 131494 . 131508) (ENUM 131489 . 131493) (punctuation 131438 . 131439) (punctuation 131437 . 131438) (CHAR 131432 . 131436) (CONST 131426 . 131431) (punctuation 131424 . 131425) (punctuation 131423 . 131424) (CHAR 131418 . 131422) (CONST 131412 . 131417) (punctuation 131361 . 131362) (symbol 131350 . 131361) (punctuation 131299 . 131300) (symbol 131288 . 131299) (punctuation 131286 . 131287) (punctuation 131285 . 131286) (symbol 131279 . 131284) (STRUCT 131272 . 131278) (open-paren 131271 . 131272) (symbol 131242 . 131270) (symbol 131230 . 131241) (EXTERN 131223 . 131229) (punctuation 131221 . 131222) (close-paren 131220 . 131221) (symbol 131206 . 131220) (ENUM 131201 . 131205) (punctuation 131159 . 131160) (punctuation 131158 . 131159) (CHAR 131153 . 131157) (CONST 131147 . 131152) (punctuation 131145 . 131146) (punctuation 131144 . 131145) (CHAR 131139 . 131143) (CONST 131133 . 131138) (punctuation 131131 . 131132) (symbol 131120 . 131131) (punctuation 131078 . 131079) (symbol 131067 . 131078) (punctuation 131065 . 131066) (punctuation 131064 . 131065) (symbol 131051 . 131063) (open-paren 131050 . 131051) (symbol 131030 . 131049) (symbol 131018 . 131029) (EXTERN 131011 . 131017) (punctuation 131009 . 131010) (close-paren 131008 . 131009) (symbol 130997 . 131008) (open-paren 130996 . 130997) (symbol 130975 . 130995) (punctuation 130974 . 130975) (symbol 130961 . 130973) (EXTERN 130954 . 130960) (punctuation 130951 . 130952) (close-paren 130950 . 130951) (symbol 130926 . 130949) (punctuation 130922 . 130923) (symbol 130907 . 130922) (punctuation 130903 . 130904) (symbol 130888 . 130903) (punctuation 130884 . 130885) (symbol 130868 . 130884) (punctuation 130864 . 130865) (symbol 130850 . 130864) (punctuation 130846 . 130847) (symbol 130831 . 130846) (open-paren 130827 . 130828) (symbol 130812 . 130826) (ENUM 130807 . 130811) (punctuation 130697 . 130698) (close-paren 130696 . 130697) (INT 130693 . 130696) (punctuation 130691 . 130692) (punctuation 130690 . 130691) (UNSIGNED 130681 . 130689) (punctuation 130661 . 130662) (punctuation 130660 . 130661) (UNSIGNED 130651 . 130659) (punctuation 130649 . 130650) (punctuation 130648 . 130649) (INT 130644 . 130647) (punctuation 130642 . 130643) (punctuation 130641 . 130642) (INT 130637 . 130640) (punctuation 130635 . 130636) (INT 130632 . 130635) (punctuation 130630 . 130631) (INT 130627 . 130630) (punctuation 130625 . 130626) (INT 130622 . 130625) (punctuation 130620 . 130621) (punctuation 130619 . 130620) (symbol 130613 . 130618) (STRUCT 130606 . 130612) (open-paren 130605 . 130606) (symbol 130593 . 130604) (VOID 130588 . 130592) (punctuation 130586 . 130587) (close-paren 130585 . 130586) (INT 130582 . 130585) (punctuation 130580 . 130581) (punctuation 130579 . 130580) (CHAR 130574 . 130578) (CONST 130568 . 130573) (punctuation 130555 . 130556) (punctuation 130554 . 130555) (CHAR 130549 . 130553) (CONST 130543 . 130548) (punctuation 130541 . 130542) (punctuation 130540 . 130541) (CHAR 130535 . 130539) (CONST 130529 . 130534) (punctuation 130516 . 130517) (punctuation 130515 . 130516) (CHAR 130510 . 130514) (CONST 130504 . 130509) (punctuation 130502 . 130503) (punctuation 130501 . 130502) (CHAR 130496 . 130500) (CONST 130490 . 130495) (punctuation 130442 . 130443) (punctuation 130441 . 130442) (CHAR 130436 . 130440) (CONST 130430 . 130435) (punctuation 130428 . 130429) (punctuation 130427 . 130428) (symbol 130421 . 130426) (STRUCT 130414 . 130420) (open-paren 130413 . 130414) (symbol 130380 . 130412) (VOID 130375 . 130379) (EXTERN 130368 . 130374) (punctuation 130366 . 130367) (close-paren 130365 . 130366) (punctuation 130364 . 130365) (INT 130360 . 130363) (punctuation 130358 . 130359) (punctuation 130357 . 130358) (UNSIGNED 130348 . 130356) (punctuation 130346 . 130347) (punctuation 130345 . 130346) (UNSIGNED 130336 . 130344) (punctuation 130334 . 130335) (INT 130331 . 130334) (punctuation 130329 . 130330) (INT 130326 . 130329) (open-paren 130325 . 130326) (symbol 130299 . 130324) (INT 130295 . 130298) (EXTERN 130288 . 130294) (punctuation 130258 . 130259) (close-paren 130257 . 130258) (number 130249 . 130256) (punctuation 130247 . 130248) (symbol 130231 . 130246) (open-paren 130229 . 130230) (ENUM 130224 . 130228) (punctuation 130042 . 130043) (close-paren 130041 . 130042) (punctuation 130040 . 130041) (symbol 130037 . 130039) (STRUCT 130030 . 130036) (open-paren 130029 . 130030) (symbol 130012 . 130028) (VOID 130007 . 130011) (EXTERN 130000 . 130006) (punctuation 129998 . 129999) (close-paren 129997 . 129998) (BOOL 129993 . 129997) (punctuation 129991 . 129992) (punctuation 129990 . 129991) (CHAR 129985 . 129989) (CONST 129979 . 129984) (punctuation 129977 . 129978) (punctuation 129976 . 129977) (CHAR 129971 . 129975) (CONST 129965 . 129970) (open-paren 129964 . 129965) (symbol 129955 . 129963) (punctuation 129954 . 129955) (symbol 129945 . 129953) (STRUCT 129938 . 129944) (EXTERN 129931 . 129937) (punctuation 129929 . 129930) (close-paren 129928 . 129929) (punctuation 129927 . 129928) (symbol 129921 . 129926) (STRUCT 129914 . 129920) (open-paren 129913 . 129914) (symbol 129895 . 129912) (VOID 129890 . 129894) (EXTERN 129883 . 129889) (punctuation 129881 . 129882) (close-paren 129880 . 129881) (punctuation 129879 . 129880) (symbol 129873 . 129878) (STRUCT 129866 . 129872) (punctuation 129864 . 129865) (punctuation 129863 . 129864) (symbol 129846 . 129862) (STRUCT 129839 . 129845) (open-paren 129838 . 129839) (symbol 129819 . 129837) (VOID 129814 . 129818) (EXTERN 129807 . 129813) (punctuation 129805 . 129806) (close-paren 129804 . 129805) (UNSIGNED 129796 . 129804) (punctuation 129794 . 129795) (punctuation 129793 . 129794) (symbol 129776 . 129792) (STRUCT 129769 . 129775) (open-paren 129768 . 129769) (symbol 129754 . 129767) (BOOL 129749 . 129753) (EXTERN 129742 . 129748) (punctuation 129740 . 129741) (close-paren 129739 . 129740) (punctuation 129738 . 129739) (symbol 129735 . 129737) (STRUCT 129728 . 129734) (open-paren 129727 . 129728) (symbol 129712 . 129726) (VOID 129707 . 129711) (EXTERN 129700 . 129706) (punctuation 129698 . 129699) (close-paren 129697 . 129698) (punctuation 129696 . 129697) (symbol 129690 . 129695) (STRUCT 129683 . 129689) (open-paren 129682 . 129683) (symbol 129666 . 129681) (VOID 129661 . 129665) (EXTERN 129654 . 129660) (punctuation 129652 . 129653) (close-paren 129651 . 129652) (punctuation 129650 . 129651) (CHAR 129645 . 129649) (CONST 129639 . 129644) (open-paren 129638 . 129639) (symbol 129624 . 129637) (INT 129620 . 129623) (EXTERN 129613 . 129619) (punctuation 129611 . 129612) (close-paren 129610 . 129611) (punctuation 129609 . 129610) (CHAR 129604 . 129608) (CONST 129598 . 129603) (open-paren 129597 . 129598) (symbol 129585 . 129596) (INT 129581 . 129584) (EXTERN 129574 . 129580) (punctuation 129572 . 129573) (close-paren 129571 . 129572) (punctuation 129570 . 129571) (symbol 129553 . 129569) (STRUCT 129546 . 129552) (open-paren 129545 . 129546) (symbol 129525 . 129544) (VOID 129520 . 129524) (EXTERN 129513 . 129519) (punctuation 129484 . 129485) (close-paren 129483 . 129484) (VOID 129479 . 129483) (open-paren 129478 . 129479) (symbol 129456 . 129477) (punctuation 129455 . 129456) (symbol 129446 . 129454) (STRUCT 129439 . 129445) (EXTERN 129432 . 129438) (punctuation 129429 . 129430) (close-paren 129428 . 129429) (INT 129425 . 129428) (punctuation 129423 . 129424) (INT 129420 . 129423) (punctuation 129418 . 129419) (punctuation 129417 . 129418) (symbol 129411 . 129416) (STRUCT 129404 . 129410) (open-paren 129403 . 129404) (symbol 129389 . 129402) (VOID 129384 . 129388) (EXTERN 129377 . 129383) (punctuation 129375 . 129376) (close-paren 129374 . 129375) (INT 129371 . 129374) (punctuation 129369 . 129370) (punctuation 129368 . 129369) (symbol 129362 . 129367) (STRUCT 129355 . 129361) (open-paren 129354 . 129355) (symbol 129340 . 129353) (VOID 129335 . 129339) (EXTERN 129328 . 129334) (punctuation 129326 . 129327) (close-paren 129325 . 129326) (INT 129322 . 129325) (punctuation 129320 . 129321) (punctuation 129319 . 129320) (symbol 129313 . 129318) (STRUCT 129306 . 129312) (punctuation 129304 . 129305) (punctuation 129303 . 129304) (symbol 129297 . 129302) (STRUCT 129290 . 129296) (open-paren 129289 . 129290) (symbol 129275 . 129288) (VOID 129270 . 129274) (EXTERN 129263 . 129269) (punctuation 129261 . 129262) (close-paren 129260 . 129261) (INT 129257 . 129260) (punctuation 129255 . 129256) (punctuation 129254 . 129255) (symbol 129248 . 129253) (STRUCT 129241 . 129247) (punctuation 129239 . 129240) (punctuation 129238 . 129239) (symbol 129232 . 129237) (STRUCT 129225 . 129231) (open-paren 129224 . 129225) (symbol 129211 . 129223) (VOID 129206 . 129210) (EXTERN 129199 . 129205) (punctuation 129197 . 129198) (close-paren 129196 . 129197) (INT 129193 . 129196) (punctuation 129191 . 129192) (punctuation 129190 . 129191) (symbol 129184 . 129189) (STRUCT 129177 . 129183) (open-paren 129176 . 129177) (symbol 129158 . 129175) (VOID 129153 . 129157) (EXTERN 129146 . 129152) (punctuation 129144 . 129145) (close-paren 129143 . 129144) (punctuation 129142 . 129143) (symbol 129136 . 129141) (STRUCT 129129 . 129135) (open-paren 129128 . 129129) (symbol 129116 . 129127) (VOID 129111 . 129115) (EXTERN 129104 . 129110) (punctuation 129102 . 129103) (close-paren 129101 . 129102) (punctuation 129100 . 129101) (symbol 129094 . 129099) (STRUCT 129087 . 129093) (open-paren 129086 . 129087) (symbol 129073 . 129085) (VOID 129068 . 129072) (EXTERN 129061 . 129067) (punctuation 129059 . 129060) (close-paren 129058 . 129059) (INT 129055 . 129058) (punctuation 129053 . 129054) (INT 129050 . 129053) (punctuation 129048 . 129049) (punctuation 129047 . 129048) (symbol 129041 . 129046) (STRUCT 129034 . 129040) (open-paren 129033 . 129034) (symbol 129019 . 129032) (VOID 129014 . 129018) (EXTERN 129007 . 129013) (punctuation 129005 . 129006) (close-paren 129004 . 129005) (INT 129001 . 129004) (punctuation 128999 . 129000) (INT 128996 . 128999) (punctuation 128994 . 128995) (punctuation 128993 . 128994) (symbol 128987 . 128992) (STRUCT 128980 . 128986) (open-paren 128979 . 128980) (symbol 128969 . 128978) (VOID 128964 . 128968) (EXTERN 128957 . 128963) (punctuation 128955 . 128956) (close-paren 128954 . 128955) (INT 128951 . 128954) (punctuation 128949 . 128950) (punctuation 128948 . 128949) (symbol 128942 . 128947) (STRUCT 128935 . 128941) (open-paren 128934 . 128935) (symbol 128914 . 128933) (VOID 128909 . 128913) (EXTERN 128902 . 128908) (punctuation 128900 . 128901) (close-paren 128899 . 128900) (punctuation 128898 . 128899) (symbol 128892 . 128897) (STRUCT 128885 . 128891) (open-paren 128884 . 128885) (symbol 128873 . 128883) (VOID 128868 . 128872) (EXTERN 128861 . 128867) (punctuation 128859 . 128860) (close-paren 128858 . 128859) (punctuation 128857 . 128858) (symbol 128851 . 128856) (STRUCT 128844 . 128850) (open-paren 128843 . 128844) (symbol 128830 . 128842) (VOID 128825 . 128829) (EXTERN 128818 . 128824) (punctuation 128816 . 128817) (close-paren 128815 . 128816) (punctuation 128814 . 128815) (symbol 128808 . 128813) (STRUCT 128801 . 128807) (open-paren 128800 . 128801) (symbol 128790 . 128799) (VOID 128785 . 128789) (EXTERN 128778 . 128784) (punctuation 128744 . 128745) (close-paren 128743 . 128744) (INT 128740 . 128743) (punctuation 128738 . 128739) (punctuation 128737 . 128738) (symbol 128727 . 128736) (STRUCT 128720 . 128726) (open-paren 128719 . 128720) (symbol 128689 . 128718) (VOID 128684 . 128688) (EXTERN 128677 . 128683) (punctuation 128675 . 128676) (close-paren 128674 . 128675) (punctuation 128673 . 128674) (symbol 128667 . 128672) (punctuation 128665 . 128666) (punctuation 128664 . 128665) (symbol 128657 . 128663) (STRUCT 128650 . 128656) (open-paren 128649 . 128650) (symbol 128626 . 128648) (VOID 128621 . 128625) (EXTERN 128614 . 128620) (punctuation 128612 . 128613) (close-paren 128611 . 128612) (VOID 128607 . 128611) (open-paren 128606 . 128607) (symbol 128590 . 128605) (VOID 128585 . 128589) (punctuation 128583 . 128584) (close-paren 128582 . 128583) (VOID 128578 . 128582) (open-paren 128577 . 128578) (symbol 128564 . 128576) (VOID 128559 . 128563) (punctuation 128557 . 128558) (close-paren 128556 . 128557) (BOOL 128552 . 128556) (punctuation 128550 . 128551) (BOOL 128546 . 128550) (punctuation 128544 . 128545) (BOOL 128540 . 128544) (punctuation 128538 . 128539) (INT 128535 . 128538) (punctuation 128533 . 128534) (INT 128530 . 128533) (punctuation 128528 . 128529) (punctuation 128527 . 128528) (symbol 128521 . 128526) (STRUCT 128514 . 128520) (open-paren 128513 . 128514) (symbol 128495 . 128512) (VOID 128490 . 128494) (punctuation 128488 . 128489) (close-paren 128487 . 128488) (BOOL 128483 . 128487) (open-paren 128482 . 128483) (symbol 128457 . 128481) (VOID 128452 . 128456) (punctuation 128443 . 128444) (close-paren 128442 . 128443) (BOOL 128438 . 128442) (punctuation 128436 . 128437) (BOOL 128432 . 128436) (punctuation 128430 . 128431) (punctuation 128429 . 128430) (symbol 128422 . 128428) (STRUCT 128415 . 128421) (open-paren 128414 . 128415) (symbol 128392 . 128413) (VOID 128387 . 128391) (EXTERN 128380 . 128386) (punctuation 128378 . 128379) (close-paren 128377 . 128378) (punctuation 128376 . 128377) (symbol 128369 . 128375) (STRUCT 128362 . 128368) (open-paren 128361 . 128362) (symbol 128337 . 128360) (VOID 128332 . 128336) (EXTERN 128325 . 128331) (punctuation 128297 . 128298) (close-paren 128296 . 128297) (punctuation 128295 . 128296) (symbol 128288 . 128294) (STRUCT 128281 . 128287) (open-paren 128280 . 128281) (symbol 128259 . 128279) (VOID 128254 . 128258) (punctuation 128252 . 128253) (close-paren 128251 . 128252) (BOOL 128247 . 128251) (punctuation 128245 . 128246) (punctuation 128244 . 128245) (symbol 128234 . 128243) (STRUCT 128227 . 128233) (punctuation 128225 . 128226) (punctuation 128224 . 128225) (symbol 128217 . 128223) (STRUCT 128210 . 128216) (open-paren 128209 . 128210) (symbol 128189 . 128208) (VOID 128184 . 128188) (punctuation 128182 . 128183) (close-paren 128181 . 128182) (punctuation 128180 . 128181) (symbol 128170 . 128179) (STRUCT 128163 . 128169) (open-paren 128162 . 128163) (symbol 128146 . 128161) (VOID 128141 . 128145) (punctuation 128139 . 128140) (close-paren 128138 . 128139) (INT 128135 . 128138) (punctuation 128133 . 128134) (INT 128130 . 128133) (punctuation 128128 . 128129) (punctuation 128127 . 128128) (symbol 128114 . 128126) (STRUCT 128107 . 128113) (open-paren 128106 . 128107) (symbol 128082 . 128105) (VOID 128077 . 128081) (punctuation 128075 . 128076) (close-paren 128074 . 128075) (INT 128071 . 128074) (punctuation 128069 . 128070) (punctuation 128068 . 128069) (symbol 128058 . 128067) (STRUCT 128051 . 128057) (punctuation 128049 . 128050) (punctuation 128048 . 128049) (symbol 128041 . 128047) (STRUCT 128034 . 128040) (open-paren 128033 . 128034) (symbol 128023 . 128032) (VOID 128018 . 128022) (punctuation 128016 . 128017) (close-paren 128015 . 128016) (symbol 128006 . 128015) (punctuation 128004 . 128005) (symbol 127995 . 128004) (punctuation 127993 . 127994) (INT 127990 . 127993) (punctuation 127988 . 127989) (INT 127985 . 127988) (punctuation 127950 . 127951) (punctuation 127949 . 127950) (symbol 127936 . 127948) (STRUCT 127929 . 127935) (open-paren 127928 . 127929) (symbol 127901 . 127927) (VOID 127896 . 127900) (punctuation 127894 . 127895) (close-paren 127893 . 127894) (INT 127890 . 127893) (punctuation 127888 . 127889) (INT 127885 . 127888) (punctuation 127883 . 127884) (INT 127880 . 127883) (punctuation 127878 . 127879) (punctuation 127877 . 127878) (symbol 127864 . 127876) (STRUCT 127857 . 127863) (open-paren 127856 . 127857) (symbol 127842 . 127855) (VOID 127837 . 127841) (punctuation 127835 . 127836) (close-paren 127834 . 127835) (INT 127831 . 127834) (punctuation 127829 . 127830) (INT 127826 . 127829) (punctuation 127824 . 127825) (INT 127821 . 127824) (punctuation 127794 . 127795) (punctuation 127793 . 127794) (symbol 127780 . 127792) (STRUCT 127773 . 127779) (punctuation 127771 . 127772) (punctuation 127770 . 127771) (symbol 127763 . 127769) (STRUCT 127756 . 127762) (open-paren 127755 . 127756) (symbol 127736 . 127754) (VOID 127731 . 127735) (punctuation 127729 . 127730) (close-paren 127728 . 127729) (punctuation 127727 . 127728) (symbol 127721 . 127726) (STRUCT 127714 . 127720) (open-paren 127713 . 127714) (symbol 127690 . 127712) (VOID 127685 . 127689) (punctuation 127683 . 127684) (close-paren 127682 . 127683) (symbol 127681 . 127682) (punctuation 127680 . 127681) (symbol 127674 . 127679) (STRUCT 127667 . 127673) (open-paren 127666 . 127667) (symbol 127643 . 127665) (VOID 127638 . 127642) (punctuation 127636 . 127637) (close-paren 127635 . 127636) (punctuation 127634 . 127635) (symbol 127621 . 127633) (STRUCT 127614 . 127620) (open-paren 127613 . 127614) (symbol 127594 . 127612) (VOID 127589 . 127593) (punctuation 127587 . 127588) (close-paren 127586 . 127587) (punctuation 127585 . 127586) (CHAR 127580 . 127584) (punctuation 127578 . 127579) (punctuation 127577 . 127578) (INT 127573 . 127576) (punctuation 127571 . 127572) (INT 127568 . 127571) (punctuation 127566 . 127567) (INT 127563 . 127566) (punctuation 127561 . 127562) (punctuation 127560 . 127561) (symbol 127547 . 127559) (STRUCT 127540 . 127546) (open-paren 127539 . 127540) (symbol 127519 . 127538) (VOID 127514 . 127518) (punctuation 127512 . 127513) (close-paren 127511 . 127512) (VOID 127507 . 127511) (open-paren 127506 . 127507) (symbol 127487 . 127505) (VOID 127482 . 127486) (punctuation 127480 . 127481) (close-paren 127479 . 127480) (punctuation 127478 . 127479) (symbol 127471 . 127477) (STRUCT 127464 . 127470) (open-paren 127463 . 127464) (symbol 127442 . 127462) (VOID 127437 . 127441) (punctuation 127435 . 127436) (close-paren 127434 . 127435) (punctuation 127433 . 127434) (symbol 127427 . 127432) (STRUCT 127420 . 127426) (open-paren 127419 . 127420) (symbol 127407 . 127418) (VOID 127402 . 127406) (punctuation 127400 . 127401) (close-paren 127399 . 127400) (punctuation 127398 . 127399) (symbol 127392 . 127397) (STRUCT 127385 . 127391) (open-paren 127384 . 127385) (symbol 127364 . 127383) (VOID 127359 . 127363) (EXTERN 127352 . 127358) (punctuation 127350 . 127351) (close-paren 127349 . 127350) (VOID 127345 . 127349) (open-paren 127344 . 127345) (symbol 127330 . 127343) (VOID 127325 . 127329) (EXTERN 127318 . 127324) (punctuation 127316 . 127317) (close-paren 127315 . 127316) (INT 127312 . 127315) (punctuation 127310 . 127311) (INT 127307 . 127310) (punctuation 127305 . 127306) (punctuation 127304 . 127305) (symbol 127298 . 127303) (STRUCT 127291 . 127297) (open-paren 127290 . 127291) (symbol 127268 . 127289) (INT 127264 . 127267) (EXTERN 127257 . 127263) (punctuation 127255 . 127256) (close-paren 127254 . 127255) (INT 127251 . 127254) (punctuation 127249 . 127250) (INT 127246 . 127249) (punctuation 127244 . 127245) (punctuation 127243 . 127244) (symbol 127237 . 127242) (STRUCT 127230 . 127236) (open-paren 127229 . 127230) (symbol 127206 . 127228) (VOID 127201 . 127205) (EXTERN 127194 . 127200) (punctuation 127192 . 127193) (close-paren 127191 . 127192) (BOOL 127187 . 127191) (punctuation 127185 . 127186) (BOOL 127181 . 127185) (punctuation 127179 . 127180) (punctuation 127178 . 127179) (symbol 127172 . 127177) (STRUCT 127165 . 127171) (open-paren 127164 . 127165) (symbol 127151 . 127163) (BOOL 127146 . 127150) (EXTERN 127139 . 127145) (punctuation 127137 . 127138) (close-paren 127136 . 127137) (punctuation 127135 . 127136) (symbol 127129 . 127134) (STRUCT 127122 . 127128) (open-paren 127121 . 127122) (symbol 127108 . 127120) (VOID 127103 . 127107) (EXTERN 127096 . 127102) (punctuation 127094 . 127095) (close-paren 127093 . 127094) (punctuation 127092 . 127093) (INT 127088 . 127091) (punctuation 127086 . 127087) (punctuation 127085 . 127086) (INT 127081 . 127084) (punctuation 127079 . 127080) (punctuation 127078 . 127079) (INT 127074 . 127077) (punctuation 127072 . 127073) (punctuation 127071 . 127072) (INT 127067 . 127070) (punctuation 127024 . 127025) (punctuation 127023 . 127024) (symbol 127011 . 127022) (punctuation 126968 . 126969) (punctuation 126967 . 126968) (symbol 126957 . 126966) (punctuation 126955 . 126956) (punctuation 126954 . 126955) (INT 126950 . 126953) (punctuation 126948 . 126949) (punctuation 126947 . 126948) (INT 126943 . 126946) (punctuation 126900 . 126901) (symbol 126889 . 126900) (ENUM 126884 . 126888) (punctuation 126882 . 126883) (punctuation 126881 . 126882) (symbol 126874 . 126880) (STRUCT 126867 . 126873) (open-paren 126866 . 126867) (symbol 126845 . 126865) (symbol 126833 . 126844) (EXTERN 126826 . 126832) (punctuation 126824 . 126825) (close-paren 126823 . 126824) (punctuation 126822 . 126823) (INT 126818 . 126821) (punctuation 126816 . 126817) (punctuation 126815 . 126816) (INT 126811 . 126814) (punctuation 126809 . 126810) (punctuation 126808 . 126809) (INT 126804 . 126807) (punctuation 126802 . 126803) (punctuation 126801 . 126802) (INT 126797 . 126800) (punctuation 126758 . 126759) (punctuation 126757 . 126758) (symbol 126745 . 126756) (punctuation 126706 . 126707) (punctuation 126705 . 126706) (symbol 126695 . 126704) (punctuation 126693 . 126694) (punctuation 126692 . 126693) (INT 126688 . 126691) (punctuation 126686 . 126687) (punctuation 126685 . 126686) (INT 126681 . 126684) (punctuation 126642 . 126643) (symbol 126631 . 126642) (ENUM 126626 . 126630) (punctuation 126624 . 126625) (punctuation 126623 . 126624) (symbol 126616 . 126622) (STRUCT 126609 . 126615) (open-paren 126608 . 126609) (symbol 126591 . 126607) (symbol 126579 . 126590) (EXTERN 126572 . 126578) (punctuation 126570 . 126571) (close-paren 126569 . 126570) (punctuation 126568 . 126569) (INT 126564 . 126567) (punctuation 126562 . 126563) (punctuation 126561 . 126562) (INT 126557 . 126560) (punctuation 126555 . 126556) (punctuation 126554 . 126555) (INT 126550 . 126553) (punctuation 126548 . 126549) (punctuation 126547 . 126548) (INT 126543 . 126546) (punctuation 126497 . 126498) (punctuation 126496 . 126497) (symbol 126484 . 126495) (punctuation 126438 . 126439) (punctuation 126437 . 126438) (symbol 126425 . 126436) (STRUCT 126418 . 126424) (punctuation 126372 . 126373) (punctuation 126371 . 126372) (INT 126367 . 126370) (punctuation 126365 . 126366) (punctuation 126364 . 126365) (INT 126360 . 126363) (punctuation 126314 . 126315) (punctuation 126313 . 126314) (symbol 126306 . 126312) (STRUCT 126299 . 126305) (open-paren 126298 . 126299) (symbol 126274 . 126297) (symbol 126262 . 126273) (EXTERN 126255 . 126261) (punctuation 126222 . 126223) (close-paren 126221 . 126222) (VOID 126217 . 126221) (open-paren 126216 . 126217) (symbol 126200 . 126215) (INT 126196 . 126199) (punctuation 125398 . 125399) (close-paren 125397 . 125398) (VOID 125393 . 125397) (open-paren 125392 . 125393) (symbol 125375 . 125391) (VOID 125370 . 125374) (EXTERN 125363 . 125369) (punctuation 125361 . 125362) (close-paren 125360 . 125361) (VOID 125356 . 125360) (open-paren 125355 . 125356) (symbol 125339 . 125354) (VOID 125334 . 125338) (EXTERN 125327 . 125333) (punctuation 125139 . 125140) (close-paren 125138 . 125139) (punctuation 125137 . 125138) (symbol 125130 . 125136) (punctuation 125128 . 125129) (punctuation 125127 . 125128) (symbol 125121 . 125126) (STRUCT 125114 . 125120) (open-paren 125113 . 125114) (symbol 125099 . 125112) (VOID 125094 . 125098) (punctuation 125042 . 125043) (close-paren 125041 . 125042) (open-paren 125040 . 125041) (symbol 125026 . 125040) (punctuation 125024 . 125025) (close-paren 125023 . 125024) (open-paren 125022 . 125023) (symbol 125008 . 125022) (CHAR 125003 . 125007) (EXTERN 124996 . 125002) (punctuation 124994 . 124995) (close-paren 124993 . 124994) (symbol 124982 . 124993) (open-paren 124981 . 124982) (symbol 124957 . 124980) (VOID 124952 . 124956) (punctuation 124950 . 124951) (close-paren 124949 . 124950) (symbol 124938 . 124949) (punctuation 124936 . 124937) (INT 124933 . 124936) (punctuation 124931 . 124932) (punctuation 124930 . 124931) (symbol 124924 . 124929) (STRUCT 124917 . 124923) (open-paren 124916 . 124917) (symbol 124898 . 124915) (INT 124894 . 124897) (punctuation 124892 . 124893) (close-paren 124891 . 124892) (INT 124888 . 124891) (punctuation 124886 . 124887) (INT 124883 . 124886) (punctuation 124881 . 124882) (symbol 124870 . 124881) (punctuation 124868 . 124869) (punctuation 124867 . 124868) (symbol 124860 . 124866) (STRUCT 124853 . 124859) (open-paren 124852 . 124853) (symbol 124840 . 124851) (INT 124836 . 124839) (punctuation 124834 . 124835) (close-paren 124833 . 124834) (symbol 124812 . 124833) (ENUM 124807 . 124811) (punctuation 124776 . 124777) (BOOL 124772 . 124776) (punctuation 124770 . 124771) (symbol 124763 . 124770) (ENUM 124758 . 124762) (punctuation 124756 . 124757) (punctuation 124755 . 124756) (symbol 124745 . 124754) (punctuation 124714 . 124715) (symbol 124705 . 124714) (punctuation 124703 . 124704) (symbol 124694 . 124703) (punctuation 124692 . 124693) (symbol 124681 . 124692) (punctuation 124679 . 124680) (punctuation 124678 . 124679) (symbol 124671 . 124677) (STRUCT 124664 . 124670) (open-paren 124663 . 124664) (symbol 124639 . 124662) (INT 124635 . 124638) (punctuation 124633 . 124634) (close-paren 124632 . 124633) (symbol 124611 . 124632) (ENUM 124606 . 124610) (punctuation 124604 . 124605) (symbol 124593 . 124604) (punctuation 124591 . 124592) (BOOL 124587 . 124591) (punctuation 124556 . 124557) (symbol 124547 . 124556) (punctuation 124545 . 124546) (punctuation 124544 . 124545) (symbol 124534 . 124543) (punctuation 124532 . 124533) (symbol 124523 . 124532) (punctuation 124521 . 124522) (punctuation 124520 . 124521) (symbol 124513 . 124519) (STRUCT 124506 . 124512) (open-paren 124505 . 124506) (symbol 124481 . 124504) (INT 124477 . 124480) (punctuation 124475 . 124476) (close-paren 124474 . 124475) (symbol 124453 . 124474) (ENUM 124448 . 124452) (punctuation 124446 . 124447) (INT 124443 . 124446) (punctuation 124441 . 124442) (BOOL 124437 . 124441) (punctuation 124435 . 124436) (symbol 124426 . 124435) (punctuation 124395 . 124396) (punctuation 124394 . 124395) (symbol 124384 . 124393) (punctuation 124382 . 124383) (symbol 124373 . 124382) (punctuation 124371 . 124372) (punctuation 124370 . 124371) (symbol 124363 . 124369) (STRUCT 124356 . 124362) (open-paren 124355 . 124356) (symbol 124331 . 124354) (INT 124327 . 124330) (punctuation 124325 . 124326) (close-paren 124324 . 124325) (punctuation 124323 . 124324) (symbol 124317 . 124322) (STRUCT 124310 . 124316) (open-paren 124309 . 124310) (symbol 124287 . 124308) (VOID 124282 . 124286) (punctuation 124280 . 124281) (close-paren 124279 . 124280) (punctuation 124278 . 124279) (symbol 124272 . 124277) (STRUCT 124265 . 124271) (open-paren 124264 . 124265) (symbol 124247 . 124263) (VOID 124242 . 124246) (punctuation 124240 . 124241) (close-paren 124239 . 124240) (punctuation 124238 . 124239) (symbol 124232 . 124237) (STRUCT 124225 . 124231) (open-paren 124224 . 124225) (symbol 124207 . 124223) (VOID 124202 . 124206) (punctuation 124200 . 124201) (close-paren 124199 . 124200) (BOOL 124195 . 124199) (punctuation 124193 . 124194) (INT 124190 . 124193) (punctuation 124188 . 124189) (symbol 124177 . 124188) (punctuation 124150 . 124151) (punctuation 124149 . 124150) (symbol 124143 . 124148) (STRUCT 124136 . 124142) (punctuation 124134 . 124135) (punctuation 124133 . 124134) (symbol 124126 . 124132) (STRUCT 124119 . 124125) (open-paren 124118 . 124119) (symbol 124098 . 124117) (INT 124094 . 124097) (punctuation 124092 . 124093) (close-paren 124091 . 124092) (INT 124088 . 124091) (punctuation 124086 . 124087) (INT 124083 . 124086) (punctuation 124081 . 124082) (punctuation 124080 . 124081) (symbol 124074 . 124079) (STRUCT 124067 . 124073) (open-paren 124066 . 124067) (symbol 124049 . 124065) (INT 124045 . 124048) (punctuation 124043 . 124044) (close-paren 124042 . 124043) (INT 124039 . 124042) (punctuation 124037 . 124038) (INT 124034 . 124037) (punctuation 124032 . 124033) (punctuation 124031 . 124032) (symbol 124025 . 124030) (STRUCT 124018 . 124024) (open-paren 124017 . 124018) (symbol 124004 . 124016) (INT 124000 . 124003) (punctuation 123998 . 123999) (close-paren 123997 . 123998) (INT 123994 . 123997) (punctuation 123992 . 123993) (punctuation 123991 . 123992) (symbol 123985 . 123990) (STRUCT 123978 . 123984) (punctuation 123976 . 123977) (punctuation 123975 . 123976) (symbol 123968 . 123974) (STRUCT 123961 . 123967) (open-paren 123960 . 123961) (symbol 123942 . 123959) (INT 123938 . 123941) (punctuation 123936 . 123937) (close-paren 123935 . 123936) (BOOL 123931 . 123935) (punctuation 123929 . 123930) (symbol 123918 . 123929) (punctuation 123916 . 123917) (punctuation 123915 . 123916) (symbol 123909 . 123914) (STRUCT 123902 . 123908) (punctuation 123900 . 123901) (punctuation 123899 . 123900) (symbol 123892 . 123898) (STRUCT 123885 . 123891) (open-paren 123884 . 123885) (symbol 123866 . 123883) (INT 123862 . 123865) (punctuation 123853 . 123854) (close-paren 123852 . 123853) (punctuation 123851 . 123852) (symbol 123846 . 123850) (STRUCT 123839 . 123845) (punctuation 123837 . 123838) (punctuation 123836 . 123837) (symbol 123830 . 123835) (STRUCT 123823 . 123829) (open-paren 123822 . 123823) (symbol 123797 . 123821) (VOID 123792 . 123796) (punctuation 123764 . 123765) (close-paren 123763 . 123764) (punctuation 123762 . 123763) (INT 123758 . 123761) (punctuation 123732 . 123733) (symbol 123721 . 123732) (punctuation 123719 . 123720) (punctuation 123718 . 123719) (symbol 123706 . 123717) (punctuation 123704 . 123705) (punctuation 123703 . 123704) (symbol 123697 . 123702) (STRUCT 123690 . 123696) (open-paren 123689 . 123690) (symbol 123672 . 123688) (punctuation 123671 . 123672) (CHAR 123666 . 123670) (punctuation 123664 . 123665) (close-paren 123663 . 123664) (symbol 123642 . 123663) (ENUM 123637 . 123641) (punctuation 123609 . 123610) (symbol 123598 . 123609) (punctuation 123596 . 123597) (punctuation 123595 . 123596) (symbol 123590 . 123594) (STRUCT 123583 . 123589) (punctuation 123581 . 123582) (punctuation 123580 . 123581) (symbol 123574 . 123579) (STRUCT 123567 . 123573) (open-paren 123566 . 123567) (symbol 123555 . 123565) (LONG 123550 . 123554) (UNSIGNED 123541 . 123549) (punctuation 123539 . 123540) (close-paren 123538 . 123539) (BOOL 123534 . 123538) (open-paren 123533 . 123534) (symbol 123516 . 123532) (VOID 123511 . 123515) (punctuation 123509 . 123510) (close-paren 123508 . 123509) (INT 123505 . 123508) (punctuation 123503 . 123504) (punctuation 123502 . 123503) (symbol 123496 . 123501) (STRUCT 123489 . 123495) (open-paren 123488 . 123489) (symbol 123473 . 123487) (symbol 123461 . 123472) (punctuation 123458 . 123459) (close-paren 123457 . 123458) (punctuation 123456 . 123457) (SHORT 123450 . 123455) (UNSIGNED 123441 . 123449) (punctuation 123439 . 123440) (punctuation 123438 . 123439) (SHORT 123432 . 123437) (UNSIGNED 123423 . 123431) (punctuation 123421 . 123422) (punctuation 123420 . 123421) (SHORT 123414 . 123419) (UNSIGNED 123405 . 123413) (punctuation 123380 . 123381) (punctuation 123379 . 123380) (CHAR 123374 . 123378) (CONST 123368 . 123373) (open-paren 123367 . 123368) (symbol 123350 . 123366) (BOOL 123345 . 123349) (punctuation 123343 . 123344) (close-paren 123342 . 123343) (BOOL 123338 . 123342) (punctuation 123336 . 123337) (BOOL 123332 . 123336) (punctuation 123299 . 123300) (punctuation 123298 . 123299) (symbol 123286 . 123297) (punctuation 123284 . 123285) (punctuation 123283 . 123284) (CHAR 123278 . 123282) (CONST 123272 . 123277) (punctuation 123270 . 123271) (punctuation 123269 . 123270) (symbol 123263 . 123268) (STRUCT 123256 . 123262) (open-paren 123255 . 123256) (symbol 123237 . 123254) (BOOL 123232 . 123236) (EXTERN 123225 . 123231) (punctuation 123223 . 123224) (close-paren 123222 . 123223) (symbol 123211 . 123222) (punctuation 123170 . 123171) (symbol 123159 . 123170) (punctuation 123157 . 123158) (punctuation 123156 . 123157) (symbol 123150 . 123155) (STRUCT 123143 . 123149) (open-paren 123142 . 123143) (symbol 123109 . 123141) (VOID 123104 . 123108) (punctuation 123094 . 123095) (close-paren 123093 . 123094) (INT 123090 . 123093) (punctuation 123088 . 123089) (punctuation 123087 . 123088) (LONG 123082 . 123086) (UNSIGNED 123073 . 123081) (punctuation 123071 . 123072) (punctuation 123070 . 123071) (symbol 123064 . 123069) (STRUCT 123057 . 123063) (open-paren 123056 . 123057) (symbol 123042 . 123055) (VOID 123037 . 123041) (punctuation 123035 . 123036) (close-paren 123034 . 123035) (LONG 123030 . 123034) (UNSIGNED 123021 . 123029) (punctuation 123019 . 123020) (punctuation 123018 . 123019) (symbol 123012 . 123017) (STRUCT 123005 . 123011) (open-paren 123004 . 123005) (symbol 122991 . 123003) (VOID 122986 . 122990) (punctuation 122932 . 122933) (close-paren 122931 . 122932) (INT 122928 . 122931) (open-paren 122927 . 122928) (symbol 122916 . 122926) (VOID 122911 . 122915) (punctuation 122909 . 122910) (close-paren 122908 . 122909) (INT 122905 . 122908) (open-paren 122904 . 122905) (symbol 122889 . 122903) (VOID 122884 . 122888) (punctuation 122882 . 122883) (close-paren 122881 . 122882) (INT 122878 . 122881) (open-paren 122877 . 122878) (symbol 122865 . 122876) (BOOL 122860 . 122864) (punctuation 122858 . 122859) (close-paren 122857 . 122858) (VOID 122853 . 122857) (open-paren 122852 . 122853) (symbol 122836 . 122851) (VOID 122831 . 122835) (punctuation 122829 . 122830) (close-paren 122828 . 122829) (VOID 122824 . 122828) (open-paren 122823 . 122824) (symbol 122809 . 122822) (VOID 122804 . 122808) (punctuation 122802 . 122803) (close-paren 122801 . 122802) (punctuation 122800 . 122801) (INT 122796 . 122799) (punctuation 122794 . 122795) (punctuation 122793 . 122794) (INT 122789 . 122792) (punctuation 122787 . 122788) (INT 122784 . 122787) (open-paren 122783 . 122784) (symbol 122770 . 122782) (VOID 122765 . 122769) (punctuation 122727 . 122728) (close-paren 122726 . 122727) (punctuation 122725 . 122726) (symbol 122713 . 122724) (STRUCT 122706 . 122712) (punctuation 122704 . 122705) (punctuation 122703 . 122704) (symbol 122698 . 122702) (STRUCT 122691 . 122697) (punctuation 122689 . 122690) (punctuation 122688 . 122689) (symbol 122682 . 122687) (STRUCT 122675 . 122681) (open-paren 122674 . 122675) (symbol 122661 . 122673) (INT 122657 . 122660) (punctuation 122654 . 122655) (close-paren 122653 . 122654) (symbol 122649 . 122653) (symbol 122631 . 122648) (punctuation 122595 . 122596) (punctuation 122594 . 122595) (symbol 122588 . 122593) (STRUCT 122581 . 122587) (punctuation 122579 . 122580) (punctuation 122578 . 122579) (symbol 122572 . 122577) (STRUCT 122565 . 122571) (open-paren 122564 . 122565) (symbol 122535 . 122563) (INT 122531 . 122534) (punctuation 122529 . 122530) (close-paren 122528 . 122529) (symbol 122525 . 122528) (symbol 122507 . 122524) (punctuation 122471 . 122472) (punctuation 122470 . 122471) (symbol 122464 . 122469) (STRUCT 122457 . 122463) (punctuation 122455 . 122456) (punctuation 122454 . 122455) (symbol 122448 . 122453) (STRUCT 122441 . 122447) (open-paren 122440 . 122441) (symbol 122423 . 122439) (LONG "long" 122407 . 122422) (UNSIGNED "unsigned" 122407 . 122422) (symbol 122291 . 122301) (symbol 122283 . 122290) (punctuation 122281 . 122282) (punctuation 122280 . 122281) (punctuation 122206 . 122207) (close-paren 122205 . 122206) (INT 122202 . 122205) (punctuation 122200 . 122201) (symbol 122189 . 122200) (punctuation 122187 . 122188) (punctuation 122186 . 122187) (symbol 122180 . 122185) (STRUCT 122173 . 122179) (open-paren 122172 . 122173) (symbol 122159 . 122171) (symbol 122149 . 122158) (punctuation 122147 . 122148) (close-paren 122146 . 122147) (punctuation 122145 . 122146) (symbol 122139 . 122144) (STRUCT 122132 . 122138) (punctuation 122130 . 122131) (punctuation 122129 . 122130) (symbol 122123 . 122128) (STRUCT 122116 . 122122) (open-paren 122115 . 122116) (symbol 122089 . 122114) (VOID 122084 . 122088) (punctuation 122082 . 122083) (close-paren 122081 . 122082) (symbol 122070 . 122081) (open-paren 122069 . 122070) (symbol 122055 . 122068) (BOOL 122050 . 122054) (punctuation 122048 . 122049) (close-paren 122047 . 122048) (BOOL 122043 . 122047) (open-paren 122042 . 122043) (symbol 122013 . 122041) (VOID 122008 . 122012) (punctuation 122006 . 122007) (close-paren 122005 . 122006) (punctuation 122004 . 122005) (symbol 121992 . 122003) (STRUCT 121985 . 121991) (open-paren 121984 . 121985) (symbol 121967 . 121983) (VOID 121962 . 121966) (punctuation 121960 . 121961) (close-paren 121959 . 121960) (symbol 121948 . 121959) (open-paren 121947 . 121948) (symbol 121928 . 121946) (VOID 121923 . 121927) (punctuation 121921 . 121922) (close-paren 121920 . 121921) (punctuation 121919 . 121920) (symbol 121913 . 121918) (STRUCT 121906 . 121912) (open-paren 121905 . 121906) (symbol 121888 . 121904) (VOID 121883 . 121887) (punctuation 121881 . 121882) (close-paren 121880 . 121881) (VOID 121876 . 121880) (open-paren 121875 . 121876) (symbol 121858 . 121874) (punctuation 121857 . 121858) (symbol 121845 . 121856) (STRUCT 121838 . 121844) (punctuation 121835 . 121836) (close-paren 121834 . 121835) (symbol 121823 . 121834) (open-paren 121822 . 121823) (symbol 121800 . 121821) (symbol 121788 . 121799) (EXTERN 121781 . 121787) (punctuation 121674 . 121675) (close-paren 121673 . 121674) (symbol 121664 . 121673) (punctuation 121662 . 121663) (punctuation 121661 . 121662) (symbol 121655 . 121660) (STRUCT 121648 . 121654) (open-paren 121647 . 121648) (symbol 121626 . 121646) (VOID 121621 . 121625) (EXTERN 121614 . 121620) (punctuation 121590 . 121591) (close-paren 121589 . 121590) (punctuation 121588 . 121589) (symbol 121575 . 121587) (open-paren 121574 . 121575) (symbol 121548 . 121573) (VOID 121543 . 121547) (EXTERN 121536 . 121542) (punctuation 121527 . 121528) (close-paren 121526 . 121527) (symbol 121517 . 121526) (punctuation 121515 . 121516) (punctuation 121514 . 121515) (symbol 121508 . 121513) (STRUCT 121501 . 121507) (open-paren 121500 . 121501) (symbol 121479 . 121499) (VOID 121474 . 121478) (EXTERN 121467 . 121473) (punctuation 121282 . 121283) (close-paren 121281 . 121282) (symbol 121270 . 121281) (punctuation 121268 . 121269) (punctuation 121267 . 121268) (symbol 121261 . 121266) (STRUCT 121254 . 121260) (open-paren 121253 . 121254) (symbol 121223 . 121252) (symbol 121213 . 121222) (EXTERN 121206 . 121212) (punctuation 121204 . 121205) (close-paren 121203 . 121204) (INT 121200 . 121203) (UNSIGNED 121191 . 121199) (punctuation 121189 . 121190) (INT 121186 . 121189) (UNSIGNED 121177 . 121185) (punctuation 121127 . 121128) (punctuation 121126 . 121127) (CHAR 121121 . 121125) (punctuation 121119 . 121120) (punctuation 121118 . 121119) (symbol 121112 . 121117) (STRUCT 121105 . 121111) (open-paren 121104 . 121105) (symbol 121074 . 121103) (symbol 121064 . 121073) (EXTERN 121057 . 121063) (punctuation 121055 . 121056) (close-paren 121054 . 121055) (symbol 121045 . 121054) (punctuation 121043 . 121044) (punctuation 121042 . 121043) (symbol 121036 . 121041) (STRUCT 121029 . 121035) (open-paren 121028 . 121029) (symbol 121005 . 121027) (VOID 121000 . 121004) (EXTERN 120993 . 120999) (punctuation 120991 . 120992) (close-paren 120990 . 120991) (symbol 120981 . 120990) (punctuation 120979 . 120980) (punctuation 120978 . 120979) (symbol 120972 . 120977) (STRUCT 120965 . 120971) (open-paren 120964 . 120965) (symbol 120944 . 120963) (symbol 120934 . 120943) (EXTERN 120927 . 120933) (punctuation 120871 . 120872) (close-paren 120870 . 120871) (punctuation 120869 . 120870) (symbol 120862 . 120868) (STRUCT 120855 . 120861) (punctuation 120853 . 120854) (INT 120850 . 120853) (open-paren 120849 . 120850) (symbol 120826 . 120848) (VOID 120821 . 120825) (EXTERN 120814 . 120820) (punctuation 120811 . 120812) (close-paren 120810 . 120811) (VOID 120806 . 120810) (open-paren 120805 . 120806) (symbol 120779 . 120804) (BOOL 120774 . 120778) (EXTERN 120767 . 120773) (punctuation 120764 . 120765) (close-paren 120763 . 120764) (punctuation 120762 . 120763) (symbol 120752 . 120761) (STRUCT 120745 . 120751) (open-paren 120744 . 120745) (symbol 120735 . 120743) (UNSIGNED 120726 . 120734) (EXTERN 120719 . 120725) (punctuation 120659 . 120660) (close-paren 120658 . 120659) (INT 120655 . 120658) (punctuation 120653 . 120654) (punctuation 120652 . 120653) (symbol 120646 . 120651) (STRUCT 120639 . 120645) (open-paren 120638 . 120639) (symbol 120613 . 120637) (VOID 120608 . 120612) (punctuation 120570 . 120571) (close-paren 120569 . 120570) (punctuation 120568 . 120569) (symbol 120548 . 120567) (STRUCT 120541 . 120547) (open-paren 120540 . 120541) (symbol 120524 . 120539) (VOID 120519 . 120523) (punctuation 120516 . 120517) (close-paren 120515 . 120516) (BOOL 120511 . 120515) (punctuation 120509 . 120510) (punctuation 120508 . 120509) (symbol 120501 . 120507) (STRUCT 120494 . 120500) (open-paren 120493 . 120494) (symbol 120471 . 120492) (BOOL 120466 . 120470) (punctuation 120464 . 120465) (close-paren 120463 . 120464) (BOOL 120459 . 120463) (punctuation 120457 . 120458) (punctuation 120456 . 120457) (symbol 120449 . 120455) (STRUCT 120442 . 120448) (open-paren 120441 . 120442) (symbol 120421 . 120440) (BOOL 120416 . 120420) (punctuation 120414 . 120415) (close-paren 120413 . 120414) (punctuation 120412 . 120413) (symbol 120402 . 120411) (STRUCT 120395 . 120401) (punctuation 120393 . 120394) (punctuation 120392 . 120393) (symbol 120385 . 120391) (STRUCT 120378 . 120384) (open-paren 120377 . 120378) (symbol 120353 . 120376) (VOID 120348 . 120352) (punctuation 120346 . 120347) (close-paren 120345 . 120346) (INT 120342 . 120345) (punctuation 120340 . 120341) (punctuation 120339 . 120340) (symbol 120329 . 120338) (STRUCT 120322 . 120328) (punctuation 120320 . 120321) (punctuation 120319 . 120320) (symbol 120312 . 120318) (STRUCT 120305 . 120311) (open-paren 120304 . 120305) (symbol 120285 . 120303) (VOID 120280 . 120284) (punctuation 120278 . 120279) (close-paren 120277 . 120278) (symbol 120266 . 120277) (open-paren 120265 . 120266) (symbol 120244 . 120264) (INT 120240 . 120243) (punctuation 120111 . 120112) (close-paren 120110 . 120111) (BOOL 120106 . 120110) (punctuation 120104 . 120105) (INT 120101 . 120104) (punctuation 120099 . 120100) (INT 120096 . 120099) (punctuation 120094 . 120095) (INT 120091 . 120094) (punctuation 120089 . 120090) (INT 120086 . 120089) (punctuation 120084 . 120085) (punctuation 120083 . 120084) (CHAR 120078 . 120082) (CONST 120072 . 120077) (open-paren 120071 . 120072) (symbol 120049 . 120070) (VOID 120044 . 120048) (EXTERN 120037 . 120043) (punctuation 120035 . 120036) (close-paren 120034 . 120035) (symbol 120018 . 120034) (ENUM 120013 . 120017) (punctuation 120011 . 120012) (INT 120008 . 120011) (punctuation 120006 . 120007) (INT 120003 . 120006) (punctuation 119994 . 119995) (punctuation 119993 . 119994) (symbol 119983 . 119992) (STRUCT 119976 . 119982) (punctuation 119974 . 119975) (punctuation 119973 . 119974) (symbol 119966 . 119972) (STRUCT 119959 . 119965) (open-paren 119958 . 119959) (symbol 119929 . 119957) (VOID 119924 . 119928) (EXTERN 119917 . 119923) (punctuation 119915 . 119916) (close-paren 119914 . 119915) (symbol 119913 . 119914) (punctuation 119912 . 119913) (symbol 119905 . 119911) (STRUCT 119898 . 119904) (open-paren 119897 . 119898) (symbol 119874 . 119896) (BOOL 119869 . 119873) (EXTERN 119862 . 119868) (punctuation 119860 . 119861) (close-paren 119859 . 119860) (punctuation 119858 . 119859) (symbol 119845 . 119857) (open-paren 119844 . 119845) (symbol 119827 . 119843) (BOOL 119822 . 119826) (EXTERN 119815 . 119821) (punctuation 119813 . 119814) (close-paren 119812 . 119813) (punctuation 119811 . 119812) (symbol 119805 . 119810) (STRUCT 119798 . 119804) (open-paren 119797 . 119798) (symbol 119779 . 119796) (VOID 119774 . 119778) (EXTERN 119767 . 119773) (punctuation 119765 . 119766) (close-paren 119764 . 119765) (punctuation 119763 . 119764) (symbol 119756 . 119762) (STRUCT 119749 . 119755) (open-paren 119748 . 119749) (symbol 119720 . 119747) (VOID 119715 . 119719) (EXTERN 119708 . 119714) (punctuation 119706 . 119707) (close-paren 119705 . 119706) (INT 119702 . 119705) (punctuation 119700 . 119701) (INT 119697 . 119700) (punctuation 119695 . 119696) (punctuation 119694 . 119695) (symbol 119688 . 119693) (STRUCT 119681 . 119687) (open-paren 119680 . 119681) (symbol 119659 . 119679) (VOID 119654 . 119658) (EXTERN 119647 . 119653) (punctuation 119612 . 119613) (close-paren 119611 . 119612) (symbol 119600 . 119611) (open-paren 119599 . 119600) (symbol 119574 . 119598) (VOID 119569 . 119573) (EXTERN 119562 . 119568) (punctuation 119560 . 119561) (close-paren 119559 . 119560) (punctuation 119558 . 119559) (symbol 119542 . 119557) (punctuation 119502 . 119503) (punctuation 119501 . 119502) (symbol 119485 . 119500) (CONST 119479 . 119484) (punctuation 119439 . 119440) (punctuation 119438 . 119439) (symbol 119422 . 119437) (CONST 119416 . 119421) (open-paren 119415 . 119416) (symbol 119390 . 119414) (BOOL 119385 . 119389) (EXTERN 119378 . 119384) (punctuation 119376 . 119377) (close-paren 119375 . 119376) (INT 119372 . 119375) (punctuation 119370 . 119371) (INT 119367 . 119370) (punctuation 119365 . 119366) (INT 119362 . 119365) (punctuation 119360 . 119361) (INT 119357 . 119360) (punctuation 119355 . 119356) (punctuation 119354 . 119355) (symbol 119348 . 119353) (STRUCT 119341 . 119347) (open-paren 119340 . 119341) (symbol 119327 . 119339) (VOID 119322 . 119326) (EXTERN 119315 . 119321) (punctuation 119312 . 119313) (close-paren 119311 . 119312) (symbol 119300 . 119311) (punctuation 119298 . 119299) (INT 119295 . 119298) (punctuation 119281 . 119282) (BOOL 119277 . 119281) (punctuation 119275 . 119276) (INT 119272 . 119275) (punctuation 119270 . 119271) (INT 119267 . 119270) (punctuation 119265 . 119266) (punctuation 119264 . 119265) (symbol 119258 . 119263) (STRUCT 119251 . 119257) (open-paren 119250 . 119251) (symbol 119216 . 119249) (VOID 119211 . 119215) (EXTERN 119204 . 119210) (punctuation 119202 . 119203) (close-paren 119201 . 119202) (INT 119198 . 119201) (punctuation 119196 . 119197) (BOOL 119192 . 119196) (punctuation 119190 . 119191) (INT 119187 . 119190) (punctuation 119185 . 119186) (INT 119182 . 119185) (punctuation 119145 . 119146) (punctuation 119144 . 119145) (symbol 119138 . 119143) (STRUCT 119131 . 119137) (open-paren 119130 . 119131) (symbol 119108 . 119129) (VOID 119103 . 119107) (EXTERN 119096 . 119102) (punctuation 119094 . 119095) (close-paren 119093 . 119094) (INT 119090 . 119093) (punctuation 119088 . 119089) (BOOL 119084 . 119088) (punctuation 119082 . 119083) (INT 119079 . 119082) (punctuation 119077 . 119078) (INT 119074 . 119077) (punctuation 119066 . 119067) (punctuation 119065 . 119066) (symbol 119059 . 119064) (STRUCT 119052 . 119058) (open-paren 119051 . 119052) (symbol 119030 . 119050) (symbol 119018 . 119029) (EXTERN 119011 . 119017) (punctuation 119008 . 119009) (close-paren 119007 . 119008) (INT 119004 . 119007) (punctuation 119002 . 119003) (INT 118999 . 119002) (punctuation 118997 . 118998) (symbol 118986 . 118997) (open-paren 118985 . 118986) (symbol 118971 . 118984) (symbol 118959 . 118970) (EXTERN 118952 . 118958) (punctuation 118950 . 118951) (close-paren 118949 . 118950) (symbol 118947 . 118949) (punctuation 118946 . 118947) (symbol "XRectangle" 118930 . 118945) (punctuation 118888 . 118889) (punctuation 118887 . 118888) (symbol 118874 . 118886) (STRUCT 118867 . 118873) (open-paren 118866 . 118867) (symbol 118839 . 118865) (VOID 118834 . 118838) (EXTERN 118827 . 118833) (punctuation 118825 . 118826) (close-paren 118824 . 118825) (INT 118821 . 118824) (punctuation 118819 . 118820) (punctuation 118818 . 118819) (symbol "XRectangle" 118802 . 118817) (punctuation 118760 . 118761) (punctuation 118759 . 118760) (symbol 118746 . 118758) (STRUCT 118739 . 118745) (open-paren 118738 . 118739) (symbol 118710 . 118737) (INT 118706 . 118709) (EXTERN 118699 . 118705) (punctuation 118696 . 118697) (close-paren 118695 . 118696) (symbol 118694 . 118695) (punctuation 118693 . 118694) (symbol 118686 . 118692) (STRUCT 118679 . 118685) (open-paren 118678 . 118679) (symbol 118655 . 118677) (VOID 118650 . 118654) (EXTERN 118643 . 118649) (punctuation 118641 . 118642) (close-paren 118640 . 118641) (symbol 118639 . 118640) (punctuation 118638 . 118639) (symbol 118631 . 118637) (STRUCT 118624 . 118630) (open-paren 118623 . 118624) (symbol 118598 . 118622) (VOID 118593 . 118597) (EXTERN 118586 . 118592) (punctuation 118584 . 118585) (close-paren 118583 . 118584) (punctuation 118582 . 118583) (symbol 118575 . 118581) (STRUCT 118568 . 118574) (open-paren 118567 . 118568) (symbol 118550 . 118566) (VOID 118545 . 118549) (EXTERN 118538 . 118544) (punctuation 118536 . 118537) (close-paren 118535 . 118536) (BOOL 118531 . 118535) (punctuation 118529 . 118530) (punctuation 118528 . 118529) (symbol 118522 . 118527) (STRUCT 118515 . 118521) (open-paren 118514 . 118515) (symbol 118496 . 118513) (VOID 118491 . 118495) (EXTERN 118484 . 118490) (punctuation 118482 . 118483) (close-paren 118481 . 118482) (INT 118478 . 118481) (punctuation 118476 . 118477) (INT 118473 . 118476) (punctuation 118471 . 118472) (INT 118468 . 118471) (punctuation 118466 . 118467) (INT 118463 . 118466) (punctuation 118461 . 118462) (BOOL 118457 . 118461) (punctuation 118455 . 118456) (punctuation 118454 . 118455) (symbol 118447 . 118453) (STRUCT 118440 . 118446) (open-paren 118439 . 118440) (symbol 118416 . 118438) (VOID 118411 . 118415) (EXTERN 118404 . 118410) (punctuation 118402 . 118403) (close-paren 118401 . 118402) (punctuation 118400 . 118401) (symbol 118393 . 118399) (STRUCT 118386 . 118392) (open-paren 118385 . 118386) (symbol 118367 . 118384) (VOID 118362 . 118366) (EXTERN 118355 . 118361) (punctuation 118353 . 118354) (close-paren 118352 . 118353) (punctuation 118351 . 118352) (INT 118347 . 118350) (punctuation 118345 . 118346) (punctuation 118344 . 118345) (INT 118340 . 118343) (punctuation 118338 . 118339) (punctuation 118337 . 118338) (INT 118333 . 118336) (punctuation 118331 . 118332) (punctuation 118330 . 118331) (symbol 118324 . 118329) (STRUCT 118317 . 118323) (punctuation 118277 . 118278) (punctuation 118276 . 118277) (symbol 118266 . 118275) (STRUCT 118259 . 118265) (punctuation 118257 . 118258) (punctuation 118256 . 118257) (symbol 118249 . 118255) (STRUCT 118242 . 118248) (open-paren 118241 . 118242) (symbol 118216 . 118240) (VOID 118211 . 118215) (EXTERN 118204 . 118210) (punctuation 118202 . 118203) (close-paren 118201 . 118202) (symbol 118185 . 118201) (ENUM 118180 . 118184) (punctuation 118142 . 118143) (punctuation 118141 . 118142) (symbol 118131 . 118140) (STRUCT 118124 . 118130) (punctuation 118086 . 118087) (punctuation 118085 . 118086) (symbol 118078 . 118084) (STRUCT 118071 . 118077) (open-paren 118070 . 118071) (symbol 118047 . 118069) (VOID 118042 . 118046) (EXTERN 118035 . 118041) (punctuation 118033 . 118034) (close-paren 118032 . 118033) (INT 118029 . 118032) (punctuation 118027 . 118028) (symbol 118013 . 118027) (ENUM 118008 . 118012) (punctuation 117968 . 117969) (punctuation 117967 . 117968) (symbol 117957 . 117966) (STRUCT 117950 . 117956) (punctuation 117948 . 117949) (punctuation 117947 . 117948) (symbol 117940 . 117946) (STRUCT 117933 . 117939) (open-paren 117932 . 117933) (symbol 117907 . 117931) (VOID 117902 . 117906) (EXTERN 117895 . 117901) (punctuation 117893 . 117894) (close-paren 117892 . 117893) (INT 117889 . 117892) (punctuation 117887 . 117888) (symbol 117873 . 117887) (ENUM 117868 . 117872) (punctuation 117831 . 117832) (punctuation 117830 . 117831) (symbol 117820 . 117829) (STRUCT 117813 . 117819) (punctuation 117811 . 117812) (punctuation 117810 . 117811) (symbol 117803 . 117809) (STRUCT 117796 . 117802) (open-paren 117795 . 117796) (symbol 117773 . 117794) (VOID 117768 . 117772) (EXTERN 117761 . 117767) (punctuation 117759 . 117760) (close-paren 117758 . 117759) (INT 117755 . 117758) (punctuation 117753 . 117754) (symbol 117739 . 117753) (ENUM 117734 . 117738) (punctuation 117732 . 117733) (punctuation 117731 . 117732) (symbol 117725 . 117730) (STRUCT 117718 . 117724) (punctuation 117685 . 117686) (punctuation 117684 . 117685) (symbol 117674 . 117683) (STRUCT 117667 . 117673) (punctuation 117665 . 117666) (punctuation 117664 . 117665) (symbol 117657 . 117663) (STRUCT 117650 . 117656) (open-paren 117649 . 117650) (symbol 117631 . 117648) (VOID 117626 . 117630) (EXTERN 117619 . 117625) (punctuation 117617 . 117618) (close-paren 117616 . 117617) (INT 117613 . 117616) (punctuation 117611 . 117612) (symbol 117597 . 117611) (ENUM 117592 . 117596) (punctuation 117590 . 117591) (punctuation 117589 . 117590) (symbol 117583 . 117588) (STRUCT 117576 . 117582) (punctuation 117544 . 117545) (punctuation 117543 . 117544) (symbol 117533 . 117542) (STRUCT 117526 . 117532) (punctuation 117524 . 117525) (punctuation 117523 . 117524) (symbol 117516 . 117522) (STRUCT 117509 . 117515) (open-paren 117508 . 117509) (symbol 117491 . 117507) (VOID 117486 . 117490) (EXTERN 117479 . 117485) (punctuation 117476 . 117477) (close-paren 117475 . 117476) (punctuation 117474 . 117475) (symbol 117471 . 117473) (STRUCT 117464 . 117470) (open-paren 117463 . 117464) (symbol 117444 . 117462) (VOID 117439 . 117443) (EXTERN 117432 . 117438) (punctuation 117430 . 117431) (close-paren 117429 . 117430) (punctuation 117428 . 117429) (symbol 117415 . 117427) (STRUCT 117408 . 117414) (open-paren 117407 . 117408) (symbol 117380 . 117406) (punctuation 117379 . 117380) (symbol 117374 . 117378) (STRUCT 117367 . 117373) (EXTERN 117360 . 117366) (punctuation 117358 . 117359) (close-paren 117357 . 117358) (punctuation 117356 . 117357) (INT 117352 . 117355) (punctuation 117350 . 117351) (punctuation 117349 . 117350) (INT 117345 . 117348) (punctuation 117306 . 117307) (punctuation 117305 . 117306) (symbol 117299 . 117304) (STRUCT 117292 . 117298) (punctuation 117290 . 117291) (punctuation 117289 . 117290) (symbol 117283 . 117288) (STRUCT 117276 . 117282) (open-paren 117275 . 117276) (symbol 117251 . 117274) (VOID 117246 . 117250) (EXTERN 117239 . 117245) (punctuation 117209 . 117210) (close-paren 117208 . 117209) (punctuation 117207 . 117208) (INT 117203 . 117206) (punctuation 117201 . 117202) (punctuation 117200 . 117201) (INT 117196 . 117199) (punctuation 117194 . 117195) (punctuation 117193 . 117194) (symbol 117188 . 117192) (STRUCT 117181 . 117187) (open-paren 117180 . 117181) (symbol 117156 . 117179) (VOID 117151 . 117155) (EXTERN 117144 . 117150) (punctuation 117141 . 117142) (close-paren 117140 . 117141) (VOID 117136 . 117140) (open-paren 117135 . 117136) (symbol 117101 . 117134) (VOID 117096 . 117100) (EXTERN 117089 . 117095) (punctuation 117087 . 117088) (close-paren 117086 . 117087) (punctuation 117085 . 117086) (symbol 117082 . 117084) (STRUCT 117075 . 117081) (open-paren 117074 . 117075) (symbol 117047 . 117073) (INT 117043 . 117046) (EXTERN 117036 . 117042) (punctuation 117034 . 117035) (close-paren 117033 . 117034) (punctuation 117032 . 117033) (symbol 117029 . 117031) (STRUCT 117022 . 117028) (open-paren 117021 . 117022) (symbol 116999 . 117020) (VOID 116994 . 116998) (EXTERN 116987 . 116993) (punctuation 116985 . 116986) (close-paren 116984 . 116985) (punctuation 116983 . 116984) (symbol 116966 . 116982) (STRUCT 116959 . 116965) (punctuation 116947 . 116948) (symbol 116938 . 116947) (open-paren 116937 . 116938) (symbol 116910 . 116936) (symbol 116900 . 116909) (EXTERN 116893 . 116899) (punctuation 116891 . 116892) (close-paren 116890 . 116891) (punctuation 116889 . 116890) (INT 116885 . 116888) (punctuation 116883 . 116884) (BOOL 116879 . 116883) (punctuation 116877 . 116878) (punctuation 116876 . 116877) (symbol 116869 . 116875) (STRUCT 116862 . 116868) (punctuation 116850 . 116851) (punctuation 116849 . 116850) (symbol 116832 . 116848) (STRUCT 116825 . 116831) (punctuation 116813 . 116814) (punctuation 116812 . 116813) (symbol 116803 . 116811) (STRUCT 116796 . 116802) (open-paren 116795 . 116796) (symbol 116768 . 116794) (symbol 116758 . 116767) (EXTERN 116751 . 116757) (punctuation 116749 . 116750) (close-paren 116748 . 116749) (punctuation 116747 . 116748) (symbol 116744 . 116746) (STRUCT 116737 . 116743) (punctuation 116735 . 116736) (INT 116732 . 116735) (open-paren 116731 . 116732) (symbol 116701 . 116730) (symbol 116689 . 116700) (EXTERN 116682 . 116688) (punctuation 116680 . 116681) (close-paren 116679 . 116680) (punctuation 116678 . 116679) (symbol 116675 . 116677) (STRUCT 116668 . 116674) (open-paren 116667 . 116668) (symbol 116629 . 116666) (VOID 116624 . 116628) (EXTERN 116617 . 116623) (punctuation 116370 . 116371) (close-paren 116369 . 116370) (VOID 116365 . 116369) (open-paren 116364 . 116365) (symbol 116331 . 116363) (VOID 116326 . 116330) (EXTERN 116319 . 116325) (punctuation 116248 . 116249) (close-paren 116247 . 116248) (punctuation 116246 . 116247) (symbol 116240 . 116245) (STRUCT 116233 . 116239) (open-paren 116232 . 116233) (symbol 116209 . 116231) (INT 116205 . 116208) (punctuation 116203 . 116204) (close-paren 116202 . 116203) (punctuation 116201 . 116202) (symbol 116198 . 116200) (STRUCT 116191 . 116197) (open-paren 116190 . 116191) (symbol 116170 . 116189) (BOOL 116165 . 116169) (punctuation 116163 . 116164) (close-paren 116162 . 116163) (symbol 116153 . 116162) (punctuation 116152 . 116153) (symbol 116149 . 116151) (STRUCT 116142 . 116148) (open-paren 116141 . 116142) (symbol 116121 . 116140) (INT 116117 . 116120) (punctuation 116115 . 116116) (close-paren 116114 . 116115) (symbol 116112 . 116114) (symbol 116092 . 116111) (ENUM 116087 . 116091) (punctuation 116076 . 116077) (symbol 116072 . 116076) (INT 116068 . 116071) (punctuation 116066 . 116067) (symbol 116056 . 116066) (symbol 116046 . 116055) (punctuation 116035 . 116036) (symbol 116033 . 116035) (punctuation 116032 . 116033) (symbol 116029 . 116031) (STRUCT 116022 . 116028) (open-paren 116021 . 116022) (symbol 115997 . 116020) (VOID 115992 . 115996) (punctuation 115990 . 115991) (close-paren 115989 . 115990) (punctuation 115988 . 115989) (symbol 115985 . 115987) (STRUCT 115978 . 115984) (open-paren 115977 . 115978) (symbol 115960 . 115976) (VOID 115955 . 115959) (punctuation 115953 . 115954) (close-paren 115952 . 115953) (symbol 115943 . 115952) (punctuation 115941 . 115942) (punctuation 115940 . 115941) (symbol 115937 . 115939) (STRUCT 115930 . 115936) (open-paren 115929 . 115930) (symbol 115912 . 115928) (VOID 115907 . 115911) (punctuation 115905 . 115906) (close-paren 115904 . 115905) (INT 115901 . 115904) (punctuation 115899 . 115900) (punctuation 115898 . 115899) (symbol 115895 . 115897) (STRUCT 115888 . 115894) (open-paren 115887 . 115888) (symbol 115859 . 115886) (VOID 115854 . 115858) (punctuation 115852 . 115853) (close-paren 115851 . 115852) (INT 115848 . 115851) (punctuation 115846 . 115847) (punctuation 115845 . 115846) (symbol 115842 . 115844) (STRUCT 115835 . 115841) (open-paren 115834 . 115835) (symbol 115815 . 115833) (VOID 115810 . 115814) (punctuation 115808 . 115809) (close-paren 115807 . 115808) (symbol 115799 . 115807) (STRUCT 115792 . 115798) (punctuation 115790 . 115791) (punctuation 115789 . 115790) (symbol 115782 . 115788) (STRUCT 115775 . 115781) (punctuation 115773 . 115774) (punctuation 115772 . 115773) (symbol 115769 . 115771) (STRUCT 115762 . 115768) (open-paren 115761 . 115762) (symbol 115747 . 115760) (VOID 115742 . 115746) (punctuation 115740 . 115741) (close-paren 115739 . 115740) (punctuation 115738 . 115739) (symbol 115728 . 115737) (STRUCT 115721 . 115727) (punctuation 115686 . 115687) (punctuation 115685 . 115686) (symbol 115678 . 115684) (STRUCT 115671 . 115677) (punctuation 115669 . 115670) (punctuation 115668 . 115669) (symbol 115665 . 115667) (STRUCT 115658 . 115664) (open-paren 115657 . 115658) (symbol 115630 . 115656) (VOID 115625 . 115629) (punctuation 115623 . 115624) (close-paren 115622 . 115623) (symbol 115613 . 115622) (punctuation 115611 . 115612) (punctuation 115610 . 115611) (symbol 115603 . 115609) (STRUCT 115596 . 115602) (open-paren 115595 . 115596) (symbol 115570 . 115594) (symbol 115560 . 115569) (punctuation 115558 . 115559) (close-paren 115557 . 115558) (symbol 115548 . 115557) (punctuation 115546 . 115547) (punctuation 115545 . 115546) (symbol 115538 . 115544) (STRUCT 115531 . 115537) (open-paren 115530 . 115531) (symbol 115514 . 115529) (symbol 115504 . 115513) (punctuation 115502 . 115503) (close-paren 115501 . 115502) (symbol 115492 . 115501) (punctuation 115490 . 115491) (punctuation 115489 . 115490) (symbol 115482 . 115488) (STRUCT 115475 . 115481) (open-paren 115474 . 115475) (symbol 115456 . 115473) (symbol 115446 . 115455) (punctuation 115444 . 115445) (close-paren 115443 . 115444) (symbol 115436 . 115443) (ENUM 115431 . 115435) (punctuation 115429 . 115430) (punctuation 115428 . 115429) (symbol 115418 . 115427) (STRUCT 115411 . 115417) (punctuation 115409 . 115410) (symbol 115400 . 115409) (punctuation 115378 . 115379) (symbol 115369 . 115378) (punctuation 115367 . 115368) (punctuation 115366 . 115367) (symbol 115359 . 115365) (STRUCT 115352 . 115358) (punctuation 115350 . 115351) (punctuation 115349 . 115350) (symbol 115346 . 115348) (STRUCT 115339 . 115345) (open-paren 115338 . 115339) (symbol 115324 . 115337) (VOID 115319 . 115323) (punctuation 115317 . 115318) (close-paren 115316 . 115317) (INT 115313 . 115316) (open-paren 115312 . 115313) (symbol 115283 . 115311) (VOID 115278 . 115282) (punctuation 115276 . 115277) (close-paren 115275 . 115276) (BOOL 115271 . 115275) (punctuation 115269 . 115270) (symbol 115258 . 115269) (open-paren 115257 . 115258) (symbol 115228 . 115256) (VOID 115223 . 115227) (punctuation 115220 . 115221) (close-paren 115219 . 115220) (punctuation 115218 . 115219) (symbol "XRectangle" 115202 . 115217) (punctuation 115200 . 115201) (INT 115197 . 115200) (punctuation 115195 . 115196) (INT 115192 . 115195) (punctuation 115190 . 115191) (punctuation 115189 . 115190) (symbol 115183 . 115188) (STRUCT 115176 . 115182) (open-paren 115175 . 115176) (symbol 115154 . 115174) (VOID 115149 . 115153) (punctuation 115147 . 115148) (close-paren 115146 . 115147) (BOOL 115142 . 115146) (punctuation 115140 . 115141) (punctuation 115139 . 115140) (symbol "XRectangle" 115123 . 115138) (punctuation 115093 . 115094) (punctuation 115092 . 115093) (INT 115088 . 115091) (punctuation 115086 . 115087) (punctuation 115085 . 115086) (INT 115081 . 115084) (punctuation 115079 . 115080) (INT 115076 . 115079) (punctuation 115074 . 115075) (INT 115071 . 115074) (punctuation 115069 . 115070) (punctuation 115068 . 115069) (symbol 115062 . 115067) (STRUCT 115055 . 115061) (open-paren 115054 . 115055) (symbol 115032 . 115053) (VOID 115027 . 115031) (punctuation 115025 . 115026) (close-paren 115024 . 115025) (INT 115021 . 115024) (punctuation 115019 . 115020) (INT 115016 . 115019) (punctuation 115014 . 115015) (INT 115011 . 115014) (punctuation 115009 . 115010) (INT 115006 . 115009) (punctuation 115004 . 115005) (symbol 114995 . 115004) (punctuation 114993 . 114994) (punctuation 114992 . 114993) (symbol 114989 . 114991) (STRUCT 114982 . 114988) (open-paren 114981 . 114982) (symbol 114970 . 114980) (INT 114966 . 114969) (punctuation 114964 . 114965) (close-paren 114963 . 114964) (symbol 114956 . 114963) (ENUM 114951 . 114955) (punctuation 114949 . 114950) (punctuation 114948 . 114949) (symbol 114942 . 114947) (STRUCT 114935 . 114941) (open-paren 114934 . 114935) (symbol 114908 . 114933) (INT 114904 . 114907) (punctuation 114902 . 114903) (close-paren 114901 . 114902) (symbol 114887 . 114901) (ENUM 114882 . 114886) (punctuation 114880 . 114881) (punctuation 114879 . 114880) (symbol 114872 . 114878) (STRUCT 114865 . 114871) (open-paren 114864 . 114865) (symbol 114847 . 114863) (INT 114843 . 114846) (punctuation 114841 . 114842) (close-paren 114840 . 114841) (symbol 114826 . 114840) (ENUM 114821 . 114825) (punctuation 114819 . 114820) (punctuation 114818 . 114819) (symbol 114811 . 114817) (STRUCT 114804 . 114810) (open-paren 114803 . 114804) (symbol 114780 . 114802) (INT 114776 . 114779) (punctuation 114774 . 114775) (close-paren 114773 . 114774) (symbol 114759 . 114773) (ENUM 114754 . 114758) (punctuation 114752 . 114753) (punctuation 114751 . 114752) (symbol 114744 . 114750) (STRUCT 114737 . 114743) (open-paren 114736 . 114737) (symbol 114720 . 114735) (INT 114716 . 114719) (punctuation 114714 . 114715) (close-paren 114713 . 114714) (symbol 114699 . 114713) (ENUM 114694 . 114698) (punctuation 114692 . 114693) (punctuation 114691 . 114692) (symbol 114684 . 114690) (STRUCT 114677 . 114683) (open-paren 114676 . 114677) (symbol 114659 . 114675) (INT 114655 . 114658) (punctuation 114653 . 114654) (close-paren 114652 . 114653) (punctuation 114651 . 114652) (symbol 114644 . 114650) (STRUCT 114637 . 114643) (open-paren 114636 . 114637) (symbol 114615 . 114635) (INT 114611 . 114614) (punctuation 114609 . 114610) (close-paren 114608 . 114609) (punctuation 114607 . 114608) (symbol 114600 . 114606) (STRUCT 114593 . 114599) (open-paren 114592 . 114593) (symbol 114574 . 114591) (INT 114570 . 114573) (punctuation 114568 . 114569) (close-paren 114567 . 114568) (punctuation 114566 . 114567) (INT 114562 . 114565) (punctuation 114560 . 114561) (punctuation 114559 . 114560) (INT 114555 . 114558) (punctuation 114553 . 114554) (punctuation 114552 . 114553) (INT 114548 . 114551) (punctuation 114546 . 114547) (punctuation 114545 . 114546) (INT 114541 . 114544) (punctuation 114536 . 114537) (symbol 114522 . 114536) (ENUM 114517 . 114521) (punctuation 114515 . 114516) (punctuation 114514 . 114515) (symbol 114507 . 114513) (STRUCT 114500 . 114506) (open-paren 114499 . 114500) (symbol 114488 . 114498) (VOID 114483 . 114487) (punctuation 114481 . 114482) (close-paren 114480 . 114481) (INT 114477 . 114480) (punctuation 114475 . 114476) (symbol 114467 . 114475) (STRUCT 114460 . 114466) (punctuation 114458 . 114459) (symbol 114447 . 114458) (open-paren 114446 . 114447) (symbol 114435 . 114445) (INT 114431 . 114434) (punctuation 114429 . 114430) (close-paren 114428 . 114429) (punctuation 114427 . 114428) (symbol 114420 . 114426) (STRUCT 114413 . 114419) (open-paren 114412 . 114413) (symbol 114386 . 114411) (VOID 114381 . 114385) (punctuation 114379 . 114380) (close-paren 114378 . 114379) (punctuation 114377 . 114378) (symbol 114370 . 114376) (STRUCT 114363 . 114369) (open-paren 114362 . 114363) (symbol 114338 . 114361) (VOID 114333 . 114337) (punctuation 114331 . 114332) (close-paren 114330 . 114331) (BOOL 114326 . 114330) (punctuation 114324 . 114325) (punctuation 114323 . 114324) (symbol 114316 . 114322) (STRUCT 114309 . 114315) (open-paren 114308 . 114309) (symbol 114289 . 114307) (BOOL 114284 . 114288) (punctuation 114282 . 114283) (close-paren 114281 . 114282) (VOID 114277 . 114281) (open-paren 114276 . 114277) (symbol 114251 . 114275) (VOID 114246 . 114250) (punctuation 114244 . 114245) (close-paren 114243 . 114244) (symbol 114234 . 114243) (punctuation 114232 . 114233) (symbol 114223 . 114232) (punctuation 114221 . 114222) (symbol 114210 . 114221) (punctuation 114208 . 114209) (symbol 114197 . 114208) (open-paren 114196 . 114197) (symbol 114170 . 114195) (BOOL 114165 . 114169) (punctuation 114163 . 114164) (close-paren 114162 . 114163) (punctuation 114161 . 114162) (symbol 114154 . 114160) (STRUCT 114147 . 114153) (open-paren 114146 . 114147) (symbol 114120 . 114145) (INT 114116 . 114119) (punctuation 114114 . 114115) (close-paren 114113 . 114114) (punctuation 114112 . 114113) (symbol 114109 . 114111) (STRUCT 114102 . 114108) (open-paren 114101 . 114102) (symbol 114087 . 114100) (INT 114083 . 114086) (punctuation 114081 . 114082) (close-paren 114080 . 114081) (INT 114077 . 114080) (punctuation 114075 . 114076) (punctuation 114074 . 114075) (symbol 114064 . 114073) (STRUCT 114057 . 114063) (punctuation 114017 . 114018) (punctuation 114016 . 114017) (symbol 114006 . 114015) (STRUCT 113999 . 114005) (punctuation 113959 . 113960) (symbol 113950 . 113959) (punctuation 113948 . 113949) (punctuation 113947 . 113948) (symbol 113940 . 113946) (STRUCT 113933 . 113939) (open-paren 113932 . 113933) (symbol 113913 . 113931) (punctuation 113912 . 113913) (symbol 113902 . 113911) (STRUCT 113895 . 113901) (punctuation 113866 . 113867) (close-paren 113865 . 113866) (punctuation 113864 . 113865) (symbol 113856 . 113863) (STRUCT 113849 . 113855) (open-paren 113848 . 113849) (symbol 113821 . 113847) (symbol 113811 . 113820) (EXTERN 113804 . 113810) (punctuation 113802 . 113803) (close-paren 113801 . 113802) (BOOL 113797 . 113801) (punctuation 113795 . 113796) (punctuation 113794 . 113795) (VOID 113789 . 113793) (open-paren 113788 . 113789) (symbol 113768 . 113787) (VOID 113763 . 113767) (EXTERN 113756 . 113762) (punctuation 113754 . 113755) (close-paren 113753 . 113754) (VOID 113749 . 113753) (open-paren 113748 . 113749) (symbol 113730 . 113747) (punctuation 113729 . 113730) (VOID 113724 . 113728) (EXTERN 113717 . 113723) (punctuation 113715 . 113716) (close-paren 113714 . 113715) (punctuation 113713 . 113714) (symbol 113705 . 113712) (STRUCT 113698 . 113704) (open-paren 113697 . 113698) (symbol 113685 . 113696) (VOID 113680 . 113684) (EXTERN 113673 . 113679) (punctuation 113671 . 113672) (close-paren 113670 . 113671) (punctuation 113669 . 113670) (symbol 113661 . 113668) (STRUCT 113654 . 113660) (open-paren 113653 . 113654) (symbol 113640 . 113652) (VOID 113635 . 113639) (EXTERN 113628 . 113634) (punctuation 113626 . 113627) (close-paren 113625 . 113626) (INT 113622 . 113625) (open-paren 113621 . 113622) (symbol 113604 . 113620) (INT 113599 . 113602) (EXTERN 113592 . 113598) (punctuation 113590 . 113591) (close-paren 113589 . 113590) (BOOL 113585 . 113589) (punctuation 113583 . 113584) (punctuation 113582 . 113583) (symbol 113574 . 113581) (STRUCT 113567 . 113573) (punctuation 113565 . 113566) (symbol 113555 . 113565) (open-paren 113554 . 113555) (symbol 113534 . 113553) (VOID 113529 . 113533) (EXTERN 113522 . 113528) (punctuation 113520 . 113521) (close-paren 113519 . 113520) (punctuation 113518 . 113519) (symbol 113510 . 113517) (STRUCT 113503 . 113509) (open-paren 113502 . 113503) (symbol 113475 . 113501) (VOID 113470 . 113474) (EXTERN 113463 . 113469) (punctuation 113461 . 113462) (close-paren 113460 . 113461) (punctuation 113459 . 113460) (symbol 113451 . 113458) (STRUCT 113444 . 113450) (punctuation 113442 . 113443) (BOOL 113438 . 113442) (punctuation 113436 . 113437) (symbol 113427 . 113436) (punctuation 113425 . 113426) (symbol 113416 . 113425) (open-paren 113415 . 113416) (symbol 113402 . 113414) (VOID 113397 . 113401) (EXTERN 113390 . 113396) (punctuation 112293 . 112294) (close-paren 112292 . 112293) (symbol 112257 . 112291) (punctuation 112253 . 112254) (symbol 112221 . 112253) (punctuation 112217 . 112218) (symbol 112184 . 112217) (punctuation 112180 . 112181) (symbol 112149 . 112180) (open-paren 112145 . 112146) (symbol 112125 . 112144) (ENUM 112120 . 112124) (punctuation 112022 . 112023) (close-paren 112021 . 112022) (symbol 112000 . 112020) (punctuation 111905 . 111906) (symbol 111882 . 111905) (punctuation 111802 . 111803) (symbol 111783 . 111802) (punctuation 111725 . 111726) (symbol 111702 . 111725) (punctuation 111622 . 111623) (symbol 111604 . 111622) (punctuation 111577 . 111578) (symbol 111559 . 111577) (punctuation 111418 . 111419) (symbol 111397 . 111418) (punctuation 111370 . 111371) (symbol 111350 . 111370) (punctuation 111234 . 111235) (symbol 111213 . 111234) (punctuation 111190 . 111191) (symbol 111166 . 111190) (punctuation 111113 . 111114) (symbol 111090 . 111113) (punctuation 111048 . 111049) (symbol 111031 . 111048) (open-paren 110920 . 110921) (symbol 110902 . 110919) (ENUM 110897 . 110901) (punctuation 110297 . 110298) (close-paren 110296 . 110297) (symbol 110276 . 110295) (punctuation 110183 . 110184) (symbol 110166 . 110183) (punctuation 110139 . 110140) (symbol 110119 . 110139) (punctuation 110092 . 110093) (symbol 110072 . 110092) (punctuation 110049 . 110050) (symbol 110026 . 110049) (punctuation 109973 . 109974) (symbol 109951 . 109973) (punctuation 109909 . 109910) (symbol 109893 . 109909) (open-paren 109783 . 109784) (symbol 109766 . 109782) (ENUM 109761 . 109765) (punctuation 109257 . 109258) (close-paren 109256 . 109257) (open-paren 108924 . 108925) (symbol 108912 . 108923) (STRUCT 108905 . 108911) (punctuation 108789 . 108790) (close-paren 108788 . 108789) (open-paren 104824 . 104825) (symbol 104818 . 104823) (STRUCT 104811 . 104817) (close-paren 104601 . 104602) (symbol 104591 . 104601) (symbol 104583 . 104590) (punctuation 104581 . 104582) (punctuation 104580 . 104581) (symbol 104569 . 104579) (symbol 104561 . 104568) (punctuation 104559 . 104560) (punctuation 104558 . 104559) (symbol 104550 . 104557) (symbol 104542 . 104549) (punctuation 104540 . 104541) (punctuation 104539 . 104540) (TYPEDEF 98759 . 98766) (symbol 97618 . 97624) (symbol 62967 . 62973) (symbol 62663 . 62669) (symbol 62365 . 62371) (symbol 61920 . 61926) (symbol 60286 . 60292) (symbol 9266 . 9272) (symbol 9140 . 9146) (symbol 8807 . 8813) (symbol 8716 . 8722) (symbol 2124 . 2130) (symbol 2080 . 2099))
      :lexical-table 
        '(("No_Cursor" . ((semantic-list "(None)" 1170 . 1176)))
          ("FRINGE_ID_BITS" . ((number "16" 4507 . 4509)))
          ("FRINGE_HEIGHT_BITS" . ((number "8" 4601 . 4602)))
          ("BYTEPOS" (spp-arg-list ("POS") 5588 . 5593) . 
              ((semantic-list "(POS)" 5594 . 5599) (punctuation "." 5599 . 5600) (symbol "bytepos" 5600 . 5607)))
          ("DEC_TEXT_POS" (spp-arg-list ("POS" "MULTIBYTE_P") 6171 . 6189) . 
              ((DO "do" 6198 . 6200) (semantic-list "{					\\
	 --(POS).charpos;			\\
         if (MULTIBYTE_P)			\\
	   (POS).bytepos -= prev_char_len ((POS).bytepos); \\
	 else					\\
	   --(POS).bytepos;			\\
       }" 6215 . 6376) (WHILE "while" 6388 . 6393) (semantic-list "(false)" 6394 . 6401)))
          ("MATRIX_HEADER_LINE_ROW" (spp-arg-list ("MATRIX") 36588 . 36596) . ((semantic-list "((MATRIX)->tab_line_p ? ((MATRIX)->rows + 1) : (MATRIX)->rows)" 36604 . 36666)))
          ("MATRIX_ROW_GLYPH_START" (spp-arg-list ("MATRIX" "ROW") 37171 . 37184) . ((semantic-list "(MATRIX_ROW ((MATRIX), (ROW))->glyphs[TEXT_AREA])" 37192 . 37241)))
          ("MATRIX_ROW_DISPLAYS_TEXT_P" (spp-arg-list ("ROW") 39212 . 39217) . ((semantic-list "((ROW)->displays_text_p)" 39218 . 39242)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_TOP_P" (spp-arg-list ("W" "ROW") 39996 . 40004) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))					\\
   && MR_PARTIALLY_VISIBLE_AT_TOP ((W), (ROW)))" 40010 . 40093)))
          ("MATRIX_ROW_ENDS_IN_OVERLAY_STRING_P" (spp-arg-list ("ROW") 41251 . 41256) . ((semantic-list "((ROW)->end.overlay_string_index >= 0)" 41264 . 41302)))
          ("DESIRED_HEADER_LINE_HEIGHT" (spp-arg-list ("W") 51393 . 51396) . ((symbol "MATRIX_HEADER_LINE_HEIGHT" 51404 . 51429) (semantic-list "((W)->desired_matrix)" 51430 . 51451)))
          ("TTY_CAP_INVERSE" . ((number "0x01" 113034 . 113038)))
          ("SET_TEXT_POS" (spp-arg-list ("POS" "CHARPOS" "BYTEPOS") 5740 . 5763) . ((semantic-list "((POS).charpos = (CHARPOS), (POS).bytepos = BYTEPOS)" 5771 . 5823)))
          ("SET_GLYPH_FACE" (spp-arg-list ("glyph" "face") 8950 . 8963) . ((semantic-list "((glyph).face_id = (face))" 8964 . 8990)))
          ("MATRIX_ROW_OVERLAPS_PRED_P" (spp-arg-list ("ROW") 41694 . 41699) . ((semantic-list "((ROW)->phys_ascent > (ROW)->ascent)" 41707 . 41743)))
          ("MATRIX_HEADER_LINE_HEIGHT" (spp-arg-list ("MATRIX") 47773 . 47781) . ((semantic-list "((MATRIX) && (MATRIX)->rows		\\
      ? MATRIX_HEADER_LINE_ROW (MATRIX)->height	\\
      : 0)" 47789 . 47880)))
          ("CURRENT_MODE_LINE_ACTIVE_FACE_ID_3" (spp-arg-list ("SELW" "MBW" "SCRW") 48803 . 48820) . ((semantic-list "((!mode_line_in_non_selected_windows			\\
       || (SELW) == XWINDOW (selected_window)			\\
       || (minibuf_level > 0					\\
           && !NILP (minibuf_selected_window)			\\
           && (MBW) == XWINDOW (minibuf_window)			\\
           && (SCRW) == XWINDOW (minibuf_selected_window)))	\\
      ? MODE_LINE_ACTIVE_FACE_ID				\\
      : MODE_LINE_INACTIVE_FACE_ID)" 48832 . 49195)))
          ("DEFAULT_IMAGE_HEIGHT" . ((number "30" 107375 . 107377)))
          ("DEFAULT_TOOL_BAR_IMAGE_HEIGHT" . ((number "24" 112565 . 112567)))
          ("IMAGE_BACKGROUND" (spp-arg-list ("img" "f" "ximg") 125594 . 125608) . ((semantic-list "((img)->background_valid						      \\
    ? (img)->background							      \\
    : image_background (img, f, ximg))" 125624 . 125738)))
          ("OVERLAPS_PRED" . ((semantic-list "(1 << 0)" 45237 . 45245)))
          ("NativeRectangle" . ((symbol "XRectangle" 2466 . 2476)))
          ("SET_MARKER_FROM_TEXT_POS" (spp-arg-list ("MARKER" "POS") 6968 . 6981) . ((symbol "set_marker_both" 6989 . 7004) (semantic-list "((MARKER), Qnil, CHARPOS ((POS)), BYTEPOS ((POS)))" 7005 . 7055)))
          ("SET_GLYPH_FROM_GLYPH_CODE" (spp-arg-list ("glyph" "gc") 9423 . 9434) . 
              ((DO "do" 9442 . 9444) (semantic-list "{									\\
      if (CONSP (gc))							\\
	SET_GLYPH (glyph, XFIXNUM (XCAR (gc)), XFIXNUM (XCDR (gc)));		\\
      else								\\
	SET_GLYPH (glyph, (XFIXNUM (gc) & ((1 << CHARACTERBITS)-1)),	\\
		   (XFIXNUM (gc) >> CHARACTERBITS));			\\
    }" 9459 . 9698) (WHILE "while" 9711 . 9716) (semantic-list "(false)" 9717 . 9724)))
          ("FONT_TYPE_UNKNOWN" . ((number "0" 16887 . 16888)))
          ("SET_GLYPH_FROM_CHAR_GLYPH" (spp-arg-list ("G" "GLYPH") 19219 . 19229) . 
              ((DO "do" 19236 . 19238) (semantic-list "{								\\
      if ((GLYPH).u.ch < 256)					\\
	SET_GLYPH ((G), (GLYPH).u.ch, ((GLYPH).face_id));	\\
      else							\\
	SET_GLYPH ((G), -1, 0);					\\
    }" 19252 . 19407) (WHILE "while" 19419 . 19424) (semantic-list "(false)" 19425 . 19432)))
          ("MATRIX_ROW_START_CHARPOS" (spp-arg-list ("ROW") 37726 . 37731) . ((semantic-list "((ROW)->minpos.charpos)" 37732 . 37755)))
          ("MATRIX_ROW_END_CHARPOS" (spp-arg-list ("ROW") 38116 . 38121) . ((semantic-list "((ROW)->maxpos.charpos)" 38122 . 38145)))
          ("ITERATOR_AT_END_OF_LINE_P" (spp-arg-list ("IT") 95016 . 95020) . ((semantic-list "((IT)->what == IT_CHARACTER			\\
      && ((IT)->c == '\\n'				\\
	  || ((IT)->c == '\\r' && (IT)->selective)))" 95030 . 95137)))
          ("TOP_CORNER" . ((number "0" 107605 . 107606)))
          ("DEFAULT_TAB_BAR_BUTTON_RELIEF" . ((number "1" 110425 . 110426)))
          ("TTY_CAP_STRIKE_THROUGH" . ((number "0x20" 113184 . 113188)))
          ("SET_GLYPH_CHAR" (spp-arg-list ("glyph" "char") 8892 . 8905) . ((semantic-list "((glyph).ch = (char))" 8906 . 8927)))
          ("SET_CHAR_GLYPH" (spp-arg-list ("GLYPH" "CODE" "FACE_ID" "PADDING_P") 18534 . 18567) . 
              ((DO "do" 18575 . 18577) (semantic-list "{						\\
         (GLYPH).u.ch = (CODE);				\\
         (GLYPH).face_id = (FACE_ID);			\\
         (GLYPH).padding_p = (PADDING_P);		\\
       }" 18593 . 18734) (WHILE "while" 18747 . 18752) (semantic-list "(false)" 18753 . 18760)))
          ("GLYPH_INVALID_P" (spp-arg-list ("GLYPH") 19457 . 19464) . ((semantic-list "(GLYPH_CHAR (GLYPH) < 0)" 19465 . 19489)))
          ("MATRIX_BOTTOM_TEXT_ROW" (spp-arg-list ("MATRIX" "W") 38510 . 38521) . ((semantic-list "((MATRIX)->rows					\\
      + (MATRIX)->nrows					\\
      - (window_wants_mode_line ((W)) ? 1 : 0))" 38530 . 38629)))
          ("MR_PARTIALLY_VISIBLE_AT_BOTTOM" (spp-arg-list ("W" "ROW") 39506 . 39514) . ((semantic-list "(((ROW)->y + (ROW)->height - (ROW)->extra_line_spacing) \\
   > WINDOW_BOX_HEIGHT_NO_MODE_LINE ((W)))" 39520 . 39620)))
          ("MATRIX_ROW_OVERLAPS_SUCC_P" (spp-arg-list ("ROW") 41826 . 41831) . ((semantic-list "((ROW)->phys_height - (ROW)->phys_ascent	\\
       > (ROW)->height - (ROW)->ascent)" 41841 . 41923)))
          ("MATRIX_MODE_LINE_HEIGHT" (spp-arg-list ("MATRIX") 47445 . 47453) . ((semantic-list "((MATRIX) && (MATRIX)->rows		\\
      ? MATRIX_MODE_LINE_ROW (MATRIX)->height	\\
      : 0)" 47462 . 47551)))
          ("CURRENT_MODE_LINE_HEIGHT" (spp-arg-list ("W") 49669 . 49672) . ((semantic-list "((W)->mode_line_height >= 0						\\
   ? (W)->mode_line_height						\\
   : ((W)->mode_line_height						\\
      = (MATRIX_MODE_LINE_HEIGHT ((W)->current_matrix)			\\
	 ? MATRIX_MODE_LINE_HEIGHT ((W)->current_matrix)		\\
	 : estimate_mode_line_height					\\
	 (XFRAME ((W)->frame), CURRENT_MODE_LINE_ACTIVE_FACE_ID (W)))))" 49681 . 49997)))
          ("CURRENT_TAB_LINE_HEIGHT" (spp-arg-list ("W") 50836 . 50839) . ((semantic-list "((W)->tab_line_height >= 0					\\
   ? (W)->tab_line_height					\\
   : ((W)->tab_line_height					\\
      = (MATRIX_TAB_LINE_HEIGHT ((W)->current_matrix)		\\
	 ? MATRIX_TAB_LINE_HEIGHT ((W)->current_matrix)		\\
	 : estimate_mode_line_height				\\
	     (XFRAME ((W)->frame), TAB_LINE_FACE_ID))))" 50847 . 51137)))
          ("FACE_TTY_DEFAULT_BG_COLOR" . ((semantic-list "((unsigned long) -3)" 60158 . 60178)))
          ("HAVE_NATIVE_TRANSFORMS")
          ("LEFT_CORNER" . ((number "1" 107627 . 107628)))
          ("DEFAULT_TOOL_BAR_BUTTON_RELIEF" . ((number "1" 112463 . 112464)))
          ("TTY_CAP_UNDERLINE" . ((number "0x02" 113065 . 113069)))
          ("IMAGE_BACKGROUND_TRANSPARENT" (spp-arg-list ("img" "f" "mask") 125957 . 125971) . ((semantic-list "((img)->background_transparent_valid					      \\
    ? (img)->background_transparent					      \\
    : image_background_transparent (img, f, mask))" 125985 . 126132)))
          ("MATRIX_ROW_END_BYTEPOS" (spp-arg-list ("ROW") 38176 . 38181) . ((semantic-list "((ROW)->maxpos.bytepos)" 38182 . 38205)))
          ("MR_PARTIALLY_VISIBLE" (spp-arg-list ("ROW") 39294 . 39299) . ((semantic-list "((ROW)->height != (ROW)->visible_height)" 39304 . 39344)))
          ("MATRIX_ROW_STARTS_IN_MIDDLE_OF_CHAR_P" (spp-arg-list ("ROW") 41422 . 41427) . ((semantic-list "((ROW)->start.dpvec_index > 0			\\
      || (ROW)->starts_in_middle_of_char_p		\\
      || ((ROW)->start.overlay_string_index >= 0	\\
	  && (ROW)->start.string_pos.charpos > 0))" 41435 . 41609)))
          ("DEFAULT_IMAGE_WIDTH" . ((number "30" 107343 . 107345)))
          ("IMAGE_CACHE_BUCKETS_SIZE" . ((number "1009" 109358 . 109362)))
          ("DEFAULT_TOOL_BAR_BUTTON_MARGIN" . ((number "4" 112422 . 112423)))
          ("CLIP_TEXT_POS_FROM_MARKER" (spp-arg-list ("POS" "MARKER") 6692 . 6705) . ((semantic-list "(CHARPOS (POS) = clip_to_bounds			\\
   (BEGV, marker_position (MARKER), ZV),		\\
   BYTEPOS (POS) = clip_to_bounds			\\
   (BEGV_BYTE, marker_byte_position (MARKER), ZV_BYTE))" 6711 . 6884)))
          ("CHECK_MATRIX" (spp-arg-list ("MATRIX") 24423 . 24431) . ((semantic-list "((void) 0)" 24432 . 24442)))
          ("MATRIX_FIRST_TEXT_ROW" (spp-arg-list ("MATRIX") 36768 . 36776) . ((semantic-list "((MATRIX)->rows->mode_line_p ?                                        \\
   (((MATRIX)->rows + 1)->mode_line_p ?                                 \\
    (MATRIX)->rows + 2 : (MATRIX)->rows + 1) : (MATRIX)->rows)" 36781 . 36989)))
          ("MATRIX_ROW_USED" (spp-arg-list ("MATRIX" "ROW") 37334 . 37347) . ((semantic-list "(MATRIX_ROW ((MATRIX), (ROW))->used[TEXT_AREA])" 37355 . 37402)))
          ("MATRIX_ROW_ENABLED_P" (spp-arg-list ("MATRIX" "ROW") 39012 . 39025) . ((semantic-list "(MATRIX_ROW (MATRIX, ROW)->enabled_p)" 39033 . 39070)))
          ("CURRENT_HEADER_LINE_HEIGHT" (spp-arg-list ("W") 50264 . 50267) . ((semantic-list "((W)->header_line_height >= 0					\\
   ? (W)->header_line_height					\\
   : ((W)->header_line_height					\\
      = (MATRIX_HEADER_LINE_HEIGHT ((W)->current_matrix)	\\
	 ? MATRIX_HEADER_LINE_HEIGHT ((W)->current_matrix)	\\
	 : estimate_mode_line_height				\\
	     (XFRAME ((W)->frame), HEADER_LINE_FACE_ID))))" 50275 . 50581)))
          ("DESIRED_TAB_LINE_HEIGHT" (spp-arg-list ("W") 51547 . 51550) . ((symbol "MATRIX_TAB_LINE_HEIGHT" 51558 . 51580) (semantic-list "((W)->desired_matrix)" 51581 . 51602)))
          ("DEFAULT_TAB_BAR_BUTTON_MARGIN" . ((number "1" 110385 . 110386)))
          ("TTY_CAP_BOLD" . ((number "0x04" 113092 . 113096)))
          ("FACE_ID_BITS" . ((number "20" 14524 . 14526)))
          ("DISPEXTERN_H_INCLUDED")
          ("SET_TEXT_POS_FROM_MARKER" (spp-arg-list ("POS" "MARKER") 6485 . 6498) . ((semantic-list "(CHARPOS (POS) = marker_position (MARKER),		\\
   BYTEPOS (POS) = marker_byte_position (MARKER))" 6504 . 6599)))
          ("MATRIX_ROW" (spp-arg-list ("MATRIX" "ROW") 35866 . 35879) . ((semantic-list "((MATRIX)->rows + (ROW))" 35882 . 35906)))
          ("MATRIX_MODE_LINE_ROW" (spp-arg-list ("MATRIX") 36080 . 36088) . ((semantic-list "((MATRIX)->rows + (MATRIX)->nrows - 1)" 36096 . 36134)))
          ("MR_PARTIALLY_VISIBLE_AT_TOP" (spp-arg-list ("W" "ROW") 39381 . 39389) . ((semantic-list "((ROW)->y < WINDOW_TAB_LINE_HEIGHT (W) + WINDOW_HEADER_LINE_HEIGHT (W))" 39395 . 39466)))
          ("FACE_EXTENSIBLE_P" (spp-arg-list ("F") 61805 . 61808) . ((semantic-list "(!NILP (F->lface[LFACE_EXTEND_INDEX]))" 61815 . 61853)))
          ("MAX_FRINGE_BITMAPS" . ((semantic-list "(1<<FRINGE_ID_BITS)" 70706 . 70725)))
          ("OVERLAPS_ERASED_CURSOR" . ((semantic-list "(1 << 2)" 45365 . 45373)))
          ("FACE_TTY_DEFAULT_FG_COLOR" . ((semantic-list "((unsigned long) -2)" 60027 . 60047)))
          ("IT_STRING_CHARPOS" (spp-arg-list ("IT") 94515 . 94519) . ((symbol "CHARPOS" 94520 . 94527) (semantic-list "((IT).current.string_pos)" 94528 . 94553)))
          ("INC_TEXT_POS" (spp-arg-list ("POS" "MULTIBYTE_P") 5882 . 5900) . 
              ((DO "do" 5909 . 5911) (semantic-list "{					\\
	 ++(POS).charpos;			\\
         if (MULTIBYTE_P)			\\
	   (POS).bytepos += next_char_len ((POS).bytepos); \\
	 else					\\
	   ++(POS).bytepos;			\\
       }" 5926 . 6087) (WHILE "while" 6099 . 6104) (semantic-list "(false)" 6105 . 6112)))
          ("GLYPH_SLICE_EQUAL_P" (spp-arg-list ("X" "Y") 17307 . 17313) . ((semantic-list "((X)->type == IMAGE_GLYPH					\\
   ? ((X)->slice.img.x == (Y)->slice.img.x			\\
      && (X)->slice.img.y == (Y)->slice.img.y			\\
      && (X)->slice.img.width == (Y)->slice.img.width		\\
      && (X)->slice.img.height == (Y)->slice.img.height)	\\
   : ((X)->type != COMPOSITE_GLYPH				\\
      || (X)->slice.cmp.from == (Y)->slice.cmp.from))" 17321 . 17659)))
          ("MATRIX_TAB_LINE_ROW" (spp-arg-list ("MATRIX") 36346 . 36354) . 
              ((semantic-list "(MATRIX)" 36355 . 36363) (punctuation "-" 36363 . 36364) (punctuation ">" 36364 . 36365) (symbol "rows" 36365 . 36369)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_P" (spp-arg-list ("W" "ROW") 39723 . 39731) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))				\\
   && (MR_PARTIALLY_VISIBLE_AT_TOP ((W), (ROW))		\\
       || MR_PARTIALLY_VISIBLE_AT_BOTTOM ((W), (ROW))))" 39737 . 39878)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_BOTTOM_P" (spp-arg-list ("W" "ROW") 40215 . 40223) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))					\\
   && MR_PARTIALLY_VISIBLE_AT_BOTTOM ((W), (ROW)))" 40228 . 40314)))
          ("MATRIX_ROW_CONTINUATION_LINE_P" (spp-arg-list ("ROW") 40724 . 40729) . ((semantic-list "((ROW)->continuation_lines_width > 0)" 40737 . 40774)))
          ("DESIRED_MODE_LINE_HEIGHT" (spp-arg-list ("W") 51235 . 51238) . ((symbol "MATRIX_MODE_LINE_HEIGHT" 51246 . 51269) (semantic-list "((W)->desired_matrix)" 51270 . 51291)))
          ("VCENTER_BASELINE_OFFSET" (spp-arg-list ("FONT" "F") 52689 . 52698) . ((semantic-list "(FONT_DESCENT (FONT)						\\
   + (FRAME_LINE_HEIGHT ((F)) - FONT_HEIGHT ((FONT))		\\
      + (FRAME_LINE_HEIGHT ((F)) > FONT_HEIGHT ((FONT)))) / 2	\\
   - (FONT_DESCENT (FRAME_FONT (F)) - FRAME_BASELINE_OFFSET (F)))" 52705 . 52918)))
          ("FACE_UNIBYTE_P" (spp-arg-list ("FACE") 60471 . 60477) . ((semantic-list "((FACE)->charset < 0)" 60478 . 60499)))
          ("MAX_FACE_ID" . ((semantic-list "((1 << FACE_ID_BITS) - 1)" 61131 . 61156)))
          ("IT_STRING_BYTEPOS" (spp-arg-list ("IT") 94579 . 94583) . ((symbol "BYTEPOS" 94584 . 94591) (semantic-list "((IT).current.string_pos)" 94592 . 94617)))
          ("RIGHT_CORNER" . ((number "3" 107671 . 107672)))
          ("DEFAULT_IMAGE_ASCENT" . ((number "50" 107853 . 107855)))
          ("CENTERED_IMAGE_ASCENT" . ((punctuation "-" 107886 . 107887) (number "1" 107887 . 107888)))
          ("TRY_WINDOW_CHECK_MARGINS" . ((semantic-list "(1 << 0)" 120182 . 120190)))
          ("TRY_WINDOW_IGNORE_FONTS_CHANGE" . ((semantic-list "(1 << 1)" 120230 . 120238)))
          ("CHAR_GLYPH_SPACE_P" (spp-arg-list ("GLYPH") 16942 . 16949) . ((semantic-list "((GLYPH).u.ch == SPACEGLYPH && (GLYPH).face_id == DEFAULT_FACE_ID)" 16954 . 17020)))
          ("GLYPH_EQUAL_P" (spp-arg-list ("X" "Y") 17728 . 17734) . ((semantic-list "((X)->type == (Y)->type					\\
      && (X)->u.val == (Y)->u.val				\\
      && GLYPH_SLICE_EQUAL_P (X, Y)				\\
      && (X)->face_id == (Y)->face_id				\\
      && (X)->padding_p == (Y)->padding_p			\\
      && (X)->left_box_line_p == (Y)->left_box_line_p		\\
      && (X)->right_box_line_p == (Y)->right_box_line_p		\\
      && (X)->voffset == (Y)->voffset				\\
      && (X)->pixel_width == (Y)->pixel_width)" 17746 . 18150)))
          ("MATRIX_ROW_ENDS_IN_MIDDLE_OF_CHAR_P" (spp-arg-list ("ROW") 41006 . 41011) . ((semantic-list "((ROW)->end.dpvec_index > 0			\\
      || (ROW)->end.overlay_string_index >= 0		\\
      || (ROW)->ends_in_middle_of_char_p)" 41019 . 41141)))
          ("MATRIX_TAB_LINE_HEIGHT" (spp-arg-list ("MATRIX") 48096 . 48104) . ((semantic-list "((MATRIX) && (MATRIX)->rows		\\
      ? MATRIX_TAB_LINE_ROW (MATRIX)->height	\\
      : 0)" 48112 . 48200)))
          ("BIDI_AT_BASE_LEVEL" (spp-arg-list ("BIDI_IT") 69733 . 69742) . ((semantic-list "((BIDI_IT).resolved_level == (BIDI_IT).level_stack[0].level)" 69747 . 69807)))
          ("IT_CHARPOS" (spp-arg-list ("IT") 94406 . 94410) . ((symbol "CHARPOS" 94412 . 94419) (semantic-list "((IT).current.pos)" 94420 . 94438)))
          ("ITERATOR_AT_END_P" (spp-arg-list ("IT") 94780 . 94784) . ((semantic-list "((IT)->what == IT_EOB)" 94785 . 94807)))
          ("PRODUCE_GLYPHS" (spp-arg-list ("IT") 95277 . 95281) . 
              ((DO "do" 95315 . 95317) (semantic-list "{                                                  \\
    if ((IT)->glyph_row != NULL && (IT)->bidi_p)	\\
      (IT)->glyph_row->reversed_p = (IT)->bidi_it.paragraph_dir == R2L; \\
    if (FRAME_RIF ((IT)->f) != NULL)                    \\
      FRAME_RIF ((IT)->f)->produce_glyphs ((IT));       \\
    else                                                \\
      produce_glyphs ((IT));                            \\
    if ((IT)->glyph_row != NULL)                        \\
      inhibit_free_realized_faces =true;		\\
    reset_box_start_end_flags ((IT));			\\
  }" 95318 . 95875) (WHILE "while" 95876 . 95881) (semantic-list "(false)" 95882 . 95889)))
          ("OVERLAPS_BOTH" . ((semantic-list "(OVERLAPS_PRED | OVERLAPS_SUCC)" 45301 . 45332)))
          ("IF_DEBUG" (spp-arg-list ("X") 4978 . 4981) . ((semantic-list "((void) 0)" 4982 . 4992)))
          ("GLYPH_CHAR_AND_FACE_EQUAL_P" (spp-arg-list ("X" "Y") 18261 . 18267) . ((semantic-list "((X)->u.ch == (Y)->u.ch			\\
   && (X)->face_id == (Y)->face_id		\\
   && (X)->padding_p == (Y)->padding_p)" 18272 . 18377)))
          ("MATRIX_ROW_START_BYTEPOS" (spp-arg-list ("ROW") 37788 . 37793) . ((semantic-list "((ROW)->minpos.bytepos)" 37794 . 37817)))
          ("MATRIX_ROW_EXTENDS_FACE_P" (spp-arg-list ("ROW") 38778 . 38783) . ((semantic-list "((ROW)->fill_line_p)" 38784 . 38804)))
          ("MATRIX_ROW_BOTTOM_Y" (spp-arg-list ("ROW") 40384 . 40389) . ((semantic-list "((ROW)->y + (ROW)->height)" 40390 . 40416)))
          ("IT_STACK_SIZE" . ((number "5" 74759 . 74760)))
          ("BOT_CORNER" . ((number "2" 107648 . 107649)))
          ("RGB_PIXEL_COLOR" . ((UNSIGNED "unsigned" 122326 . 122334) (LONG "long" 122335 . 122339)))
          ("TEXT_POS_EQUAL_P" (spp-arg-list ("POS1" "POS2") 7170 . 7182) . ((semantic-list "((POS1).charpos == (POS2).charpos		\\
      && (POS1).bytepos == (POS2).bytepos)" 7191 . 7270)))
          ("SET_GLYPH" (spp-arg-list ("glyph" "char" "face") 9008 . 9027) . ((semantic-list "((glyph).ch = (char), (glyph).face_id = (face))" 9032 . 9079)))
          ("SET_CHAR_GLYPH_FROM_GLYPH" (spp-arg-list ("GLYPH" "FROM") 18888 . 18901) . ((symbol "SET_CHAR_GLYPH" 18911 . 18925) (semantic-list "((GLYPH),					\\
	 	     GLYPH_CHAR ((FROM)),			\\
		     GLYPH_FACE ((FROM)),			\\
		     false)" 18926 . 19020)))
          ("CHAR_GLYPH_PADDING_P" (spp-arg-list ("GLYPH") 19553 . 19560) . 
              ((semantic-list "(GLYPH)" 19561 . 19568) (punctuation "." 19568 . 19569) (symbol "padding_p" 19569 . 19578)))
          ("MATRIX_ROW_VPOS" (spp-arg-list ("ROW" "MATRIX") 38285 . 38298) . ((semantic-list "((ROW) - (MATRIX)->rows)" 38299 . 38323)))
          ("SET_MATRIX_ROW_ENABLED_P" (spp-arg-list ("MATRIX" "ROW" "VALUE") 38907 . 38927) . ((semantic-list "(MATRIX_ROW (MATRIX, ROW)->enabled_p = (VALUE))" 38935 . 38982)))
          ("MATRIX_ROW_LAST_VISIBLE_P" (spp-arg-list ("ROW" "IT") 40560 . 40569) . ((semantic-list "(MATRIX_ROW_BOTTOM_Y ((ROW)) >= (IT)->last_visible_y)" 40577 . 40630)))
          ("FONT_TOO_HIGH" (spp-arg-list ("ft") 53209 . 53213) . ((semantic-list "((ft)->pixel_size > 0 && (ft)->ascent + (ft)->descent > 3*(ft)->pixel_size)" 53223 . 53298)))
          ("FACE_TTY_DEFAULT_COLOR" . ((semantic-list "((unsigned long) -1)" 59896 . 59916)))
          ("DEFAULT_TOOL_BAR_LABEL_SIZE" . ((number "14" 112332 . 112334)))
          ("TTY_CAP_ITALIC" . ((number "0x10" 113148 . 113152)))
          ("OVERLAPS_SUCC" . ((semantic-list "(1 << 1)" 45269 . 45277)))
          ("CHARPOS" (spp-arg-list ("POS") 5623 . 5628) . 
              ((semantic-list "(POS)" 5629 . 5634) (punctuation "." 5634 . 5635) (symbol "charpos" 5635 . 5642)))
          ("CURRENT_MODE_LINE_ACTIVE_FACE_ID" (spp-arg-list ("W") 49304 . 49307) . ((semantic-list "(CURRENT_MODE_LINE_ACTIVE_FACE_ID_3((W),        \\
					    XWINDOW (selected_window), \\
					    (W)))" 49312 . 49414)))
          ("BIDI_MAXDEPTH" . ((number "125" 63557 . 63560)))
          ("IT_BYTEPOS" (spp-arg-list ("IT") 94457 . 94461) . ((symbol "BYTEPOS" 94463 . 94470) (semantic-list "((IT).current.pos)" 94471 . 94489)))
          ("DEFAULT_TAB_BAR_IMAGE_HEIGHT" . ((number "18" 110525 . 110527)))
          ("TTY_CAP_DIM" . ((number "0x08" 113118 . 113122)))
          ("OVERLAY_STRING_CHUNK_SIZE" . ((number "16" 81816 . 81818)))
          )
)
    (semanticdb-table "semanticdb-table-15865ff7e628"
      :file "buffer.h"
      :fsize 52533
      :lastmodtime '(25349 11416 154379 573000))
    (semanticdb-table "semanticdb-table-15866006fdc4"
      :file "pdumper.h"
      :fsize 7928
      :lastmodtime '(25343 18723 276621 365000))
    (semanticdb-table "semanticdb-table-15865ff7e992"
      :file "atimer.h"
      :fsize 2172
      :lastmodtime '(25069 61173 197351 228000))
    (semanticdb-table "semanticdb-table-15866022ceba"
      :file "coding.h"
      :fsize 25772
      :lastmodtime '(25069 61173 205351 200000))
    (semanticdb-table "semanticdb-table-15865ee9cbd2"
      :file "termhooks.h"
      :fsize 37268
      :lastmodtime '(25343 18723 292620 646000))
    (semanticdb-table "semanticdb-table-15865fb4d440"
      :file "xterm.h"
      :fsize 61262
      :lastmodtime '(25403 4325 657112 526000))
    (semanticdb-table "semanticdb-table-15865ff86848"
      :file "character.h"
      :fsize 15699
      :lastmodtime '(25343 18723 216624 63000))
    (semanticdb-table "semanticdb-table-15865fa57f82"
      :file "fontset.h"
      :fsize 1871
      :lastmodtime '(25069 61173 213351 170000))
    (semanticdb-table "semanticdb-table-15866000df5e"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [775 794])
            ("lisp.h" include nil nil [796 813])
            ("character.h" include nil nil [814 836])
            ("buffer.h" include nil nil [837 856])
            ("syntax.h" include nil nil [857 876])
            ("charset.h" include nil nil [877 897])
            ("region-cache.h" include nil nil [898 923])
            ("blockinput.h" include nil nil [924 947])
            ("intervals.h" include nil nil [948 970])
            ("pdumper.h" include nil nil [971 991])
            ("composite.h" include nil nil [992 1014])
            ("regex-emacs.h" include nil nil [1016 1040])
            ("REGEXP_CACHE_SIZE" variable (:constant-flag t) nil [1050 1067])
            ("regexp_cache" type
               (:members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("regexp_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [1215 1241])
                    ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1244 1284])
                    ("f_whitespace_regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1244 1284])
                    ("syntax_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1465 1490])
                    ("buf" variable (:type ("re_pattern_buffer" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1493 1522])
                    ("fastmap" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [1525 1544])
                    ("posix" variable (:type "bool") (reparse-symbol classsubparts) [1618 1629])
                    ("busy" variable (:type "bool") (reparse-symbol classsubparts) [1681 1691]))                  
                :type "struct")
                nil [1191 1694])
            ("searchbufs" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("regexp_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1733 1790])
            ("searchbuf_head" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("regexp_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1869 1912])
            ("set_search_regs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1943 1953])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1954 1964]))                  
                :type "void")
                nil [1914 1965])
            ("save_search_regs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1996 2001]))                  
                :type "void")
                nil [1966 2002])
            ("simple_search" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2035 2045])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [2046 2062])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2063 2073])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2078 2088])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2089 2101])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2102 2112])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2113 2123])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2156 2166])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2167 2177]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2003 2178])
            ("boyer_moore" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2209 2219])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [2220 2236])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2237 2247])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2278 2290])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2291 2303])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2304 2314])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2345 2355])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2356 2360]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2179 2361])
            ("search_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2394 2406])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2407 2417])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2418 2428])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2461 2471])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2472 2482])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2483 2493])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2494 2498])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2531 2543])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2544 2556])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [2557 2562]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2362 2563])
            ("re_match_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2565 2593])
            ("matcher_overflow" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2626 2631]))                  
                :type "void")
                nil [2602 2681])
            ("freeze_buffer_relocation" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2721 2726]))                  
                :type "void")
                nil [2683 2949])
            ("compile_pattern_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("cp" variable
                       (:pointer 1
                        :type ("regexp_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3396 3420])
                    ("pattern" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3421 3441])
                    ("translate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3447 3469])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [3470 3481]))                  
                :type "void")
                nil [3365 4411])
            ("shrink_regexp_cache" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4578 4583]))                  
                :type "void")
                nil [4552 4810])
            ("clear_regexp_cache" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5116 5121]))                  
                :type "void")
                nil [5091 5506])
            ("unfreeze_pattern" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [5538 5548]))                  
                :type "void")
                nil [5508 5619])
            ("freeze_pattern" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("searchbuf" variable
                       (:pointer 1
                        :type ("regexp_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5649 5680]))                  
                :type "void")
                nil [5621 5799])
            ("compile_pattern" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("pattern" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6396 6416])
                    ("regp" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6417 6443])
                    ("translate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6447 6469])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [6470 6481])
                    ("multibyte" variable (:type "bool") (reparse-symbol arg-sub-list) [6482 6497]))                  
                :type ("regexp_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6350 8604])
            ("looking_at_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8641 8660])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [8661 8672])
                    ("modify_data" variable (:type "bool") (reparse-symbol arg-sub-list) [8673 8690]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8608 10813])
            ("Slooking_at" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"looking-at\", Flooking_at, Slooking_at, 1, 2, 0,
       doc: /* Return t if text after point matches regular expression REGEXP.
By default, this function modifies the match data that
`match-beginning', `match-end' and `match-data' access.  If
INHIBIT-MODIFY is non-nil, don't modify the match data.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [10815 11125])
            ("Flooking_at" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11129 11148])
                    ("inhibit_modify" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11149 11176]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10815 11238])
            ("Sposix_looking_at" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"posix-looking-at\", Fposix_looking_at, Sposix_looking_at, 1, 2, 0,
       doc: /* Return t if text after point matches REGEXP according to Posix rules.
Find the longest match, in accordance with Posix regular expression rules.

By default, this function modifies the match data that
`match-beginning', `match-end' and `match-data' access.  If
INHIBIT-MODIFY is non-nil, don't modify the match data.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [11240 11650])
            ("Fposix_looking_at" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11654 11673])
                    ("inhibit_modify" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11674 11701]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11240 11763])
            ("string_match_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11801 11820])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11821 11840])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11841 11859])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [11862 11873])
                    ("modify_data" variable (:type "bool") (reparse-symbol arg-sub-list) [11874 11891]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11766 13790])
            ("Sstring_match" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"string-match\", Fstring_match, Sstring_match, 2, 4, 0,
       doc: /* Return index of start of first match for REGEXP in STRING, or nil.
Matching ignores case if `case-fold-search' is non-nil.
If third arg START is non-nil, start search at that index in STRING.

If INHIBIT-MODIFY is non-nil, match data is not changed.

If INHIBIT-MODIFY is nil or missing, match data is changed, and
`match-end' and `match-beginning' give indices of substrings matched
by parenthesis constructs in the pattern.  You can use the function
`match-string' to extract the substrings matched by the parenthesis
constructions in REGEXP.  For index of first char beyond the match, do
(match-end 0).  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [13792 14479])
            ("Fstring_match" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14483 14502])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14503 14522])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14523 14541])
                    ("inhibit_modify" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14545 14572]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13792 14651])
            ("Sposix_string_match" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"posix-string-match\", Fposix_string_match, Sposix_string_match, 2, 4, 0,
       doc: /* Return index of start of first match for Posix REGEXP in STRING, or nil.
Find the longest match, in accord with Posix regular expression rules.
Case is ignored if `case-fold-search' is non-nil in the current buffer.

If INHIBIT-MODIFY is non-nil, match data is not changed.

If INHIBIT-MODIFY is nil or missing, match data is changed, and
`match-end' and `match-beginning' give indices of substrings matched
by parenthesis constructs in the pattern.  You can use the function
`match-string' to extract the substrings matched by the parenthesis
constructions in REGEXP.  For index of first char beyond the match, do
(match-end 0).  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [14653 15382])
            ("Fposix_string_match" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15386 15405])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15406 15425])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15426 15444])
                    ("inhibit_modify" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15448 15475]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [14653 15554])
            ("fast_string_match_internal" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15790 15809])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15810 15829])
                    ("table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15837 15855]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [15752 16229])
            ("fast_c_string_match_ignore_case" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16511 16530])
                    ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16536 16555])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16556 16570]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [16468 16921])
            ("fast_looking_at" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17234 17253])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17254 17268])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17269 17288])
                    ("limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17292 17308])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17309 17330])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17331 17350]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [17207 18676])
            ("newline_cache_on_off" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19028 19047]))                  
                :type ("region_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18977 20192])
            ("find_newline" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21277 21293])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21294 21315])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21316 21330])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21338 21357])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21358 21374])
                    ("counted" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21375 21394])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21402 21421])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [21422 21438]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21253 29140])
            ("scan_newline" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29715 29731])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29732 29753])
                    ("limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29761 29777])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29778 29799])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29807 29823])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [29824 29840]))                  
                :type "void")
                nil [29696 30107])
            ("scan_newline_from_point" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30254 30270])
                    ("charpos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30271 30290])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30295 30314]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [30219 30577])
            ("find_newline_no_quit" function
               (:arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30695 30710])
                    ("frombyte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30711 30730])
                    ("cnt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30739 30753])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30754 30773]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [30663 30847])
            ("find_before_next_newline" function
               (:arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31068 31083])
                    ("to" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31084 31097])
                    ("cnt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31103 31117])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [31118 31137]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [31032 31356])
            ("search_command" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31446 31465])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31466 31484])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31485 31505])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31508 31526])
                    ("direction" variable (:type "int") (reparse-symbol arg-sub-list) [31527 31541])
                    ("RE" variable (:type "int") (reparse-symbol arg-sub-list) [31542 31549])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [31550 31561]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [31411 33148])
            ("trivial_regexp_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33248 33267]))                  
                :type "bool")
                nil [33218 33945])
            ("TRANSLATE" variable (:constant-flag t) nil [34658 34667])
            ("search_regs_1" variable
               (:typemodifiers ("static")
                :type ("re_registers" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [35157 35198])
            ("search_buffer_re" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35235 35254])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35255 35269])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35270 35289])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35308 35322])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35323 35342])
                    ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35343 35355])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35374 35390])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35391 35415])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [35416 35427]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [35200 39439])
            ("search_buffer_non_re" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39480 39499])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39500 39514])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39537 39556])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39557 39571])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39572 39591])
                    ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39614 39626])
                    ("RE" variable (:type "int") (reparse-symbol arg-sub-list) [39627 39634])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39635 39651])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39652 39676])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [39699 39710]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [39441 46502])
            ("search_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46536 46555])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46556 46570])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46571 46590])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46599 46613])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46614 46633])
                    ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46634 46646])
                    ("RE" variable (:type "int") (reparse-symbol arg-sub-list) [46655 46662])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46663 46679])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46680 46704])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [46705 46716]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [46504 47330])
            ("simple_search" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47821 47833])
                    ("pat" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [47834 47853])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47862 47876])
                    ("len_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47877 47896])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47897 47913])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47922 47936])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47937 47956])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47965 47979])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47980 47999]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [47789 51469])
            ("boyer_moore" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52188 52200])
                    ("base_pat" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [52201 52225])
                    ("len_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52232 52251])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52258 52274])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52275 52299])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52306 52325])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52326 52345])
                    ("char_base" variable (:type "int") (reparse-symbol arg-sub-list) [52359 52373]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [52158 64717])
            ("set_search_regs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("beg_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64924 64943])
                    ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64944 64961]))                  
                :type "void")
                nil [64895 65647])
            ("Ssearch_backward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"search-backward\", Fsearch_backward, Ssearch_backward, 1, 4,
       \"MSearch backward: \",
       doc: /* Search backward from point for STRING.
Set point to the beginning of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
  The match found must not begin before that position.  A value of nil
  means search to the beginning of the accessible portion of the buffer.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, position at limit of search and return nil.
Optional fourth argument COUNT, if a positive number, means to search
  for COUNT successive occurrences.  If COUNT is negative, search
  forward, instead of backward, for -COUNT occurrences.  A value of
  nil means the same as 1.
With COUNT positive, the match found is the COUNTth to last one (or
  last, if COUNT is 1 or nil) in the buffer located entirely before
  the origin of the search; correspondingly with COUNT negative.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end' and `replace-match'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [65650 66839])
            ("Fsearch_backward" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66843 66862])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66863 66881])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66882 66902])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66903 66921]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65650 66992])
            ("Ssearch_forward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"search-forward\", Fsearch_forward, Ssearch_forward, 1, 4, \"MSearch: \",
       doc: /* Search forward from point for STRING.
Set point to the end of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
  The match found must not end after that position.  A value of nil
  means search to the end of the accessible portion of the buffer.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, move to limit of search and return nil.
Optional fourth argument COUNT, if a positive number, means to search
  for COUNT successive occurrences.  If COUNT is negative, search
  backward, instead of forward, for -COUNT occurrences.  A value of
  nil means the same as 1.
With COUNT positive, the match found is the COUNTth one (or first,
  if COUNT is 1 or nil) in the buffer located entirely after the
  origin of the search; correspondingly with COUNT negative.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end' and `replace-match'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [66994 68136])
            ("Fsearch_forward" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68140 68159])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68160 68178])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68179 68199])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68200 68218]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [66994 68288])
            ("Sre_search_backward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"re-search-backward\", Fre_search_backward, Sre_search_backward, 1, 4,
       \"sRE search backward: \",
       doc: /* Search backward from point for regular expression REGEXP.
This function is almost identical to `re-search-forward', except that
by default it searches backward instead of forward, and the sign of
COUNT also indicates exactly the opposite searching direction.
See `re-search-forward' for details.

Note that searching backwards may give a shorter match than expected,
because REGEXP is still matched in the forward direction.  See Info
anchor `(elisp) re-search-backward' for details.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [68290 68902])
            ("Fre_search_backward" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68906 68925])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68926 68944])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68945 68965])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68966 68984]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68290 69055])
            ("Sre_search_forward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"re-search-forward\", Fre_search_forward, Sre_search_forward, 1, 4,
       \"sRE search: \",
       doc: /* Search forward from point for regular expression REGEXP.
Set point to the end of the occurrence found, and return point.
The optional second argument BOUND is a buffer position that bounds
  the search.  The match found must not end after that position.  A
  value of nil means search to the end of the accessible portion of
  the buffer.
The optional third argument NOERROR indicates how errors are handled
  when the search fails.  If it is nil or omitted, emit an error; if
  it is t, simply return nil and do nothing; if it is neither nil nor
  t, move to the limit of search and return nil.
The optional fourth argument COUNT is a number that indicates the
  search direction and the number of occurrences to search for.  If it
  is positive, search forward for COUNT successive occurrences; if it
  is negative, search backward, instead of forward, for -COUNT
  occurrences.  A value of nil means the same as 1.
With COUNT positive/negative, the match found is the COUNTth/-COUNTth
  one in the buffer located entirely after/before the origin of the
  search.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end', `match-string',
and `replace-match'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [69057 70431])
            ("Fre_search_forward" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70435 70454])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70455 70473])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70474 70494])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70495 70513]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69057 70583])
            ("Sposix_search_backward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"posix-search-backward\", Fposix_search_backward, Sposix_search_backward, 1, 4,
       \"sPosix search backward: \",
       doc: /* Search backward from point for match for REGEXP according to Posix rules.
Find the longest match in accord with Posix regular expression rules.
Set point to the beginning of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
  The match found must not begin before that position.  A value of nil
  means search to the beginning of the accessible portion of the buffer.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, position at limit of search and return nil.
Optional fourth argument COUNT, if a positive number, means to search
  for COUNT successive occurrences.  If COUNT is negative, search
  forward, instead of backward, for -COUNT occurrences.  A value of
  nil means the same as 1.
With COUNT positive, the match found is the COUNTth to last one (or
  last, if COUNT is 1 or nil) in the buffer located entirely before
  the origin of the search; correspondingly with COUNT negative.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end', `match-string',
and `replace-match'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [70585 71920])
            ("Fposix_search_backward" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71924 71943])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71944 71962])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71963 71983])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71984 72002]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [70585 72073])
            ("Sposix_search_forward" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"posix-search-forward\", Fposix_search_forward, Sposix_search_forward, 1, 4,
       \"sPosix search: \",
       doc: /* Search forward from point for REGEXP according to Posix rules.
Find the longest match in accord with Posix regular expression rules.
Set point to the end of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
  The match found must not end after that position.  A value of nil
  means search to the end of the accessible portion of the buffer.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, move to limit of search and return nil.
Optional fourth argument COUNT, if a positive number, means to search
  for COUNT successive occurrences.  If COUNT is negative, search
  backward, instead of forward, for -COUNT occurrences.  A value of
  nil means the same as 1.
With COUNT positive, the match found is the COUNTth one (or first,
  if COUNT is 1 or nil) in the buffer located entirely after the
  origin of the search; correspondingly with COUNT negative.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end', `match-string',
and `replace-match'.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [72075 73360])
            ("Fposix_search_forward" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73364 73383])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73384 73402])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73403 73423])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73424 73442]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [72075 73512])
            ("Sreplace_match" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"replace-match\", Freplace_match, Sreplace_match, 1, 5, 0,
       doc: /* Replace text matched by last search with NEWTEXT.
Leave point at the end of the replacement text.

If optional second arg FIXEDCASE is non-nil, do not alter the case of
the replacement text.  Otherwise, maybe capitalize the whole text, or
maybe just word initials, based on the replaced text.  If the replaced
text has only capital letters and has at least one multiletter word,
convert NEWTEXT to all caps.  Otherwise if all words are capitalized
in the replaced text, capitalize each word in NEWTEXT.

If optional third arg LITERAL is non-nil, insert NEWTEXT literally.
Otherwise treat `\\\\' as special:
  `\\\\&' in NEWTEXT means substitute original matched text.
  `\\\\N' means substitute what matched the Nth `\\\\(...\\\\)'.
       If Nth parens didn't match, substitute nothing.
  `\\\\\\\\' means insert one `\\\\'.
  `\\\\?' is treated literally
       (for compatibility with `query-replace-regexp').
  Any other character following `\\\\' signals an error.
Case conversion does not apply to these substitutions.

If optional fourth argument STRING is non-nil, it should be a string
to act on; this should be the string on which the previous match was
done via `string-match'.  In this case, `replace-match' creates and
returns a new string, made by copying STRING and replacing the part of
STRING that was matched (the original STRING itself is not altered).

The optional fifth argument SUBEXP specifies a subexpression;
it says to replace just that subexpression with NEWTEXT,
rather than replacing the entire matched text.
This is, in a vague sense, the inverse of using `\\\\N' in NEWTEXT;
`\\\\N' copies subexp N into NEWTEXT, but using N as SUBEXP puts
NEWTEXT in place of subexp N.
This is useful only after a regular expression search or match,
since only regular expressions have distinguished subexpressions.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [73515 75407])
            ("Freplace_match" function
               (:arguments 
                  ( ("newtext" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75411 75431])
                    ("fixedcase" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75432 75454])
                    ("literal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75455 75475])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75476 75495])
                    ("subexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75496 75515]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [73515 86498])
            ("match_limit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("num" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86533 86549])
                    ("beginningp" variable (:type "bool") (reparse-symbol arg-sub-list) [86550 86566]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86501 86968])
            ("Smatch_beginning" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"match-beginning\", Fmatch_beginning, Smatch_beginning, 1, 1, 0,
       doc: /* Return position of start of text matched by last search.
SUBEXP, a number, specifies which parenthesized expression in the last
  regexp.
Value is nil if SUBEXPth pair didn't match, or there were less than
  SUBEXP pairs.
Zero means the entire text matched by the whole regexp or whole string.

Return value is undefined if the last search failed.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [86970 87408])
            ("Fmatch_beginning" function
               (:arguments 
                  ( ("subexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87412 87431]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86970 87469])
            ("Smatch_end" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"match-end\", Fmatch_end, Smatch_end, 1, 1, 0,
       doc: /* Return position of end of text matched by last search.
SUBEXP, a number, specifies which parenthesized expression in the last
  regexp.
Value is nil if SUBEXPth pair didn't match, or there were less than
  SUBEXP pairs.
Zero means the entire text matched by the whole regexp or whole string.

Return value is undefined if the last search failed.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [87471 87889])
            ("Fmatch_end" function
               (:arguments 
                  ( ("subexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87893 87912]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87471 87950])
            ("Smatch_data" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"match-data\", Fmatch_data, Smatch_data, 0, 3, 0,
       doc: /* Return a list describing what the last search matched.
Element 2N is `(match-beginning N)'; element 2N + 1 is `(match-end N)'.
All the elements are markers or nil (nil if the Nth pair didn't match)
if the last match was on a buffer; integers or nil if a string was matched.
Use `set-match-data' to reinstate the data in this list.

Note that non-matching optional groups at the end of the regexp are
elided instead of being represented with two `nil's each.  For instance:

  (progn
    (string-match \"^\\\\(a\\\\)?\\\\(b\\\\)\\\\(c\\\\)?$\" \"b\")
    (match-data))
  => (0 1 nil nil 0 1)

If INTEGERS (the optional first argument) is non-nil, always use
integers (rather than markers) to represent buffer positions.  In
this case, and if the last match was in a buffer, the buffer will get
stored as one additional element at the end of the list.

If REUSE is a list, reuse it as part of the value.  If REUSE is long
enough to hold all the values, and if INTEGERS is non-nil, no consing
is done.

If optional third arg RESEAT is non-nil, any previous markers on the
REUSE list will be modified to point to nowhere.

Return value is undefined if the last search failed.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [87952 89183])
            ("Fmatch_data" function
               (:arguments 
                  ( ("integers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89187 89208])
                    ("reuse" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89209 89227])
                    ("reseat" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89228 89247]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87952 91238])
            ("Sset_match_data" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"set-match-data\", Fset_match_data, Sset_match_data, 1, 2, 0,
       doc: /* Set internal data on last search match from elements of LIST.
LIST should have been created by calling `match-data' previously.

If optional arg RESEAT is non-nil, make markers on LIST point nowhere.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [91688 91975])
            ("Fset_match_data" function
               (:arguments 
                  ( ("listn" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91979 92005])
                    ("reseat" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92006 92025]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [91688 94338])
            ("Smatch_data__translate" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"match-data--translate\", Fmatch_data__translate, Smatch_data__translate,
       1, 1, 0,
       doc: /* Add N to all positions in the match data.  Internal.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [94340 94508])
            ("Fmatch_data__translate" function
               (:arguments 
                  ( ("n" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94512 94526]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [94340 94887])
            ("save_search_regs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [95055 95060]))                  
                :type "void")
                nil [95025 95331])
            ("restore_search_regs" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [95410 95415]))                  
                :type "void")
                nil [95384 95742])
            ("update_search_regs" function
               (:arguments 
                  ( ("oldstart" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95821 95840])
                    ("oldend" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95841 95858])
                    ("newend" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95859 95876]))                  
                :type "void")
                nil [95796 96370])
            ("unwind_set_match_data" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("listn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96407 96424]))                  
                :type "void")
                nil [96372 96534])
            ("record_unwind_save_match_data" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [96620 96625]))                  
                :type "void")
                nil [96584 96714])
            ("Sregexp_quote" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"regexp-quote\", Fregexp_quote, Sregexp_quote, 1, 1, 0,
       doc: /* Return a regexp string which matches exactly STRING and nothing else.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [96767 96918])
            ("Fregexp_quote" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96922 96941]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [96767 97781])
            ("find_newline1" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97888 97904])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97905 97926])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97927 97941])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97950 97969])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97970 97986])
                    ("counted" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97987 98006])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [98015 98034])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [98035 98051]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [97863 100146])
            ("Snewline_cache_check" variable
               (:typemodifiers ("static")
                :default-value "DEFUN (\"newline-cache-check\", Fnewline_cache_check, Snewline_cache_check,
       0, 1, 0,
       doc: /* Check the newline cache of BUFFER against buffer contents.

BUFFER defaults to the current buffer.

Value is an array of 2 sub-arrays of buffer positions for newlines,
the first based on the cache, the second based on actually scanning
the buffer.  If the buffer doesn't have a cache, the value is nil.  */)"
                :type ("Aligned_Lisp_Subr" type (:type "union") nil nil))
                nil [100148 100560])
            ("Fnewline_cache_check" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100564 100583]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [100148 102602])
            ("syms_of_search_for_pdumper" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [102646 102651]))                  
                :type "void")
                nil [102606 102652])
            ("syms_of_search" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [102675 102680]))                  
                :type "void")
                nil [102654 105513])
            ("syms_of_search_for_pdumper" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [105555 105560]))                  
                :type "void")
                nil [105515 106039]))          
      :file "search.c"
      :pointmax 106040
      :fsize 106039
      :lastmodtime '(25343 18723 284621 5000)
      :unmatched-syntax '((semantic-list "(\".subrs\")" 100148 . 100560) (symbol "ATTRIBUTE_SECTION" 100148 . 100560) (semantic-list "(\".subrs\")" 96767 . 96918) (symbol "ATTRIBUTE_SECTION" 96767 . 96918) (semantic-list #("(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 0 1 (macros (("...")))) 96419 . 96424) (semantic-list "(\".subrs\")" 94340 . 94508) (symbol "ATTRIBUTE_SECTION" 94340 . 94508) (semantic-list #("(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 0 1 (macros (("...")))) 92000 . 92005) (semantic-list "(\".subrs\")" 91688 . 91975) (symbol "ATTRIBUTE_SECTION" 91688 . 91975) (semantic-list "(\".subrs\")" 87952 . 89183) (symbol "ATTRIBUTE_SECTION" 87952 . 89183) (semantic-list "(\".subrs\")" 87471 . 87889) (symbol "ATTRIBUTE_SECTION" 87471 . 87889) (semantic-list "(\".subrs\")" 86970 . 87408) (symbol "ATTRIBUTE_SECTION" 86970 . 87408) (semantic-list "(\".subrs\")" 73515 . 75407) (symbol "ATTRIBUTE_SECTION" 73515 . 75407) (semantic-list "(\".subrs\")" 72075 . 73360) (symbol "ATTRIBUTE_SECTION" 72075 . 73360) (semantic-list "(\".subrs\")" 70585 . 71920) (symbol "ATTRIBUTE_SECTION" 70585 . 71920) (semantic-list "(\".subrs\")" 69057 . 70431) (symbol "ATTRIBUTE_SECTION" 69057 . 70431) (semantic-list "(\".subrs\")" 68290 . 68902) (symbol "ATTRIBUTE_SECTION" 68290 . 68902) (semantic-list "(\".subrs\")" 66994 . 68136) (symbol "ATTRIBUTE_SECTION" 66994 . 68136) (semantic-list "(\".subrs\")" 65650 . 66839) (symbol "ATTRIBUTE_SECTION" 65650 . 66839) (semantic-list "(\".subrs\")" 14653 . 15382) (symbol "ATTRIBUTE_SECTION" 14653 . 15382) (semantic-list "(\".subrs\")" 13792 . 14479) (symbol "ATTRIBUTE_SECTION" 13792 . 14479) (semantic-list "(\".subrs\")" 11240 . 11650) (symbol "ATTRIBUTE_SECTION" 11240 . 11650) (semantic-list "(\".subrs\")" 10815 . 11125) (symbol "ATTRIBUTE_SECTION" 10815 . 11125) (symbol "ATTRIBUTE_COLD" 2602 . 2607) (STATIC 2595 . 2601))
      :lexical-table 
        '(("REGEXP_CACHE_SIZE" . ((number "20" 1068 . 1070)))
          ("TRANSLATE" (spp-arg-list ("out" "trt" "d") 34667 . 34680) . 
              ((DO "do" 34685 . 34687) (semantic-list "{						\\
    if (! NILP (trt))				\\
      {						\\
	Lisp_Object temp;			\\
	temp = Faref (trt, make_fixnum (d));	\\
	if (FIXNUMP (temp))			\\
	  out = XFIXNUM (temp);			\\
	else					\\
	  out = d;				\\
      }						\\
    else					\\
      out = d;					\\
  }" 34697 . 34948) (WHILE "while" 34956 . 34961) (semantic-list "(0)" 34962 . 34965)))
          )
)
    (semanticdb-table "semanticdb-table-15866000df7e"
      :file "syntax.h"
      :fsize 7287
      :lastmodtime '(25343 18723 288620 825000))
    (semanticdb-table "semanticdb-table-15866000a118"
      :file "charset.h"
      :fsize 19565
      :lastmodtime '(25069 61173 201351 214000))
    (semanticdb-table "semanticdb-table-15866000a138"
      :file "region-cache.h"
      :fsize 5279
      :lastmodtime '(25069 61173 241351 69000))
    (semanticdb-table "semanticdb-table-15866024533c"
      :file "intervals.h"
      :fsize 12087
      :lastmodtime '(25343 18723 256622 264000))
    (semanticdb-table "semanticdb-table-15866024535c"
      :file "composite.h"
      :fsize 14402
      :lastmodtime '(25398 32925 648306 303000))
    (semanticdb-table "semanticdb-table-15865fa386b4"
      :file "regex-emacs.h"
      :fsize 7394
      :lastmodtime '(25069 61173 241351 69000)))
  :file "!work!emacs!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
