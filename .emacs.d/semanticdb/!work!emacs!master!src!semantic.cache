;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [831 843])
            ("alloca.h" include (:system-flag t) nil [845 864])
            ("setjmp.h" include (:system-flag t) nil [865 884])
            ("stdalign.h" include (:system-flag t) nil [885 906])
            ("stdarg.h" include (:system-flag t) nil [907 926])
            ("stddef.h" include (:system-flag t) nil [927 946])
            ("string.h" include (:system-flag t) nil [947 966])
            ("float.h" include (:system-flag t) nil [967 985])
            ("inttypes.h" include (:system-flag t) nil [986 1007])
            ("limits.h" include (:system-flag t) nil [1008 1027])
            ("intprops.h" include (:system-flag t) nil [1029 1050])
            ("verify.h" include (:system-flag t) nil [1051 1070])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1492 1507])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1697 1720])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1774 1795])
            ("max" variable (:constant-flag t) nil [1883 1886])
            ("min" variable (:constant-flag t) nil [1925 1928])
            ("ARRAYELTS" variable (:constant-flag t) nil [2007 2016])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2150 2160])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2607 2629])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2630 2662])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2688 2697)
                        :type "int")
                        (reparse-symbol enumsubparts) [2670 2697]))                  
                :type "enum")
                nil [2663 2700])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2711 2724])
            ("pI" variable (:constant-flag t) nil [2743 2745])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2806 2833])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2834 2867])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2893 2903)
                        :type "int")
                        (reparse-symbol enumsubparts) [2875 2903]))                  
                :type "enum")
                nil [2868 2906])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2917 2930])
            ("pI" variable (:constant-flag t) nil [2950 2952])
            ("EMACS_INT" variable (:type "long int") nil [3001 3020])
            ("EMACS_UINT" variable (:type "long int") nil [3043 3063])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3089 3100)
                        :type "int")
                        (reparse-symbol enumsubparts) [3071 3100]))                  
                :type "enum")
                nil [3064 3103])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3114 3127])
            ("pI" variable (:constant-flag t) nil [3198 3200])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3422 3449]))                  
                :type "enum")
                nil [3414 3522])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [3808 3833])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [3843 3856])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (3894 3904)
                        :type "int")
                        (reparse-symbol enumsubparts) [3873 3904]))                  
                :type "enum")
                nil [3866 3907])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4082 4097]))                  
                :type "int")
                nil [4074 4130])
            ("printmax_t" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [4556 4585])
            ("uprintmax_t" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [4586 4617])
            ("pMd" variable (:constant-flag t) nil [4627 4630])
            ("pMu" variable (:constant-flag t) nil [4646 4649])
            ("pD" variable (:constant-flag t) nil [5032 5034])
            ("pD" variable (:constant-flag t) nil [5077 5079])
            ("pD" variable (:constant-flag t) nil [5124 5126])
            ("eassert" variable (:constant-flag t) nil [6430 6437])
            ("eassume" variable (:constant-flag t) nil [6508 6515])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8115 8143)
                        :type "int")
                        (reparse-symbol enumsubparts) [8105 8143])
                    ("INTTYPEBITS" variable
                       (:constant-flag t
                        :default-value (8212 8226)
                        :type "int")
                        (reparse-symbol enumsubparts) [8198 8226])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8319 8330)
                        :type "int")
                        (reparse-symbol enumsubparts) [8305 8330]))                  
                :type "enum")
                nil [7878 8335])
            ("VAL_MAX" variable (:constant-flag t) nil [8695 8702])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9145 9156])
            ("GCALIGNED" variable (:constant-flag t) nil [9532 9541])
            ("lisp_h_XLI" variable (:constant-flag t) nil [10868 10878])
            ("lisp_h_XIL" variable (:constant-flag t) nil [10895 10905])
            ("lisp_h_CHECK_LIST_CONS" variable (:constant-flag t) nil [10928 10950])
            ("lisp_h_CHECK_NUMBER" variable (:constant-flag t) nil [10999 11018])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [11070 11089])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [11139 11156])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [11250 11262])
            ("lisp_h_EQ" variable (:constant-flag t) nil [11299 11308])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [11344 11357])
            ("lisp_h_INTEGERP" variable (:constant-flag t) nil [11395 11410])
            ("lisp_h_MARKERP" variable (:constant-flag t) nil [11476 11490])
            ("lisp_h_MISCP" variable (:constant-flag t) nil [11551 11563])
            ("lisp_h_NILP" variable (:constant-flag t) nil [11600 11611])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [11636 11657])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [11750 11774])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [11814 11831])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [11915 11929])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [11968 11986])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [12029 12040])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [12067 12078])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [12107 12119])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [12202 12214])
            ("lisp_h_check_cons_list" variable (:constant-flag t) nil [12264 12286])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [13183 13207])
            ("INTMASK" variable (:constant-flag t) nil [14960 14967])
            ("case_Lisp_Int" variable (:constant-flag t) nil [15013 15026])
            ("ENUM_BF" variable (:constant-flag t) nil [15393 15400])
            ("Lisp_Object" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [20778 20808])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [20817 20831])
            ("LISP_INITIALLY_ZERO" variable (:constant-flag t) nil [20948 20967])
            ("Lisp_Fwd" variable (:type "int") nil [21054 21063])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [22927 22951])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [23326 23348])
            ("redirect" variable
               (:suffix ":3"
                :type ("symbol_redirect" type (:type "enum") nil nil))
                nil [23661 23700])
            ("constant" variable
               (:suffix ":2"
                :type "unsigned int")
                nil [23879 23901])
            ("interned" variable
               (:suffix ":2"
                :type "unsigned int")
                nil [23999 24021])
            ("declared_special" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24161 24190])
            ("pinned" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24262 24281])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24331 24348])
            ("val" variable (:type ("" type
                 (:members 
                    ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24501 24519])
                      ("alias" variable
                         (:pointer 1
                          :type ("Lisp_Symbol" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [24524 24550])
                      ("blv" variable
                         (:pointer 1
                          :type ("Lisp_Buffer_Local_Value" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [24555 24591])
                      ("fwd" variable
                         (:pointer 1
                          :type ("Lisp_Fwd" type (:type "union") nil nil))
                          (reparse-symbol classsubparts) [24596 24616]))                    
                  :type "union")
                  nil nil)) nil [24489 24625])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24691 24712])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24753 24771])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24842 24867])
            ("EXFUN" variable (:constant-flag t) nil [25126 25131])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [25320 25335])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [25372 25392])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [25415 25427])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [25443 25455])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [25478 25490])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [25526 25538])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [25587 25599])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [25661 25673])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [25754 25766])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [25860 25872])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [25979 25991])
            ("TAG_PTR" variable (:constant-flag t) nil [26380 26387])
            ("TAG_SYMOFFSET" variable (:constant-flag t) nil [26670 26683])
            ("XLI_BUILTIN_LISPSYM" variable (:constant-flag t) nil [26894 26913])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [27111 27128])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [27372 27390])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [27822 27852])
            ("globals.h" include nil nil [27866 27886])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [28300 28315])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [28543 28560])
            ("VALMASK" variable (:constant-flag t) nil [30616 30623])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [30845 30865])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [30905 30925])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [31847 31874])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32058 32060]))                  
                :type "int")
                nil [32053 32061])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [32153 32175])
            ("INTTYPEBITS" variable (:type "int") nil [32275 32287])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [32508 32535])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [32608 32625])
            ("n" variable (:type "int") nil [32635 32637])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [32714 32737])
            ("VALBITS" variable (:type "int") nil [32781 32789])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [32912 32960])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [32963 32994])
            ("p" variable (:type "int") nil [33004 33006])
            ("i" variable (:type "int") nil [33203 33205])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [33330 33353])
            ("XUINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [33619 33636])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [33819 33846])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33893 33896]))                  
                :type "int")
                nil [33888 33916])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [34214 34231])
            ("upper" variable (:type "int") nil [34455 34461])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34704 34706])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34707 34723]))                  
                :type "int")
                nil [34696 34724])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34824 34826])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34827 34839]))                  
                :type "int")
                nil [34816 34840])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [34948 34960])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35067 35069])
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35070 35081]))                  
                :type "int")
                nil [35059 35082])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35213 35215])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35216 35232]))                  
                :type "int")
                nil [35205 35233])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35328 35330])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35331 35347]))                  
                :type "int")
                nil [35320 35348])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35449 35451])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35452 35468]))                  
                :type "int")
                nil [35441 35469])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35563 35565])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35566 35582]))                  
                :type "int")
                nil [35555 35583])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35678 35680])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35681 35697]))                  
                :type "int")
                nil [35670 35698])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35811 35813])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35814 35830]))                  
                :type "int")
                nil [35803 35831])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35956 35958])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35959 35975]))                  
                :type "int")
                nil [35948 35976])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36092 36094])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36095 36111]))                  
                :type "int")
                nil [36084 36112])
            ("a" variable
               (:default-value "XIL (TAG_PTR (type, ptr))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36243 36285])
            ("a" variable (:type "int") nil [36353 36355])
            ("a" variable
               (:default-value "XIL (TAG_SYMOFFSET ((char *) sym - (char *) lispsym))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36425 36495])
            ("a" variable (:type "int") nil [36537 36539])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36623 36632])
                    ("" variable (:type ("index" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36633 36639]))                  
                :type "int")
                nil [36605 36640])
            ("XSETINT" variable (:constant-flag t) nil [36652 36659])
            ("XSETFASTINT" variable (:constant-flag t) nil [36698 36709])
            ("XSETCONS" variable (:constant-flag t) nil [36748 36756])
            ("XSETVECTOR" variable (:constant-flag t) nil [36808 36818])
            ("XSETSTRING" variable (:constant-flag t) nil [36876 36886])
            ("XSETSYMBOL" variable (:constant-flag t) nil [36940 36950])
            ("XSETFLOAT" variable (:constant-flag t) nil [36994 37003])
            ("XSETMISC" variable (:constant-flag t) nil [37056 37064])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [37145 37157])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [37261 37277])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [37558 37574])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [37742 37764])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [37952 37976])
            ("XSETPROCESS" variable (:constant-flag t) nil [38048 38059])
            ("XSETWINDOW" variable (:constant-flag t) nil [38114 38124])
            ("XSETTERMINAL" variable (:constant-flag t) nil [38178 38190])
            ("XSETSUBR" variable (:constant-flag t) nil [38246 38254])
            ("XSETCOMPILED" variable (:constant-flag t) nil [38306 38318])
            ("XSETBUFFER" variable (:constant-flag t) nil [38374 38384])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [38438 38452])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [38510 38525])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [38584 38602])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38989 38991])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38992 39002]))                  
                :type "int")
                nil [38981 39003])
            ("a" variable
               (:default-value "XIL (TAG_PTR (Lisp_Int0, p))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39061 39106])
            ("a" variable (:type "int") nil [39162 39164])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [39347 39381])
            ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [39452 39468])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [39528 39544])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Cons" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [39602 39626]))                    
                  :type "union")
                  nil nil)) nil [39474 39635])
            ("car" variable (:type "int") nil [40169 40173])
            ("cdr" variable (:type "int") nil [40248 40252])
            ("car" variable (:type "int") nil [40345 40361])
            ("cdr" variable (:type "int") nil [40418 40434])
            ("n" variable (:type "int") nil [40678 40680])
            ("n" variable (:type "int") nil [40755 40757])
            ("Qnil" variable (:type "int") nil [41238 41243])
            ("Qnil" variable (:type "int") nil [41324 41329])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41448 41463])
            ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41468 41488])
            ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) nil [41493 41512])
            ("data" variable
               (:pointer 1
                :type "unsigned char")
                nil [41557 41577])
            ("size_byte" variable (:type "int") nil [41704 41714])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [42453 42471])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [42597 42615])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [42905 42925])
            ("data" variable (:type "int") nil [43261 43266])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43380 43387]))                  
                :type "int")
                nil [43373 43388])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43473 43480]))                  
                :type "int")
                nil [43466 43487])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43576 43583]))                  
                :type "int")
                nil [43569 43590])
            ("size" variable (:type "int") nil [43674 43679])
            ("size_byte" variable (:type "int") nil [43932 43942])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44023 44039]))                  
                :type "int")
                nil [44009 44041])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [44135 44150])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [45762 45777])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [45884 45916])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45921 45965])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [46199 46231])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [46273 46288])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [46506 46544])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [46605 46645])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [46648 46668])
            ("size" variable (:type "int") nil [46678 46683])
            ("data" variable (:type "int") nil [46768 46773])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46886 46888]))                  
                :type "int")
                nil [46868 46889])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47025 47097])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [47141 47160])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47220 47292])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [47343 47369])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47473 47518])
            ("Qnil" variable (:type "int") nil [47750 47755])
            ("addr" variable
               (:pointer 1
                :type "unsigned char")
                nil [47858 47878])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47882 47927])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47962 47964]))                  
                :type "int")
                nil [47938 47995])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [48535 48549])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [48649 48663])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [48714 48760])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48763 48783])
            ("size" variable (:type "int") nil [48793 48798])
            ("PTRDIFF_MIN" variable (:type "int") nil [48959 48975])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [49114 49134])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [49419 49439])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49928 49940]))                  
                :type "int")
                nil [49920 49941])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49998 50000])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50004 50011]))                  
                :type "int")
                nil [49990 50012])
            ("VECSIZE" variable (:constant-flag t) nil [50160 50167])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [50445 50458])
            ("UNSIGNED_CMP" variable (:constant-flag t) nil [50878 50890])
            ("ASCII_CHAR_P" variable (:constant-flag t) nil [51132 51144])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [52322 52354])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52472 52491])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52674 52693])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52792 52812])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [52958 52976])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52982 53031])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [53093 53135])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [53312 53344])
            ("depth" variable (:type "int") nil [53735 53745])
            ("min_char" variable (:type "int") nil [53811 53824])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [53886 53930])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [54013 54048])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [54051 54067])
            ("val" variable (:type "int") nil [54359 54363])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54957 54973])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54975 54981])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54982 54986])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54987 54991]))                  
                :type "int")
                nil [54928 54992])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55020 55023])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55024 55028])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55029 55033]))                  
                :type "int")
                nil [55004 55034])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [55201 55233])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [55271 55276]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55252 55277])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55303 55315]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55284 55316])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55342 55354])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55355 55367]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55323 55368])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55394 55406])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55407 55419])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55420 55432]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55375 55433])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55459 55471])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55472 55484])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55485 55497])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55498 55510]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55440 55511])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55537 55549])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55550 55562])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55563 55575])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55576 55588])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55589 55601]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55518 55602])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55628 55640])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55641 55653])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55654 55666])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55667 55679])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55680 55692])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55693 55705]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55609 55706])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55732 55744])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55745 55757])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55758 55770])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55771 55783])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55784 55796])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55797 55809])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55810 55822]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55713 55823])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55849 55861])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55862 55874])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55875 55887])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55888 55900])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55901 55913])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55914 55926])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55927 55939])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55940 55952]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55830 55953])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55987 56004]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [55960 56005])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56034 56044])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [56045 56059]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [56012 56060]))                    
                  :type "union")
                  nil nil)) nil [55238 56076])
            ("min_args" variable (:type "short") nil [56081 56106])
            ("max_args" variable (:type "short") nil [56081 56106])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [56111 56135])
            ("intspec" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [56140 56160])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [56165 56179])
            ("alias" variable (:type "int") nil [57570 57576])
            ("blv" variable (:type "int") nil [57723 57727])
            ("fwd" variable (:type "int") nil [57858 57862])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [58112 58122])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [58273 58281])
            ("fwd" variable
               (:default-value "v"
                :type "int")
                nil [58416 58424])
            ("name" variable (:type "int") nil [58503 58508])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [58650 58668])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [58838 58873])
            ("DEFSYM" variable (:constant-flag t) nil [59289 59295])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59613 59630])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59680 59711])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59771 59801])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59861 59887])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59888 59900])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59901 59913]))                  
                :type "bool")
                nil [59846 59914])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59982 60008])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60009 60021]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [59960 60022])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [60123 60155])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60257 60274])
            ("rehash_size" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60481 60505])
            ("rehash_threshold" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60603 60632])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60734 60751])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60964 60981])
            ("next_free" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61034 61056])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61245 61263])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [61515 61531])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61714 61740])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [61788 61816])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61931 61965])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62038 62040])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62041 62057]))                  
                :type "int")
                nil [62023 62058])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62171 62173])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62174 62190]))                  
                :type "int")
                nil [62163 62191])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [62203 62218])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62431 62433])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62434 62448])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62453 62457]))                  
                :type "int")
                nil [62425 62458])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62613 62615])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62616 62630])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62635 62640]))                  
                :type "int")
                nil [62607 62644])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62826 62828])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62829 62834])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62835 62839]))                  
                :type "int")
                nil [62820 62840])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63003 63005])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63006 63011])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63012 63016]))                  
                :type "int")
                nil [62997 63017])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63250 63252])
                    ("" variable (:type ("index" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63253 63259])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63260 63264]))                  
                :type "int")
                nil [63244 63265])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63390 63392])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63393 63398]))                  
                :type "int")
                nil [63383 63399])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8"
                :type "double")
                nil [63678 63729])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5"
                :type "double")
                nil [63801 63847])
            ("y" variable (:type "int") nil [64064 64066])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [64364 64399])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64425 64447])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [64450 64471])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [64499 64534])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64563 64585])
            ("spacer" variable
               (:suffix ":13"
                :type "unsigned int")
                nil [64588 64609])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64780 64808])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [64921 64948])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65514 65536])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65865 65890])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [65953 65971])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [66211 66229])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [66849 66884])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [66915 66937])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [66942 66963])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [66968 66994])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66999 67017])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67022 67038])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67043 67061])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [69403 69438])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [69472 69494])
            ("SAVE_TYPE_BITS" variable (:type "int") nil [70026 70041])
            ("data" variable
               (:dereference 1
                :type ("" type
                     (:members 
                        ( ("pointer" variable
                             (:pointer 1
                              :type "void")
                              (reparse-symbol classsubparts) [70060 70074])
                          ("funcpointer" variable (:type ("voidfuncptr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70081 70105])
                          ("integer" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70112 70130])
                          ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70137 70156]))                        
                      :type "union")
                      nil nil))
                nil [70046 70186])
            ("pointer" variable (:type "int") nil [70620 70628])
            ("pointer" variable
               (:default-value "val"
                :type "int")
                nil [70789 70803])
            ("funcpointer" variable (:type "int") nil [70972 70984])
            ("integer" variable (:type "int") nil [71184 71192])
            ("integer" variable
               (:default-value "val"
                :type "int")
                nil [71357 71371])
            ("object" variable (:type "int") nil [71565 71572])
            ("base" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [71850 71876])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [71938 71966])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [71971 71999])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [72208 72229])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [72320 72355])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [72383 72405])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [72410 72431])
            ("chain" variable
               (:pointer 1
                :type ("Lisp_Misc" type (:type "union") nil nil))
                nil [72436 72459])
            ("u_any" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72620 72647])
            ("u_free" variable (:type ("Lisp_Free" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72691 72715])
            ("u_marker" variable (:type ("Lisp_Marker" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72720 72748])
            ("u_overlay" variable (:type ("Lisp_Overlay" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72753 72783])
            ("u_save_value" variable (:type ("Lisp_Save_Value" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72788 72824])
            ("u_finalizer" variable (:type ("Lisp_Finalizer" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [72829 72863])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73000 73002])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73003 73013]))                  
                :type "int")
                nil [72992 73014])
            ("u_any" variable (:type "int") nil [73120 73126])
            ("type" variable (:type "int") nil [73208 73213])
            ("u_marker" variable (:type "int") nil [73318 73327])
            ("u_overlay" variable (:type "int") nil [73435 73445])
            ("u_save_value" variable (:type "int") nil [73562 73575])
            ("u_finalizer" variable (:type "int") nil [73689 73701])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74071 74095])
            ("intvar" variable
               (:pointer 1
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [74121 74139])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74366 74390])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [74417 74431])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74656 74680])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74706 74726])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [74895 74919])
            ("offset" variable (:type "int") nil [74952 74963])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [75044 75066])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76546 76571])
            ("frame_local" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76728 76752])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76870 76888])
            ("fwd" variable
               (:pointer 1
                :type ("Lisp_Fwd" type (:type "union") nil nil))
                nil [76972 76992])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77115 77133])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77241 77261])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77545 77565])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [77690 77714])
            ("offset" variable (:type "int") nil [77747 77758])
            ("u_intfwd" variable (:type ("Lisp_Intfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77788 77816])
            ("u_boolfwd" variable (:type ("Lisp_Boolfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77821 77851])
            ("u_objfwd" variable (:type ("Lisp_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77856 77884])
            ("u_buffer_objfwd" variable (:type ("Lisp_Buffer_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77889 77931])
            ("u_kboard_objfwd" variable (:type ("Lisp_Kboard_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [77936 77978])
            ("type" variable (:type "int") nil [78063 78068])
            ("u_buffer_objfwd" variable (:type "int") nil [78189 78205])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [78287 78299])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [78306 78331]))                    
                  :type "union")
                  nil nil)) nil [78269 78340])
            ("data" variable (:type "int") nil [78414 78419])
            ("_UCHAR_T" variable (:constant-flag t) nil [79201 79209])
            ("UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [79210 79238])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [80240 80256])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80331 80333]))                  
                :type "int")
                nil [80323 80334])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80411 80413]))                  
                :type "int")
                nil [80405 80414])
            ("hi" variable (:type "int") nil [80545 80548])
            ("TYPE_RANGED_INTEGERP" variable (:constant-flag t) nil [80560 80580])
            ("Lisp_String" variable (:type "int") nil [81295 81307])
            ("Lisp_Misc_Overlay" variable (:type "int") nil [81491 81509])
            ("Lisp_Misc_Save_Value" variable (:type "int") nil [81593 81614])
            ("Lisp_Misc_Finalizer" variable (:type "int") nil [81698 81718])
            ("EQ" variable (:type "int") nil [81911 81938])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [82016 82036])
            ("false" variable (:type "int") nil [82383 82389])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82721 82723])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82724 82750]))                  
                :type "int")
                nil [82706 82751])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82818 82820])
                    ("" variable (:type ("PVEC_PROCESS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82821 82834]))                  
                :type "int")
                nil [82803 82835])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82901 82903])
                    ("" variable (:type ("PVEC_WINDOW" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82904 82916]))                  
                :type "int")
                nil [82886 82917])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82985 82987])
                    ("" variable (:type ("PVEC_TERMINAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82988 83002]))                  
                :type "int")
                nil [82970 83003])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83067 83069])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83070 83080]))                  
                :type "int")
                nil [83052 83081])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83149 83151])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83152 83166]))                  
                :type "int")
                nil [83134 83167])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83233 83235])
                    ("" variable (:type ("PVEC_BUFFER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83236 83248]))                  
                :type "int")
                nil [83218 83249])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83320 83322])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83323 83339]))                  
                :type "int")
                nil [83305 83340])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83415 83417])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83418 83438]))                  
                :type "int")
                nil [83400 83439])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83511 83513])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83514 83531]))                  
                :type "int")
                nil [83496 83532])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83597 83599])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83600 83611]))                  
                :type "int")
                nil [83582 83612])
            ("EQ" variable (:type "int") nil [83710 83734])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83869 83871]))                  
                :type "int")
                nil [83854 83872])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83932 83941])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83945 83953])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83955 83962])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83963 83965]))                  
                :type "int")
                nil [83920 83966])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84035 84065])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84115 84139])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84190 84214])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84275 84286])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84288 84297])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84298 84300]))                  
                :type "int")
                nil [84263 84301])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84365 84383])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84385 84394])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84395 84403]))                  
                :type "int")
                nil [84353 84405])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84463 84472])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84474 84481])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84482 84484]))                  
                :type "int")
                nil [84451 84485])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84545 84556])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84558 84567])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84568 84570]))                  
                :type "int")
                nil [84533 84571])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84636 84653])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84655 84670])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84671 84673]))                  
                :type "int")
                nil [84624 84674])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84841 84843]))                  
                :type "int")
                nil [84834 84844])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84883 84885]))                  
                :type "int")
                nil [84875 84886])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84910 84918])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84919 84921]))                  
                :type "int")
                nil [84889 84922])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85004 85014])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85016 85026])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85027 85029]))                  
                :type "int")
                nil [84992 85030])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BUFFERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85090 85101])
                    ("" variable (:type ("Qbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85103 85112])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85113 85115]))                  
                :type "int")
                nil [85078 85116])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("WINDOWP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85176 85187])
                    ("" variable (:type ("Qwindowp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85189 85198])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85199 85201]))                  
                :type "int")
                nil [85164 85202])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NATNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85378 85389])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85391 85402])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85403 85405]))                  
                :type "int")
                nil [85366 85406])
            ("CHECK_RANGED_INTEGER" variable (:constant-flag t) nil [85418 85438])
            ("CHECK_TYPE_RANGED_INTEGER" variable (:constant-flag t) nil [85801 85826])
            ("CHECK_NUMBER_COERCE_MARKER" variable (:constant-flag t) nil [86071 86097])
            ("extract_float" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86368 86370]))                  
                :type "int")
                nil [86353 86371])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86441 86452])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86454 86463])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86464 86466]))                  
                :type "int")
                nil [86429 86467])
            ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" variable (:constant-flag t) nil [86479 86514])
            ("tmp" variable
               (:default-value "XCAR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86905 86932])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86949 86953]))                  
                :type "int")
                nil [86935 86954])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86966 86968])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86969 86973]))                  
                :type "int")
                nil [86957 86974])
            ("tmp" variable
               (:default-value "XCDR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87027 87054])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87071 87075]))                  
                :type "int")
                nil [87057 87076])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87088 87090])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87091 87095]))                  
                :type "int")
                nil [87079 87096])
            ("DEFUN" variable (:constant-flag t) nil [89061 89066])
            ("functionp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89458 89462]))                  
                :type "int")
                nil [89447 89463])
            ("CALLMANY" variable (:constant-flag t) nil [89746 89754])
            ("CALLN" variable (:constant-flag t) nil [90099 90104])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [91304 91315])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [91476 91493])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [91658 91669])
            ("DEFVAR_INT" variable (:constant-flag t) nil [91831 91841])
            ("DEFVAR_BUFFER_DEFAULTS" variable (:constant-flag t) nil [92002 92024])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [92206 92219])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [92889 92917])
            ("sys_setjmp" variable (:constant-flag t) nil [92927 92937])
            ("sys_longjmp" variable (:constant-flag t) nil [92961 92972])
            ("CHAR_BIT" variable (:type "int") nil [94619 94628])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94678 94687])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94708 94720]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94694 94721])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94728 94744]))                    
                  :type "struct")
                  nil nil)) nil [94633 94758])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94808 94817])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [94838 94845]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94824 94846])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [94853 94863]))                    
                  :type "struct")
                  nil nil)) nil [94763 94881])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94931 94940])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [94961 94965]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94947 94966])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [94973 94981]))                    
                  :type "struct")
                  nil nil)) nil [94886 94999])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95049 95058])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [95079 95084]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [95065 95085]))                    
                  :type "struct")
                  nil nil)) nil [95004 95104])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95154 95163])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95231 95268])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95231 95268])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95231 95268]))                    
                  :type "struct")
                  nil nil)) nil [95109 95279])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95329 95338])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95345 95371])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95378 95399])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95406 95424])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95431 95447]))                    
                  :type "struct")
                  nil nil)) nil [95284 95457])
            ("specpdl" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("specbinding" type (:type "union") nil nil))
                nil [95464 95498])
            ("specpdl_ptr" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("specbinding" type (:type "union") nil nil))
                nil [95499 95537])
            ("specpdl_size" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [95538 95568])
            ("specpdl" variable (:type "int") nil [95633 95641])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [96849 96871])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96874 96896])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96899 96915])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96918 96939])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96942 96967])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97300 97326])
            ("bytecode_dest" variable (:type "int") nil [97329 97347])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [97492 97508])
            ("lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [97511 97537])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [97540 97559])
            ("poll_suppress_count" variable (:type "int") nil [97562 97586])
            ("interrupt_input_blocked" variable (:type "int") nil [97589 97617])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97622 97660])
            ("stack_bottom" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [97755 97781])
            ("pending_signals" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [98616 98653])
            ("QUIT" variable (:constant-flag t) nil [98701 98705])
            ("QUITP" variable (:constant-flag t) nil [98951 98956])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99004 99045])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99046 99084])
            ("window" type
               (:prototype t
                :type "struct")
                nil [99229 99243])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [99244 99257])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99510 99521])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99523 99533])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99534 99541])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99542 99547])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99548 99562])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99564 99569]))                  
                :type "int")
                nil [99502 99570])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99718 99720])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99721 99735])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99740 99744])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99745 99749]))                  
                :type "int")
                nil [99709 99750])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99859 99861])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99862 99876])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99881 99886])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99890 99894]))                  
                :type "int")
                nil [99850 99895])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [100080 100100])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100189 100203])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [100298 100310])
            ("found" variable (:type "int") nil [100516 100522])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100658 100672])
            ("intervals" variable (:type "int") nil [100783 100793])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [100914 100928])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [101134 101147])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [101247 101261])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101506 101524])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101699 101719])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101844 101864])
            ("INTEGER_TO_CONS" variable (:constant-flag t) nil [102465 102480])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [102936 102951])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [104489 104504])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [104718 104734])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105308 105386])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105308 105386])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105308 105386])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109520 109554])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [109636 109676])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [111881 111923])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111924 111955])
            ("stack_base" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111956 111987])
            ("consing_since_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111988 112022])
            ("gc_relative_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [112023 112062])
            ("memory_full_cons_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [112063 112107])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112685 112700])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112702 112717]))                  
                :type "int")
                nil [112678 112719])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112807 112822])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112824 112839])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112841 112856]))                  
                :type "int")
                nil [112800 112858])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112959 112974])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112976 112991])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112995 113010])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113012 113027]))                  
                :type "int")
                nil [112952 113029])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113588 113592])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113593 113605]))                  
                :type "int")
                nil [113567 113607])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114354 114358])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114359 114371]))                  
                :type "int")
                nil [114334 114373])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114545 114549])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114550 114562]))                  
                :type "int")
                nil [114532 114564])
            ("v" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [115101 115115])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [115118 115140])
            ("p" variable
               (:default-value "allocate_vector (size)"
                :type "int")
                nil [115144 115171])
            ("v" variable (:type "int") nil [115202 115204])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [115337 115393])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [115396 115439])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [115515 115529])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [115553 115573])
            ("v" variable (:type "int") nil [115583 115585])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [115832 115853])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [116168 116196])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116361 116388])
            ("__malloc_extra_blocks" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [117674 117710])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118942 118985])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [119024 119043])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [119097 119120])
            ("Lisp_Object" function (:type "int") nil [119332 119361])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [119385 119408])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [120472 120523])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121030 121034])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121035 121047]))                  
                :type "int")
                nil [121020 121049])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121136 121140])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121141 121153]))                  
                :type "int")
                nil [121117 121155])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121185 121220])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121221 121251])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121252 121291])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121292 121329])
            ("handlerlist" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [121330 121365])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121782 121790]))                  
                :type "int")
                nil [121768 121838])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121961 121974])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121975 121980]))                  
                :type "int")
                nil [121952 121981])
            ("Lisp_Object" function (:type "int") nil [123148 123177])
            ("Lisp_Object" function (:type "int") nil [123326 123348])
            ("Lisp_Object" function (:type "int") nil [123363 123392])
            ("Lisp_Object" function (:type "int") nil [123441 123470])
            ("Lisp_Object" function (:type "int") nil [123498 123527])
            ("Lisp_Object" function (:type "int") nil [123576 123618])
            ("Lisp_Object" function (:type "int") nil [123659 123688])
            ("Lisp_Object" function (:type "int") nil [123741 123783])
            ("Lisp_Object" function (:type "int") nil [123829 123884])
            ("re_registers" type
               (:prototype t
                :type "struct")
                nil [129220 129240])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129580 129587])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129588 129595])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129596 129601]))                  
                :type "int")
                nil [129552 129602])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129733 129740])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129741 129748])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129749 129768]))                  
                :type "int")
                nil [129705 129769])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130621 130657])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130658 130697])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131135 131174])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [131175 131209])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [131245 131271])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131572 131608])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [132818 132845])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [132846 132870])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [133024 133088])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [133024 133088])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133662 133689])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133754 133779])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [133841 133867])
            ("IS_DAEMON" variable (:constant-flag t) nil [134045 134054])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [134085 134099])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [134342 134378])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [134448 134482])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [134541 134573])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [135114 135130])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [137410 137434])
            ("terminal" type
               (:prototype t
                :type "struct")
                nil [137467 137483])
            ("false" variable (:type "int") nil [137669 137675])
            ("NO_INLINE" variable (:type "int") nil [138511 138521])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [139693 139725])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [140594 140649])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [140650 140707])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [141585 141621])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [141880 141910])
            ("immediate_quit" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [141953 141980])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [142471 142488])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [142528 142545])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [142811 142843])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142854 142859])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142860 142874])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142876 142881]))                  
                :type "int")
                nil [142846 142885])
            ("len" variable (:type "int") nil [142902 142906])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [143143 143147])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [143148 143160]))                  
                :type "int")
                nil [143125 143162])
            ("eabs" variable (:constant-flag t) nil [143523 143527])
            ("make_fixnum_or_float" variable (:constant-flag t) nil [143656 143676])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [144018 144033])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [144151 144163])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [144262 144273])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [144603 144615])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [145079 145097])
            ("SAFE_FREE" variable (:constant-flag t) nil [145331 145340])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [145609 145631])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [146413 146429])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [147174 147196])
            ("s" variable (:type ("Lisp_Cons" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [147525 147544])
            ("d" variable (:type "double") nil [147547 147556])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [147557 147568])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [147569 147577])
            ("s" variable (:type ("Lisp_String" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [147607 147628])
            ("d" variable (:type "double") nil [147631 147640])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [147641 147652])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [147653 147661])
            ("STACK_CONS" variable (:constant-flag t) nil [148388 148398])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [148485 148499])
            ("AUTO_CONS" variable (:constant-flag t) nil [148848 148857])
            ("AUTO_LIST1" variable (:constant-flag t) nil [148919 148929])
            ("AUTO_LIST2" variable (:constant-flag t) nil [149027 149037])
            ("AUTO_LIST3" variable (:constant-flag t) nil [149182 149192])
            ("AUTO_LIST4" variable (:constant-flag t) nil [149357 149367])
            ("AUTO_STRING" variable (:constant-flag t) nil [149896 149907])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [150320 150340])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [150772 150785])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [151263 151283])
            ("object" variable
               (:default-value "Findirect_function (object, Qt)"
                :type "int")
                nil [151879 151920])
            ("UNEVALLED" variable (:type "int") nil [152284 152294])
            ("true" variable (:type "int") nil [152337 152342])
            ("car" variable
               (:default-value "XCAR (object)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [152382 152414])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("car" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152453 152457])
                    ("" variable (:type ("Qclosure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152458 152467]))                  
                :type "int")
                nil [152449 152468])
            ("false" variable (:type "int") nil [152493 152499]))          
      :file "lisp.h"
      :pointmax 152548
      :fsize 152553
      :lastmodtime '(22515 19044 762481 250000)
      :unmatched-syntax '((symbol 152503 . 152520) (close-paren 152500 . 152501) (RETURN 152486 . 152492) (ELSE 152477 . 152481) (close-paren 152473 . 152474) (punctuation 152447 . 152448) (punctuation 152446 . 152447) (semantic-list 152431 . 152445) (symbol 152428 . 152430) (RETURN 152421 . 152427) (open-paren 152374 . 152375) (close-paren 152368 . 152369) (semantic-list 152360 . 152368) (symbol 152354 . 152359) (open-paren 152353 . 152354) (IF 152350 . 152352) (ELSE 152345 . 152349) (RETURN 152330 . 152336) (close-paren 152324 . 152325) (semantic-list 152316 . 152324) (symbol 152306 . 152315) (open-paren 152305 . 152306) (IF 152302 . 152304) (ELSE 152297 . 152301) (punctuation 152282 . 152283) (punctuation 152281 . 152282) (symbol 152272 . 152280) (punctuation 152271 . 152272) (punctuation 152270 . 152271) (close-paren 152269 . 152270) (symbol 152263 . 152269) (open-paren 152262 . 152263) (symbol 152256 . 152261) (RETURN 152249 . 152255) (close-paren 152243 . 152244) (semantic-list 152235 . 152243) (symbol 152229 . 152234) (open-paren 152228 . 152229) (IF 152225 . 152227) (close-paren 152220 . 152221) (semantic-list 151982 . 152215) (semantic-list 151931 . 151980) (IF 151928 . 151930) (open-paren 151871 . 151872) (close-paren 151865 . 151866) (semantic-list 151846 . 151865) (symbol 151841 . 151845) (semantic-list 151856 . 151864) (punctuation 151840 . 151841) (punctuation 151838 . 151839) (punctuation 151837 . 151838) (semantic-list 151828 . 151836) (symbol 151820 . 151827) (open-paren 151819 . 151820) (IF 151816 . 151818) (open-paren 151812 . 151813) (close-paren 151810 . 151811) (symbol 151804 . 151810) (symbol 151792 . 151803) (open-paren 151791 . 151792) (symbol 151781 . 151790) (BOOL 151776 . 151780) (symbol 151769 . 151775) (close-paren 151766 . 151767) (punctuation 151764 . 151765) (close-paren 151763 . 151764) (open-paren 151762 . 151763) (symbol 151745 . 151761) (close-paren 151739 . 151740) (semantic-list 151665 . 151739) (punctuation 151663 . 151664) (punctuation 151662 . 151663) (semantic-list 151566 . 151655) (open-paren 151565 . 151566) (IF 151562 . 151564) (open-paren 151558 . 151559) (close-paren 151556 . 151557) (VOID 151552 . 151556) (open-paren 151551 . 151552) (symbol 151542 . 151550) (VOID 151537 . 151541) (symbol 151530 . 151536) (punctuation 148179 . 148180) (close-paren 148178 . 148179) (close-paren 148174 . 148175) (number 148173 . 148174) (punctuation 148171 . 148172) (punctuation 148170 . 148171) (symbol 148158 . 148169) (punctuation 148156 . 148157) (semantic-list 148133 . 148155) (symbol 148125 . 148132) (punctuation 148123 . 148124) (punctuation 148122 . 148123) (symbol 148089 . 148118) (punctuation 148088 . 148089) (punctuation 148086 . 148087) (punctuation 148085 . 148086) (symbol 148067 . 148081) (open-paren 148066 . 148067) (punctuation 148064 . 148065) (symbol 148047 . 148063) (punctuation 148041 . 148042) (close-paren 148040 . 148041) (number 148039 . 148040) (punctuation 148037 . 148038) (punctuation 148036 . 148037) (symbol 148024 . 148035) (punctuation 148022 . 148023) (semantic-list 148001 . 148021) (symbol 147993 . 148000) (punctuation 147991 . 147992) (punctuation 147990 . 147991) (symbol "false" 147959 . 147981) (open-paren 147958 . 147959) (punctuation 147956 . 147957) (symbol 147941 . 147955) (open-paren 147935 . 147936) (ENUM 147928 . 147932) (punctuation 147663 . 147664) (close-paren 147662 . 147663) (open-paren 147603 . 147604) (symbol 147588 . 147602) (UNION 147582 . 147587) (punctuation 147579 . 147580) (close-paren 147578 . 147579) (open-paren 147521 . 147522) (symbol 147508 . 147520) (UNION 147502 . 147507) (punctuation 147414 . 147415) (close-paren 147413 . 147414) (symbol 147407 . 147412) (punctuation 147405 . 147406) (symbol 147375 . 147404) (open-paren 147373 . 147374) (ENUM 147368 . 147372) (close-paren 147085 . 147086) (close-paren 147084 . 147085) (number 147083 . 147084) (punctuation 147081 . 147082) (number 147080 . 147081) (punctuation 147078 . 147079) (number 147077 . 147078) (open-paren 147076 . 147077) (symbol 147064 . 147075) (punctuation 147062 . 147063) (punctuation 147060 . 147061) (punctuation 147059 . 147060) (symbol 147049 . 147058) (symbol 147041 . 147048) (punctuation 147040 . 147041) (punctuation 147038 . 147039) (punctuation 147037 . 147038) (symbol "6" 147028 . 147036) (symbol 147020 . 147027) (punctuation 147018 . 147019) (punctuation 147017 . 147018) (punctuation 144007 . 144008) (close-paren 144006 . 144007) (semantic-list 144003 . 144006) (open-paren 144002 . 144003) (symbol 143981 . 144001) (close-paren 143979 . 143980) (symbol 143973 . 143979) (open-paren 143972 . 143973) (symbol 143957 . 143971) (punctuation 143956 . 143957) (VOID 143951 . 143955) (EXTERN 143944 . 143950) (punctuation 143941 . 143942) (close-paren 143940 . 143941) (number 143935 . 143939) (punctuation 143933 . 143934) (number 143930 . 143932) (punctuation 143928 . 143929) (symbol 143917 . 143927) (open-paren 143915 . 143916) (symbol 143904 . 143914) (ENUM 143899 . 143903) (punctuation 143257 . 143258) (close-paren 143256 . 143257) (VOID 143252 . 143256) (open-paren 143251 . 143252) (symbol 143234 . 143250) (VOID 143229 . 143233) (EXTERN 143222 . 143228) (close-paren 143163 . 143164) (semantic-list 143155 . 143160) (RETURN 143118 . 143124) (open-paren 143045 . 143046) (close-paren 143043 . 143044) (symbol 143040 . 143043) (punctuation 143039 . 143040) (CHAR 143034 . 143038) (CONST 143028 . 143033) (open-paren 143027 . 143028) (symbol 143019 . 143026) (punctuation 143017 . 143018) (CHAR 143012 . 143016) (symbol 143005 . 143011) (punctuation 143002 . 143003) (close-paren 143001 . 143002) (symbol 142992 . 143001) (punctuation 142990 . 142991) (punctuation 142989 . 142990) (CHAR 142984 . 142988) (CONST 142978 . 142983) (open-paren 142977 . 142978) (symbol 142960 . 142976) (punctuation 142959 . 142960) (CHAR 142954 . 142958) (EXTERN 142947 . 142953) (punctuation 142944 . 142945) (close-paren 142943 . 142944) (punctuation 142942 . 142943) (CHAR 142937 . 142941) (CONST 142931 . 142936) (open-paren 142930 . 142931) (symbol 142922 . 142929) (VOID 142917 . 142921) (EXTERN 142910 . 142916) (close-paren 142907 . 142908) (punctuation 142900 . 142901) (symbol 142895 . 142899) (RETURN 142888 . 142894) (number 142882 . 142883) (punctuation 142880 . 142881) (semantic-list 142866 . 142874) (open-paren 142807 . 142808) (close-paren 142805 . 142806) (symbol 142799 . 142805) (symbol 142787 . 142798) (punctuation 142785 . 142786) (symbol 142781 . 142785) (punctuation 142780 . 142781) (CHAR 142775 . 142779) (open-paren 142774 . 142775) (symbol 142763 . 142773) (punctuation 142761 . 142762) (CHAR 142756 . 142760) (symbol 142749 . 142755) (punctuation 142591 . 142592) (close-paren 142590 . 142591) (punctuation 142589 . 142590) (CONST 142583 . 142588) (CHAR 142578 . 142582) (punctuation 142576 . 142577) (punctuation 142575 . 142576) (punctuation 142574 . 142575) (CHAR 142569 . 142573) (open-paren 142568 . 142569) (symbol 142558 . 142567) (VOID 142553 . 142557) (EXTERN 142546 . 142552) (close-paren 142526 . 142527) (symbol 142515 . 142526) (open-paren 142514 . 142515) (symbol 142502 . 142513) (punctuation 142501 . 142502) (CHAR 142496 . 142500) (EXTERN 142489 . 142495) (close-paren 142469 . 142470) (punctuation 142468 . 142469) (CHAR 142463 . 142467) (CONST 142457 . 142462) (open-paren 142456 . 142457) (symbol 142448 . 142455) (punctuation 142447 . 142448) (CHAR 142442 . 142446) (EXTERN 142435 . 142441) (punctuation 142432 . 142433) (close-paren 142431 . 142432) (symbol 142422 . 142431) (punctuation 142420 . 142421) (symbol 142411 . 142420) (punctuation 142409 . 142410) (symbol 142400 . 142409) (punctuation 142398 . 142399) (punctuation 142397 . 142398) (symbol 142387 . 142396) (punctuation 142385 . 142386) (punctuation 142384 . 142385) (VOID 142379 . 142383) (open-paren 142378 . 142379) (symbol 142370 . 142377) (punctuation 142369 . 142370) (VOID 142364 . 142368) (EXTERN 142357 . 142363) (punctuation 142355 . 142356) (close-paren 142354 . 142355) (semantic-list 142349 . 142354) (open-paren 142348 . 142349) (symbol 142327 . 142347) (close-paren 142323 . 142324) (symbol 142314 . 142323) (punctuation 142312 . 142313) (symbol 142303 . 142312) (punctuation 142301 . 142302) (punctuation 142300 . 142301) (VOID 142295 . 142299) (open-paren 142294 . 142295) (symbol 142284 . 142293) (punctuation 142283 . 142284) (VOID 142278 . 142282) (EXTERN 142271 . 142277) (punctuation 142269 . 142270) (close-paren 142268 . 142269) (semantic-list 142263 . 142268) (open-paren 142262 . 142263) (symbol 142240 . 142261) (close-paren 142238 . 142239) (symbol 142229 . 142238) (punctuation 142227 . 142228) (symbol 142218 . 142227) (open-paren 142217 . 142218) (symbol 142208 . 142216) (punctuation 142207 . 142208) (VOID 142202 . 142206) (EXTERN 142195 . 142201) (punctuation 142193 . 142194) (close-paren 142192 . 142193) (punctuation 142191 . 142192) (VOID 142186 . 142190) (open-paren 142185 . 142186) (symbol 142179 . 142184) (VOID 142174 . 142178) (EXTERN 142167 . 142173) (punctuation 142165 . 142166) (close-paren 142164 . 142165) (semantic-list 142161 . 142164) (open-paren 142160 . 142161) (symbol 142139 . 142159) (close-paren 142137 . 142138) (symbol 142131 . 142137) (punctuation 142129 . 142130) (punctuation 142128 . 142129) (VOID 142123 . 142127) (open-paren 142122 . 142123) (symbol 142113 . 142121) (punctuation 142112 . 142113) (VOID 142107 . 142111) (EXTERN 142100 . 142106) (punctuation 142098 . 142099) (close-paren 142097 . 142098) (semantic-list 142094 . 142097) (open-paren 142093 . 142094) (symbol 142071 . 142092) (close-paren 142069 . 142070) (symbol 142063 . 142069) (open-paren 142062 . 142063) (symbol 142054 . 142061) (punctuation 142053 . 142054) (VOID 142048 . 142052) (EXTERN 142041 . 142047) (punctuation 142039 . 142040) (close-paren 142038 . 142039) (semantic-list 142035 . 142038) (open-paren 142034 . 142035) (symbol 142012 . 142033) (close-paren 142010 . 142011) (symbol 142004 . 142010) (open-paren 142003 . 142004) (symbol 141995 . 142002) (punctuation 141994 . 141995) (VOID 141989 . 141993) (EXTERN 141982 . 141988) (punctuation 141878 . 141879) (close-paren 141877 . 141878) (open-paren 141876 . 141877) (symbol 141867 . 141876) (CHAR 141862 . 141866) (EXTERN 141855 . 141861) (punctuation 141853 . 141854) (close-paren 141852 . 141853) (open-paren 141851 . 141852) (symbol 141843 . 141851) (CHAR 141838 . 141842) (EXTERN 141831 . 141837) (punctuation 141692 . 141693) (close-paren 141691 . 141692) (VOID 141687 . 141691) (open-paren 141686 . 141687) (symbol 141669 . 141685) (VOID 141664 . 141668) (EXTERN 141657 . 141663) (punctuation 141655 . 141656) (close-paren 141654 . 141655) (symbol 141648 . 141654) (open-paren 141647 . 141648) (symbol 141634 . 141646) (VOID 141629 . 141633) (EXTERN 141622 . 141628) (punctuation 140741 . 140742) (close-paren 140740 . 140741) (VOID 140736 . 140740) (open-paren 140735 . 140736) (symbol 140720 . 140734) (VOID 140715 . 140719) (EXTERN 140708 . 140714) (punctuation 140002 . 140003) (close-paren 140001 . 140002) (VOID 139997 . 140001) (open-paren 139996 . 139997) (symbol 139986 . 139995) (VOID 139981 . 139985) (EXTERN 139974 . 139980) (punctuation 139972 . 139973) (close-paren 139971 . 139972) (VOID 139967 . 139971) (open-paren 139966 . 139967) (symbol 139953 . 139965) (VOID 139948 . 139952) (EXTERN 139941 . 139947) (punctuation 139912 . 139913) (close-paren 139911 . 139912) (VOID 139907 . 139911) (open-paren 139906 . 139907) (symbol 139889 . 139905) (VOID 139884 . 139888) (EXTERN 139877 . 139883) (punctuation 139844 . 139845) (close-paren 139843 . 139844) (number 139842 . 139843) (punctuation 139840 . 139841) (number 139839 . 139840) (open-paren 139838 . 139839) (symbol 139814 . 139837) (close-paren 139810 . 139811) (punctuation 139809 . 139810) (punctuation 139808 . 139809) (punctuation 139807 . 139808) (punctuation 139805 . 139806) (symbol 139800 . 139805) (punctuation 139799 . 139800) (CHAR 139794 . 139798) (CONST 139788 . 139793) (open-paren 139787 . 139788) (symbol 139781 . 139786) (VOID 139776 . 139780) (EXTERN 139759 . 139765) (punctuation 139757 . 139758) (close-paren 139756 . 139757) (VOID 139752 . 139756) (open-paren 139751 . 139752) (symbol 139738 . 139750) (VOID 139733 . 139737) (EXTERN 139726 . 139732) (punctuation 139664 . 139665) (close-paren 139663 . 139664) (symbol 139652 . 139663) (punctuation 139650 . 139651) (BOOL 139646 . 139650) (punctuation 139599 . 139600) (symbol 139588 . 139599) (punctuation 139586 . 139587) (symbol 139575 . 139586) (punctuation 139528 . 139529) (symbol 139517 . 139528) (punctuation 139515 . 139516) (symbol 139504 . 139515) (open-paren 139503 . 139504) (symbol 139478 . 139502) (symbol 139466 . 139477) (EXTERN 139459 . 139465) (punctuation 139457 . 139458) (close-paren 139456 . 139457) (VOID 139452 . 139456) (open-paren 139451 . 139452) (symbol 139437 . 139450) (VOID 139432 . 139436) (EXTERN 139425 . 139431) (punctuation 139395 . 139396) (close-paren 139394 . 139395) (VOID 139390 . 139394) (open-paren 139389 . 139390) (symbol 139377 . 139388) (VOID 139372 . 139376) (EXTERN 139365 . 139371) (punctuation 139337 . 139338) (close-paren 139336 . 139337) (VOID 139332 . 139336) (open-paren 139331 . 139332) (symbol 139314 . 139330) (VOID 139309 . 139313) (EXTERN 139302 . 139308) (punctuation 139300 . 139301) (close-paren 139299 . 139300) (INT 139296 . 139299) (open-paren 139295 . 139296) (symbol 139277 . 139294) (symbol 139265 . 139276) (EXTERN 139258 . 139264) (punctuation 139256 . 139257) (close-paren 139255 . 139256) (VOID 139251 . 139255) (open-paren 139250 . 139251) (symbol 139231 . 139249) (VOID 139226 . 139230) (EXTERN 139219 . 139225) (punctuation 139186 . 139187) (close-paren 139185 . 139186) (VOID 139181 . 139185) (open-paren 139180 . 139181) (symbol 139166 . 139179) (VOID 139161 . 139165) (EXTERN 139154 . 139160) (punctuation 139124 . 139125) (close-paren 139123 . 139124) (symbol 139112 . 139123) (punctuation 139110 . 139111) (symbol 139099 . 139110) (punctuation 139097 . 139098) (symbol 139086 . 139097) (punctuation 139084 . 139085) (symbol 139073 . 139084) (open-paren 139072 . 139073) (symbol 139060 . 139071) (INT 139056 . 139059) (EXTERN 139049 . 139055) (punctuation 139047 . 139048) (close-paren 139046 . 139047) (VOID 139042 . 139046) (open-paren 139041 . 139042) (symbol 139024 . 139040) (VOID 139019 . 139023) (EXTERN 139012 . 139018) (punctuation 139010 . 139011) (close-paren 139009 . 139010) (punctuation 139008 . 139009) (symbol 139001 . 139007) (STRUCT 138994 . 139000) (open-paren 138993 . 138994) (symbol 138979 . 138992) (VOID 138974 . 138978) (EXTERN 138967 . 138973) (punctuation 138965 . 138966) (close-paren 138964 . 138965) (symbol 138953 . 138964) (open-paren 138952 . 138953) (symbol 138940 . 138951) (VOID 138935 . 138939) (EXTERN 138928 . 138934) (punctuation 138926 . 138927) (close-paren 138925 . 138926) (symbol 138914 . 138925) (open-paren 138913 . 138914) (symbol 138903 . 138912) (VOID 138898 . 138902) (EXTERN 138891 . 138897) (punctuation 138889 . 138890) (close-paren 138888 . 138889) (VOID 138884 . 138888) (open-paren 138883 . 138884) (symbol 138866 . 138882) (VOID 138861 . 138865) (EXTERN 138854 . 138860) (punctuation 138851 . 138852) (close-paren 138850 . 138851) (punctuation 138849 . 138850) (CONST 138843 . 138848) (CHAR 138838 . 138842) (open-paren 138837 . 138838) (symbol 138824 . 138836) (VOID 138819 . 138823) (EXTERN 138812 . 138818) (punctuation 138810 . 138811) (close-paren 138809 . 138810) (symbol 138800 . 138809) (punctuation 138798 . 138799) (punctuation 138797 . 138798) (CONST 138791 . 138796) (VOID 138786 . 138790) (punctuation 138784 . 138785) (INT 138781 . 138784) (open-paren 138780 . 138781) (symbol 138764 . 138779) (symbol 138754 . 138763) (EXTERN 138747 . 138753) (punctuation 138745 . 138746) (close-paren 138744 . 138745) (symbol 138735 . 138744) (punctuation 138733 . 138734) (punctuation 138732 . 138733) (CONST 138726 . 138731) (VOID 138721 . 138725) (punctuation 138719 . 138720) (INT 138716 . 138719) (open-paren 138715 . 138716) (symbol 138703 . 138714) (symbol 138693 . 138702) (EXTERN 138686 . 138692) (punctuation 138684 . 138685) (close-paren 138683 . 138684) (symbol 138674 . 138683) (punctuation 138672 . 138673) (punctuation 138671 . 138672) (VOID 138666 . 138670) (punctuation 138664 . 138665) (INT 138661 . 138664) (open-paren 138660 . 138661) (symbol 138649 . 138659) (symbol 138639 . 138648) (EXTERN 138632 . 138638) (punctuation 138630 . 138631) (close-paren 138629 . 138630) (INT 138626 . 138629) (open-paren 138625 . 138626) (symbol 138613 . 138624) (INT 138609 . 138612) (EXTERN 138602 . 138608) (punctuation 138600 . 138601) (close-paren 138599 . 138600) (semantic-list 138596 . 138599) (INT 138593 . 138596) (open-paren 138592 . 138593) (symbol 138581 . 138591) (INT 138577 . 138580) (EXTERN 138570 . 138576) (punctuation 138568 . 138569) (close-paren 138567 . 138568) (INT 138564 . 138567) (punctuation 138562 . 138563) (INT 138559 . 138562) (punctuation 138557 . 138558) (punctuation 138556 . 138557) (CHAR 138551 . 138555) (CONST 138545 . 138550) (open-paren 138544 . 138545) (symbol 138533 . 138543) (INT 138529 . 138532) (EXTERN 138522 . 138528) (close-paren 138509 . 138510) (VOID 138505 . 138509) (open-paren 138504 . 138505) (symbol 138492 . 138503) (VOID 138487 . 138491) (EXTERN 138470 . 138476) (punctuation 138468 . 138469) (close-paren 138467 . 138468) (INT 138464 . 138467) (open-paren 138463 . 138464) (symbol 138447 . 138462) (VOID 138442 . 138446) (EXTERN 138435 . 138441) (punctuation 138433 . 138434) (close-paren 138432 . 138433) (VOID 138428 . 138432) (open-paren 138427 . 138428) (symbol 138415 . 138426) (VOID 138410 . 138414) (EXTERN 138403 . 138409) (punctuation 138401 . 138402) (close-paren 138400 . 138401) (symbol 138391 . 138400) (punctuation 138389 . 138390) (punctuation 138388 . 138389) (VOID 138383 . 138387) (open-paren 138382 . 138383) (symbol 138370 . 138381) (VOID 138365 . 138369) (EXTERN 138358 . 138364) (punctuation 138356 . 138357) (close-paren 138355 . 138356) (VOID 138351 . 138355) (open-paren 138350 . 138351) (symbol 138339 . 138349) (symbol 138329 . 138338) (EXTERN 138322 . 138328) (punctuation 138320 . 138321) (close-paren 138319 . 138320) (INT 138316 . 138319) (punctuation 138314 . 138315) (INT 138311 . 138314) (punctuation 138309 . 138310) (INT 138306 . 138309) (open-paren 138305 . 138306) (symbol 138289 . 138304) (INT 138285 . 138288) (EXTERN 138278 . 138284) (punctuation 138276 . 138277) (close-paren 138275 . 138276) (INT 138272 . 138275) (open-paren 138271 . 138272) (symbol 138261 . 138270) (VOID 138256 . 138260) (EXTERN 138249 . 138255) (punctuation 138247 . 138248) (close-paren 138246 . 138247) (INT 138243 . 138246) (open-paren 138242 . 138243) (symbol 138226 . 138241) (VOID 138221 . 138225) (EXTERN 138214 . 138220) (punctuation 138212 . 138213) (close-paren 138211 . 138212) (VOID 138207 . 138211) (open-paren 138206 . 138207) (symbol 138186 . 138205) (VOID 138181 . 138185) (EXTERN 138174 . 138180) (punctuation 138172 . 138173) (close-paren 138171 . 138172) (VOID 138167 . 138171) (open-paren 138166 . 138167) (symbol 138147 . 138165) (VOID 138142 . 138146) (EXTERN 138135 . 138141) (punctuation 138133 . 138134) (close-paren 138132 . 138133) (punctuation 138131 . 138132) (symbol 138114 . 138130) (STRUCT 138107 . 138113) (open-paren 138106 . 138107) (symbol 138090 . 138105) (VOID 138085 . 138089) (EXTERN 138078 . 138084) (punctuation 138076 . 138077) (close-paren 138075 . 138076) (punctuation 138074 . 138075) (symbol 138057 . 138073) (STRUCT 138050 . 138056) (open-paren 138049 . 138050) (symbol 138034 . 138048) (VOID 138029 . 138033) (EXTERN 138022 . 138028) (punctuation 138020 . 138021) (close-paren 138019 . 138020) (VOID 138015 . 138019) (open-paren 138014 . 138015) (symbol 137996 . 138013) (VOID 137991 . 137995) (EXTERN 137984 . 137990) (punctuation 137982 . 137983) (close-paren 137981 . 137982) (VOID 137977 . 137981) (open-paren 137976 . 137977) (symbol 137964 . 137975) (VOID 137959 . 137963) (EXTERN 137952 . 137958) (punctuation 137950 . 137951) (close-paren 137949 . 137950) (VOID 137945 . 137949) (open-paren 137944 . 137945) (symbol 137931 . 137943) (VOID 137926 . 137930) (EXTERN 137919 . 137925) (punctuation 137917 . 137918) (close-paren 137916 . 137917) (VOID 137912 . 137916) (open-paren 137911 . 137912) (symbol 137889 . 137910) (VOID 137884 . 137888) (EXTERN 137877 . 137883) (punctuation 137875 . 137876) (close-paren 137874 . 137875) (symbol 137873 . 137874) (CHAR 137868 . 137872) (open-paren 137867 . 137868) (symbol 137856 . 137866) (VOID 137851 . 137855) (EXTERN 137844 . 137850) (punctuation 137842 . 137843) (close-paren 137841 . 137842) (VOID 137837 . 137841) (open-paren 137836 . 137837) (symbol 137809 . 137835) (punctuation 137808 . 137809) (CHAR 137803 . 137807) (EXTERN 137796 . 137802) (punctuation 137794 . 137795) (close-paren 137793 . 137794) (VOID 137789 . 137793) (open-paren 137788 . 137789) (symbol 137770 . 137787) (VOID 137765 . 137769) (EXTERN 137758 . 137764) (punctuation 137756 . 137757) (close-paren 137755 . 137756) (punctuation 137754 . 137755) (CONST 137748 . 137753) (punctuation 137747 . 137748) (CHAR 137742 . 137746) (punctuation 137740 . 137741) (punctuation 137739 . 137740) (CONST 137733 . 137738) (punctuation 137732 . 137733) (CHAR 137727 . 137731) (punctuation 137725 . 137726) (punctuation 137724 . 137725) (CONST 137718 . 137723) (CHAR 137713 . 137717) (open-paren 137712 . 137713) (symbol 137696 . 137711) (INT 137692 . 137695) (EXTERN 137685 . 137691) (close-paren 137676 . 137677) (RETURN 137662 . 137668) (open-paren 137660 . 137661) (close-paren 137658 . 137659) (VOID 137654 . 137658) (open-paren 137653 . 137654) (symbol 137623 . 137652) (BOOL 137618 . 137622) (symbol 137611 . 137617) (punctuation 137377 . 137378) (close-paren 137376 . 137377) (VOID 137372 . 137376) (open-paren 137371 . 137372) (symbol 137357 . 137370) (VOID 137352 . 137356) (EXTERN 137345 . 137351) (punctuation 137315 . 137316) (close-paren 137314 . 137315) (VOID 137310 . 137314) (open-paren 137309 . 137310) (symbol 137296 . 137308) (VOID 137291 . 137295) (EXTERN 137284 . 137290) (punctuation 137255 . 137256) (close-paren 137254 . 137255) (symbol 137243 . 137254) (punctuation 137241 . 137242) (symbol 137230 . 137241) (open-paren 137229 . 137230) (symbol 137200 . 137228) (VOID 137195 . 137199) (EXTERN 137188 . 137194) (punctuation 137155 . 137156) (close-paren 137154 . 137155) (VOID 137150 . 137154) (open-paren 137149 . 137150) (symbol 137136 . 137148) (VOID 137131 . 137135) (EXTERN 137124 . 137130) (punctuation 137122 . 137123) (close-paren 137121 . 137122) (symbol 137110 . 137121) (punctuation 137072 . 137073) (symbol 137061 . 137072) (punctuation 137059 . 137060) (symbol 137048 . 137059) (punctuation 137038 . 137039) (symbol 137029 . 137038) (punctuation 137027 . 137028) (symbol 137018 . 137027) (open-paren 137017 . 137018) (symbol 136994 . 137016) (VOID 136989 . 136993) (EXTERN 136982 . 136988) (punctuation 136980 . 136981) (close-paren 136979 . 136980) (symbol 136970 . 136979) (punctuation 136968 . 136969) (symbol 136959 . 136968) (open-paren 136958 . 136959) (symbol 136944 . 136957) (VOID 136939 . 136943) (EXTERN 136932 . 136938) (punctuation 136930 . 136931) (close-paren 136929 . 136930) (VOID 136925 . 136929) (open-paren 136924 . 136925) (symbol 136904 . 136923) (VOID 136899 . 136903) (EXTERN 136892 . 136898) (punctuation 136890 . 136891) (close-paren 136889 . 136890) (BOOL 136885 . 136889) (punctuation 136883 . 136884) (symbol 136872 . 136883) (punctuation 136870 . 136871) (symbol 136861 . 136870) (open-paren 136860 . 136861) (symbol 136846 . 136859) (VOID 136841 . 136845) (EXTERN 136834 . 136840) (punctuation 136832 . 136833) (close-paren 136831 . 136832) (symbol 136822 . 136831) (punctuation 136820 . 136821) (symbol 136811 . 136820) (open-paren 136810 . 136811) (symbol 136796 . 136809) (VOID 136791 . 136795) (EXTERN 136784 . 136790) (punctuation 136782 . 136783) (close-paren 136781 . 136782) (punctuation 136780 . 136781) (symbol 136773 . 136779) (STRUCT 136766 . 136772) (open-paren 136765 . 136766) (symbol 136746 . 136764) (VOID 136741 . 136745) (EXTERN 136734 . 136740) (punctuation 136705 . 136706) (close-paren 136704 . 136705) (VOID 136700 . 136704) (open-paren 136699 . 136700) (symbol 136684 . 136698) (VOID 136679 . 136683) (EXTERN 136672 . 136678) (punctuation 136670 . 136671) (close-paren 136669 . 136670) (VOID 136665 . 136669) (open-paren 136664 . 136665) (symbol 136652 . 136663) (VOID 136647 . 136651) (EXTERN 136640 . 136646) (punctuation 136609 . 136610) (close-paren 136608 . 136609) (symbol 136597 . 136608) (open-paren 136596 . 136597) (symbol 136576 . 136595) (symbol 136564 . 136575) (EXTERN 136557 . 136563) (punctuation 136555 . 136556) (close-paren 136554 . 136555) (punctuation 136553 . 136554) (symbol 136541 . 136552) (punctuation 136539 . 136540) (symbol 136530 . 136539) (punctuation 136528 . 136529) (symbol 136517 . 136528) (punctuation 136508 . 136509) (symbol 136497 . 136508) (punctuation 136495 . 136496) (symbol 136484 . 136495) (punctuation 136482 . 136483) (symbol 136471 . 136482) (open-paren 136470 . 136471) (symbol 136455 . 136469) (symbol 136443 . 136454) (EXTERN 136436 . 136442) (punctuation 136434 . 136435) (close-paren 136433 . 136434) (VOID 136429 . 136433) (open-paren 136428 . 136429) (symbol 136411 . 136427) (VOID 136406 . 136410) (EXTERN 136399 . 136405) (punctuation 136366 . 136367) (close-paren 136365 . 136366) (BOOL 136361 . 136365) (open-paren 136360 . 136361) (symbol 136341 . 136359) (INT 136337 . 136340) (EXTERN 136330 . 136336) (punctuation 136328 . 136329) (close-paren 136327 . 136328) (VOID 136323 . 136327) (open-paren 136322 . 136323) (symbol 136310 . 136321) (VOID 136305 . 136309) (EXTERN 136298 . 136304) (punctuation 136296 . 136297) (close-paren 136295 . 136296) (BOOL 136291 . 136295) (punctuation 136289 . 136290) (BOOL 136285 . 136289) (punctuation 136283 . 136284) (symbol 136272 . 136283) (open-paren 136271 . 136272) (symbol 136256 . 136270) (symbol 136244 . 136255) (EXTERN 136237 . 136243) (punctuation 136235 . 136236) (close-paren 136234 . 136235) (symbol 136223 . 136234) (open-paren 136222 . 136223) (symbol 136206 . 136221) (symbol 136194 . 136205) (EXTERN 136187 . 136193) (punctuation 136185 . 136186) (close-paren 136184 . 136185) (VOID 136180 . 136184) (open-paren 136179 . 136180) (symbol 136160 . 136178) (symbol 136141 . 136159) (ENUM 136136 . 136140) (EXTERN 136129 . 136135) (punctuation 136127 . 136128) (close-paren 136126 . 136127) (symbol 136101 . 136123) (punctuation 136054 . 136055) (symbol 136035 . 136054) (punctuation 135971 . 135972) (symbol 135952 . 135971) (open-paren 135897 . 135898) (symbol 135876 . 135894) (ENUM 135871 . 135875) (punctuation 135843 . 135844) (close-paren 135842 . 135843) (VOID 135838 . 135842) (open-paren 135837 . 135838) (symbol 135820 . 135836) (VOID 135815 . 135819) (EXTERN 135808 . 135814) (punctuation 135806 . 135807) (close-paren 135805 . 135806) (VOID 135801 . 135805) (open-paren 135800 . 135801) (symbol 135776 . 135799) (VOID 135771 . 135775) (EXTERN 135764 . 135770) (punctuation 135762 . 135763) (close-paren 135761 . 135762) (VOID 135757 . 135761) (open-paren 135756 . 135757) (symbol 135742 . 135755) (VOID 135737 . 135741) (EXTERN 135730 . 135736) (punctuation 135728 . 135729) (close-paren 135727 . 135728) (VOID 135723 . 135727) (open-paren 135722 . 135723) (symbol 135706 . 135721) (VOID 135701 . 135705) (EXTERN 135694 . 135700) (punctuation 135692 . 135693) (close-paren 135691 . 135692) (symbol 135680 . 135691) (punctuation 135678 . 135679) (BOOL 135674 . 135678) (punctuation 135672 . 135673) (punctuation 135671 . 135672) (punctuation 135670 . 135671) (CHAR 135665 . 135669) (punctuation 135663 . 135664) (INT 135660 . 135663) (punctuation 135658 . 135659) (INT 135655 . 135658) (punctuation 135653 . 135654) (INT 135650 . 135653) (open-paren 135649 . 135650) (symbol 135637 . 135648) (INT 135633 . 135636) (EXTERN 135626 . 135632) (punctuation 135560 . 135561) (close-paren 135559 . 135560) (symbol 135548 . 135559) (open-paren 135547 . 135548) (symbol 135518 . 135546) (VOID 135513 . 135517) (EXTERN 135506 . 135512) (punctuation 135504 . 135505) (close-paren 135503 . 135504) (VOID 135499 . 135503) (open-paren 135498 . 135499) (symbol 135482 . 135497) (VOID 135477 . 135481) (EXTERN 135470 . 135476) (punctuation 135468 . 135469) (close-paren 135467 . 135468) (INT 135464 . 135467) (open-paren 135463 . 135464) (symbol 135444 . 135462) (VOID 135439 . 135443) (EXTERN 135432 . 135438) (punctuation 135318 . 135319) (close-paren 135317 . 135318) (INT 135314 . 135317) (open-paren 135313 . 135314) (symbol 135281 . 135312) (VOID 135276 . 135280) (EXTERN 135269 . 135275) (punctuation 135267 . 135268) (close-paren 135266 . 135267) (INT 135263 . 135266) (open-paren 135262 . 135263) (symbol 135233 . 135261) (VOID 135228 . 135232) (EXTERN 135221 . 135227) (punctuation 134764 . 134765) (close-paren 134763 . 134764) (INT 134760 . 134763) (punctuation 134758 . 134759) (punctuation 134757 . 134758) (symbol 134744 . 134756) (STRUCT 134737 . 134743) (punctuation 134730 . 134731) (symbol 134719 . 134730) (punctuation 134717 . 134718) (BOOL 134713 . 134717) (punctuation 134711 . 134712) (INT 134708 . 134711) (punctuation 134706 . 134707) (INT 134703 . 134706) (punctuation 134701 . 134702) (symbol 134693 . 134701) (open-paren 134692 . 134693) (symbol 134664 . 134691) (INT 134660 . 134663) (EXTERN 134653 . 134659) (punctuation 134651 . 134652) (close-paren 134650 . 134651) (symbol 134639 . 134650) (open-paren 134638 . 134639) (symbol 134616 . 134637) (VOID 134611 . 134615) (EXTERN 134604 . 134610) (punctuation 134035 . 134036) (close-paren 134034 . 134035) (number 134033 . 134034) (open-paren 134032 . 134033) (symbol 134021 . 134032) (INT 134017 . 134020) (EXTERN 134010 . 134016) (punctuation 133582 . 133583) (close-paren 133581 . 133582) (symbol 133570 . 133581) (punctuation 133568 . 133569) (INT 133565 . 133568) (open-paren 133564 . 133565) (symbol 133548 . 133563) (VOID 133543 . 133547) (EXTERN 133536 . 133542) (punctuation 133534 . 133535) (close-paren 133533 . 133534) (INT 133530 . 133533) (open-paren 133529 . 133530) (symbol 133514 . 133528) (punctuation 133513 . 133514) (CHAR 133508 . 133512) (EXTERN 133501 . 133507) (close-paren 133492 . 133493) (open-paren 133491 . 133492) (close-paren 133489 . 133490) (VOID 133485 . 133489) (open-paren 133484 . 133485) (symbol 133453 . 133483) (VOID 133448 . 133452) (symbol 133441 . 133447) (close-paren 133439 . 133440) (open-paren 133438 . 133439) (close-paren 133436 . 133437) (VOID 133432 . 133436) (open-paren 133431 . 133432) (symbol 133396 . 133430) (VOID 133391 . 133395) (symbol 133384 . 133390) (close-paren 133382 . 133383) (open-paren 133381 . 133382) (close-paren 133379 . 133380) (VOID 133375 . 133379) (open-paren 133374 . 133375) (symbol 133361 . 133373) (VOID 133356 . 133360) (symbol 133349 . 133355) (punctuation 133145 . 133146) (close-paren 133144 . 133145) (INT 133141 . 133144) (punctuation 133139 . 133140) (INT 133136 . 133139) (open-paren 133135 . 133136) (symbol 133111 . 133134) (VOID 133106 . 133110) (EXTERN 133089 . 133095) (punctuation 133022 . 133023) (close-paren 133021 . 133022) (BOOL 133017 . 133021) (punctuation 133015 . 133016) (punctuation 133014 . 133015) (CHAR 133009 . 133013) (CONST 133003 . 133008) (punctuation 133001 . 133002) (punctuation 133000 . 133001) (CHAR 132995 . 132999) (CONST 132989 . 132994) (open-paren 132988 . 132989) (symbol 132972 . 132987) (symbol 132960 . 132971) (EXTERN 132953 . 132959) (punctuation 132788 . 132789) (close-paren 132787 . 132788) (VOID 132783 . 132787) (open-paren 132782 . 132783) (symbol 132768 . 132781) (VOID 132763 . 132767) (EXTERN 132756 . 132762) (punctuation 132754 . 132755) (close-paren 132753 . 132754) (symbol 132742 . 132753) (open-paren 132741 . 132742) (symbol 132719 . 132740) (VOID 132714 . 132718) (EXTERN 132707 . 132713) (punctuation 132705 . 132706) (close-paren 132704 . 132705) (symbol 132693 . 132704) (punctuation 132691 . 132692) (punctuation 132690 . 132691) (symbol 132684 . 132689) (STRUCT 132677 . 132683) (open-paren 132676 . 132677) (symbol 132660 . 132675) (symbol 132648 . 132659) (EXTERN 132641 . 132647) (punctuation 132639 . 132640) (close-paren 132638 . 132639) (symbol 132627 . 132638) (punctuation 132625 . 132626) (INT 132622 . 132625) (punctuation 132620 . 132621) (INT 132617 . 132620) (punctuation 132615 . 132616) (symbol 132604 . 132615) (open-paren 132603 . 132604) (symbol 132587 . 132602) (symbol 132575 . 132586) (EXTERN 132568 . 132574) (punctuation 132566 . 132567) (close-paren 132565 . 132566) (symbol 132554 . 132565) (punctuation 132552 . 132553) (symbol 132541 . 132552) (punctuation 132539 . 132540) (punctuation 132538 . 132539) (symbol 132526 . 132537) (open-paren 132525 . 132526) (symbol 132510 . 132524) (VOID 132505 . 132509) (EXTERN 132498 . 132504) (punctuation 132496 . 132497) (close-paren 132495 . 132496) (symbol 132484 . 132495) (punctuation 132482 . 132483) (symbol 132471 . 132482) (punctuation 132469 . 132470) (punctuation 132468 . 132469) (symbol 132462 . 132467) (STRUCT 132455 . 132461) (open-paren 132454 . 132455) (symbol 132436 . 132453) (VOID 132431 . 132435) (EXTERN 132424 . 132430) (punctuation 132394 . 132395) (close-paren 132393 . 132394) (VOID 132389 . 132393) (open-paren 132388 . 132389) (symbol 132373 . 132387) (VOID 132368 . 132372) (EXTERN 132361 . 132367) (punctuation 132359 . 132360) (close-paren 132358 . 132359) (symbol 132349 . 132358) (punctuation 132347 . 132348) (symbol 132338 . 132347) (punctuation 132336 . 132337) (symbol 132327 . 132336) (open-paren 132326 . 132327) (symbol 132308 . 132325) (BOOL 132303 . 132307) (EXTERN 132296 . 132302) (punctuation 132294 . 132295) (close-paren 132293 . 132294) (VOID 132289 . 132293) (open-paren 132288 . 132289) (symbol 132262 . 132287) (VOID 132257 . 132261) (EXTERN 132250 . 132256) (punctuation 132248 . 132249) (close-paren 132247 . 132248) (VOID 132243 . 132247) (open-paren 132242 . 132243) (symbol 132227 . 132241) (symbol 132217 . 132226) (EXTERN 132210 . 132216) (punctuation 132179 . 132180) (close-paren 132178 . 132179) (VOID 132174 . 132178) (open-paren 132173 . 132174) (symbol 132156 . 132172) (VOID 132151 . 132155) (EXTERN 132144 . 132150) (punctuation 132142 . 132143) (close-paren 132141 . 132142) (VOID 132137 . 132141) (open-paren 132136 . 132137) (symbol 132119 . 132135) (VOID 132114 . 132118) (EXTERN 132107 . 132113) (punctuation 132105 . 132106) (close-paren 132104 . 132105) (VOID 132100 . 132104) (open-paren 132099 . 132100) (symbol 132085 . 132098) (VOID 132080 . 132084) (EXTERN 132073 . 132079) (punctuation 132071 . 132072) (close-paren 132070 . 132071) (VOID 132066 . 132070) (open-paren 132065 . 132066) (symbol 132044 . 132064) (VOID 132039 . 132043) (EXTERN 132032 . 132038) (punctuation 132030 . 132031) (close-paren 132029 . 132030) (VOID 132025 . 132029) (open-paren 132024 . 132025) (symbol 132007 . 132023) (VOID 132002 . 132006) (EXTERN 131995 . 132001) (punctuation 131993 . 131994) (close-paren 131992 . 131993) (VOID 131988 . 131992) (open-paren 131987 . 131988) (symbol 131970 . 131986) (symbol 131958 . 131969) (EXTERN 131951 . 131957) (punctuation 131949 . 131950) (close-paren 131948 . 131949) (VOID 131944 . 131948) (open-paren 131943 . 131944) (symbol 131925 . 131942) (symbol 131913 . 131924) (EXTERN 131906 . 131912) (punctuation 131904 . 131905) (close-paren 131903 . 131904) (VOID 131899 . 131903) (open-paren 131898 . 131899) (symbol 131883 . 131897) (symbol 131871 . 131882) (EXTERN 131864 . 131870) (punctuation 131862 . 131863) (close-paren 131861 . 131862) (punctuation 131860 . 131861) (CHAR 131855 . 131859) (CONST 131849 . 131854) (punctuation 131847 . 131848) (symbol 131836 . 131847) (open-paren 131835 . 131836) (symbol 131816 . 131834) (VOID 131811 . 131815) (EXTERN 131804 . 131810) (punctuation 131802 . 131803) (close-paren 131801 . 131802) (symbol 131790 . 131801) (open-paren 131789 . 131790) (symbol 131774 . 131788) (VOID 131769 . 131773) (EXTERN 131762 . 131768) (punctuation 131760 . 131761) (close-paren 131759 . 131760) (BOOL 131755 . 131759) (open-paren 131754 . 131755) (symbol 131722 . 131753) (BOOL 131717 . 131721) (EXTERN 131710 . 131716) (punctuation 131708 . 131709) (close-paren 131707 . 131708) (VOID 131703 . 131707) (open-paren 131702 . 131703) (symbol 131662 . 131701) (BOOL 131657 . 131661) (EXTERN 131650 . 131656) (punctuation 131648 . 131649) (close-paren 131647 . 131648) (VOID 131643 . 131647) (open-paren 131642 . 131643) (symbol 131621 . 131641) (BOOL 131616 . 131620) (EXTERN 131609 . 131615) (punctuation 131501 . 131502) (close-paren 131500 . 131501) (VOID 131496 . 131500) (open-paren 131495 . 131496) (symbol 131474 . 131494) (VOID 131469 . 131473) (EXTERN 131462 . 131468) (punctuation 131460 . 131461) (close-paren 131459 . 131460) (punctuation 131458 . 131459) (INT 131454 . 131457) (punctuation 131452 . 131453) (symbol 131441 . 131452) (open-paren 131440 . 131441) (symbol 131425 . 131439) (symbol 131413 . 131424) (EXTERN 131406 . 131412) (punctuation 131404 . 131405) (close-paren 131403 . 131404) (symbol 131392 . 131403) (open-paren 131391 . 131392) (symbol 131376 . 131390) (symbol 131364 . 131375) (EXTERN 131357 . 131363) (punctuation 131243 . 131244) (close-paren 131242 . 131243) (VOID 131238 . 131242) (open-paren 131237 . 131238) (symbol 131222 . 131236) (VOID 131217 . 131221) (EXTERN 131210 . 131216) (punctuation 131101 . 131102) (close-paren 131100 . 131101) (VOID 131096 . 131100) (open-paren 131095 . 131096) (symbol 131079 . 131094) (VOID 131074 . 131078) (EXTERN 131067 . 131073) (punctuation 131065 . 131066) (close-paren 131064 . 131065) (VOID 131060 . 131064) (open-paren 131059 . 131060) (symbol 131041 . 131058) (VOID 131036 . 131040) (EXTERN 131029 . 131035) (punctuation 130996 . 130997) (close-paren 130995 . 130996) (VOID 130991 . 130995) (open-paren 130990 . 130991) (symbol 130971 . 130989) (VOID 130966 . 130970) (EXTERN 130959 . 130965) (punctuation 130957 . 130958) (close-paren 130956 . 130957) (VOID 130952 . 130956) (open-paren 130951 . 130952) (symbol 130932 . 130950) (VOID 130927 . 130931) (EXTERN 130920 . 130926) (punctuation 130884 . 130885) (close-paren 130883 . 130884) (VOID 130879 . 130883) (open-paren 130878 . 130879) (symbol 130862 . 130877) (VOID 130857 . 130861) (EXTERN 130850 . 130856) (punctuation 130817 . 130818) (close-paren 130816 . 130817) (VOID 130812 . 130816) (open-paren 130811 . 130812) (symbol 130795 . 130810) (VOID 130790 . 130794) (EXTERN 130783 . 130789) (punctuation 130781 . 130782) (close-paren 130780 . 130781) (VOID 130776 . 130780) (open-paren 130775 . 130776) (symbol 130757 . 130774) (VOID 130752 . 130756) (EXTERN 130745 . 130751) (punctuation 130743 . 130744) (close-paren 130742 . 130743) (symbol 130733 . 130742) (open-paren 130732 . 130733) (symbol 130717 . 130731) (symbol 130705 . 130716) (EXTERN 130698 . 130704) (punctuation 130588 . 130589) (close-paren 130587 . 130588) (VOID 130583 . 130587) (open-paren 130582 . 130583) (symbol 130563 . 130581) (VOID 130558 . 130562) (EXTERN 130551 . 130557) (punctuation 130549 . 130550) (close-paren 130548 . 130549) (VOID 130544 . 130548) (open-paren 130543 . 130544) (symbol 130528 . 130542) (VOID 130523 . 130527) (EXTERN 130516 . 130522) (punctuation 130514 . 130515) (close-paren 130513 . 130514) (punctuation 130512 . 130513) (symbol 130502 . 130511) (punctuation 130500 . 130501) (symbol 130491 . 130500) (punctuation 130481 . 130482) (symbol 130472 . 130481) (punctuation 130470 . 130471) (symbol 130461 . 130470) (open-paren 130460 . 130461) (symbol 130435 . 130459) (symbol 130425 . 130434) (EXTERN 130418 . 130424) (punctuation 130416 . 130417) (close-paren 130415 . 130416) (punctuation 130414 . 130415) (symbol 130404 . 130413) (punctuation 130402 . 130403) (symbol 130393 . 130402) (punctuation 130380 . 130381) (symbol 130371 . 130380) (punctuation 130369 . 130370) (symbol 130360 . 130369) (open-paren 130359 . 130360) (symbol 130338 . 130358) (symbol 130328 . 130337) (EXTERN 130321 . 130327) (punctuation 130319 . 130320) (close-paren 130318 . 130319) (punctuation 130317 . 130318) (symbol 130307 . 130316) (punctuation 130305 . 130306) (punctuation 130304 . 130305) (symbol 130294 . 130303) (punctuation 130292 . 130293) (symbol 130283 . 130292) (open-paren 130282 . 130283) (symbol 130258 . 130281) (symbol 130248 . 130257) (EXTERN 130241 . 130247) (punctuation 130239 . 130240) (close-paren 130238 . 130239) (BOOL 130234 . 130238) (punctuation 130232 . 130233) (symbol 130223 . 130232) (punctuation 130211 . 130212) (symbol 130202 . 130211) (punctuation 130200 . 130201) (symbol 130191 . 130200) (punctuation 130189 . 130190) (symbol 130180 . 130189) (punctuation 130178 . 130179) (symbol 130169 . 130178) (open-paren 130168 . 130169) (symbol 130155 . 130167) (symbol 130145 . 130154) (EXTERN 130138 . 130144) (punctuation 130136 . 130137) (close-paren 130135 . 130136) (BOOL 130131 . 130135) (punctuation 130129 . 130130) (punctuation 130128 . 130129) (symbol 130118 . 130127) (punctuation 130116 . 130117) (punctuation 130115 . 130116) (symbol 130105 . 130114) (punctuation 130103 . 130104) (symbol 130094 . 130103) (punctuation 130082 . 130083) (symbol 130073 . 130082) (punctuation 130071 . 130072) (symbol 130062 . 130071) (punctuation 130060 . 130061) (symbol 130051 . 130060) (punctuation 130049 . 130050) (symbol 130040 . 130049) (open-paren 130039 . 130040) (symbol 130026 . 130038) (symbol 130016 . 130025) (EXTERN 130009 . 130015) (punctuation 130007 . 130008) (close-paren 130006 . 130007) (symbol 129995 . 130006) (punctuation 129993 . 129994) (symbol 129984 . 129993) (punctuation 129982 . 129983) (symbol 129973 . 129982) (punctuation 129937 . 129938) (symbol 129928 . 129937) (punctuation 129926 . 129927) (symbol 129917 . 129926) (punctuation 129915 . 129916) (symbol 129904 . 129915) (open-paren 129903 . 129904) (symbol 129887 . 129902) (symbol 129877 . 129886) (EXTERN 129870 . 129876) (punctuation 129868 . 129869) (close-paren 129867 . 129868) (symbol 129858 . 129867) (punctuation 129848 . 129849) (punctuation 129847 . 129848) (CHAR 129842 . 129846) (CONST 129836 . 129841) (punctuation 129834 . 129835) (symbol 129823 . 129834) (open-paren 129822 . 129823) (symbol 129790 . 129821) (symbol 129780 . 129789) (EXTERN 129773 . 129779) (close-paren 129770 . 129771) (RETURN 129698 . 129704) (open-paren 129694 . 129695) (close-paren 129692 . 129693) (symbol 129686 . 129692) (symbol 129674 . 129685) (punctuation 129672 . 129673) (symbol 129666 . 129672) (symbol 129654 . 129665) (open-paren 129653 . 129654) (symbol 129623 . 129652) (symbol 129613 . 129622) (symbol 129606 . 129612) (close-paren 129603 . 129604) (RETURN 129545 . 129551) (open-paren 129541 . 129542) (close-paren 129539 . 129540) (symbol 129533 . 129539) (symbol 129521 . 129532) (punctuation 129519 . 129520) (symbol 129513 . 129519) (symbol 129501 . 129512) (open-paren 129500 . 129501) (symbol 129482 . 129499) (symbol 129472 . 129481) (symbol 129465 . 129471) (punctuation 129462 . 129463) (close-paren 129461 . 129462) (symbol 129450 . 129461) (punctuation 129438 . 129439) (symbol 129427 . 129438) (punctuation 129425 . 129426) (symbol 129414 . 129425) (open-paren 129413 . 129414) (symbol 129386 . 129412) (symbol 129376 . 129385) (EXTERN 129369 . 129375) (punctuation 129367 . 129368) (close-paren 129366 . 129367) (BOOL 129362 . 129366) (punctuation 129360 . 129361) (BOOL 129356 . 129360) (punctuation 129354 . 129355) (symbol 129343 . 129354) (punctuation 129333 . 129334) (punctuation 129332 . 129333) (symbol 129319 . 129331) (STRUCT 129312 . 129318) (punctuation 129302 . 129303) (symbol 129291 . 129302) (open-paren 129290 . 129291) (symbol 129274 . 129289) (punctuation 129273 . 129274) (symbol 129255 . 129272) (STRUCT 129248 . 129254) (EXTERN 129241 . 129247) (punctuation 129218 . 129219) (close-paren 129217 . 129218) (VOID 129213 . 129217) (open-paren 129212 . 129213) (symbol 129182 . 129211) (VOID 129177 . 129181) (EXTERN 129170 . 129176) (punctuation 129168 . 129169) (close-paren 129167 . 129168) (symbol 129161 . 129167) (symbol 129151 . 129160) (punctuation 129149 . 129150) (symbol 129143 . 129149) (symbol 129133 . 129142) (punctuation 129099 . 129100) (symbol 129091 . 129099) (symbol 129081 . 129090) (open-paren 129080 . 129081) (symbol 129061 . 129079) (VOID 129056 . 129060) (EXTERN 129049 . 129055) (punctuation 129047 . 129048) (close-paren 129046 . 129047) (VOID 129042 . 129046) (open-paren 129041 . 129042) (symbol 129021 . 129040) (VOID 129016 . 129020) (EXTERN 129009 . 129015) (punctuation 129007 . 129008) (close-paren 129006 . 129007) (VOID 129002 . 129006) (open-paren 129001 . 129002) (symbol 128981 . 129000) (VOID 128976 . 128980) (EXTERN 128969 . 128975) (punctuation 128938 . 128939) (close-paren 128937 . 128938) (BOOL 128933 . 128937) (punctuation 128931 . 128932) (symbol 128920 . 128931) (open-paren 128919 . 128920) (symbol 128904 . 128918) (symbol 128892 . 128903) (EXTERN 128885 . 128891) (punctuation 128883 . 128884) (close-paren 128882 . 128883) (VOID 128878 . 128882) (open-paren 128877 . 128878) (symbol 128862 . 128876) (VOID 128857 . 128861) (EXTERN 128850 . 128856) (punctuation 128848 . 128849) (close-paren 128847 . 128848) (VOID 128843 . 128847) (open-paren 128842 . 128843) (symbol 128830 . 128841) (VOID 128825 . 128829) (EXTERN 128818 . 128824) (punctuation 128816 . 128817) (close-paren 128815 . 128816) (symbol 128804 . 128815) (open-paren 128803 . 128804) (symbol 128775 . 128802) (BOOL 128770 . 128774) (EXTERN 128763 . 128769) (punctuation 128761 . 128762) (close-paren 128760 . 128761) (punctuation 128759 . 128760) (CHAR 128754 . 128758) (CONST 128748 . 128753) (open-paren 128747 . 128748) (symbol 128730 . 128746) (BOOL 128725 . 128729) (EXTERN 128718 . 128724) (punctuation 128716 . 128717) (close-paren 128715 . 128716) (punctuation 128714 . 128715) (CHAR 128709 . 128713) (CONST 128703 . 128708) (punctuation 128701 . 128702) (INT 128698 . 128701) (open-paren 128697 . 128698) (symbol 128680 . 128696) (symbol 128668 . 128679) (EXTERN 128661 . 128667) (punctuation 128659 . 128660) (close-paren 128658 . 128659) (symbol 128647 . 128658) (open-paren 128646 . 128647) (symbol 128625 . 128645) (BOOL 128620 . 128624) (EXTERN 128613 . 128619) (punctuation 128611 . 128612) (close-paren 128610 . 128611) (symbol 128599 . 128610) (punctuation 128597 . 128598) (punctuation 128596 . 128597) (CHAR 128591 . 128595) (CONST 128585 . 128590) (open-paren 128584 . 128585) (symbol 128559 . 128583) (VOID 128554 . 128558) (EXTERN 128537 . 128543) (punctuation 128535 . 128536) (close-paren 128534 . 128535) (symbol 128523 . 128534) (punctuation 128521 . 128522) (punctuation 128520 . 128521) (CHAR 128515 . 128519) (CONST 128509 . 128514) (open-paren 128508 . 128509) (symbol 128490 . 128507) (VOID 128485 . 128489) (EXTERN 128468 . 128474) (punctuation 128466 . 128467) (close-paren 128465 . 128466) (INT 128462 . 128465) (punctuation 128460 . 128461) (symbol 128449 . 128460) (punctuation 128447 . 128448) (punctuation 128446 . 128447) (CHAR 128441 . 128445) (CONST 128435 . 128440) (open-paren 128434 . 128435) (symbol 128416 . 128433) (VOID 128411 . 128415) (EXTERN 128394 . 128400) (punctuation 128392 . 128393) (close-paren 128391 . 128392) (symbol 128380 . 128391) (open-paren 128379 . 128380) (symbol 128358 . 128378) (VOID 128353 . 128357) (EXTERN 128346 . 128352) (punctuation 128344 . 128345) (close-paren 128343 . 128344) (punctuation 128342 . 128343) (VOID 128337 . 128341) (open-paren 128336 . 128337) (symbol 128322 . 128335) (VOID 128317 . 128321) (EXTERN 128310 . 128316) (punctuation 128308 . 128309) (close-paren 128307 . 128308) (INT 128304 . 128307) (open-paren 128303 . 128304) (symbol 128285 . 128302) (VOID 128280 . 128284) (EXTERN 128273 . 128279) (punctuation 128271 . 128272) (close-paren 128270 . 128271) (INT 128267 . 128270) (punctuation 128265 . 128266) (symbol 128254 . 128265) (punctuation 128247 . 128248) (symbol 128236 . 128247) (punctuation 128234 . 128235) (symbol 128223 . 128234) (punctuation 128221 . 128222) (symbol 128210 . 128221) (punctuation 128203 . 128204) (symbol 128192 . 128203) (punctuation 128190 . 128191) (symbol 128179 . 128190) (punctuation 128177 . 128178) (symbol 128166 . 128177) (open-paren 128165 . 128166) (symbol 128152 . 128164) (symbol 128140 . 128151) (EXTERN 128133 . 128139) (punctuation 128131 . 128132) (close-paren 128130 . 128131) (symbol 128119 . 128130) (punctuation 128117 . 128118) (symbol 128106 . 128117) (open-paren 128105 . 128106) (symbol 128082 . 128104) (symbol 128070 . 128081) (EXTERN 128063 . 128069) (punctuation 128031 . 128032) (close-paren 128030 . 128031) (VOID 128026 . 128030) (open-paren 128025 . 128026) (symbol 128010 . 128024) (VOID 128005 . 128009) (EXTERN 127998 . 128004) (punctuation 127996 . 127997) (close-paren 127995 . 127996) (symbol 127986 . 127995) (punctuation 127984 . 127985) (symbol 127975 . 127984) (punctuation 127973 . 127974) (punctuation 127972 . 127973) (symbol 127965 . 127971) (STRUCT 127958 . 127964) (open-paren 127957 . 127958) (symbol 127944 . 127956) (symbol 127932 . 127943) (EXTERN 127925 . 127931) (punctuation 127923 . 127924) (close-paren 127922 . 127923) (symbol 127913 . 127922) (punctuation 127911 . 127912) (symbol 127902 . 127911) (punctuation 127853 . 127854) (symbol 127842 . 127853) (punctuation 127840 . 127841) (symbol 127829 . 127840) (open-paren 127828 . 127829) (symbol 127801 . 127827) (symbol 127789 . 127800) (EXTERN 127782 . 127788) (punctuation 127780 . 127781) (close-paren 127779 . 127780) (symbol 127770 . 127779) (punctuation 127768 . 127769) (symbol 127759 . 127768) (punctuation 127757 . 127758) (symbol 127746 . 127757) (punctuation 127744 . 127745) (symbol 127733 . 127744) (open-paren 127732 . 127733) (symbol 127716 . 127731) (symbol 127704 . 127715) (EXTERN 127697 . 127703) (punctuation 127695 . 127696) (close-paren 127694 . 127695) (symbol 127683 . 127694) (punctuation 127681 . 127682) (symbol 127670 . 127681) (punctuation 127668 . 127669) (symbol 127657 . 127668) (open-paren 127656 . 127657) (symbol 127634 . 127655) (symbol 127622 . 127633) (EXTERN 127615 . 127621) (punctuation 127613 . 127614) (close-paren 127612 . 127613) (symbol 127606 . 127612) (punctuation 127605 . 127606) (symbol 127593 . 127604) (STRUCT 127586 . 127592) (open-paren 127585 . 127586) (symbol 127570 . 127584) (VOID 127565 . 127569) (EXTERN 127558 . 127564) (punctuation 127556 . 127557) (close-paren 127555 . 127556) (symbol 127546 . 127555) (punctuation 127544 . 127545) (punctuation 127543 . 127544) (symbol 127536 . 127542) (STRUCT 127529 . 127535) (open-paren 127528 . 127529) (symbol 127505 . 127527) (symbol 127495 . 127504) (EXTERN 127488 . 127494) (punctuation 127486 . 127487) (close-paren 127485 . 127486) (symbol 127476 . 127485) (punctuation 127474 . 127475) (punctuation 127473 . 127474) (symbol 127466 . 127472) (STRUCT 127459 . 127465) (open-paren 127458 . 127459) (symbol 127435 . 127457) (symbol 127425 . 127434) (EXTERN 127418 . 127424) (punctuation 127416 . 127417) (close-paren 127415 . 127416) (punctuation 127414 . 127415) (symbol 127407 . 127413) (STRUCT 127400 . 127406) (open-paren 127399 . 127400) (symbol 127379 . 127398) (VOID 127374 . 127378) (EXTERN 127367 . 127373) (punctuation 127365 . 127366) (close-paren 127364 . 127365) (symbol 127353 . 127364) (open-paren 127352 . 127353) (symbol 127331 . 127351) (symbol 127321 . 127330) (EXTERN 127314 . 127320) (punctuation 127312 . 127313) (close-paren 127311 . 127312) (symbol 127300 . 127311) (open-paren 127299 . 127300) (symbol 127283 . 127298) (symbol 127273 . 127282) (EXTERN 127266 . 127272) (punctuation 127234 . 127235) (close-paren 127233 . 127234) (VOID 127229 . 127233) (open-paren 127228 . 127229) (symbol 127213 . 127227) (VOID 127208 . 127212) (EXTERN 127201 . 127207) (punctuation 127199 . 127200) (close-paren 127198 . 127199) (VOID 127194 . 127198) (open-paren 127193 . 127194) (symbol 127178 . 127192) (VOID 127173 . 127177) (EXTERN 127166 . 127172) (punctuation 127164 . 127165) (close-paren 127163 . 127164) (INT 127160 . 127163) (open-paren 127159 . 127160) (symbol 127147 . 127158) (VOID 127142 . 127146) (EXTERN 127135 . 127141) (punctuation 127133 . 127134) (close-paren 127132 . 127133) (VOID 127128 . 127132) (open-paren 127127 . 127128) (symbol 127110 . 127126) (VOID 127105 . 127109) (EXTERN 127098 . 127104) (punctuation 127096 . 127097) (close-paren 127095 . 127096) (symbol 127084 . 127095) (open-paren 127083 . 127084) (symbol 127063 . 127082) (symbol 127051 . 127062) (EXTERN 127044 . 127050) (punctuation 127042 . 127043) (close-paren 127041 . 127042) (symbol 127030 . 127041) (open-paren 127029 . 127030) (symbol 127009 . 127028) (symbol 126997 . 127008) (EXTERN 126990 . 126996) (punctuation 126988 . 126989) (close-paren 126987 . 126988) (symbol 126978 . 126987) (open-paren 126977 . 126978) (symbol 126959 . 126976) (BOOL 126954 . 126958) (EXTERN 126947 . 126953) (punctuation 126945 . 126946) (close-paren 126944 . 126945) (symbol 126933 . 126944) (punctuation 126931 . 126932) (symbol 126920 . 126931) (punctuation 126918 . 126919) (symbol 126907 . 126918) (punctuation 126864 . 126865) (BOOL 126860 . 126864) (punctuation 126858 . 126859) (symbol 126847 . 126858) (punctuation 126845 . 126846) (symbol 126834 . 126845) (open-paren 126833 . 126834) (symbol 126805 . 126832) (VOID 126800 . 126804) (EXTERN 126793 . 126799) (punctuation 126791 . 126792) (close-paren 126790 . 126791) (symbol 126781 . 126790) (punctuation 126779 . 126780) (symbol 126770 . 126779) (open-paren 126769 . 126770) (symbol 126743 . 126768) (VOID 126738 . 126742) (EXTERN 126731 . 126737) (punctuation 126729 . 126730) (close-paren 126728 . 126729) (symbol 126719 . 126728) (punctuation 126717 . 126718) (symbol 126708 . 126717) (open-paren 126707 . 126708) (symbol 126680 . 126706) (VOID 126675 . 126679) (EXTERN 126668 . 126674) (punctuation 126666 . 126667) (close-paren 126665 . 126666) (symbol 126656 . 126665) (punctuation 126654 . 126655) (symbol 126645 . 126654) (open-paren 126644 . 126645) (symbol 126617 . 126643) (VOID 126612 . 126616) (EXTERN 126605 . 126611) (punctuation 126603 . 126604) (close-paren 126602 . 126603) (symbol 126591 . 126602) (open-paren 126590 . 126591) (symbol 126581 . 126589) (VOID 126576 . 126580) (EXTERN 126559 . 126565) (punctuation 126557 . 126558) (close-paren 126556 . 126557) (symbol 126545 . 126556) (open-paren 126544 . 126545) (symbol 126516 . 126543) (BOOL 126511 . 126515) (EXTERN 126504 . 126510) (punctuation 126473 . 126474) (close-paren 126472 . 126473) (VOID 126468 . 126472) (open-paren 126467 . 126468) (symbol 126451 . 126466) (VOID 126446 . 126450) (EXTERN 126439 . 126445) (punctuation 126437 . 126438) (close-paren 126436 . 126437) (BOOL 126432 . 126436) (open-paren 126431 . 126432) (symbol 126418 . 126430) (VOID 126413 . 126417) (EXTERN 126406 . 126412) (punctuation 126404 . 126405) (close-paren 126403 . 126404) (BOOL 126399 . 126403) (punctuation 126397 . 126398) (symbol 126388 . 126397) (punctuation 126377 . 126378) (symbol 126368 . 126377) (punctuation 126366 . 126367) (symbol 126357 . 126366) (punctuation 126355 . 126356) (symbol 126346 . 126355) (open-paren 126345 . 126346) (symbol 126321 . 126344) (symbol 126309 . 126320) (EXTERN 126302 . 126308) (punctuation 126300 . 126301) (close-paren 126299 . 126300) (BOOL 126295 . 126299) (punctuation 126293 . 126294) (symbol 126284 . 126293) (punctuation 126282 . 126283) (symbol 126273 . 126282) (open-paren 126272 . 126273) (symbol 126253 . 126271) (symbol 126241 . 126252) (EXTERN 126234 . 126240) (punctuation 126232 . 126233) (close-paren 126231 . 126232) (VOID 126227 . 126231) (open-paren 126226 . 126227) (symbol 126212 . 126225) (VOID 126207 . 126211) (EXTERN 126190 . 126196) (punctuation 126188 . 126189) (close-paren 126187 . 126188) (symbol 126176 . 126187) (open-paren 126175 . 126176) (symbol 126150 . 126174) (VOID 126145 . 126149) (EXTERN 126138 . 126144) (punctuation 126136 . 126137) (close-paren 126135 . 126136) (symbol 126124 . 126135) (open-paren 126123 . 126124) (symbol 126100 . 126122) (VOID 126095 . 126099) (EXTERN 126088 . 126094) (punctuation 126086 . 126087) (close-paren 126085 . 126086) (VOID 126081 . 126085) (open-paren 126080 . 126081) (symbol 126058 . 126079) (symbol 126046 . 126057) (EXTERN 126039 . 126045) (punctuation 126037 . 126038) (close-paren 126036 . 126037) (VOID 126032 . 126036) (open-paren 126031 . 126032) (symbol 126011 . 126030) (symbol 125999 . 126010) (EXTERN 125992 . 125998) (punctuation 125990 . 125991) (close-paren 125989 . 125990) (symbol 125978 . 125989) (open-paren 125977 . 125978) (symbol 125969 . 125976) (VOID 125964 . 125968) (EXTERN 125957 . 125963) (punctuation 125696 . 125697) (close-paren 125695 . 125696) (symbol 125689 . 125695) (symbol 125677 . 125688) (open-paren 125676 . 125677) (symbol 125647 . 125675) (BOOL 125642 . 125646) (EXTERN 125635 . 125641) (punctuation 125633 . 125634) (close-paren 125632 . 125633) (symbol 125626 . 125632) (punctuation 125625 . 125626) (symbol 125613 . 125624) (STRUCT 125606 . 125612) (open-paren 125605 . 125606) (symbol 125576 . 125604) (BOOL 125571 . 125575) (EXTERN 125564 . 125570) (punctuation 125562 . 125563) (close-paren 125561 . 125562) (VOID 125557 . 125561) (open-paren 125556 . 125557) (symbol 125533 . 125555) (symbol 125521 . 125532) (punctuation 125519 . 125520) (close-paren 125518 . 125519) (symbol 125513 . 125518) (symbol 125501 . 125512) (open-paren 125500 . 125501) (symbol 125486 . 125499) (VOID 125481 . 125485) (EXTERN 125474 . 125480) (punctuation 125472 . 125473) (close-paren 125471 . 125472) (VOID 125467 . 125471) (open-paren 125466 . 125467) (symbol 125453 . 125465) (VOID 125448 . 125452) (EXTERN 125441 . 125447) (punctuation 125439 . 125440) (close-paren 125438 . 125439) (symbol 125429 . 125438) (punctuation 125427 . 125428) (punctuation 125426 . 125427) (symbol 125414 . 125425) (punctuation 125412 . 125413) (symbol 125401 . 125412) (open-paren 125400 . 125401) (symbol 125380 . 125399) (symbol 125370 . 125379) (EXTERN 125363 . 125369) (punctuation 125361 . 125362) (close-paren 125360 . 125361) (symbol 125349 . 125360) (open-paren 125348 . 125349) (symbol 125336 . 125347) (VOID 125331 . 125335) (EXTERN 125324 . 125330) (punctuation 125322 . 125323) (close-paren 125321 . 125322) (VOID 125317 . 125321) (open-paren 125316 . 125317) (symbol 125303 . 125315) (VOID 125298 . 125302) (EXTERN 125291 . 125297) (punctuation 125289 . 125290) (close-paren 125288 . 125289) (VOID 125284 . 125288) (open-paren 125283 . 125284) (symbol 125273 . 125282) (VOID 125268 . 125272) (EXTERN 125261 . 125267) (punctuation 125259 . 125260) (close-paren 125258 . 125259) (symbol 125247 . 125258) (punctuation 125245 . 125246) (symbol 125234 . 125245) (punctuation 125232 . 125233) (symbol 125221 . 125232) (open-paren 125220 . 125221) (symbol 125209 . 125219) (symbol 125197 . 125208) (EXTERN 125190 . 125196) (punctuation 125188 . 125189) (close-paren 125187 . 125188) (symbol 125176 . 125187) (punctuation 125174 . 125175) (symbol 125163 . 125174) (open-paren 125162 . 125163) (symbol 125151 . 125161) (symbol 125139 . 125150) (EXTERN 125132 . 125138) (punctuation 125130 . 125131) (close-paren 125129 . 125130) (punctuation 125128 . 125129) (punctuation 125127 . 125128) (punctuation 125126 . 125127) (punctuation 125124 . 125125) (symbol 125113 . 125124) (punctuation 125111 . 125112) (symbol 125102 . 125111) (open-paren 125101 . 125102) (symbol 125091 . 125100) (symbol 125079 . 125090) (EXTERN 125072 . 125078) (punctuation 125070 . 125071) (close-paren 125069 . 125070) (VOID 125065 . 125069) (open-paren 125064 . 125065) (symbol 125049 . 125063) (VOID 125044 . 125048) (EXTERN 125037 . 125043) (punctuation 125035 . 125036) (close-paren 125034 . 125035) (VOID 125030 . 125034) (open-paren 125029 . 125030) (symbol 125012 . 125028) (punctuation 125011 . 125012) (VOID 125006 . 125010) (EXTERN 124999 . 125005) (punctuation 124997 . 124998) (close-paren 124996 . 124997) (symbol 124993 . 124996) (symbol 124981 . 124992) (open-paren 124980 . 124981) (symbol 124966 . 124979) (symbol 124954 . 124965) (EXTERN 124947 . 124953) (punctuation 124945 . 124946) (close-paren 124944 . 124945) (symbol 124933 . 124944) (open-paren 124932 . 124933) (symbol 124920 . 124931) (VOID 124915 . 124919) (EXTERN 124908 . 124914) (punctuation 124906 . 124907) (close-paren 124905 . 124906) (number 124904 . 124905) (punctuation 124902 . 124903) (number 124901 . 124902) (open-paren 124900 . 124901) (symbol 124876 . 124899) (close-paren 124872 . 124873) (symbol 124865 . 124872) (punctuation 124863 . 124864) (punctuation 124862 . 124863) (CHAR 124857 . 124861) (CONST 124851 . 124856) (open-paren 124850 . 124851) (symbol 124835 . 124849) (symbol 124823 . 124834) (EXTERN 124816 . 124822) (punctuation 124814 . 124815) (close-paren 124813 . 124814) (number 124812 . 124813) (punctuation 124810 . 124811) (number 124809 . 124810) (open-paren 124808 . 124809) (symbol 124784 . 124807) (close-paren 124780 . 124781) (symbol 124773 . 124780) (punctuation 124771 . 124772) (punctuation 124770 . 124771) (CHAR 124765 . 124769) (CONST 124759 . 124764) (open-paren 124758 . 124759) (symbol 124751 . 124757) (VOID 124746 . 124750) (EXTERN 124729 . 124735) (punctuation 124727 . 124728) (close-paren 124726 . 124727) (number 124725 . 124726) (punctuation 124723 . 124724) (number 124722 . 124723) (open-paren 124721 . 124722) (symbol 124697 . 124720) (close-paren 124695 . 124696) (punctuation 124694 . 124695) (punctuation 124693 . 124694) (punctuation 124692 . 124693) (punctuation 124690 . 124691) (punctuation 124689 . 124690) (CHAR 124684 . 124688) (CONST 124678 . 124683) (open-paren 124677 . 124678) (symbol 124671 . 124676) (VOID 124666 . 124670) (EXTERN 124649 . 124655) (punctuation 124647 . 124648) (close-paren 124646 . 124647) (symbol 124635 . 124646) (punctuation 124633 . 124634) (symbol 124624 . 124633) (open-paren 124623 . 124624) (symbol 124613 . 124622) (symbol 124601 . 124612) (EXTERN 124594 . 124600) (punctuation 124592 . 124593) (close-paren 124591 . 124592) (punctuation 124590 . 124591) (VOID 124585 . 124589) (punctuation 124583 . 124584) (semantic-list 124575 . 124583) (semantic-list 124571 . 124574) (VOID 124566 . 124570) (punctuation 124564 . 124565) (symbol 124555 . 124564) (open-paren 124554 . 124555) (symbol 124531 . 124553) (VOID 124526 . 124530) (EXTERN 124519 . 124525) (punctuation 124517 . 124518) (close-paren 124516 . 124517) (symbol 124505 . 124516) (punctuation 124503 . 124504) (semantic-list 124490 . 124503) (semantic-list 124486 . 124489) (VOID 124481 . 124485) (punctuation 124479 . 124480) (symbol 124470 . 124479) (open-paren 124469 . 124470) (symbol 124450 . 124468) (VOID 124445 . 124449) (EXTERN 124438 . 124444) (punctuation 124436 . 124437) (close-paren 124435 . 124436) (symbol 124426 . 124435) (open-paren 124425 . 124426) (symbol 124404 . 124424) (VOID 124399 . 124403) (EXTERN 124392 . 124398) (punctuation 124390 . 124391) (close-paren 124389 . 124390) (VOID 124385 . 124389) (open-paren 124384 . 124385) (symbol 124354 . 124383) (VOID 124349 . 124353) (EXTERN 124342 . 124348) (punctuation 124340 . 124341) (close-paren 124339 . 124340) (semantic-list 124333 . 124339) (semantic-list 124329 . 124332) (VOID 124324 . 124328) (open-paren 124323 . 124324) (symbol 124296 . 124322) (VOID 124291 . 124295) (EXTERN 124284 . 124290) (punctuation 124282 . 124283) (close-paren 124281 . 124282) (INT 124278 . 124281) (punctuation 124276 . 124277) (semantic-list 124271 . 124276) (semantic-list 124267 . 124270) (VOID 124262 . 124266) (open-paren 124261 . 124262) (symbol 124235 . 124260) (VOID 124230 . 124234) (EXTERN 124223 . 124229) (punctuation 124221 . 124222) (close-paren 124220 . 124221) (punctuation 124219 . 124220) (VOID 124214 . 124218) (punctuation 124212 . 124213) (semantic-list 124204 . 124212) (semantic-list 124200 . 124203) (VOID 124195 . 124199) (open-paren 124194 . 124195) (symbol 124168 . 124193) (VOID 124163 . 124167) (EXTERN 124156 . 124162) (punctuation 124154 . 124155) (close-paren 124153 . 124154) (symbol 124142 . 124153) (punctuation 124140 . 124141) (semantic-list 124127 . 124140) (semantic-list 124123 . 124126) (VOID 124118 . 124122) (open-paren 124117 . 124118) (symbol 124095 . 124116) (VOID 124090 . 124094) (EXTERN 124083 . 124089) (punctuation 124081 . 124082) (close-paren 124080 . 124081) (symbol 124069 . 124080) (punctuation 124067 . 124068) (symbol 124056 . 124067) (open-paren 124055 . 124056) (symbol 124046 . 124054) (VOID 124041 . 124045) (EXTERN 124034 . 124040) (punctuation 124032 . 124033) (close-paren 124031 . 124032) (symbol 124020 . 124031) (ENUM 124015 . 124019) (punctuation 124013 . 124014) (symbol 124002 . 124013) (open-paren 124001 . 124002) (symbol 123979 . 124000) (punctuation 123978 . 123979) (symbol 123970 . 123977) (STRUCT 123963 . 123969) (EXTERN 123956 . 123962) (punctuation 123954 . 123955) (close-paren 123953 . 123954) (symbol 123942 . 123953) (ENUM 123937 . 123941) (punctuation 123935 . 123936) (symbol 123924 . 123935) (open-paren 123923 . 123924) (symbol 123910 . 123922) (punctuation 123909 . 123910) (symbol 123901 . 123908) (STRUCT 123894 . 123900) (EXTERN 123887 . 123893) (punctuation 123885 . 123886) (close-paren 123884 . 123885) (punctuation 123842 . 123843) (punctuation 123827 . 123828) (symbol 123816 . 123827) (punctuation 123809 . 123810) (punctuation 123808 . 123809) (symbol 123796 . 123807) (punctuation 123794 . 123795) (symbol 123785 . 123794) (punctuation 123783 . 123784) (punctuation 123754 . 123755) (open-paren 123740 . 123741) (symbol 123710 . 123735) (symbol 123698 . 123709) (EXTERN 123691 . 123697) (punctuation 123689 . 123690) (close-paren 123688 . 123689) (punctuation 123672 . 123673) (punctuation 123657 . 123658) (symbol 123646 . 123657) (punctuation 123644 . 123645) (symbol 123633 . 123644) (punctuation 123631 . 123632) (symbol 123620 . 123631) (punctuation 123618 . 123619) (punctuation 123589 . 123590) (open-paren 123575 . 123576) (symbol 123549 . 123574) (symbol 123537 . 123548) (EXTERN 123530 . 123536) (punctuation 123528 . 123529) (close-paren 123527 . 123528) (punctuation 123511 . 123512) (punctuation 123496 . 123497) (symbol 123485 . 123496) (punctuation 123483 . 123484) (symbol 123472 . 123483) (punctuation 123470 . 123471) (punctuation 123454 . 123455) (open-paren 123440 . 123441) (symbol 123414 . 123439) (symbol 123402 . 123413) (EXTERN 123395 . 123401) (punctuation 123393 . 123394) (close-paren 123392 . 123393) (punctuation 123376 . 123377) (punctuation 123361 . 123362) (symbol 123350 . 123361) (punctuation 123348 . 123349) (punctuation 123339 . 123340) (open-paren 123325 . 123326) (symbol 123301 . 123324) (symbol 123289 . 123300) (EXTERN 123282 . 123288) (punctuation 123280 . 123281) (close-paren 123279 . 123280) (symbol 123268 . 123279) (punctuation 123266 . 123267) (symbol 123255 . 123266) (punctuation 123253 . 123254) (symbol 123242 . 123253) (open-paren 123241 . 123242) (symbol 123212 . 123240) (symbol 123200 . 123211) (EXTERN 123193 . 123199) (punctuation 123191 . 123192) (close-paren 123190 . 123191) (symbol 123179 . 123190) (punctuation 123177 . 123178) (punctuation 123161 . 123162) (punctuation 123146 . 123147) (symbol 123135 . 123146) (open-paren 123134 . 123135) (symbol 123119 . 123133) (symbol 123107 . 123118) (EXTERN 123100 . 123106) (punctuation 123098 . 123099) (close-paren 123097 . 123098) (symbol 123086 . 123097) (punctuation 123084 . 123085) (symbol 123073 . 123084) (punctuation 123071 . 123072) (symbol 123060 . 123071) (punctuation 123058 . 123059) (symbol 123047 . 123058) (punctuation 123045 . 123046) (symbol 123034 . 123045) (punctuation 123032 . 123033) (symbol 123021 . 123032) (punctuation 123019 . 123020) (symbol 123008 . 123019) (punctuation 123006 . 123007) (symbol 122995 . 123006) (open-paren 122994 . 122995) (symbol 122988 . 122993) (symbol 122976 . 122987) (EXTERN 122969 . 122975) (punctuation 122967 . 122968) (close-paren 122966 . 122967) (symbol 122955 . 122966) (punctuation 122953 . 122954) (symbol 122942 . 122953) (punctuation 122940 . 122941) (symbol 122929 . 122940) (punctuation 122927 . 122928) (symbol 122916 . 122927) (punctuation 122914 . 122915) (symbol 122903 . 122914) (punctuation 122901 . 122902) (symbol 122890 . 122901) (punctuation 122888 . 122889) (symbol 122877 . 122888) (open-paren 122876 . 122877) (symbol 122870 . 122875) (symbol 122858 . 122869) (EXTERN 122851 . 122857) (punctuation 122849 . 122850) (close-paren 122848 . 122849) (symbol 122837 . 122848) (punctuation 122835 . 122836) (symbol 122824 . 122835) (punctuation 122822 . 122823) (symbol 122811 . 122822) (punctuation 122809 . 122810) (symbol 122798 . 122809) (punctuation 122796 . 122797) (symbol 122785 . 122796) (punctuation 122783 . 122784) (symbol 122772 . 122783) (open-paren 122771 . 122772) (symbol 122765 . 122770) (symbol 122753 . 122764) (EXTERN 122746 . 122752) (punctuation 122744 . 122745) (close-paren 122743 . 122744) (symbol 122732 . 122743) (punctuation 122730 . 122731) (symbol 122719 . 122730) (punctuation 122717 . 122718) (symbol 122706 . 122717) (punctuation 122704 . 122705) (symbol 122693 . 122704) (punctuation 122691 . 122692) (symbol 122680 . 122691) (open-paren 122679 . 122680) (symbol 122673 . 122678) (symbol 122661 . 122672) (EXTERN 122654 . 122660) (punctuation 122652 . 122653) (close-paren 122651 . 122652) (symbol 122640 . 122651) (punctuation 122638 . 122639) (symbol 122627 . 122638) (punctuation 122625 . 122626) (symbol 122614 . 122625) (punctuation 122612 . 122613) (symbol 122601 . 122612) (open-paren 122600 . 122601) (symbol 122594 . 122599) (symbol 122582 . 122593) (EXTERN 122575 . 122581) (punctuation 122573 . 122574) (close-paren 122572 . 122573) (symbol 122561 . 122572) (punctuation 122559 . 122560) (symbol 122548 . 122559) (punctuation 122546 . 122547) (symbol 122535 . 122546) (open-paren 122534 . 122535) (symbol 122528 . 122533) (symbol 122516 . 122527) (EXTERN 122509 . 122515) (punctuation 122507 . 122508) (close-paren 122506 . 122507) (symbol 122495 . 122506) (punctuation 122493 . 122494) (symbol 122482 . 122493) (open-paren 122481 . 122482) (symbol 122475 . 122480) (symbol 122463 . 122474) (EXTERN 122456 . 122462) (punctuation 122454 . 122455) (close-paren 122453 . 122454) (symbol 122442 . 122453) (open-paren 122441 . 122442) (symbol 122435 . 122440) (symbol 122423 . 122434) (EXTERN 122416 . 122422) (punctuation 122414 . 122415) (close-paren 122413 . 122414) (symbol 122402 . 122413) (punctuation 122400 . 122401) (symbol 122389 . 122400) (open-paren 122388 . 122389) (symbol 122381 . 122387) (symbol 122369 . 122380) (EXTERN 122362 . 122368) (punctuation 122360 . 122361) (close-paren 122359 . 122360) (symbol 122355 . 122359) (symbol 122343 . 122354) (open-paren 122342 . 122343) (symbol 122333 . 122341) (symbol 122321 . 122332) (EXTERN 122314 . 122320) (punctuation 122312 . 122313) (close-paren 122311 . 122312) (symbol 122300 . 122311) (punctuation 122298 . 122299) (punctuation 122297 . 122298) (CHAR 122292 . 122296) (CONST 122286 . 122291) (open-paren 122285 . 122286) (symbol 122272 . 122284) (VOID 122267 . 122271) (EXTERN 122250 . 122256) (punctuation 122248 . 122249) (close-paren 122247 . 122248) (symbol 122236 . 122247) (punctuation 122230 . 122231) (symbol 122219 . 122230) (punctuation 122217 . 122218) (symbol 122206 . 122217) (punctuation 122204 . 122205) (symbol 122193 . 122204) (open-paren 122192 . 122193) (symbol 122183 . 122191) (VOID 122178 . 122182) (EXTERN 122161 . 122167) (punctuation 122159 . 122160) (close-paren 122158 . 122159) (symbol 122147 . 122158) (punctuation 122145 . 122146) (symbol 122134 . 122145) (punctuation 122132 . 122133) (symbol 122121 . 122132) (open-paren 122120 . 122121) (symbol 122111 . 122119) (VOID 122106 . 122110) (EXTERN 122089 . 122095) (punctuation 122087 . 122088) (close-paren 122086 . 122087) (symbol 122075 . 122086) (punctuation 122073 . 122074) (symbol 122062 . 122073) (open-paren 122061 . 122062) (symbol 122052 . 122060) (VOID 122047 . 122051) (EXTERN 122030 . 122036) (punctuation 122028 . 122029) (close-paren 122027 . 122028) (symbol 122016 . 122027) (open-paren 122015 . 122016) (symbol 122006 . 122014) (VOID 122001 . 122005) (EXTERN 121984 . 121990) (close-paren 121982 . 121983) (open-paren 121948 . 121949) (close-paren 121946 . 121947) (symbol 121942 . 121946) (symbol 121930 . 121941) (punctuation 121928 . 121929) (symbol 121916 . 121928) (symbol 121904 . 121915) (open-paren 121903 . 121904) (symbol 121895 . 121902) (VOID 121890 . 121894) (symbol 121873 . 121879) (punctuation 121871 . 121872) (close-paren 121870 . 121871) (VOID 121866 . 121870) (open-paren 121865 . 121866) (symbol 121860 . 121864) (symbol 121848 . 121859) (EXTERN 121841 . 121847) (punctuation 121839 . 121840) (close-paren 121838 . 121839) (punctuation 121781 . 121782) (punctuation 121755 . 121756) (symbol 121751 . 121755) (punctuation 121750 . 121751) (symbol 121738 . 121749) (punctuation 121736 . 121737) (symbol 121731 . 121736) (symbol 121721 . 121730) (open-paren 121720 . 121721) (symbol 121701 . 121719) (symbol 121689 . 121700) (EXTERN 121682 . 121688) (punctuation 121680 . 121681) (close-paren 121679 . 121680) (symbol 121668 . 121679) (punctuation 121666 . 121667) (symbol 121655 . 121666) (punctuation 121653 . 121654) (symbol 121642 . 121653) (open-paren 121641 . 121642) (symbol 121620 . 121640) (VOID 121615 . 121619) (EXTERN 121608 . 121614) (punctuation 121606 . 121607) (close-paren 121605 . 121606) (symbol 121594 . 121605) (open-paren 121593 . 121594) (symbol 121584 . 121592) (VOID 121579 . 121583) (EXTERN 121572 . 121578) (close-paren 121156 . 121157) (semantic-list 121148 . 121153) (RETURN 121110 . 121116) (open-paren 121106 . 121107) (close-paren 121104 . 121105) (symbol 121101 . 121104) (punctuation 121100 . 121101) (CHAR 121095 . 121099) (CONST 121089 . 121094) (open-paren 121088 . 121089) (symbol 121072 . 121087) (symbol 121060 . 121071) (symbol 121053 . 121059) (close-paren 121050 . 121051) (semantic-list 121042 . 121047) (RETURN 121013 . 121019) (open-paren 121009 . 121010) (close-paren 121007 . 121008) (symbol 121004 . 121007) (punctuation 121003 . 121004) (CHAR 120998 . 121002) (CONST 120992 . 120997) (open-paren 120991 . 120992) (symbol 120984 . 120990) (symbol 120972 . 120983) (symbol 120965 . 120971) (punctuation 120962 . 120963) (close-paren 120961 . 120962) (VOID 120957 . 120961) (open-paren 120956 . 120957) (symbol 120942 . 120955) (VOID 120937 . 120941) (EXTERN 120930 . 120936) (punctuation 120928 . 120929) (close-paren 120927 . 120928) (VOID 120923 . 120927) (open-paren 120922 . 120923) (symbol 120911 . 120921) (VOID 120906 . 120910) (EXTERN 120899 . 120905) (punctuation 120897 . 120898) (close-paren 120896 . 120897) (VOID 120892 . 120896) (open-paren 120891 . 120892) (symbol 120878 . 120890) (VOID 120873 . 120877) (EXTERN 120866 . 120872) (punctuation 120864 . 120865) (close-paren 120863 . 120864) (symbol 120852 . 120863) (punctuation 120850 . 120851) (punctuation 120849 . 120850) (CHAR 120844 . 120848) (CONST 120838 . 120843) (open-paren 120837 . 120838) (symbol 120825 . 120836) (VOID 120820 . 120824) (EXTERN 120813 . 120819) (punctuation 120811 . 120812) (close-paren 120810 . 120811) (symbol 120799 . 120810) (punctuation 120772 . 120773) (semantic-list 120746 . 120772) (semantic-list 120742 . 120745) (VOID 120737 . 120741) (punctuation 120735 . 120736) (symbol 120724 . 120735) (open-paren 120723 . 120724) (symbol 120711 . 120722) (VOID 120706 . 120710) (EXTERN 120699 . 120705) (punctuation 120697 . 120698) (close-paren 120696 . 120697) (BOOL 120692 . 120696) (punctuation 120690 . 120691) (INT 120687 . 120690) (punctuation 120685 . 120686) (punctuation 120684 . 120685) (CONST 120678 . 120683) (CHAR 120673 . 120677) (open-paren 120672 . 120673) (symbol 120655 . 120671) (symbol 120643 . 120654) (EXTERN 120636 . 120642) (punctuation 120634 . 120635) (close-paren 120633 . 120634) (BOOL 120629 . 120633) (punctuation 120627 . 120628) (symbol 120616 . 120627) (punctuation 120614 . 120615) (punctuation 120613 . 120614) (symbol 120601 . 120612) (punctuation 120581 . 120582) (symbol 120570 . 120581) (punctuation 120568 . 120569) (symbol 120557 . 120568) (punctuation 120555 . 120556) (symbol 120544 . 120555) (open-paren 120543 . 120544) (symbol 120537 . 120542) (INT 120533 . 120536) (EXTERN 120526 . 120532) (close-paren 120524 . 120525) (semantic-list 120454 . 120467) (IF 120451 . 120453) (open-paren 120447 . 120448) (close-paren 120445 . 120446) (symbol 120444 . 120445) (symbol 120432 . 120443) (open-paren 120431 . 120432) (symbol 120415 . 120430) (VOID 120410 . 120414) (symbol 120403 . 120409) (punctuation 120401 . 120402) (close-paren 120400 . 120401) (symbol 120391 . 120400) (punctuation 120389 . 120390) (symbol 120380 . 120389) (punctuation 120378 . 120379) (punctuation 120377 . 120378) (CHAR 120372 . 120376) (CONST 120366 . 120371) (punctuation 120364 . 120365) (symbol 120353 . 120364) (open-paren 120352 . 120353) (symbol 120343 . 120351) (symbol 120331 . 120342) (EXTERN 120324 . 120330) (punctuation 120322 . 120323) (close-paren 120321 . 120322) (symbol 120310 . 120321) (punctuation 120308 . 120309) (symbol 120297 . 120308) (open-paren 120296 . 120297) (symbol 120284 . 120295) (VOID 120279 . 120283) (EXTERN 120272 . 120278) (punctuation 120270 . 120271) (close-paren 120269 . 120270) (symbol 120258 . 120269) (punctuation 120256 . 120257) (symbol 120245 . 120256) (punctuation 120243 . 120244) (symbol 120232 . 120243) (open-paren 120231 . 120232) (symbol 120217 . 120230) (symbol 120205 . 120216) (EXTERN 120198 . 120204) (punctuation 120196 . 120197) (close-paren 120195 . 120196) (symbol 120186 . 120195) (punctuation 120184 . 120185) (punctuation 120183 . 120184) (CHAR 120178 . 120182) (CONST 120172 . 120177) (open-paren 120171 . 120172) (symbol 120153 . 120170) (symbol 120141 . 120152) (EXTERN 120134 . 120140) (punctuation 120132 . 120133) (close-paren 120131 . 120132) (symbol 120122 . 120131) (punctuation 120120 . 120121) (punctuation 120119 . 120120) (CHAR 120114 . 120118) (CONST 120108 . 120113) (open-paren 120107 . 120108) (symbol 120098 . 120106) (symbol 120086 . 120097) (EXTERN 120079 . 120085) (punctuation 120077 . 120078) (close-paren 120076 . 120077) (symbol 120065 . 120076) (open-paren 120064 . 120065) (symbol 120050 . 120063) (symbol 120038 . 120049) (EXTERN 120031 . 120037) (punctuation 120001 . 120002) (close-paren 120000 . 120001) (number 119999 . 120000) (punctuation 119997 . 119998) (number 119996 . 119997) (open-paren 119995 . 119996) (symbol 119971 . 119994) (close-paren 119967 . 119968) (symbol 119960 . 119967) (punctuation 119958 . 119959) (punctuation 119957 . 119958) (CONST 119951 . 119956) (CHAR 119946 . 119950) (punctuation 119937 . 119938) (symbol 119928 . 119937) (punctuation 119926 . 119927) (punctuation 119925 . 119926) (CONST 119919 . 119924) (CHAR 119914 . 119918) (punctuation 119912 . 119913) (punctuation 119911 . 119912) (symbol 119901 . 119910) (punctuation 119899 . 119900) (punctuation 119898 . 119899) (punctuation 119897 . 119898) (CHAR 119892 . 119896) (open-paren 119891 . 119892) (symbol 119881 . 119890) (symbol 119871 . 119880) (EXTERN 119864 . 119870) (punctuation 119862 . 119863) (close-paren 119861 . 119862) (number 119860 . 119861) (punctuation 119858 . 119859) (number 119857 . 119858) (open-paren 119856 . 119857) (symbol 119832 . 119855) (close-paren 119828 . 119829) (punctuation 119827 . 119828) (punctuation 119826 . 119827) (punctuation 119825 . 119826) (punctuation 119823 . 119824) (punctuation 119822 . 119823) (CONST 119816 . 119821) (CHAR 119811 . 119815) (punctuation 119803 . 119804) (symbol 119794 . 119803) (punctuation 119792 . 119793) (punctuation 119791 . 119792) (CONST 119785 . 119790) (CHAR 119780 . 119784) (punctuation 119778 . 119779) (punctuation 119777 . 119778) (symbol 119767 . 119776) (punctuation 119765 . 119766) (punctuation 119764 . 119765) (punctuation 119763 . 119764) (CHAR 119758 . 119762) (open-paren 119757 . 119758) (symbol 119748 . 119756) (symbol 119738 . 119747) (EXTERN 119731 . 119737) (punctuation 119729 . 119730) (close-paren 119728 . 119729) (number 119727 . 119728) (punctuation 119725 . 119726) (number 119724 . 119725) (open-paren 119723 . 119724) (symbol 119699 . 119722) (close-paren 119695 . 119696) (punctuation 119694 . 119695) (punctuation 119693 . 119694) (punctuation 119692 . 119693) (punctuation 119690 . 119691) (punctuation 119689 . 119690) (CONST 119683 . 119688) (CHAR 119678 . 119682) (punctuation 119676 . 119677) (punctuation 119675 . 119676) (CHAR 119670 . 119674) (open-paren 119669 . 119670) (symbol 119660 . 119668) (symbol 119650 . 119659) (EXTERN 119643 . 119649) (punctuation 119641 . 119642) (close-paren 119640 . 119641) (symbol 119633 . 119640) (punctuation 119627 . 119628) (punctuation 119626 . 119627) (CHAR 119621 . 119625) (CONST 119615 . 119620) (punctuation 119613 . 119614) (punctuation 119612 . 119613) (CHAR 119607 . 119611) (CONST 119601 . 119606) (punctuation 119599 . 119600) (symbol 119590 . 119599) (punctuation 119588 . 119589) (punctuation 119587 . 119588) (CHAR 119582 . 119586) (open-paren 119581 . 119582) (symbol 119574 . 119580) (symbol 119564 . 119573) (EXTERN 119557 . 119563) (punctuation 119526 . 119527) (close-paren 119525 . 119526) (VOID 119521 . 119525) (open-paren 119520 . 119521) (symbol 119506 . 119519) (VOID 119501 . 119505) (EXTERN 119494 . 119500) (punctuation 119492 . 119493) (close-paren 119491 . 119492) (VOID 119487 . 119491) (open-paren 119486 . 119487) (symbol 119470 . 119485) (VOID 119465 . 119469) (EXTERN 119458 . 119464) (punctuation 119456 . 119457) (close-paren 119455 . 119456) (DOUBLE 119449 . 119455) (punctuation 119447 . 119448) (punctuation 119446 . 119447) (CHAR 119441 . 119445) (open-paren 119440 . 119441) (symbol 119424 . 119439) (INT 119420 . 119423) (EXTERN 119413 . 119419) (punctuation 119375 . 119376) (close-paren 119374 . 119375) (symbol 119363 . 119374) (punctuation 119361 . 119362) (punctuation 119345 . 119346) (punctuation 119330 . 119331) (punctuation 119329 . 119330) (CHAR 119324 . 119328) (CONST 119318 . 119323) (open-paren 119317 . 119318) (symbol 119273 . 119308) (symbol 119261 . 119272) (EXTERN 119254 . 119260) (punctuation 119252 . 119253) (close-paren 119251 . 119252) (symbol 119240 . 119251) (punctuation 119233 . 119234) (punctuation 119232 . 119233) (CHAR 119227 . 119231) (CONST 119221 . 119226) (punctuation 119219 . 119220) (symbol 119208 . 119219) (punctuation 119206 . 119207) (symbol 119195 . 119206) (open-paren 119194 . 119195) (symbol 119174 . 119193) (VOID 119169 . 119173) (EXTERN 119162 . 119168) (punctuation 119160 . 119161) (close-paren 119159 . 119160) (punctuation 119158 . 119159) (CHAR 119153 . 119157) (CONST 119147 . 119152) (open-paren 119146 . 119147) (symbol 119133 . 119145) (VOID 119128 . 119132) (EXTERN 119121 . 119127) (punctuation 119095 . 119096) (close-paren 119094 . 119095) (punctuation 119093 . 119094) (CHAR 119088 . 119092) (CONST 119082 . 119087) (open-paren 119081 . 119082) (symbol 119056 . 119080) (VOID 119051 . 119055) (EXTERN 119044 . 119050) (close-paren 119022 . 119023) (symbol 119011 . 119022) (open-paren 119010 . 119011) (symbol 118998 . 119009) (VOID 118993 . 118997) (EXTERN 118986 . 118992) (punctuation 118912 . 118913) (close-paren 118911 . 118912) (VOID 118907 . 118911) (open-paren 118906 . 118907) (symbol 118890 . 118905) (VOID 118885 . 118889) (EXTERN 118878 . 118884) (punctuation 118876 . 118877) (close-paren 118875 . 118876) (symbol 118864 . 118875) (open-paren 118863 . 118864) (symbol 118849 . 118862) (symbol 118837 . 118848) (EXTERN 118830 . 118836) (punctuation 118828 . 118829) (close-paren 118827 . 118828) (UNSIGNED 118819 . 118827) (punctuation 118817 . 118818) (UNSIGNED 118809 . 118817) (punctuation 118802 . 118803) (punctuation 118801 . 118802) (symbol 118793 . 118800) (STRUCT 118786 . 118792) (punctuation 118784 . 118785) (symbol 118773 . 118784) (punctuation 118766 . 118767) (symbol 118755 . 118766) (punctuation 118753 . 118754) (symbol 118742 . 118753) (punctuation 118735 . 118736) (semantic-list 118709 . 118735) (semantic-list 118695 . 118708) (VOID 118690 . 118694) (open-paren 118689 . 118690) (symbol 118662 . 118688) (VOID 118657 . 118661) (EXTERN 118650 . 118656) (punctuation 118648 . 118649) (close-paren 118647 . 118648) (symbol 118636 . 118647) (punctuation 118634 . 118635) (symbol 118623 . 118634) (punctuation 118621 . 118622) (symbol 118610 . 118621) (punctuation 118580 . 118581) (semantic-list 118513 . 118580) (semantic-list 118509 . 118512) (VOID 118504 . 118508) (open-paren 118503 . 118504) (symbol 118488 . 118502) (VOID 118483 . 118487) (EXTERN 118476 . 118482) (punctuation 118474 . 118475) (close-paren 118473 . 118474) (symbol 118462 . 118473) (punctuation 118460 . 118461) (INT 118457 . 118460) (punctuation 118455 . 118456) (INT 118452 . 118455) (punctuation 118450 . 118451) (symbol 118439 . 118450) (open-paren 118438 . 118439) (symbol 118417 . 118437) (VOID 118412 . 118416) (EXTERN 118405 . 118411) (punctuation 118403 . 118404) (close-paren 118402 . 118403) (punctuation 118401 . 118402) (INT 118397 . 118400) (punctuation 118395 . 118396) (punctuation 118394 . 118395) (INT 118390 . 118393) (punctuation 118343 . 118344) (INT 118340 . 118343) (punctuation 118338 . 118339) (symbol 118327 . 118338) (open-paren 118326 . 118327) (symbol 118301 . 118325) (symbol 118289 . 118300) (EXTERN 118282 . 118288) (punctuation 118280 . 118281) (close-paren 118279 . 118280) (symbol 118268 . 118279) (open-paren 118267 . 118268) (symbol 118251 . 118266) (symbol 118239 . 118250) (EXTERN 118232 . 118238) (punctuation 117866 . 117867) (close-paren 117865 . 117866) (VOID 117861 . 117865) (open-paren 117860 . 117861) (symbol 117839 . 117859) (VOID 117834 . 117838) (EXTERN 117827 . 117833) (punctuation 117818 . 117819) (close-paren 117817 . 117818) (semantic-list 117814 . 117817) (open-paren 117813 . 117814) (symbol 117791 . 117812) (close-paren 117789 . 117790) (symbol 117783 . 117789) (punctuation 117781 . 117782) (symbol 117775 . 117781) (open-paren 117774 . 117775) (symbol 117760 . 117773) (punctuation 117759 . 117760) (VOID 117754 . 117758) (EXTERN 117747 . 117753) (close-paren 117554 . 117555) (punctuation 117552 . 117553) (semantic-list 117550 . 117552) (semantic-list "((void) 0)" 117527 . 117549) (spp-arg-list nil 117527 . 117549) (open-paren 117525 . 117526) (close-paren 117523 . 117524) (VOID 117519 . 117523) (open-paren 117518 . 117519) (close-paren 117516 . 117517) (symbol 117501 . 117516) (open-paren 117500 . 117501) (VOID 117495 . 117499) (symbol 117488 . 117494) (punctuation 117418 . 117419) (close-paren 117417 . 117418) (symbol 117406 . 117417) (open-paren 117405 . 117406) (symbol 117385 . 117404) (INT 117381 . 117384) (EXTERN 117374 . 117380) (punctuation 117372 . 117373) (close-paren 117371 . 117372) (VOID 117367 . 117371) (open-paren 117366 . 117367) (symbol 117350 . 117365) (punctuation 117348 . 117349) (symbol 117341 . 117347) (STRUCT 117334 . 117340) (EXTERN 117327 . 117333) (punctuation 117325 . 117326) (close-paren 117324 . 117325) (VOID 117320 . 117324) (open-paren 117319 . 117320) (symbol 117305 . 117318) (VOID 117300 . 117304) (EXTERN 117293 . 117299) (punctuation 117291 . 117292) (close-paren 117290 . 117291) (VOID 117286 . 117290) (open-paren 117285 . 117286) (symbol 117274 . 117284) (VOID 117269 . 117273) (EXTERN 117262 . 117268) (punctuation 117260 . 117261) (close-paren 117259 . 117260) (VOID 117255 . 117259) (open-paren 117254 . 117255) (symbol 117238 . 117253) (VOID 117233 . 117237) (EXTERN 117226 . 117232) (punctuation 117224 . 117225) (close-paren 117223 . 117224) (punctuation 117222 . 117223) (symbol 117212 . 117221) (STRUCT 117205 . 117211) (open-paren 117204 . 117205) (symbol 117194 . 117203) (VOID 117189 . 117193) (EXTERN 117182 . 117188) (punctuation 117180 . 117181) (close-paren 117179 . 117180) (symbol 117168 . 117179) (open-paren 117167 . 117168) (symbol 117155 . 117166) (VOID 117150 . 117154) (EXTERN 117143 . 117149) (punctuation 117141 . 117142) (close-paren 117140 . 117141) (symbol 117129 . 117140) (punctuation 117127 . 117128) (symbol 117116 . 117127) (punctuation 117114 . 117115) (symbol 117103 . 117114) (open-paren 117102 . 117103) (symbol 117088 . 117101) (symbol 117076 . 117087) (EXTERN 117069 . 117075) (punctuation 117067 . 117068) (close-paren 117066 . 117067) (symbol 117055 . 117066) (open-paren 117054 . 117055) (symbol 117038 . 117053) (VOID 117033 . 117037) (EXTERN 117026 . 117032) (punctuation 117024 . 117025) (close-paren 117023 . 117024) (symbol 117014 . 117023) (punctuation 117012 . 117013) (punctuation 117011 . 117012) (symbol 116999 . 117010) (open-paren 116998 . 116999) (symbol 116981 . 116997) (symbol 116969 . 116980) (EXTERN 116962 . 116968) (punctuation 116960 . 116961) (close-paren 116959 . 116960) (symbol 116948 . 116959) (punctuation 116935 . 116936) (punctuation 116934 . 116935) (VOID 116929 . 116933) (punctuation 116927 . 116928) (semantic-list 116921 . 116927) (semantic-list 116917 . 116920) (VOID 116912 . 116916) (open-paren 116911 . 116912) (symbol 116885 . 116910) (symbol 116873 . 116884) (EXTERN 116866 . 116872) (punctuation 116864 . 116865) (close-paren 116863 . 116864) (punctuation 116862 . 116863) (VOID 116857 . 116861) (punctuation 116855 . 116856) (punctuation 116854 . 116855) (VOID 116849 . 116853) (open-paren 116848 . 116849) (symbol 116830 . 116847) (symbol 116818 . 116829) (EXTERN 116811 . 116817) (punctuation 116809 . 116810) (close-paren 116808 . 116809) (symbol 116799 . 116808) (punctuation 116797 . 116798) (punctuation 116796 . 116797) (VOID 116791 . 116795) (open-paren 116790 . 116791) (symbol 116772 . 116789) (symbol 116760 . 116771) (EXTERN 116753 . 116759) (punctuation 116751 . 116752) (close-paren 116750 . 116751) (punctuation 116749 . 116750) (VOID 116744 . 116748) (open-paren 116743 . 116744) (symbol 116729 . 116742) (symbol 116717 . 116728) (EXTERN 116710 . 116716) (punctuation 116708 . 116709) (close-paren 116707 . 116708) (symbol 116696 . 116707) (punctuation 116694 . 116695) (symbol 116683 . 116694) (punctuation 116670 . 116671) (symbol 116659 . 116670) (punctuation 116657 . 116658) (symbol 116646 . 116657) (open-paren 116645 . 116646) (symbol 116619 . 116644) (symbol 116607 . 116618) (EXTERN 116600 . 116606) (punctuation 116598 . 116599) (close-paren 116597 . 116598) (symbol 116588 . 116597) (punctuation 116586 . 116587) (symbol 116577 . 116586) (punctuation 116575 . 116576) (symbol 116566 . 116575) (open-paren 116565 . 116566) (symbol 116543 . 116564) (symbol 116531 . 116542) (EXTERN 116524 . 116530) (punctuation 116522 . 116523) (close-paren 116521 . 116522) (VOID 116517 . 116521) (open-paren 116516 . 116517) (symbol 116489 . 116515) (symbol 116479 . 116488) (EXTERN 116472 . 116478) (punctuation 116470 . 116471) (close-paren 116469 . 116470) (VOID 116465 . 116469) (open-paren 116464 . 116465) (symbol 116441 . 116463) (VOID 116436 . 116440) (EXTERN 116429 . 116435) (punctuation 116427 . 116428) (close-paren 116426 . 116427) (DOUBLE 116420 . 116426) (open-paren 116419 . 116420) (symbol 116408 . 116418) (symbol 116396 . 116407) (EXTERN 116389 . 116395) (punctuation 115677 . 115678) (close-paren 115676 . 115677) (symbol 115667 . 115676) (ENUM 115662 . 115666) (punctuation 115652 . 115653) (INT 115649 . 115652) (punctuation 115647 . 115648) (INT 115644 . 115647) (punctuation 115642 . 115643) (INT 115639 . 115642) (open-paren 115638 . 115639) (symbol 115616 . 115637) (punctuation 115615 . 115616) (symbol 115603 . 115614) (STRUCT 115596 . 115602) (EXTERN 115589 . 115595) (close-paren 115586 . 115587) (RETURN 115576 . 115582) (punctuation 115552 . 115553) (punctuation 115551 . 115552) (semantic-list 115548 . 115551) (symbol 115532 . 115547) (punctuation 115514 . 115515) (punctuation 115513 . 115514) (semantic-list 115510 . 115513) (symbol 115494 . 115509) (punctuation 115490 . 115491) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 115465 . 115468) ("v" symbol "XVECTOR" 115457 . 115464)))) 115443 . 115490) (open-paren 115333 . 115334) (close-paren 115331 . 115332) (symbol 115323 . 115331) (INT 115319 . 115322) (punctuation 115317 . 115318) (symbol 115312 . 115317) (INT 115308 . 115311) (open-paren 115307 . 115308) (symbol 115280 . 115306) (symbol 115268 . 115279) (symbol 115261 . 115267) (close-paren 115205 . 115206) (RETURN 115195 . 115201) (punctuation 115191 . 115192) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 115189 . 115190) ("a" symbol "v" 115186 . 115187)))) 115174 . 115191) (open-paren 115097 . 115098) (close-paren 115095 . 115096) (symbol 115091 . 115095) (symbol 115081 . 115090) (open-paren 115080 . 115081) (symbol 115061 . 115079) (symbol 115049 . 115060) (symbol 115042 . 115048) (punctuation 114730 . 114731) (close-paren 114729 . 114730) (symbol 114720 . 114729) (open-paren 114719 . 114720) (symbol 114703 . 114718) (punctuation 114702 . 114703) (symbol 114690 . 114701) (STRUCT 114683 . 114689) (EXTERN 114676 . 114682) (punctuation 114674 . 114675) (close-paren 114673 . 114674) (punctuation 114672 . 114673) (symbol 114660 . 114671) (STRUCT 114653 . 114659) (open-paren 114652 . 114653) (symbol 114637 . 114651) (VOID 114632 . 114636) (EXTERN 114625 . 114631) (punctuation 114623 . 114624) (close-paren 114622 . 114623) (symbol 114611 . 114622) (punctuation 114609 . 114610) (symbol 114598 . 114609) (open-paren 114597 . 114598) (symbol 114587 . 114596) (symbol 114575 . 114586) (EXTERN 114568 . 114574) (close-paren 114565 . 114566) (semantic-list 114557 . 114562) (RETURN 114525 . 114531) (open-paren 114521 . 114522) (close-paren 114519 . 114520) (symbol 114516 . 114519) (punctuation 114515 . 114516) (CHAR 114510 . 114514) (CONST 114504 . 114509) (open-paren 114503 . 114504) (symbol 114490 . 114502) (symbol 114478 . 114489) (symbol 114471 . 114477) (close-paren 114374 . 114375) (semantic-list 114366 . 114371) (RETURN 114327 . 114333) (open-paren 114323 . 114324) (close-paren 114321 . 114322) (symbol 114318 . 114321) (punctuation 114317 . 114318) (CHAR 114312 . 114316) (CONST 114306 . 114311) (open-paren 114305 . 114306) (symbol 114285 . 114304) (symbol 114273 . 114284) (symbol 114266 . 114272) (punctuation 114192 . 114193) (close-paren 114191 . 114192) (symbol 114182 . 114191) (punctuation 114180 . 114181) (punctuation 114179 . 114180) (CHAR 114174 . 114178) (CONST 114168 . 114173) (open-paren 114167 . 114168) (symbol 114148 . 114166) (symbol 114136 . 114147) (EXTERN 114129 . 114135) (punctuation 114127 . 114128) (close-paren 114126 . 114127) (BOOL 114122 . 114126) (punctuation 114120 . 114121) (symbol 114111 . 114120) (punctuation 114109 . 114110) (symbol 114100 . 114109) (punctuation 114098 . 114099) (punctuation 114097 . 114098) (CHAR 114092 . 114096) (CONST 114086 . 114091) (open-paren 114085 . 114086) (symbol 114068 . 114084) (symbol 114056 . 114067) (EXTERN 114049 . 114055) (punctuation 114047 . 114048) (close-paren 114046 . 114047) (BOOL 114042 . 114046) (punctuation 114040 . 114041) (symbol 114031 . 114040) (punctuation 114029 . 114030) (symbol 114020 . 114029) (punctuation 114011 . 114012) (punctuation 114010 . 114011) (CHAR 114005 . 114009) (CONST 113999 . 114004) (open-paren 113998 . 113999) (symbol 113976 . 113997) (symbol 113964 . 113975) (EXTERN 113957 . 113963) (punctuation 113955 . 113956) (close-paren 113954 . 113955) (symbol 113945 . 113954) (punctuation 113943 . 113944) (symbol 113934 . 113943) (punctuation 113932 . 113933) (punctuation 113931 . 113932) (CHAR 113926 . 113930) (CONST 113920 . 113925) (open-paren 113919 . 113920) (symbol 113896 . 113918) (symbol 113884 . 113895) (EXTERN 113877 . 113883) (punctuation 113875 . 113876) (close-paren 113874 . 113875) (symbol 113865 . 113874) (punctuation 113863 . 113864) (symbol 113854 . 113863) (open-paren 113853 . 113854) (symbol 113824 . 113852) (symbol 113812 . 113823) (EXTERN 113805 . 113811) (punctuation 113803 . 113804) (close-paren 113802 . 113803) (symbol 113793 . 113802) (open-paren 113792 . 113793) (symbol 113773 . 113791) (symbol 113761 . 113772) (EXTERN 113754 . 113760) (punctuation 113752 . 113753) (close-paren 113751 . 113752) (punctuation 113750 . 113751) (symbol 113738 . 113749) (punctuation 113736 . 113737) (symbol 113727 . 113736) (open-paren 113726 . 113727) (symbol 113709 . 113725) (symbol 113697 . 113708) (EXTERN 113690 . 113696) (punctuation 113688 . 113689) (close-paren 113687 . 113688) (symbol 113678 . 113687) (punctuation 113676 . 113677) (symbol 113667 . 113676) (punctuation 113665 . 113666) (punctuation 113664 . 113665) (CHAR 113659 . 113663) (CONST 113653 . 113658) (open-paren 113652 . 113653) (symbol 113630 . 113651) (symbol 113618 . 113629) (EXTERN 113611 . 113617) (close-paren 113608 . 113609) (semantic-list 113600 . 113605) (RETURN 113560 . 113566) (open-paren 113556 . 113557) (close-paren 113554 . 113555) (symbol 113551 . 113554) (punctuation 113550 . 113551) (CHAR 113545 . 113549) (CONST 113539 . 113544) (open-paren 113538 . 113539) (symbol 113517 . 113537) (symbol 113505 . 113516) (symbol 113498 . 113504) (punctuation 113424 . 113425) (close-paren 113423 . 113424) (symbol 113414 . 113423) (punctuation 113412 . 113413) (punctuation 113411 . 113412) (CHAR 113406 . 113410) (CONST 113400 . 113405) (open-paren 113399 . 113400) (symbol 113379 . 113398) (symbol 113367 . 113378) (EXTERN 113360 . 113366) (punctuation 113358 . 113359) (close-paren 113357 . 113358) (number 113356 . 113357) (punctuation 113354 . 113355) (number 113353 . 113354) (open-paren 113352 . 113353) (symbol 113328 . 113351) (close-paren 113324 . 113325) (punctuation 113323 . 113324) (punctuation 113322 . 113323) (punctuation 113321 . 113322) (punctuation 113319 . 113320) (punctuation 113318 . 113319) (CHAR 113313 . 113317) (CONST 113307 . 113312) (punctuation 113305 . 113306) (punctuation 113304 . 113305) (CHAR 113299 . 113303) (open-paren 113298 . 113299) (symbol 113276 . 113297) (symbol 113264 . 113275) (EXTERN 113257 . 113263) (punctuation 113255 . 113256) (close-paren 113254 . 113255) (symbol 113245 . 113254) (punctuation 113243 . 113244) (punctuation 113242 . 113243) (CHAR 113237 . 113241) (CONST 113231 . 113236) (open-paren 113230 . 113231) (symbol 113218 . 113229) (symbol 113206 . 113217) (EXTERN 113199 . 113205) (punctuation 113197 . 113198) (close-paren 113196 . 113197) (VOID 113192 . 113196) (open-paren 113191 . 113192) (symbol 113175 . 113190) (VOID 113170 . 113174) (EXTERN 113153 . 113159) (punctuation 113151 . 113152) (close-paren 113150 . 113151) (symbol 113139 . 113150) (punctuation 113137 . 113138) (symbol 113126 . 113137) (open-paren 113125 . 113126) (symbol 113108 . 113124) (symbol 113096 . 113107) (EXTERN 113089 . 113095) (punctuation 113087 . 113088) (close-paren 113086 . 113087) (symbol 113077 . 113086) (open-paren 113076 . 113077) (symbol 113052 . 113075) (symbol 113040 . 113051) (EXTERN 113033 . 113039) (close-paren 113030 . 113031) (semantic-list 113024 . 113027) (semantic-list 113007 . 113010) (semantic-list 112988 . 112991) (semantic-list 112971 . 112974) (RETURN 112945 . 112951) (open-paren 112941 . 112942) (close-paren 112939 . 112940) (symbol 112938 . 112939) (symbol 112928 . 112937) (punctuation 112926 . 112927) (symbol 112925 . 112926) (symbol 112915 . 112924) (punctuation 112913 . 112914) (symbol 112912 . 112913) (symbol 112902 . 112911) (punctuation 112900 . 112901) (symbol 112899 . 112900) (symbol 112889 . 112898) (open-paren 112888 . 112889) (symbol 112881 . 112887) (symbol 112869 . 112880) (symbol 112862 . 112868) (close-paren 112859 . 112860) (semantic-list 112853 . 112856) (semantic-list 112836 . 112839) (semantic-list 112819 . 112822) (RETURN 112793 . 112799) (open-paren 112789 . 112790) (close-paren 112787 . 112788) (symbol 112786 . 112787) (symbol 112776 . 112785) (punctuation 112774 . 112775) (symbol 112773 . 112774) (symbol 112763 . 112772) (punctuation 112761 . 112762) (symbol 112760 . 112761) (symbol 112750 . 112759) (open-paren 112749 . 112750) (symbol 112742 . 112748) (symbol 112730 . 112741) (symbol 112723 . 112729) (close-paren 112720 . 112721) (semantic-list 112714 . 112717) (semantic-list 112697 . 112700) (RETURN 112671 . 112677) (open-paren 112667 . 112668) (close-paren 112665 . 112666) (symbol 112664 . 112665) (symbol 112654 . 112663) (punctuation 112652 . 112653) (symbol 112651 . 112652) (symbol 112641 . 112650) (open-paren 112640 . 112641) (symbol 112633 . 112639) (symbol 112621 . 112632) (symbol 112614 . 112620) (punctuation 112558 . 112559) (close-paren 112557 . 112558) (punctuation 112556 . 112557) (punctuation 112555 . 112556) (punctuation 112554 . 112555) (punctuation 112552 . 112553) (symbol 112541 . 112552) (punctuation 112539 . 112540) (symbol 112530 . 112539) (punctuation 112528 . 112529) (symbol 112520 . 112528) (ENUM 112515 . 112519) (open-paren 112514 . 112515) (symbol 112508 . 112513) (symbol 112496 . 112507) (EXTERN 112489 . 112495) (punctuation 112487 . 112488) (close-paren 112486 . 112487) (symbol 112473 . 112486) (punctuation 112471 . 112472) (symbol 112458 . 112471) (open-paren 112457 . 112458) (symbol 112448 . 112456) (ENUM 112443 . 112447) (punctuation 112441 . 112442) (close-paren 112440 . 112441) (symbol 112429 . 112440) (punctuation 112422 . 112423) (symbol 112411 . 112422) (punctuation 112409 . 112410) (symbol 112398 . 112409) (punctuation 112396 . 112397) (symbol 112385 . 112396) (punctuation 112383 . 112384) (symbol 112372 . 112383) (open-paren 112371 . 112372) (symbol 112365 . 112370) (symbol 112353 . 112364) (EXTERN 112346 . 112352) (punctuation 112344 . 112345) (close-paren 112343 . 112344) (symbol 112332 . 112343) (punctuation 112330 . 112331) (symbol 112319 . 112330) (punctuation 112317 . 112318) (symbol 112306 . 112317) (punctuation 112304 . 112305) (symbol 112293 . 112304) (open-paren 112292 . 112293) (symbol 112286 . 112291) (symbol 112274 . 112285) (EXTERN 112267 . 112273) (punctuation 112265 . 112266) (close-paren 112264 . 112265) (symbol 112253 . 112264) (punctuation 112251 . 112252) (symbol 112240 . 112251) (punctuation 112238 . 112239) (symbol 112227 . 112238) (open-paren 112226 . 112227) (symbol 112220 . 112225) (symbol 112208 . 112219) (EXTERN 112201 . 112207) (punctuation 112199 . 112200) (close-paren 112198 . 112199) (symbol 112187 . 112198) (punctuation 112185 . 112186) (symbol 112174 . 112185) (open-paren 112173 . 112174) (symbol 112167 . 112172) (symbol 112155 . 112166) (EXTERN 112148 . 112154) (punctuation 112146 . 112147) (close-paren 112145 . 112146) (symbol 112134 . 112145) (open-paren 112133 . 112134) (symbol 112127 . 112132) (symbol 112115 . 112126) (EXTERN 112108 . 112114) (punctuation 111879 . 111880) (close-paren 111878 . 111879) (VOID 111874 . 111878) (open-paren 111873 . 111874) (symbol 111855 . 111872) (VOID 111850 . 111854) (EXTERN 111843 . 111849) (punctuation 111841 . 111842) (close-paren 111840 . 111841) (VOID 111836 . 111840) (open-paren 111835 . 111836) (symbol 111818 . 111834) (VOID 111813 . 111817) (EXTERN 111806 . 111812) (punctuation 111681 . 111682) (close-paren 111680 . 111681) (symbol 111669 . 111680) (open-paren 111668 . 111669) (symbol 111656 . 111667) (VOID 111651 . 111655) (EXTERN 111644 . 111650) (punctuation 111642 . 111643) (close-paren 111641 . 111642) (symbol 111630 . 111641) (open-paren 111629 . 111630) (symbol 111615 . 111628) (BOOL 111610 . 111614) (EXTERN 111603 . 111609) (punctuation 111601 . 111602) (close-paren 111600 . 111601) (symbol 111591 . 111600) (open-paren 111590 . 111591) (symbol 111571 . 111589) (VOID 111566 . 111570) (EXTERN 111549 . 111555) (punctuation 111547 . 111548) (close-paren 111546 . 111547) (symbol 111540 . 111546) (open-paren 111539 . 111540) (symbol 111527 . 111538) (VOID 111522 . 111526) (EXTERN 111505 . 111511) (punctuation 111503 . 111504) (close-paren 111502 . 111503) (punctuation 111501 . 111502) (CHAR 111496 . 111500) (CONST 111490 . 111495) (open-paren 111489 . 111490) (symbol 111474 . 111488) (VOID 111469 . 111473) (EXTERN 111462 . 111468) (punctuation 111460 . 111461) (close-paren 111459 . 111460) (symbol 111450 . 111459) (punctuation 111448 . 111449) (symbol 111439 . 111448) (punctuation 111437 . 111438) (punctuation 111436 . 111437) (symbol 111424 . 111435) (STRUCT 111417 . 111423) (open-paren 111416 . 111417) (symbol 111395 . 111415) (VOID 111390 . 111394) (EXTERN 111383 . 111389) (punctuation 111381 . 111382) (close-paren 111380 . 111381) (symbol 111369 . 111380) (open-paren 111368 . 111369) (symbol 111358 . 111367) (VOID 111353 . 111357) (EXTERN 111346 . 111352) (punctuation 111344 . 111345) (close-paren 111343 . 111344) (VOID 111339 . 111343) (open-paren 111338 . 111339) (symbol 111322 . 111337) (VOID 111317 . 111321) (EXTERN 111310 . 111316) (punctuation 111308 . 111309) (close-paren 111307 . 111308) (VOID 111303 . 111307) (open-paren 111302 . 111303) (symbol 111288 . 111301) (punctuation 111287 . 111288) (VOID 111282 . 111286) (EXTERN 111275 . 111281) (punctuation 111245 . 111246) (close-paren 111244 . 111245) (punctuation 111243 . 111244) (symbol 111233 . 111242) (punctuation 111231 . 111232) (punctuation 111230 . 111231) (symbol 111220 . 111229) (punctuation 111210 . 111211) (symbol 111201 . 111210) (punctuation 111199 . 111200) (punctuation 111198 . 111199) (CHAR 111193 . 111197) (UNSIGNED 111184 . 111192) (CONST 111178 . 111183) (open-paren 111177 . 111178) (symbol 111154 . 111176) (VOID 111149 . 111153) (EXTERN 111142 . 111148) (punctuation 111108 . 111109) (close-paren 111107 . 111108) (semantic-list 111093 . 111107) (semantic-list 111082 . 111092) (VOID 111077 . 111081) (punctuation 111075 . 111076) (punctuation 111074 . 111075) (VOID 111069 . 111073) (open-paren 111068 . 111069) (symbol 111052 . 111067) (VOID 111047 . 111051) (EXTERN 111040 . 111046) (punctuation 111007 . 111008) (close-paren 111006 . 111007) (VOID 111002 . 111006) (open-paren 111001 . 111002) (symbol 110983 . 111000) (VOID 110978 . 110982) (EXTERN 110971 . 110977) (punctuation 110937 . 110938) (close-paren 110936 . 110937) (punctuation 110935 . 110936) (INT 110931 . 110934) (punctuation 110929 . 110930) (punctuation 110928 . 110929) (INT 110924 . 110927) (punctuation 110922 . 110923) (punctuation 110921 . 110922) (INT 110917 . 110920) (punctuation 110915 . 110916) (punctuation 110914 . 110915) (INT 110910 . 110913) (punctuation 110908 . 110909) (punctuation 110907 . 110908) (INT 110903 . 110906) (punctuation 110895 . 110896) (punctuation 110894 . 110895) (INT 110890 . 110893) (punctuation 110888 . 110889) (symbol 110879 . 110888) (punctuation 110877 . 110878) (punctuation 110876 . 110877) (symbol 110869 . 110875) (STRUCT 110862 . 110868) (open-paren 110861 . 110862) (symbol 110847 . 110860) (BOOL 110842 . 110846) (EXTERN 110835 . 110841) (punctuation 110833 . 110834) (close-paren 110832 . 110833) (symbol 110821 . 110832) (open-paren 110820 . 110821) (symbol 110810 . 110819) (symbol 110798 . 110809) (EXTERN 110791 . 110797) (punctuation 110789 . 110790) (close-paren 110788 . 110789) (VOID 110784 . 110788) (open-paren 110783 . 110784) (symbol 110772 . 110782) (VOID 110767 . 110771) (EXTERN 110760 . 110766) (punctuation 110758 . 110759) (close-paren 110757 . 110758) (VOID 110753 . 110757) (open-paren 110752 . 110753) (symbol 110738 . 110751) (VOID 110733 . 110737) (EXTERN 110726 . 110732) (punctuation 110724 . 110725) (close-paren 110723 . 110724) (symbol 110712 . 110723) (punctuation 110710 . 110711) (punctuation 110709 . 110710) (symbol 110703 . 110708) (STRUCT 110696 . 110702) (open-paren 110695 . 110696) (symbol 110672 . 110694) (VOID 110667 . 110671) (punctuation 110664 . 110665) (close-paren 110663 . 110664) (VOID 110659 . 110663) (open-paren 110658 . 110659) (symbol 110648 . 110657) (VOID 110643 . 110647) (EXTERN 110636 . 110642) (punctuation 110634 . 110635) (close-paren 110633 . 110634) (symbol 110624 . 110633) (open-paren 110623 . 110624) (symbol 110604 . 110622) (VOID 110599 . 110603) (EXTERN 110592 . 110598) (punctuation 110590 . 110591) (close-paren 110589 . 110590) (VOID 110585 . 110589) (open-paren 110584 . 110585) (symbol 110567 . 110583) (VOID 110562 . 110566) (EXTERN 110555 . 110561) (punctuation 110553 . 110554) (close-paren 110552 . 110553) (VOID 110548 . 110552) (open-paren 110547 . 110548) (symbol 110521 . 110546) (VOID 110516 . 110520) (EXTERN 110509 . 110515) (punctuation 110507 . 110508) (close-paren 110506 . 110507) (BOOL 110502 . 110506) (punctuation 110500 . 110501) (symbol 110489 . 110500) (punctuation 110487 . 110488) (punctuation 110486 . 110487) (CHAR 110481 . 110485) (CONST 110475 . 110480) (open-paren 110474 . 110475) (symbol 110454 . 110473) (VOID 110449 . 110453) (EXTERN 110442 . 110448) (punctuation 110440 . 110441) (close-paren 110439 . 110440) (BOOL 110435 . 110439) (punctuation 110433 . 110434) (BOOL 110429 . 110433) (punctuation 110427 . 110428) (symbol 110418 . 110427) (punctuation 110416 . 110417) (punctuation 110415 . 110416) (CHAR 110410 . 110414) (CONST 110404 . 110409) (open-paren 110403 . 110404) (symbol 110389 . 110402) (VOID 110384 . 110388) (EXTERN 110377 . 110383) (punctuation 110375 . 110376) (close-paren 110374 . 110375) (symbol 110363 . 110374) (open-paren 110362 . 110363) (symbol 110347 . 110361) (VOID 110342 . 110346) (EXTERN 110335 . 110341) (punctuation 110333 . 110334) (close-paren 110332 . 110333) (symbol 110321 . 110332) (open-paren 110320 . 110321) (symbol 110311 . 110319) (VOID 110306 . 110310) (EXTERN 110299 . 110305) (punctuation 110297 . 110298) (close-paren 110296 . 110297) (punctuation 110295 . 110296) (CHAR 110290 . 110294) (CONST 110284 . 110289) (open-paren 110283 . 110284) (symbol 110268 . 110282) (VOID 110263 . 110267) (EXTERN 110256 . 110262) (punctuation 110254 . 110255) (close-paren 110253 . 110254) (punctuation 110252 . 110253) (CHAR 110247 . 110251) (CONST 110241 . 110246) (open-paren 110240 . 110241) (symbol 110231 . 110239) (VOID 110226 . 110230) (EXTERN 110219 . 110225) (punctuation 110217 . 110218) (close-paren 110216 . 110217) (number 110215 . 110216) (punctuation 110213 . 110214) (number 110212 . 110213) (open-paren 110211 . 110212) (symbol 110187 . 110210) (close-paren 110185 . 110186) (punctuation 110184 . 110185) (punctuation 110183 . 110184) (punctuation 110182 . 110183) (punctuation 110180 . 110181) (punctuation 110179 . 110180) (CHAR 110174 . 110178) (CONST 110168 . 110173) (open-paren 110167 . 110168) (symbol 110159 . 110166) (VOID 110154 . 110158) (EXTERN 110147 . 110153) (punctuation 110145 . 110146) (close-paren 110144 . 110145) (BOOL 110140 . 110144) (punctuation 110138 . 110139) (BOOL 110134 . 110138) (open-paren 110133 . 110134) (symbol 110119 . 110132) (VOID 110114 . 110118) (EXTERN 110107 . 110113) (punctuation 110105 . 110106) (close-paren 110104 . 110105) (VOID 110100 . 110104) (open-paren 110099 . 110100) (symbol 110083 . 110098) (symbol 110071 . 110082) (EXTERN 110064 . 110070) (punctuation 110062 . 110063) (close-paren 110061 . 110062) (VOID 110057 . 110061) (open-paren 110056 . 110057) (symbol 110040 . 110055) (VOID 110035 . 110039) (EXTERN 110028 . 110034) (punctuation 110026 . 110027) (close-paren 110025 . 110026) (symbol 110014 . 110025) (open-paren 110013 . 110014) (symbol 109990 . 110012) (symbol 109978 . 109989) (EXTERN 109971 . 109977) (punctuation 109969 . 109970) (close-paren 109968 . 109969) (VOID 109964 . 109968) (open-paren 109963 . 109964) (symbol 109944 . 109962) (VOID 109939 . 109943) (EXTERN 109932 . 109938) (punctuation 109930 . 109931) (close-paren 109929 . 109930) (VOID 109925 . 109929) (open-paren 109924 . 109925) (symbol 109911 . 109923) (BOOL 109906 . 109910) (EXTERN 109899 . 109905) (punctuation 109897 . 109898) (close-paren 109896 . 109897) (BOOL 109892 . 109896) (open-paren 109891 . 109892) (symbol 109862 . 109890) (VOID 109857 . 109861) (EXTERN 109850 . 109856) (punctuation 109848 . 109849) (close-paren 109847 . 109848) (VOID 109843 . 109847) (open-paren 109842 . 109843) (symbol 109822 . 109841) (VOID 109817 . 109821) (EXTERN 109810 . 109816) (punctuation 109808 . 109809) (close-paren 109807 . 109808) (symbol 109800 . 109807) (punctuation 109798 . 109799) (punctuation 109797 . 109798) (CONST 109791 . 109796) (CHAR 109786 . 109790) (open-paren 109785 . 109786) (symbol 109773 . 109784) (VOID 109768 . 109772) (EXTERN 109761 . 109767) (punctuation 109759 . 109760) (close-paren 109758 . 109759) (punctuation 109757 . 109758) (punctuation 109756 . 109757) (punctuation 109755 . 109756) (punctuation 109753 . 109754) (punctuation 109752 . 109753) (CONST 109746 . 109751) (CHAR 109741 . 109745) (open-paren 109740 . 109741) (symbol 109729 . 109739) (VOID 109724 . 109728) (EXTERN 109717 . 109723) (punctuation 109715 . 109716) (close-paren 109714 . 109715) (number 109713 . 109714) (open-paren 109712 . 109713) (symbol 109696 . 109712) (symbol 109684 . 109695) (EXTERN 109677 . 109683) (punctuation 109606 . 109607) (close-paren 109605 . 109606) (INT 109602 . 109605) (punctuation 109600 . 109601) (BOOL 109596 . 109600) (punctuation 109594 . 109595) (symbol 109583 . 109594) (open-paren 109582 . 109583) (symbol 109574 . 109581) (symbol 109562 . 109573) (EXTERN 109555 . 109561) (punctuation 109339 . 109340) (close-paren 109338 . 109339) (VOID 109334 . 109338) (open-paren 109333 . 109334) (symbol 109318 . 109332) (VOID 109313 . 109317) (EXTERN 109306 . 109312) (punctuation 109304 . 109305) (close-paren 109303 . 109304) (BOOL 109299 . 109303) (punctuation 109297 . 109298) (symbol 109288 . 109297) (punctuation 109286 . 109287) (symbol 109277 . 109286) (punctuation 109275 . 109276) (punctuation 109274 . 109275) (CHAR 109269 . 109273) (CONST 109263 . 109268) (punctuation 109253 . 109254) (symbol 109244 . 109253) (punctuation 109242 . 109243) (symbol 109233 . 109242) (punctuation 109231 . 109232) (symbol 109222 . 109231) (punctuation 109220 . 109221) (symbol 109211 . 109220) (open-paren 109210 . 109211) (symbol 109194 . 109209) (VOID 109189 . 109193) (EXTERN 109182 . 109188) (punctuation 109180 . 109181) (close-paren 109179 . 109180) (BOOL 109175 . 109179) (punctuation 109173 . 109174) (BOOL 109169 . 109173) (punctuation 109167 . 109168) (BOOL 109163 . 109167) (punctuation 109161 . 109162) (BOOL 109157 . 109161) (punctuation 109155 . 109156) (symbol 109144 . 109155) (punctuation 109142 . 109143) (symbol 109133 . 109142) (punctuation 109131 . 109132) (symbol 109122 . 109131) (open-paren 109121 . 109122) (symbol 109107 . 109120) (VOID 109102 . 109106) (EXTERN 109095 . 109101) (punctuation 109093 . 109094) (close-paren 109092 . 109093) (INT 109089 . 109092) (punctuation 109087 . 109088) (symbol 109078 . 109087) (punctuation 109076 . 109077) (symbol 109067 . 109076) (punctuation 109057 . 109058) (symbol 109048 . 109057) (punctuation 109046 . 109047) (symbol 109037 . 109046) (open-paren 109036 . 109037) (symbol 109013 . 109035) (VOID 109008 . 109012) (EXTERN 109001 . 109007) (punctuation 108999 . 109000) (close-paren 108998 . 108999) (symbol 108989 . 108998) (punctuation 108987 . 108988) (symbol 108978 . 108987) (punctuation 108965 . 108966) (symbol 108956 . 108965) (punctuation 108954 . 108955) (symbol 108945 . 108954) (open-paren 108944 . 108945) (symbol 108918 . 108943) (VOID 108913 . 108917) (EXTERN 108906 . 108912) (punctuation 108904 . 108905) (close-paren 108903 . 108904) (symbol 108894 . 108903) (punctuation 108892 . 108893) (symbol 108883 . 108892) (punctuation 108876 . 108877) (symbol 108867 . 108876) (punctuation 108865 . 108866) (symbol 108856 . 108865) (punctuation 108854 . 108855) (symbol 108845 . 108854) (open-paren 108844 . 108845) (symbol 108824 . 108843) (VOID 108819 . 108823) (EXTERN 108812 . 108818) (punctuation 108810 . 108811) (close-paren 108809 . 108810) (symbol 108800 . 108809) (punctuation 108798 . 108799) (symbol 108789 . 108798) (punctuation 108787 . 108788) (symbol 108778 . 108787) (open-paren 108777 . 108778) (symbol 108757 . 108776) (VOID 108752 . 108756) (EXTERN 108745 . 108751) (punctuation 108743 . 108744) (close-paren 108742 . 108743) (symbol 108733 . 108742) (punctuation 108731 . 108732) (symbol 108722 . 108731) (punctuation 108720 . 108721) (punctuation 108719 . 108720) (symbol 108712 . 108718) (STRUCT 108705 . 108711) (open-paren 108704 . 108705) (symbol 108679 . 108703) (VOID 108674 . 108678) (EXTERN 108667 . 108673) (punctuation 108665 . 108666) (close-paren 108664 . 108665) (punctuation 108663 . 108664) (symbol 108653 . 108662) (punctuation 108651 . 108652) (symbol 108642 . 108651) (punctuation 108640 . 108641) (symbol 108631 . 108640) (open-paren 108630 . 108631) (symbol 108603 . 108629) (VOID 108598 . 108602) (EXTERN 108591 . 108597) (punctuation 108589 . 108590) (close-paren 108588 . 108589) (punctuation 108587 . 108588) (symbol 108577 . 108586) (punctuation 108575 . 108576) (symbol 108566 . 108575) (punctuation 108564 . 108565) (symbol 108555 . 108564) (open-paren 108554 . 108555) (symbol 108529 . 108553) (VOID 108524 . 108528) (EXTERN 108517 . 108523) (punctuation 108515 . 108516) (close-paren 108514 . 108515) (symbol 108505 . 108514) (punctuation 108503 . 108504) (symbol 108494 . 108503) (open-paren 108493 . 108494) (symbol 108481 . 108492) (VOID 108476 . 108480) (EXTERN 108469 . 108475) (punctuation 108467 . 108468) (close-paren 108466 . 108467) (BOOL 108462 . 108466) (punctuation 108460 . 108461) (symbol 108451 . 108460) (punctuation 108449 . 108450) (symbol 108440 . 108449) (punctuation 108434 . 108435) (symbol 108425 . 108434) (punctuation 108423 . 108424) (symbol 108414 . 108423) (open-paren 108413 . 108414) (symbol 108401 . 108412) (symbol 108389 . 108400) (EXTERN 108382 . 108388) (punctuation 108380 . 108381) (close-paren 108379 . 108380) (BOOL 108375 . 108379) (punctuation 108373 . 108374) (symbol 108364 . 108373) (punctuation 108362 . 108363) (symbol 108353 . 108362) (punctuation 108351 . 108352) (symbol 108342 . 108351) (punctuation 108340 . 108341) (symbol 108331 . 108340) (open-paren 108330 . 108331) (symbol 108315 . 108329) (VOID 108310 . 108314) (EXTERN 108303 . 108309) (punctuation 108301 . 108302) (close-paren 108300 . 108301) (symbol 108291 . 108300) (punctuation 108289 . 108290) (symbol 108280 . 108289) (open-paren 108279 . 108280) (symbol 108264 . 108278) (VOID 108259 . 108263) (EXTERN 108252 . 108258) (punctuation 108250 . 108251) (close-paren 108249 . 108250) (BOOL 108245 . 108249) (punctuation 108243 . 108244) (BOOL 108239 . 108243) (punctuation 108237 . 108238) (symbol 108228 . 108237) (punctuation 108226 . 108227) (symbol 108217 . 108226) (open-paren 108216 . 108217) (symbol 108204 . 108215) (symbol 108192 . 108203) (EXTERN 108185 . 108191) (punctuation 108183 . 108184) (close-paren 108182 . 108183) (symbol 108173 . 108182) (punctuation 108171 . 108172) (symbol 108162 . 108171) (open-paren 108161 . 108162) (symbol 108151 . 108160) (VOID 108146 . 108150) (EXTERN 108139 . 108145) (punctuation 108137 . 108138) (close-paren 108136 . 108137) (BOOL 108132 . 108136) (punctuation 108130 . 108131) (symbol 108121 . 108130) (punctuation 108107 . 108108) (symbol 108098 . 108107) (punctuation 108096 . 108097) (symbol 108087 . 108096) (punctuation 108073 . 108074) (symbol 108064 . 108073) (punctuation 108062 . 108063) (symbol 108051 . 108062) (open-paren 108050 . 108051) (symbol 108016 . 108049) (VOID 108011 . 108015) (EXTERN 108004 . 108010) (punctuation 108002 . 108003) (close-paren 108001 . 108002) (symbol 107992 . 108001) (punctuation 107990 . 107991) (punctuation 107989 . 107990) (CHAR 107984 . 107988) (CONST 107978 . 107983) (open-paren 107977 . 107978) (symbol 107943 . 107976) (VOID 107938 . 107942) (EXTERN 107931 . 107937) (punctuation 107929 . 107930) (close-paren 107928 . 107929) (symbol 107919 . 107928) (punctuation 107917 . 107918) (punctuation 107916 . 107917) (CHAR 107911 . 107915) (CONST 107905 . 107910) (open-paren 107904 . 107905) (symbol 107882 . 107903) (VOID 107877 . 107881) (EXTERN 107870 . 107876) (punctuation 107868 . 107869) (close-paren 107867 . 107868) (punctuation 107866 . 107867) (CHAR 107861 . 107865) (CONST 107855 . 107860) (open-paren 107854 . 107855) (symbol 107840 . 107853) (VOID 107835 . 107839) (EXTERN 107828 . 107834) (punctuation 107826 . 107827) (close-paren 107825 . 107826) (INT 107822 . 107825) (open-paren 107821 . 107822) (symbol 107809 . 107820) (VOID 107804 . 107808) (EXTERN 107797 . 107803) (punctuation 107795 . 107796) (close-paren 107794 . 107795) (BOOL 107790 . 107794) (punctuation 107788 . 107789) (symbol 107779 . 107788) (punctuation 107777 . 107778) (symbol 107768 . 107777) (punctuation 107766 . 107767) (punctuation 107765 . 107766) (symbol 107758 . 107764) (STRUCT 107751 . 107757) (open-paren 107750 . 107751) (symbol 107731 . 107749) (VOID 107726 . 107730) (EXTERN 107719 . 107725) (punctuation 107717 . 107718) (close-paren 107716 . 107717) (BOOL 107712 . 107716) (punctuation 107710 . 107711) (symbol 107701 . 107710) (punctuation 107699 . 107700) (symbol 107690 . 107699) (punctuation 107684 . 107685) (symbol 107675 . 107684) (punctuation 107673 . 107674) (symbol 107664 . 107673) (punctuation 107662 . 107663) (symbol 107651 . 107662) (open-paren 107650 . 107651) (symbol 107631 . 107649) (VOID 107626 . 107630) (EXTERN 107619 . 107625) (punctuation 107617 . 107618) (close-paren 107616 . 107617) (symbol 107600 . 107616) (BOOL 107595 . 107599) (punctuation 107593 . 107594) (symbol 107584 . 107593) (punctuation 107582 . 107583) (symbol 107573 . 107582) (open-paren 107572 . 107573) (symbol 107556 . 107571) (VOID 107551 . 107555) (EXTERN 107544 . 107550) (punctuation 107542 . 107543) (close-paren 107541 . 107542) (BOOL 107537 . 107541) (punctuation 107535 . 107536) (BOOL 107531 . 107535) (punctuation 107529 . 107530) (BOOL 107525 . 107529) (punctuation 107517 . 107518) (symbol 107508 . 107517) (punctuation 107506 . 107507) (symbol 107497 . 107506) (punctuation 107495 . 107496) (punctuation 107494 . 107495) (CHAR 107489 . 107493) (CONST 107483 . 107488) (open-paren 107482 . 107483) (symbol 107468 . 107481) (VOID 107463 . 107467) (EXTERN 107456 . 107462) (punctuation 107454 . 107455) (close-paren 107453 . 107454) (symbol 107444 . 107453) (punctuation 107442 . 107443) (punctuation 107441 . 107442) (CHAR 107436 . 107440) (CONST 107430 . 107435) (open-paren 107429 . 107430) (symbol 107410 . 107428) (VOID 107405 . 107409) (EXTERN 107398 . 107404) (punctuation 107396 . 107397) (close-paren 107395 . 107396) (symbol 107386 . 107395) (punctuation 107384 . 107385) (punctuation 107383 . 107384) (CHAR 107378 . 107382) (CONST 107372 . 107377) (open-paren 107371 . 107372) (symbol 107364 . 107370) (VOID 107359 . 107363) (EXTERN 107352 . 107358) (punctuation 107350 . 107351) (close-paren 107349 . 107350) (symbol 107340 . 107349) (punctuation 107338 . 107339) (symbol 107329 . 107338) (punctuation 107327 . 107328) (symbol 107318 . 107327) (punctuation 107310 . 107311) (punctuation 107309 . 107310) (CHAR 107304 . 107308) (UNSIGNED 107295 . 107303) (CONST 107289 . 107294) (open-paren 107288 . 107289) (symbol 107266 . 107287) (INT 107262 . 107265) (EXTERN 107255 . 107261) (punctuation 107253 . 107254) (close-paren 107252 . 107253) (symbol 107243 . 107252) (punctuation 107241 . 107242) (symbol 107232 . 107241) (punctuation 107230 . 107231) (symbol 107221 . 107230) (punctuation 107212 . 107213) (punctuation 107211 . 107212) (CHAR 107206 . 107210) (UNSIGNED 107197 . 107205) (CONST 107191 . 107196) (open-paren 107190 . 107191) (symbol 107167 . 107189) (INT 107163 . 107166) (EXTERN 107156 . 107162) (punctuation 107154 . 107155) (close-paren 107153 . 107154) (BOOL 107149 . 107153) (punctuation 107147 . 107148) (BOOL 107143 . 107147) (punctuation 107141 . 107142) (symbol 107132 . 107141) (punctuation 107123 . 107124) (punctuation 107122 . 107123) (CHAR 107117 . 107121) (UNSIGNED 107108 . 107116) (punctuation 107106 . 107107) (punctuation 107105 . 107106) (CHAR 107100 . 107104) (UNSIGNED 107091 . 107099) (CONST 107085 . 107090) (open-paren 107084 . 107085) (symbol 107074 . 107083) (symbol 107064 . 107073) (EXTERN 107057 . 107063) (punctuation 107055 . 107056) (close-paren 107054 . 107055) (symbol 107045 . 107054) (punctuation 107043 . 107044) (punctuation 107042 . 107043) (symbol 107035 . 107041) (STRUCT 107028 . 107034) (open-paren 107027 . 107028) (symbol 107016 . 107026) (VOID 107011 . 107015) (EXTERN 107004 . 107010) (punctuation 107002 . 107003) (close-paren 107001 . 107002) (symbol 106992 . 107001) (open-paren 106991 . 106992) (symbol 106982 . 106990) (VOID 106977 . 106981) (EXTERN 106970 . 106976) (punctuation 106968 . 106969) (close-paren 106967 . 106968) (VOID 106963 . 106967) (open-paren 106962 . 106963) (symbol 106946 . 106961) (VOID 106941 . 106945) (EXTERN 106924 . 106930) (punctuation 106922 . 106923) (close-paren 106921 . 106922) (symbol 106912 . 106921) (punctuation 106910 . 106911) (symbol 106901 . 106910) (open-paren 106900 . 106901) (symbol 106886 . 106899) (VOID 106881 . 106885) (EXTERN 106874 . 106880) (punctuation 106843 . 106844) (close-paren 106842 . 106843) (VOID 106838 . 106842) (open-paren 106837 . 106838) (symbol 106823 . 106836) (VOID 106818 . 106822) (EXTERN 106811 . 106817) (punctuation 106809 . 106810) (close-paren 106808 . 106809) (VOID 106804 . 106808) (open-paren 106803 . 106804) (symbol 106785 . 106802) (VOID 106780 . 106784) (EXTERN 106773 . 106779) (punctuation 106771 . 106772) (close-paren 106770 . 106771) (symbol 106761 . 106770) (punctuation 106759 . 106760) (punctuation 106758 . 106759) (symbol 106752 . 106757) (STRUCT 106745 . 106751) (open-paren 106744 . 106745) (symbol 106730 . 106743) (INT 106726 . 106729) (EXTERN 106719 . 106725) (punctuation 106557 . 106558) (close-paren 106556 . 106557) (VOID 106552 . 106556) (open-paren 106551 . 106552) (symbol 106539 . 106550) (VOID 106534 . 106538) (EXTERN 106527 . 106533) (punctuation 106525 . 106526) (close-paren 106524 . 106525) (VOID 106520 . 106524) (open-paren 106519 . 106520) (symbol 106504 . 106518) (VOID 106499 . 106503) (EXTERN 106492 . 106498) (punctuation 106461 . 106462) (close-paren 106460 . 106461) (symbol 106459 . 106460) (symbol 106447 . 106458) (punctuation 106445 . 106446) (symbol 106444 . 106445) (symbol 106432 . 106443) (open-paren 106431 . 106432) (symbol 106420 . 106430) (symbol 106408 . 106419) (EXTERN 106401 . 106407) (punctuation 106399 . 106400) (close-paren 106398 . 106399) (VOID 106394 . 106398) (open-paren 106393 . 106394) (symbol 106376 . 106392) (VOID 106371 . 106375) (EXTERN 106364 . 106370) (punctuation 106331 . 106332) (close-paren 106330 . 106331) (VOID 106326 . 106330) (open-paren 106325 . 106326) (symbol 106313 . 106324) (VOID 106308 . 106312) (EXTERN 106301 . 106307) (punctuation 106299 . 106300) (close-paren 106298 . 106299) (symbol 106287 . 106298) (open-paren 106286 . 106287) (symbol 106266 . 106285) (symbol 106254 . 106265) (EXTERN 106247 . 106253) (punctuation 106245 . 106246) (close-paren 106244 . 106245) (symbol 106233 . 106244) (open-paren 106232 . 106233) (symbol 106212 . 106231) (symbol 106200 . 106211) (EXTERN 106193 . 106199) (punctuation 106191 . 106192) (close-paren 106190 . 106191) (symbol 106181 . 106190) (punctuation 106179 . 106180) (symbol 106168 . 106179) (open-paren 106167 . 106168) (symbol 106147 . 106166) (symbol 106137 . 106146) (EXTERN 106130 . 106136) (punctuation 106128 . 106129) (close-paren 106127 . 106128) (symbol 106118 . 106127) (punctuation 106116 . 106117) (symbol 106105 . 106116) (open-paren 106104 . 106105) (symbol 106084 . 106103) (symbol 106074 . 106083) (EXTERN 106067 . 106073) (punctuation 106065 . 106066) (close-paren 106064 . 106065) (VOID 106060 . 106064) (open-paren 106059 . 106060) (symbol 106030 . 106058) (VOID 106025 . 106029) (EXTERN 106018 . 106024) (punctuation 106016 . 106017) (close-paren 106015 . 106016) (symbol 106004 . 106015) (punctuation 106002 . 106003) (symbol 105991 . 106002) (open-paren 105990 . 105991) (symbol 105976 . 105989) (symbol 105964 . 105975) (EXTERN 105957 . 105963) (punctuation 105955 . 105956) (close-paren 105954 . 105955) (symbol 105943 . 105954) (punctuation 105941 . 105942) (symbol 105930 . 105941) (open-paren 105929 . 105930) (symbol 105916 . 105928) (symbol 105904 . 105915) (EXTERN 105897 . 105903) (punctuation 105895 . 105896) (close-paren 105894 . 105895) (symbol 105883 . 105894) (punctuation 105881 . 105882) (symbol 105870 . 105881) (open-paren 105869 . 105870) (symbol 105862 . 105868) (symbol 105850 . 105861) (EXTERN 105843 . 105849) (punctuation 105841 . 105842) (close-paren 105840 . 105841) (symbol 105829 . 105840) (punctuation 105827 . 105828) (symbol 105816 . 105827) (punctuation 105814 . 105815) (symbol 105803 . 105814) (open-paren 105802 . 105803) (symbol 105794 . 105801) (symbol 105782 . 105793) (EXTERN 105775 . 105781) (punctuation 105773 . 105774) (close-paren 105772 . 105773) (symbol 105761 . 105772) (punctuation 105759 . 105760) (symbol 105748 . 105759) (open-paren 105747 . 105748) (symbol 105739 . 105746) (symbol 105727 . 105738) (EXTERN 105720 . 105726) (punctuation 105718 . 105719) (close-paren 105717 . 105718) (symbol 105706 . 105717) (open-paren 105705 . 105706) (symbol 105690 . 105704) (symbol 105678 . 105689) (EXTERN 105671 . 105677) (punctuation 105669 . 105670) (close-paren 105668 . 105669) (symbol 105657 . 105668) (punctuation 105655 . 105656) (symbol 105644 . 105655) (punctuation 105642 . 105643) (symbol 105631 . 105642) (open-paren 105630 . 105631) (symbol 105624 . 105629) (symbol 105612 . 105623) (EXTERN 105605 . 105611) (punctuation 105603 . 105604) (close-paren 105602 . 105603) (symbol 105593 . 105602) (punctuation 105591 . 105592) (symbol 105582 . 105591) (punctuation 105573 . 105574) (symbol 105564 . 105573) (punctuation 105562 . 105563) (symbol 105553 . 105562) (punctuation 105551 . 105552) (symbol 105540 . 105551) (open-paren 105539 . 105540) (symbol 105524 . 105538) (symbol 105512 . 105523) (EXTERN 105505 . 105511) (punctuation 105503 . 105504) (close-paren 105502 . 105503) (punctuation 105501 . 105502) (symbol 105491 . 105500) (punctuation 105489 . 105490) (punctuation 105488 . 105489) (symbol 105478 . 105487) (punctuation 105476 . 105477) (symbol 105467 . 105476) (punctuation 105455 . 105456) (symbol 105444 . 105455) (punctuation 105442 . 105443) (symbol 105431 . 105442) (punctuation 105429 . 105430) (symbol 105418 . 105429) (open-paren 105417 . 105418) (symbol 105399 . 105416) (VOID 105394 . 105398) (EXTERN 105387 . 105393) (punctuation 105306 . 105307) (close-paren 105305 . 105306) (symbol 105294 . 105305) (punctuation 105292 . 105293) (punctuation 105291 . 105292) (symbol 105275 . 105290) (STRUCT 105268 . 105274) (open-paren 105267 . 105268) (symbol 105244 . 105266) (VOID 105239 . 105243) (punctuation 105237 . 105238) (close-paren 105236 . 105237) (symbol 105226 . 105236) (punctuation 105218 . 105219) (symbol 105207 . 105218) (punctuation 105205 . 105206) (symbol 105194 . 105205) (punctuation 105192 . 105193) (punctuation 105191 . 105192) (symbol 105175 . 105190) (STRUCT 105168 . 105174) (open-paren 105167 . 105168) (symbol 105158 . 105166) (symbol 105148 . 105157) (punctuation 105146 . 105147) (close-paren 105145 . 105146) (punctuation 105144 . 105145) (symbol 105133 . 105143) (punctuation 105131 . 105132) (symbol 105120 . 105131) (punctuation 105118 . 105119) (punctuation 105117 . 105118) (symbol 105101 . 105116) (STRUCT 105094 . 105100) (open-paren 105093 . 105094) (symbol 105081 . 105092) (symbol 105071 . 105080) (punctuation 105069 . 105070) (close-paren 105068 . 105069) (symbol 105057 . 105068) (punctuation 105055 . 105056) (symbol 105044 . 105055) (punctuation 105013 . 105014) (symbol 105002 . 105013) (punctuation 105000 . 105001) (symbol 104989 . 105000) (punctuation 104987 . 104988) (symbol 104972 . 104987) (STRUCT 104965 . 104971) (open-paren 104964 . 104965) (symbol 104948 . 104963) (symbol 104936 . 104947) (punctuation 104934 . 104935) (close-paren 104933 . 104934) (INT 104930 . 104933) (punctuation 104928 . 104929) (symbol 104917 . 104928) (open-paren 104916 . 104917) (symbol 104909 . 104915) (symbol 104898 . 104908) (punctuation 104896 . 104897) (close-paren 104895 . 104896) (symbol 104886 . 104895) (punctuation 104884 . 104885) (punctuation 104883 . 104884) (CONST 104877 . 104882) (CHAR 104872 . 104876) (open-paren 104871 . 104872) (symbol 104859 . 104870) (symbol 104848 . 104858) (punctuation 104846 . 104847) (close-paren 104845 . 104846) (VOID 104841 . 104845) (open-paren 104840 . 104841) (symbol 104817 . 104839) (VOID 104812 . 104816) (EXTERN 104805 . 104811) (punctuation 104803 . 104804) (close-paren 104802 . 104803) (symbol 104793 . 104802) (punctuation 104791 . 104792) (symbol 104782 . 104791) (punctuation 104780 . 104781) (symbol 104769 . 104780) (open-paren 104768 . 104769) (symbol 104754 . 104767) (symbol 104742 . 104753) (EXTERN 104735 . 104741) (close-paren 104716 . 104717) (symbol 104707 . 104716) (open-paren 104706 . 104707) (symbol 104688 . 104705) (symbol 104678 . 104687) (EXTERN 104671 . 104677) (punctuation 104669 . 104670) (close-paren 104668 . 104669) (number 104665 . 104667) (punctuation 104663 . 104664) (symbol 104639 . 104662) (open-paren 104637 . 104638) (ENUM 104632 . 104636) (punctuation 104604 . 104605) (close-paren 104603 . 104604) (VOID 104599 . 104603) (open-paren 104598 . 104599) (symbol 104583 . 104597) (VOID 104578 . 104582) (EXTERN 104571 . 104577) (punctuation 104569 . 104570) (close-paren 104568 . 104569) (VOID 104564 . 104568) (open-paren 104563 . 104564) (symbol 104546 . 104562) (VOID 104541 . 104545) (EXTERN 104534 . 104540) (punctuation 104448 . 104449) (close-paren 104447 . 104448) (VOID 104443 . 104447) (open-paren 104442 . 104443) (symbol 104426 . 104441) (VOID 104421 . 104425) (EXTERN 104414 . 104420) (punctuation 104412 . 104413) (close-paren 104411 . 104412) (VOID 104407 . 104411) (open-paren 104406 . 104407) (symbol 104388 . 104405) (VOID 104383 . 104387) (EXTERN 104376 . 104382) (punctuation 104374 . 104375) (close-paren 104373 . 104374) (VOID 104369 . 104373) (open-paren 104368 . 104369) (symbol 104355 . 104367) (VOID 104350 . 104354) (EXTERN 104343 . 104349) (punctuation 104311 . 104312) (close-paren 104310 . 104311) (VOID 104306 . 104310) (open-paren 104305 . 104306) (symbol 104287 . 104304) (VOID 104282 . 104286) (EXTERN 104275 . 104281) (punctuation 104273 . 104274) (close-paren 104272 . 104273) (symbol 104263 . 104272) (punctuation 104261 . 104262) (punctuation 104260 . 104261) (CHAR 104255 . 104259) (UNSIGNED 104246 . 104254) (CONST 104240 . 104245) (open-paren 104239 . 104240) (symbol 104215 . 104238) (symbol 104205 . 104214) (EXTERN 104198 . 104204) (punctuation 104196 . 104197) (close-paren 104195 . 104196) (symbol 104186 . 104195) (punctuation 104184 . 104185) (punctuation 104183 . 104184) (CHAR 104178 . 104182) (UNSIGNED 104169 . 104177) (CONST 104163 . 104168) (open-paren 104162 . 104163) (symbol 104148 . 104161) (symbol 104138 . 104147) (EXTERN 104131 . 104137) (punctuation 104097 . 104098) (close-paren 104096 . 104097) (VOID 104092 . 104096) (open-paren 104091 . 104092) (symbol 104076 . 104090) (VOID 104071 . 104075) (EXTERN 104064 . 104070) (punctuation 104062 . 104063) (close-paren 104061 . 104062) (VOID 104057 . 104061) (open-paren 104056 . 104057) (symbol 104039 . 104055) (VOID 104034 . 104038) (EXTERN 104027 . 104033) (punctuation 104025 . 104026) (close-paren 104024 . 104025) (VOID 104020 . 104024) (open-paren 104019 . 104020) (symbol 104007 . 104018) (VOID 104002 . 104006) (EXTERN 103995 . 104001) (punctuation 103993 . 103994) (close-paren 103992 . 103993) (symbol 103981 . 103992) (punctuation 103979 . 103980) (BOOL 103975 . 103979) (punctuation 103973 . 103974) (BOOL 103969 . 103973) (punctuation 103967 . 103968) (symbol 103958 . 103967) (punctuation 103915 . 103916) (symbol 103906 . 103915) (punctuation 103904 . 103905) (punctuation 103903 . 103904) (CHAR 103898 . 103902) (UNSIGNED 103889 . 103897) (CONST 103883 . 103888) (open-paren 103882 . 103883) (symbol 103861 . 103881) (symbol 103849 . 103860) (EXTERN 103842 . 103848) (punctuation 103811 . 103812) (close-paren 103810 . 103811) (VOID 103806 . 103810) (open-paren 103805 . 103806) (symbol 103792 . 103804) (VOID 103787 . 103791) (EXTERN 103780 . 103786) (punctuation 103778 . 103779) (close-paren 103777 . 103778) (VOID 103773 . 103777) (open-paren 103772 . 103773) (symbol 103759 . 103771) (VOID 103754 . 103758) (EXTERN 103747 . 103753) (punctuation 103720 . 103721) (close-paren 103719 . 103720) (punctuation 103718 . 103719) (symbol 103706 . 103717) (STRUCT 103699 . 103705) (open-paren 103698 . 103699) (symbol 103675 . 103697) (VOID 103670 . 103674) (EXTERN 103663 . 103669) (punctuation 103661 . 103662) (close-paren 103660 . 103661) (VOID 103656 . 103660) (open-paren 103655 . 103656) (symbol 103642 . 103654) (VOID 103637 . 103641) (EXTERN 103630 . 103636) (punctuation 103628 . 103629) (close-paren 103627 . 103628) (BOOL 103623 . 103627) (punctuation 103621 . 103622) (symbol 103610 . 103621) (punctuation 103608 . 103609) (symbol 103597 . 103608) (punctuation 103595 . 103596) (symbol 103584 . 103595) (open-paren 103583 . 103584) (symbol 103570 . 103582) (VOID 103565 . 103569) (EXTERN 103558 . 103564) (punctuation 103556 . 103557) (close-paren 103555 . 103556) (punctuation 103554 . 103555) (symbol 103545 . 103553) (UNION 103539 . 103544) (open-paren 103538 . 103539) (symbol 103517 . 103537) (symbol 103505 . 103516) (EXTERN 103498 . 103504) (punctuation 103496 . 103497) (close-paren 103495 . 103496) (symbol 103484 . 103495) (punctuation 103474 . 103475) (symbol 103463 . 103474) (punctuation 103461 . 103462) (symbol 103450 . 103461) (open-paren 103449 . 103450) (symbol 103429 . 103448) (VOID 103424 . 103428) (EXTERN 103407 . 103413) (punctuation 103405 . 103406) (close-paren 103404 . 103405) (symbol 103393 . 103404) (punctuation 103391 . 103392) (symbol 103380 . 103391) (open-paren 103379 . 103380) (symbol 103361 . 103378) (VOID 103356 . 103360) (EXTERN 103339 . 103345) (punctuation 103337 . 103338) (close-paren 103336 . 103337) (punctuation 103335 . 103336) (symbol 103323 . 103334) (STRUCT 103316 . 103322) (open-paren 103315 . 103316) (symbol 103297 . 103314) (punctuation 103296 . 103297) (symbol 103284 . 103295) (STRUCT 103277 . 103283) (EXTERN 103270 . 103276) (punctuation 103267 . 103268) (close-paren 103266 . 103267) (symbol 103257 . 103266) (punctuation 103255 . 103256) (symbol 103244 . 103255) (open-paren 103243 . 103244) (symbol 103226 . 103242) (symbol 103216 . 103225) (EXTERN 103209 . 103215) (punctuation 103207 . 103208) (close-paren 103206 . 103207) (symbol 103198 . 103206) (punctuation 103196 . 103197) (symbol 103188 . 103196) (punctuation 103186 . 103187) (symbol 103175 . 103186) (open-paren 103174 . 103175) (symbol 103159 . 103173) (symbol 103150 . 103158) (EXTERN 103143 . 103149) (punctuation 102720 . 102721) (close-paren 102719 . 102720) (symbol 102710 . 102719) (open-paren 102709 . 102710) (symbol 102693 . 102708) (symbol 102681 . 102692) (EXTERN 102674 . 102680) (punctuation 102672 . 102673) (close-paren 102671 . 102672) (symbol 102663 . 102671) (open-paren 102662 . 102663) (symbol 102647 . 102661) (symbol 102635 . 102646) (EXTERN 102628 . 102634) (punctuation 102266 . 102267) (close-paren 102265 . 102266) (symbol 102255 . 102265) (symbol 102238 . 102254) (ENUM 102233 . 102237) (punctuation 102198 . 102199) (symbol 102194 . 102198) (symbol 102182 . 102193) (punctuation 102180 . 102181) (symbol 102176 . 102180) (symbol 102164 . 102175) (open-paren 102163 . 102164) (symbol 102150 . 102162) (symbol 102138 . 102149) (EXTERN 102131 . 102137) (punctuation 102129 . 102130) (close-paren 102128 . 102129) (symbol 102108 . 102127) (punctuation 102104 . 102105) (symbol 102085 . 102104) (punctuation 102081 . 102082) (symbol 102071 . 102081) (punctuation 102067 . 102068) (symbol 102057 . 102067) (punctuation 102053 . 102054) (symbol 102039 . 102053) (punctuation 102035 . 102036) (symbol 102024 . 102035) (open-paren 102020 . 102021) (symbol 102003 . 102019) (ENUM 101998 . 102002) (punctuation 101996 . 101997) (close-paren 101995 . 101996) (symbol 101984 . 101995) (open-paren 101983 . 101984) (symbol 101965 . 101982) (symbol 101953 . 101964) (EXTERN 101946 . 101952) (punctuation 101944 . 101945) (close-paren 101943 . 101944) (symbol 101932 . 101943) (open-paren 101931 . 101932) (symbol 101913 . 101930) (symbol 101901 . 101912) (EXTERN 101894 . 101900) (close-paren 101865 . 101866) (punctuation 101843 . 101844) (punctuation 101842 . 101843) (semantic-list 101835 . 101842) (symbol 101819 . 101834) (open-paren 101815 . 101816) (close-paren 101813 . 101814) (symbol 101810 . 101813) (symbol 101798 . 101809) (punctuation 101796 . 101797) (symbol 101793 . 101796) (symbol 101783 . 101792) (punctuation 101781 . 101782) (symbol 101776 . 101781) (symbol 101764 . 101775) (open-paren 101763 . 101764) (symbol 101735 . 101762) (VOID 101730 . 101734) (symbol 101723 . 101729) (close-paren 101720 . 101721) (punctuation 101698 . 101699) (punctuation 101697 . 101698) (semantic-list 101690 . 101697) (symbol 101678 . 101689) (punctuation 101674 . 101675) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101629 . 101630)))) 101620 . 101674) (open-paren 101616 . 101617) (close-paren 101614 . 101615) (symbol 101611 . 101614) (symbol 101599 . 101610) (punctuation 101597 . 101598) (symbol 101594 . 101597) (symbol 101584 . 101593) (punctuation 101582 . 101583) (symbol 101577 . 101582) (symbol 101565 . 101576) (open-paren 101564 . 101565) (symbol 101540 . 101563) (VOID 101535 . 101539) (symbol 101528 . 101534) (close-paren 101525 . 101526) (punctuation 101505 . 101506) (punctuation 101504 . 101505) (semantic-list 101497 . 101504) (symbol 101485 . 101496) (punctuation 101481 . 101482) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101418 . 101419)))) 101409 . 101481) (open-paren 101405 . 101406) (close-paren 101403 . 101404) (symbol 101400 . 101403) (symbol 101388 . 101399) (punctuation 101386 . 101387) (symbol 101383 . 101386) (symbol 101373 . 101382) (punctuation 101371 . 101372) (symbol 101366 . 101371) (symbol 101354 . 101365) (open-paren 101353 . 101354) (symbol 101331 . 101352) (VOID 101326 . 101330) (symbol 101319 . 101325) (close-paren 101262 . 101263) (punctuation 101246 . 101247) (punctuation 101245 . 101246) (semantic-list 101238 . 101245) (symbol 101226 . 101237) (open-paren 101222 . 101223) (close-paren 101220 . 101221) (symbol 101217 . 101220) (symbol 101205 . 101216) (punctuation 101203 . 101204) (symbol 101198 . 101203) (symbol 101186 . 101197) (open-paren 101185 . 101186) (symbol 101162 . 101184) (VOID 101157 . 101161) (symbol 101150 . 101156) (close-paren 101148 . 101149) (punctuation 101133 . 101134) (punctuation 101132 . 101133) (semantic-list 101125 . 101132) (symbol 101113 . 101124) (open-paren 101109 . 101110) (close-paren 101107 . 101108) (symbol 101104 . 101107) (symbol 101092 . 101103) (punctuation 101090 . 101091) (symbol 101085 . 101090) (symbol 101073 . 101084) (open-paren 101072 . 101073) (symbol 101050 . 101071) (VOID 101045 . 101049) (symbol 101038 . 101044) (close-paren 100929 . 100930) (punctuation 100913 . 100914) (punctuation 100912 . 100913) (semantic-list 100909 . 100912) (symbol 100901 . 100908) (open-paren 100897 . 100898) (close-paren 100895 . 100896) (symbol 100894 . 100895) (symbol 100885 . 100893) (punctuation 100883 . 100884) (symbol 100882 . 100883) (symbol 100870 . 100881) (open-paren 100869 . 100870) (symbol 100848 . 100868) (VOID 100843 . 100847) (symbol 100836 . 100842) (close-paren 100794 . 100795) (punctuation 100782 . 100783) (punctuation 100781 . 100782) (semantic-list 100778 . 100781) (symbol 100770 . 100777) (RETURN 100763 . 100769) (open-paren 100759 . 100760) (close-paren 100757 . 100758) (symbol 100756 . 100757) (symbol 100744 . 100755) (open-paren 100743 . 100744) (symbol 100726 . 100742) (symbol 100717 . 100725) (symbol 100710 . 100716) (close-paren 100673 . 100674) (punctuation 100657 . 100658) (punctuation 100656 . 100657) (semantic-list 100647 . 100656) (symbol 100638 . 100646) (open-paren 100634 . 100635) (close-paren 100632 . 100633) (symbol 100627 . 100632) (symbol 100615 . 100626) (punctuation 100613 . 100614) (symbol 100606 . 100613) (symbol 100594 . 100605) (open-paren 100593 . 100594) (symbol 100575 . 100592) (VOID 100570 . 100574) (symbol 100563 . 100569) (close-paren 100523 . 100524) (punctuation 100515 . 100516) (punctuation 100514 . 100515) (symbol 100511 . 100514) (RETURN 100504 . 100510) (punctuation 100500 . 100501) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 100453 . 100456)))) 100444 . 100500) (open-paren 100440 . 100441) (close-paren 100438 . 100439) (symbol 100435 . 100438) (punctuation 100434 . 100435) (symbol 100410 . 100433) (STRUCT 100403 . 100409) (open-paren 100402 . 100403) (symbol 100392 . 100401) (INT 100388 . 100391) (symbol 100381 . 100387) (close-paren 100311 . 100312) (punctuation 100297 . 100298) (punctuation 100296 . 100297) (semantic-list 100291 . 100296) (symbol 100283 . 100290) (open-paren 100279 . 100280) (close-paren 100277 . 100278) (symbol 100273 . 100277) (punctuation 100272 . 100273) (symbol 100260 . 100271) (STRUCT 100253 . 100259) (punctuation 100251 . 100252) (symbol 100248 . 100251) (symbol 100236 . 100247) (open-paren 100235 . 100236) (symbol 100219 . 100234) (VOID 100214 . 100218) (symbol 100207 . 100213) (close-paren 100204 . 100205) (punctuation 100188 . 100189) (punctuation 100187 . 100188) (semantic-list 100182 . 100187) (symbol 100174 . 100181) (open-paren 100170 . 100171) (close-paren 100168 . 100169) (symbol 100163 . 100168) (symbol 100151 . 100162) (punctuation 100149 . 100150) (symbol 100146 . 100149) (symbol 100134 . 100145) (open-paren 100133 . 100134) (symbol 100116 . 100132) (VOID 100111 . 100115) (symbol 100104 . 100110) (close-paren 100101 . 100102) (punctuation 100079 . 100080) (punctuation 100078 . 100079) (semantic-list 100073 . 100078) (symbol 100065 . 100072) (open-paren 100061 . 100062) (close-paren 100059 . 100060) (symbol 100051 . 100059) (symbol 100039 . 100050) (punctuation 100037 . 100038) (symbol 100034 . 100037) (symbol 100022 . 100033) (open-paren 100021 . 100022) (symbol 100001 . 100020) (VOID 99996 . 100000) (symbol 99989 . 99995) (close-paren 99896 . 99897) (number 99887 . 99888) (punctuation 99885 . 99886) (punctuation 99879 . 99880) (number 99877 . 99878) (punctuation 99861 . 99862) (punctuation 99860 . 99861) (open-paren 99846 . 99847) (close-paren 99844 . 99845) (symbol 99841 . 99844) (symbol 99829 . 99840) (punctuation 99827 . 99828) (symbol 99824 . 99827) (symbol 99814 . 99823) (punctuation 99812 . 99813) (symbol 99811 . 99812) (punctuation 99810 . 99811) (symbol 99794 . 99809) (STRUCT 99787 . 99793) (open-paren 99786 . 99787) (symbol 99766 . 99785) (VOID 99761 . 99765) (symbol 99754 . 99760) (close-paren 99751 . 99752) (punctuation 99738 . 99739) (number 99736 . 99737) (punctuation 99720 . 99721) (punctuation 99719 . 99720) (open-paren 99705 . 99706) (close-paren 99703 . 99704) (symbol 99700 . 99703) (symbol 99688 . 99699) (punctuation 99686 . 99687) (symbol 99683 . 99686) (symbol 99673 . 99682) (punctuation 99671 . 99672) (symbol 99670 . 99671) (punctuation 99669 . 99670) (symbol 99653 . 99668) (STRUCT 99646 . 99652) (open-paren 99645 . 99646) (symbol 99627 . 99644) (VOID 99622 . 99626) (symbol 99615 . 99621) (close-paren 99571 . 99572) (punctuation 99563 . 99564) (SIZEOF 99556 . 99562) (punctuation 99532 . 99533) (punctuation 99522 . 99523) (punctuation 99521 . 99522) (semantic-list 99518 . 99521) (punctuation 99498 . 99499) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 99441 . 99442)))) 99432 . 99498) (open-paren 99428 . 99429) (close-paren 99426 . 99427) (symbol 99421 . 99426) (symbol 99411 . 99420) (punctuation 99409 . 99410) (symbol 99405 . 99409) (punctuation 99404 . 99405) (symbol 99392 . 99403) (punctuation 99390 . 99391) (symbol 99384 . 99390) (symbol 99374 . 99383) (punctuation 99372 . 99373) (symbol 99371 . 99372) (symbol 99359 . 99370) (open-paren 99358 . 99359) (symbol 99352 . 99357) (VOID 99347 . 99351) (symbol 99340 . 99346) (punctuation 99181 . 99182) (close-paren 99180 . 99181) (punctuation 99179 . 99180) (symbol 99167 . 99178) (open-paren 99166 . 99167) (symbol 99156 . 99165) (VOID 99151 . 99155) (punctuation 98691 . 98692) (close-paren 98690 . 98691) (VOID 98686 . 98690) (open-paren 98685 . 98686) (symbol 98667 . 98684) (VOID 98662 . 98666) (EXTERN 98655 . 98661) (punctuation 98614 . 98615) (close-paren 98613 . 98614) (VOID 98609 . 98613) (open-paren 98608 . 98609) (symbol 98584 . 98607) (VOID 98579 . 98583) (EXTERN 98572 . 98578) (punctuation 97619 . 97620) (close-paren 97618 . 97619) (open-paren 96845 . 96846) (symbol 96837 . 96844) (STRUCT 96830 . 96836) (punctuation 96827 . 96828) (close-paren 96826 . 96827) (symbol 96814 . 96825) (punctuation 96812 . 96813) (symbol 96798 . 96812) (punctuation 96796 . 96797) (symbol 96789 . 96796) (open-paren 96787 . 96788) (symbol 96775 . 96786) (ENUM 96770 . 96774) (close-paren 95642 . 95643) (punctuation 95631 . 95632) (symbol 95619 . 95630) (RETURN 95612 . 95618) (open-paren 95608 . 95609) (close-paren 95606 . 95607) (VOID 95602 . 95606) (open-paren 95601 . 95602) (symbol 95587 . 95600) (symbol 95577 . 95586) (symbol 95570 . 95576) (punctuation 95461 . 95462) (close-paren 95460 . 95461) (punctuation 95327 . 95328) (symbol 95322 . 95326) (symbol "specbind_tag" 95299 . 95321) (ENUM "enum" 95299 . 95321) (punctuation 95327 . 95328) (symbol 95322 . 95326) (symbol "specbind_tag" 95299 . 95321) (ENUM "enum" 95299 . 95321) (punctuation 95152 . 95153) (symbol 95147 . 95151) (symbol "specbind_tag" 95124 . 95146) (ENUM "enum" 95124 . 95146) (punctuation 95152 . 95153) (symbol 95147 . 95151) (symbol "specbind_tag" 95124 . 95146) (ENUM "enum" 95124 . 95146) (punctuation 95047 . 95048) (symbol 95042 . 95046) (symbol "specbind_tag" 95019 . 95041) (ENUM "enum" 95019 . 95041) (punctuation 95047 . 95048) (symbol 95042 . 95046) (symbol "specbind_tag" 95019 . 95041) (ENUM "enum" 95019 . 95041) (punctuation 94929 . 94930) (symbol 94924 . 94928) (symbol "specbind_tag" 94901 . 94923) (ENUM "enum" 94901 . 94923) (punctuation 94929 . 94930) (symbol 94924 . 94928) (symbol "specbind_tag" 94901 . 94923) (ENUM "enum" 94901 . 94923) (punctuation 94806 . 94807) (symbol 94801 . 94805) (symbol "specbind_tag" 94778 . 94800) (ENUM "enum" 94778 . 94800) (punctuation 94806 . 94807) (symbol 94801 . 94805) (symbol "specbind_tag" 94778 . 94800) (ENUM "enum" 94778 . 94800) (punctuation 94676 . 94677) (symbol 94671 . 94675) (symbol "specbind_tag" 94648 . 94670) (ENUM "enum" 94648 . 94670) (punctuation 94676 . 94677) (symbol 94671 . 94675) (symbol "specbind_tag" 94648 . 94670) (ENUM "enum" 94648 . 94670) (punctuation 94617 . 94618) (symbol 94612 . 94616) (symbol "specbind_tag" 94589 . 94611) (ENUM "enum" 94589 . 94611) (open-paren 94583 . 94584) (symbol 94569 . 94580) (UNION 94563 . 94568) (punctuation 94560 . 94561) (close-paren 94559 . 94560) (symbol 94493 . 94512) (punctuation 94453 . 94454) (symbol 94436 . 94453) (punctuation 94317 . 94318) (symbol 94306 . 94317) (punctuation 94265 . 94266) (symbol 94248 . 94265) (punctuation 94213 . 94214) (symbol 94194 . 94213) (punctuation 94164 . 94165) (symbol 94146 . 94164) (punctuation 94113 . 94114) (symbol 94095 . 94113) (punctuation 94040 . 94041) (symbol 94026 . 94040) (open-paren 94022 . 94023) (symbol 94009 . 94021) (ENUM 94004 . 94008) (punctuation 90540 . 90541) (close-paren 90539 . 90540) (INT 90536 . 90539) (punctuation 90534 . 90535) (punctuation 90533 . 90534) (CHAR 90528 . 90532) (CONST 90522 . 90527) (punctuation 90520 . 90521) (punctuation 90519 . 90520) (symbol 90500 . 90518) (STRUCT 90493 . 90499) (open-paren 90492 . 90493) (symbol 90478 . 90491) (VOID 90473 . 90477) (EXTERN 90466 . 90472) (punctuation 90464 . 90465) (close-paren 90463 . 90464) (punctuation 90462 . 90463) (symbol 90452 . 90461) (punctuation 90450 . 90451) (punctuation 90449 . 90450) (CHAR 90444 . 90448) (CONST 90438 . 90443) (punctuation 90436 . 90437) (punctuation 90435 . 90436) (symbol 90423 . 90434) (STRUCT 90416 . 90422) (open-paren 90415 . 90416) (symbol 90404 . 90414) (VOID 90399 . 90403) (EXTERN 90392 . 90398) (punctuation 90390 . 90391) (close-paren 90389 . 90390) (punctuation 90388 . 90389) (BOOL 90383 . 90387) (punctuation 90381 . 90382) (punctuation 90380 . 90381) (CHAR 90375 . 90379) (CONST 90369 . 90374) (punctuation 90367 . 90368) (punctuation 90366 . 90367) (symbol 90353 . 90365) (STRUCT 90346 . 90352) (open-paren 90345 . 90346) (symbol 90333 . 90344) (VOID 90328 . 90332) (EXTERN 90321 . 90327) (punctuation 90319 . 90320) (close-paren 90318 . 90319) (punctuation 90317 . 90318) (symbol 90305 . 90316) (punctuation 90303 . 90304) (punctuation 90302 . 90303) (CHAR 90297 . 90301) (CONST 90291 . 90296) (punctuation 90289 . 90290) (punctuation 90288 . 90289) (symbol 90276 . 90287) (STRUCT 90269 . 90275) (open-paren 90268 . 90269) (symbol 90250 . 90267) (VOID 90245 . 90249) (EXTERN 90238 . 90244) (punctuation 90236 . 90237) (close-paren 90235 . 90236) (punctuation 90234 . 90235) (symbol 90222 . 90233) (punctuation 90220 . 90221) (punctuation 90219 . 90220) (CHAR 90214 . 90218) (CONST 90208 . 90213) (punctuation 90206 . 90207) (punctuation 90205 . 90206) (symbol 90193 . 90204) (STRUCT 90186 . 90192) (open-paren 90185 . 90186) (symbol 90173 . 90184) (VOID 90168 . 90172) (EXTERN 90161 . 90167) (punctuation 89657 . 89658) (close-paren 89656 . 89657) (number 89652 . 89653) (punctuation 89651 . 89652) (punctuation 89649 . 89650) (symbol 89639 . 89648) (punctuation 89633 . 89634) (number 89632 . 89633) (punctuation 89631 . 89632) (punctuation 89629 . 89630) (symbol 89624 . 89628) (open-paren 89618 . 89619) (symbol 89608 . 89615) (ENUM 89603 . 89607) (punctuation 89600 . 89601) (close-paren 89599 . 89600) (punctuation 89598 . 89599) (symbol 89588 . 89597) (STRUCT 89581 . 89587) (open-paren 89580 . 89581) (symbol 89572 . 89579) (VOID 89567 . 89571) (EXTERN 89560 . 89566) (close-paren 89464 . 89465) (RETURN 89440 . 89446) (open-paren 89436 . 89437) (close-paren 89434 . 89435) (symbol 89431 . 89434) (symbol 89419 . 89430) (open-paren 89418 . 89419) (symbol 89408 . 89417) (BOOL 89403 . 89407) (symbol 89396 . 89402) (close-paren 87097 . 87098) (open-paren 87023 . 87024) (close-paren 87021 . 87022) (symbol 87020 . 87021) (symbol 87008 . 87019) (open-paren 87007 . 87008) (symbol 86990 . 87006) (VOID 86985 . 86989) (symbol 86978 . 86984) (close-paren 86975 . 86976) (open-paren 86901 . 86902) (close-paren 86899 . 86900) (symbol 86898 . 86899) (symbol 86886 . 86897) (open-paren 86885 . 86886) (symbol 86868 . 86884) (VOID 86863 . 86867) (symbol 86856 . 86862) (close-paren 86468 . 86469) (semantic-list 86449 . 86452) (open-paren 86425 . 86426) (close-paren 86423 . 86424) (symbol 86422 . 86423) (symbol 86410 . 86421) (open-paren 86409 . 86410) (symbol 86387 . 86408) (VOID 86382 . 86386) (symbol 86375 . 86381) (close-paren 86372 . 86373) (RETURN 86346 . 86352) (open-paren 86342 . 86343) (close-paren 86340 . 86341) (symbol 86339 . 86340) (symbol 86327 . 86338) (open-paren 86326 . 86327) (symbol 86316 . 86325) (DOUBLE 86309 . 86315) (symbol 86302 . 86308) (close-paren 85407 . 85408) (semantic-list 85386 . 85389) (open-paren 85362 . 85363) (close-paren 85360 . 85361) (symbol 85359 . 85360) (symbol 85347 . 85358) (open-paren 85346 . 85347) (symbol 85333 . 85345) (VOID 85328 . 85332) (symbol 85321 . 85327) (close-paren 85203 . 85204) (semantic-list 85184 . 85187) (open-paren 85160 . 85161) (close-paren 85158 . 85159) (symbol 85157 . 85158) (symbol 85145 . 85156) (open-paren 85144 . 85145) (symbol 85131 . 85143) (VOID 85126 . 85130) (symbol 85119 . 85125) (close-paren 85117 . 85118) (semantic-list 85098 . 85101) (open-paren 85074 . 85075) (close-paren 85072 . 85073) (symbol 85071 . 85072) (symbol 85059 . 85070) (open-paren 85058 . 85059) (symbol 85045 . 85057) (VOID 85040 . 85044) (symbol 85033 . 85039) (close-paren 85031 . 85032) (semantic-list 85011 . 85014) (open-paren 84988 . 84989) (close-paren 84986 . 84987) (symbol 84977 . 84986) (symbol 84965 . 84976) (punctuation 84963 . 84964) (symbol 84962 . 84963) (symbol 84950 . 84961) (open-paren 84949 . 84950) (symbol 84937 . 84948) (VOID 84932 . 84936) (symbol 84925 . 84931) (close-paren 84923 . 84924) (RETURN 84868 . 84874) (semantic-list 84850 . 84863) (IF 84847 . 84849) (RETURN 84827 . 84833) (semantic-list 84809 . 84822) (IF 84806 . 84808) (open-paren 84802 . 84803) (close-paren 84800 . 84801) (symbol 84799 . 84800) (symbol 84787 . 84798) (open-paren 84786 . 84787) (symbol 84763 . 84785) (symbol 84753 . 84762) (symbol 84746 . 84752) (close-paren 84675 . 84676) (semantic-list 84650 . 84653) (open-paren 84620 . 84621) (close-paren 84618 . 84619) (symbol 84617 . 84618) (symbol 84605 . 84616) (open-paren 84604 . 84605) (symbol 84586 . 84603) (VOID 84581 . 84585) (symbol 84574 . 84580) (close-paren 84572 . 84573) (semantic-list 84553 . 84556) (open-paren 84529 . 84530) (close-paren 84527 . 84528) (symbol 84526 . 84527) (symbol 84514 . 84525) (open-paren 84513 . 84514) (symbol 84500 . 84512) (VOID 84495 . 84499) (symbol 84488 . 84494) (close-paren 84486 . 84487) (semantic-list 84469 . 84472) (open-paren 84447 . 84448) (close-paren 84445 . 84446) (symbol 84444 . 84445) (symbol 84432 . 84443) (open-paren 84431 . 84432) (symbol 84420 . 84430) (VOID 84415 . 84419) (symbol 84408 . 84414) (close-paren 84406 . 84407) (semantic-list 84400 . 84403) (semantic-list 84373 . 84383) (open-paren 84349 . 84350) (close-paren 84347 . 84348) (symbol 84346 . 84347) (symbol 84334 . 84345) (open-paren 84333 . 84334) (symbol 84316 . 84332) (VOID 84311 . 84315) (symbol 84304 . 84310) (close-paren 84302 . 84303) (semantic-list 84283 . 84286) (open-paren 84259 . 84260) (close-paren 84257 . 84258) (symbol 84256 . 84257) (symbol 84244 . 84255) (open-paren 84243 . 84244) (symbol 84230 . 84242) (VOID 84225 . 84229) (symbol 84218 . 84224) (close-paren 84215 . 84216) (open-paren 84186 . 84187) (close-paren 84184 . 84185) (symbol 84183 . 84184) (symbol 84171 . 84182) (open-paren 84170 . 84171) (close-paren 84168 . 84169) (symbol 84156 . 84168) (open-paren 84155 . 84156) (VOID 84150 . 84154) (symbol 84143 . 84149) (close-paren 84140 . 84141) (open-paren 84112 . 84113) (close-paren 84110 . 84111) (symbol 84109 . 84110) (symbol 84097 . 84108) (open-paren 84096 . 84097) (close-paren 84094 . 84095) (symbol 84082 . 84094) (open-paren 84081 . 84082) (VOID 84076 . 84080) (symbol 84069 . 84075) (close-paren 84066 . 84067) (open-paren 84031 . 84032) (close-paren 84029 . 84030) (symbol 84028 . 84029) (symbol 84016 . 84027) (punctuation 84014 . 84015) (symbol 84013 . 84014) (symbol 84001 . 84012) (open-paren 84000 . 84001) (close-paren 83998 . 83999) (symbol 83983 . 83998) (open-paren 83982 . 83983) (VOID 83977 . 83981) (symbol 83970 . 83976) (close-paren 83967 . 83968) (semantic-list 83950 . 83953) (punctuation 83943 . 83944) (punctuation 83942 . 83943) (semantic-list 83938 . 83941) (open-paren 83916 . 83917) (close-paren 83914 . 83915) (symbol 83913 . 83914) (symbol 83901 . 83912) (open-paren 83900 . 83901) (symbol 83889 . 83899) (VOID 83884 . 83888) (symbol 83877 . 83883) (close-paren 83873 . 83874) (punctuation 83852 . 83853) (punctuation 83851 . 83852) (semantic-list 83847 . 83850) (symbol 83834 . 83846) (punctuation 83832 . 83833) (punctuation 83831 . 83832) (semantic-list 83827 . 83830) (symbol 83819 . 83826) (punctuation 83817 . 83818) (punctuation 83816 . 83817) (semantic-list 83812 . 83815) (symbol 83804 . 83811) (RETURN 83797 . 83803) (open-paren 83793 . 83794) (close-paren 83791 . 83792) (symbol 83790 . 83791) (symbol 83778 . 83789) (open-paren 83777 . 83778) (symbol 83770 . 83776) (BOOL 83765 . 83769) (symbol 83758 . 83764) (close-paren 83735 . 83736) (punctuation 83709 . 83710) (semantic-list 83705 . 83708) (symbol 83699 . 83704) (RETURN 83692 . 83698) (open-paren 83688 . 83689) (close-paren 83686 . 83687) (symbol 83685 . 83686) (symbol 83673 . 83684) (open-paren 83672 . 83673) (symbol 83665 . 83671) (BOOL 83660 . 83664) (symbol 83653 . 83659) (close-paren 83613 . 83614) (RETURN 83575 . 83581) (open-paren 83571 . 83572) (close-paren 83569 . 83570) (symbol 83568 . 83569) (symbol 83556 . 83567) (open-paren 83555 . 83556) (symbol 83548 . 83554) (BOOL 83543 . 83547) (symbol 83536 . 83542) (close-paren 83533 . 83534) (RETURN 83489 . 83495) (open-paren 83485 . 83486) (close-paren 83483 . 83484) (symbol 83482 . 83483) (symbol 83470 . 83481) (open-paren 83469 . 83470) (symbol 83455 . 83468) (BOOL 83450 . 83454) (symbol 83443 . 83449) (close-paren 83440 . 83441) (RETURN 83393 . 83399) (open-paren 83389 . 83390) (close-paren 83387 . 83388) (symbol 83386 . 83387) (symbol 83374 . 83385) (open-paren 83373 . 83374) (symbol 83356 . 83372) (BOOL 83351 . 83355) (symbol 83344 . 83350) (close-paren 83341 . 83342) (RETURN 83298 . 83304) (open-paren 83294 . 83295) (close-paren 83292 . 83293) (symbol 83291 . 83292) (symbol 83279 . 83290) (open-paren 83278 . 83279) (symbol 83265 . 83277) (BOOL 83260 . 83264) (symbol 83253 . 83259) (close-paren 83250 . 83251) (RETURN 83211 . 83217) (open-paren 83207 . 83208) (close-paren 83205 . 83206) (symbol 83204 . 83205) (symbol 83192 . 83203) (open-paren 83191 . 83192) (symbol 83183 . 83190) (BOOL 83178 . 83182) (symbol 83171 . 83177) (close-paren 83168 . 83169) (RETURN 83127 . 83133) (open-paren 83123 . 83124) (close-paren 83121 . 83122) (symbol 83120 . 83121) (symbol 83108 . 83119) (open-paren 83107 . 83108) (symbol 83097 . 83106) (BOOL 83092 . 83096) (symbol 83085 . 83091) (close-paren 83082 . 83083) (RETURN 83045 . 83051) (open-paren 83041 . 83042) (close-paren 83039 . 83040) (symbol 83038 . 83039) (symbol 83026 . 83037) (open-paren 83025 . 83026) (symbol 83019 . 83024) (BOOL 83014 . 83018) (symbol 83007 . 83013) (close-paren 83004 . 83005) (RETURN 82963 . 82969) (open-paren 82959 . 82960) (close-paren 82957 . 82958) (symbol 82956 . 82957) (symbol 82944 . 82955) (open-paren 82943 . 82944) (symbol 82933 . 82942) (BOOL 82928 . 82932) (symbol 82921 . 82927) (close-paren 82918 . 82919) (RETURN 82879 . 82885) (open-paren 82875 . 82876) (close-paren 82873 . 82874) (symbol 82872 . 82873) (symbol 82860 . 82871) (open-paren 82859 . 82860) (symbol 82851 . 82858) (BOOL 82846 . 82850) (symbol 82839 . 82845) (close-paren 82836 . 82837) (RETURN 82796 . 82802) (open-paren 82792 . 82793) (close-paren 82790 . 82791) (symbol 82789 . 82790) (symbol 82777 . 82788) (open-paren 82776 . 82777) (symbol 82767 . 82775) (BOOL 82762 . 82766) (symbol 82755 . 82761) (close-paren 82752 . 82753) (RETURN 82699 . 82705) (open-paren 82695 . 82696) (close-paren 82693 . 82694) (symbol 82692 . 82693) (symbol 82680 . 82691) (open-paren 82679 . 82680) (symbol 82657 . 82678) (BOOL 82652 . 82656) (symbol 82645 . 82651) (close-paren 82595 . 82596) (semantic-list 82401 . 82594) (ELSE 82392 . 82396) (RETURN 82376 . 82382) (semantic-list 82352 . 82371) (IF 82349 . 82351) (open-paren 82345 . 82346) (close-paren 82343 . 82344) (symbol 82339 . 82343) (INT 82335 . 82338) (punctuation 82333 . 82334) (symbol 82332 . 82333) (symbol 82320 . 82331) (open-paren 82319 . 82320) (symbol 82305 . 82318) (BOOL 82300 . 82304) (symbol 82293 . 82299) (close-paren 82235 . 82236) (punctuation 82233 . 82234) (semantic-list 82122 . 82233) (RETURN 82115 . 82121) (open-paren 82111 . 82112) (close-paren 82109 . 82110) (symbol 82105 . 82109) (INT 82101 . 82104) (punctuation 82099 . 82100) (symbol 82098 . 82099) (punctuation 82097 . 82098) (symbol 82079 . 82096) (STRUCT 82072 . 82078) (open-paren 82071 . 82072) (symbol 82052 . 82070) (BOOL 82047 . 82051) (symbol 82040 . 82046) (close-paren 82037 . 82038) (punctuation 82014 . 82015) (punctuation 82013 . 82014) (semantic-list 82009 . 82012) (symbol 82000 . 82008) (RETURN 81993 . 81999) (open-paren 81989 . 81990) (close-paren 81987 . 81988) (symbol 81986 . 81987) (punctuation 81985 . 81986) (symbol 81976 . 81984) (UNION 81970 . 81975) (open-paren 81969 . 81970) (symbol 81954 . 81968) (BOOL 81949 . 81953) (symbol 81942 . 81948) (close-paren 81939 . 81940) (punctuation 81910 . 81911) (semantic-list 81906 . 81909) (symbol 81900 . 81905) (RETURN 81893 . 81899) (open-paren 81889 . 81890) (close-paren 81887 . 81888) (symbol 81886 . 81887) (symbol 81874 . 81885) (open-paren 81873 . 81874) (symbol 81863 . 81872) (BOOL 81858 . 81862) (symbol 81851 . 81857) (close-paren 81719 . 81720) (punctuation 81696 . 81697) (punctuation 81695 . 81696) (semantic-list 81691 . 81694) (symbol 81681 . 81690) (punctuation 81679 . 81680) (punctuation 81678 . 81679) (semantic-list 81674 . 81677) (symbol 81668 . 81673) (RETURN 81661 . 81667) (open-paren 81657 . 81658) (close-paren 81655 . 81656) (symbol 81654 . 81655) (symbol 81642 . 81653) (open-paren 81641 . 81642) (symbol 81630 . 81640) (BOOL 81625 . 81629) (symbol 81618 . 81624) (close-paren 81615 . 81616) (punctuation 81591 . 81592) (punctuation 81590 . 81591) (semantic-list 81586 . 81589) (symbol 81576 . 81585) (punctuation 81574 . 81575) (punctuation 81573 . 81574) (semantic-list 81569 . 81572) (symbol 81563 . 81568) (RETURN 81556 . 81562) (open-paren 81552 . 81553) (close-paren 81550 . 81551) (symbol 81549 . 81550) (symbol 81537 . 81548) (open-paren 81536 . 81537) (symbol 81524 . 81535) (BOOL 81519 . 81523) (symbol 81512 . 81518) (close-paren 81510 . 81511) (punctuation 81489 . 81490) (punctuation 81488 . 81489) (semantic-list 81484 . 81487) (symbol 81474 . 81483) (punctuation 81472 . 81473) (punctuation 81471 . 81472) (semantic-list 81467 . 81470) (symbol 81461 . 81466) (RETURN 81454 . 81460) (open-paren 81450 . 81451) (close-paren 81448 . 81449) (symbol 81447 . 81448) (symbol 81435 . 81446) (open-paren 81434 . 81435) (symbol 81425 . 81433) (BOOL 81420 . 81424) (symbol 81413 . 81419) (close-paren 81411 . 81412) (punctuation 81409 . 81410) (semantic-list 81378 . 81409) (punctuation 81376 . 81377) (punctuation 81374 . 81375) (punctuation 81373 . 81374) (semantic-list 81369 . 81372) (symbol 81357 . 81368) (RETURN 81350 . 81356) (open-paren 81346 . 81347) (close-paren 81344 . 81345) (symbol 81343 . 81344) (symbol 81331 . 81342) (open-paren 81330 . 81331) (symbol 81322 . 81329) (BOOL 81317 . 81321) (symbol 81310 . 81316) (close-paren 81308 . 81309) (punctuation 81293 . 81294) (punctuation 81292 . 81293) (semantic-list 81288 . 81291) (symbol 81282 . 81287) (RETURN 81275 . 81281) (open-paren 81271 . 81272) (close-paren 81269 . 81270) (symbol 81268 . 81269) (symbol 81256 . 81267) (open-paren 81255 . 81256) (symbol 81247 . 81254) (BOOL 81242 . 81246) (symbol 81235 . 81241) (close-paren 81232 . 81233) (punctuation 81230 . 81231) (semantic-list #("(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 0 1 (macros (("x" symbol "x" 81228 . 81229)))) 81212 . 81230) (RETURN 81205 . 81211) (open-paren 81201 . 81202) (close-paren 81199 . 81200) (symbol 81198 . 81199) (symbol 81186 . 81197) (open-paren 81185 . 81186) (close-paren 81183 . 81184) (symbol 81176 . 81183) (open-paren 81175 . 81176) (BOOL 81170 . 81174) (symbol 81163 . 81169) (close-paren 81161 . 81162) (punctuation 81159 . 81160) (semantic-list #("(XTYPE (x) == Lisp_Vectorlike)" 0 1 (macros (("x" symbol "x" 81157 . 81158)))) 81137 . 81159) (RETURN 81130 . 81136) (open-paren 81126 . 81127) (close-paren 81124 . 81125) (symbol 81123 . 81124) (symbol 81111 . 81122) (open-paren 81110 . 81111) (close-paren 81108 . 81109) (symbol 81097 . 81108) (open-paren 81096 . 81097) (BOOL 81091 . 81095) (symbol 81084 . 81090) (close-paren 81082 . 81083) (punctuation 81080 . 81081) (semantic-list #("((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 0 1 (macros (("x" symbol "x" 81078 . 81079)))) 81061 . 81080) (RETURN 81054 . 81060) (open-paren 81050 . 81051) (close-paren 81048 . 81049) (symbol 81047 . 81048) (symbol 81035 . 81046) (open-paren 81034 . 81035) (close-paren 81032 . 81033) (symbol 81024 . 81032) (open-paren 81023 . 81024) (BOOL 81018 . 81022) (symbol 81011 . 81017) (close-paren 81009 . 81010) (punctuation 81007 . 81008) (semantic-list #("(XTYPE (x) == Lisp_Symbol)" 0 1 (macros (("x" symbol "x" 81005 . 81006)))) 80989 . 81007) (RETURN 80982 . 80988) (open-paren 80978 . 80979) (close-paren 80976 . 80977) (symbol 80975 . 80976) (symbol 80963 . 80974) (open-paren 80962 . 80963) (close-paren 80960 . 80961) (symbol 80953 . 80960) (open-paren 80952 . 80953) (BOOL 80947 . 80951) (symbol 80940 . 80946) (close-paren 80938 . 80939) (punctuation 80936 . 80937) (semantic-list #("(XTYPE (x) == Lisp_Misc)" 0 1 (macros (("x" symbol "x" 80934 . 80935)))) 80920 . 80936) (RETURN 80913 . 80919) (open-paren 80909 . 80910) (close-paren 80907 . 80908) (symbol 80906 . 80907) (symbol 80894 . 80905) (open-paren 80893 . 80894) (close-paren 80891 . 80892) (symbol 80886 . 80891) (open-paren 80885 . 80886) (BOOL 80880 . 80884) (symbol 80873 . 80879) (close-paren 80871 . 80872) (punctuation 80869 . 80870) (semantic-list #("(XTYPE (x) == Lisp_Float)" 0 1 (macros (("x" symbol "x" 80867 . 80868)))) 80852 . 80869) (RETURN 80845 . 80851) (open-paren 80841 . 80842) (close-paren 80839 . 80840) (symbol 80838 . 80839) (symbol 80826 . 80837) (open-paren 80825 . 80826) (close-paren 80823 . 80824) (symbol 80817 . 80823) (open-paren 80816 . 80817) (BOOL 80811 . 80815) (symbol 80804 . 80810) (close-paren 80802 . 80803) (punctuation 80800 . 80801) (semantic-list #("(XTYPE (x) == Lisp_Cons)" 0 1 (macros (("x" symbol "x" 80798 . 80799)))) 80784 . 80800) (RETURN 80777 . 80783) (open-paren 80773 . 80774) (close-paren 80771 . 80772) (symbol 80770 . 80771) (symbol 80758 . 80769) (open-paren 80757 . 80758) (close-paren 80755 . 80756) (symbol 80750 . 80755) (open-paren 80749 . 80750) (BOOL 80744 . 80748) (symbol 80737 . 80743) (close-paren 80549 . 80550) (punctuation 80543 . 80544) (punctuation 80542 . 80543) (semantic-list 80538 . 80541) (symbol 80533 . 80537) (punctuation 80531 . 80532) (punctuation 80530 . 80531) (semantic-list 80526 . 80529) (symbol 80521 . 80525) (punctuation 80519 . 80520) (punctuation 80518 . 80519) (symbol 80515 . 80517) (punctuation 80513 . 80514) (punctuation 80512 . 80513) (semantic-list 80508 . 80511) (symbol 80499 . 80507) (RETURN 80492 . 80498) (open-paren 80488 . 80489) (close-paren 80486 . 80487) (symbol 80484 . 80486) (symbol 80475 . 80483) (punctuation 80473 . 80474) (symbol 80472 . 80473) (symbol 80460 . 80471) (punctuation 80458 . 80459) (symbol 80456 . 80458) (symbol 80447 . 80455) (open-paren 80446 . 80447) (symbol 80430 . 80445) (BOOL 80425 . 80429) (symbol 80418 . 80424) (close-paren 80415 . 80416) (punctuation 80403 . 80404) (punctuation 80402 . 80403) (number 80400 . 80401) (punctuation 80398 . 80399) (punctuation 80397 . 80398) (semantic-list 80393 . 80396) (symbol 80384 . 80392) (RETURN 80377 . 80383) (open-paren 80373 . 80374) (close-paren 80371 . 80372) (symbol 80370 . 80371) (symbol 80358 . 80369) (open-paren 80357 . 80358) (symbol 80349 . 80356) (BOOL 80344 . 80348) (symbol 80337 . 80343) (close-paren 80335 . 80336) (punctuation 80321 . 80322) (punctuation 80320 . 80321) (semantic-list 80316 . 80319) (symbol 80307 . 80315) (RETURN 80300 . 80306) (open-paren 80296 . 80297) (close-paren 80294 . 80295) (symbol 80293 . 80294) (symbol 80281 . 80292) (open-paren 80280 . 80281) (symbol 80272 . 80279) (BOOL 80267 . 80271) (symbol 80260 . 80266) (close-paren 80257 . 80258) (RETURN 80233 . 80239) (open-paren 80229 . 80230) (close-paren 80227 . 80228) (symbol 80226 . 80227) (symbol 80214 . 80225) (open-paren 80213 . 80214) (close-paren 80211 . 80212) (symbol 80207 . 80211) (open-paren 80206 . 80207) (BOOL 80201 . 80205) (symbol 80194 . 80200) (punctuation 80162 . 80163) (close-paren 80161 . 80162) (number 80156 . 80158) (punctuation 80154 . 80155) (symbol 80140 . 80153) (punctuation 80042 . 80043) (symbol 80033 . 80042) (punctuation 80031 . 80032) (symbol 80022 . 80030) (punctuation 80020 . 80021) (symbol 80009 . 80019) (punctuation 80007 . 80008) (symbol 79996 . 80006) (punctuation 79994 . 79995) (symbol 79983 . 79993) (punctuation 79981 . 79982) (symbol 79972 . 79980) (punctuation 79964 . 79965) (symbol 79945 . 79963) (punctuation 79938 . 79939) (number 79929 . 79938) (punctuation 79927 . 79928) (symbol 79917 . 79926) (punctuation 79911 . 79912) (number 79902 . 79911) (punctuation 79900 . 79901) (symbol 79891 . 79899) (punctuation 79885 . 79886) (number 79876 . 79885) (punctuation 79874 . 79875) (symbol 79863 . 79873) (punctuation 79857 . 79858) (number 79848 . 79857) (punctuation 79846 . 79847) (symbol 79835 . 79845) (punctuation 79829 . 79830) (number 79820 . 79829) (punctuation 79818 . 79819) (symbol 79807 . 79817) (punctuation 79801 . 79802) (number 79792 . 79801) (punctuation 79790 . 79791) (symbol 79781 . 79789) (open-paren 79775 . 79776) (symbol 79763 . 79772) (ENUM 79758 . 79762) (punctuation 79488 . 79489) (close-paren 79487 . 79488) (number 79483 . 79484) (punctuation 79481 . 79482) (symbol 79460 . 79480) (punctuation 79454 . 79455) (number 79453 . 79454) (punctuation 79451 . 79452) (symbol 79431 . 79450) (punctuation 79425 . 79426) (number 79424 . 79425) (punctuation 79422 . 79423) (symbol 79401 . 79421) (punctuation 79395 . 79396) (number 79394 . 79395) (punctuation 79392 . 79393) (symbol 79373 . 79391) (punctuation 79367 . 79368) (number 79366 . 79367) (punctuation 79364 . 79365) (symbol 79346 . 79363) (punctuation 79340 . 79341) (number 79339 . 79340) (punctuation 79337 . 79338) (symbol 79320 . 79336) (open-paren 79314 . 79315) (symbol 79298 . 79311) (ENUM 79293 . 79297) (punctuation 78991 . 78992) (close-paren 78990 . 78991) (semantic-list 78902 . 78987) (punctuation 78900 . 78901) (symbol 78874 . 78893) (open-paren 78868 . 78869) (ENUM 78861 . 78865) (close-paren 78420 . 78421) (punctuation 78413 . 78414) (symbol 78412 . 78413) (punctuation 78411 . 78412) (punctuation 78410 . 78411) (semantic-list 78407 . 78410) (symbol 78400 . 78406) (RETURN 78393 . 78399) (open-paren 78389 . 78390) (close-paren 78387 . 78388) (symbol 78386 . 78387) (symbol 78374 . 78385) (open-paren 78373 . 78374) (symbol 78361 . 78372) (DOUBLE 78354 . 78360) (symbol 78347 . 78353) (punctuation 78344 . 78345) (close-paren 78343 . 78344) (open-paren 78263 . 78264) (symbol 78250 . 78260) (STRUCT 78243 . 78249) (close-paren 78206 . 78207) (punctuation 78188 . 78189) (punctuation 78187 . 78188) (symbol 78186 . 78187) (punctuation 78185 . 78186) (RETURN 78178 . 78184) (punctuation 78174 . 78175) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 78155 . 78169)))) 78146 . 78174) (open-paren 78142 . 78143) (close-paren 78140 . 78141) (symbol 78139 . 78140) (punctuation 78138 . 78139) (symbol 78129 . 78137) (UNION 78123 . 78128) (open-paren 78122 . 78123) (symbol 78107 . 78121) (punctuation 78105 . 78106) (symbol 78086 . 78104) (STRUCT 78079 . 78085) (symbol 78072 . 78078) (close-paren 78069 . 78070) (punctuation 78062 . 78063) (symbol 78054 . 78062) (punctuation 78053 . 78054) (punctuation 78052 . 78053) (symbol 78051 . 78052) (RETURN 78044 . 78050) (open-paren 78040 . 78041) (close-paren 78038 . 78039) (symbol 78037 . 78038) (punctuation 78036 . 78037) (symbol 78027 . 78035) (UNION 78021 . 78026) (open-paren 78020 . 78021) (symbol 78011 . 78019) (symbol 77997 . 78010) (ENUM 77992 . 77996) (symbol 77985 . 77991) (punctuation 77982 . 77983) (close-paren 77981 . 77982) (open-paren 77782 . 77783) (symbol 77771 . 77779) (UNION 77765 . 77770) (punctuation 77762 . 77763) (close-paren 77761 . 77762) (open-paren 77684 . 77685) (symbol 77663 . 77681) (STRUCT 77656 . 77662) (punctuation 77569 . 77570) (close-paren 77568 . 77569) (open-paren 76430 . 76431) (symbol 76404 . 76427) (STRUCT 76397 . 76403) (punctuation 75070 . 75071) (close-paren 75069 . 75070) (open-paren 74889 . 74890) (symbol 74868 . 74886) (STRUCT 74861 . 74867) (punctuation 74730 . 74731) (close-paren 74729 . 74730) (open-paren 74650 . 74651) (symbol 74636 . 74647) (STRUCT 74629 . 74635) (punctuation 74435 . 74436) (close-paren 74434 . 74435) (open-paren 74360 . 74361) (symbol 74345 . 74357) (STRUCT 74338 . 74344) (punctuation 74143 . 74144) (close-paren 74142 . 74143) (open-paren 74065 . 74066) (symbol 74051 . 74062) (STRUCT 74044 . 74050) (close-paren 73702 . 73703) (punctuation 73688 . 73689) (punctuation 73687 . 73688) (semantic-list 73684 . 73687) (symbol 73678 . 73683) (punctuation 73676 . 73677) (RETURN 73669 . 73675) (punctuation 73665 . 73666) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 73650 . 73660)))) 73641 . 73665) (open-paren 73637 . 73638) (close-paren 73635 . 73636) (symbol 73634 . 73635) (symbol 73622 . 73633) (open-paren 73621 . 73622) (symbol 73610 . 73620) (punctuation 73608 . 73609) (symbol 73593 . 73607) (STRUCT 73586 . 73592) (symbol 73579 . 73585) (close-paren 73576 . 73577) (punctuation 73561 . 73562) (punctuation 73560 . 73561) (semantic-list 73557 . 73560) (symbol 73551 . 73556) (punctuation 73549 . 73550) (RETURN 73542 . 73548) (punctuation 73538 . 73539) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SAVE_VALUEP" 73522 . 73533)))) 73513 . 73538) (open-paren 73509 . 73510) (close-paren 73507 . 73508) (symbol 73506 . 73507) (symbol 73494 . 73505) (open-paren 73493 . 73494) (symbol 73481 . 73492) (punctuation 73479 . 73480) (symbol 73463 . 73478) (STRUCT 73456 . 73462) (symbol 73449 . 73455) (close-paren 73446 . 73447) (punctuation 73434 . 73435) (punctuation 73433 . 73434) (semantic-list 73430 . 73433) (symbol 73424 . 73429) (punctuation 73422 . 73423) (RETURN 73415 . 73421) (punctuation 73411 . 73412) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 73398 . 73406)))) 73389 . 73411) (open-paren 73385 . 73386) (close-paren 73383 . 73384) (symbol 73382 . 73383) (symbol 73370 . 73381) (open-paren 73369 . 73370) (symbol 73360 . 73368) (punctuation 73358 . 73359) (symbol 73345 . 73357) (STRUCT 73338 . 73344) (symbol 73331 . 73337) (close-paren 73328 . 73329) (punctuation 73317 . 73318) (punctuation 73316 . 73317) (semantic-list 73313 . 73316) (symbol 73307 . 73312) (punctuation 73305 . 73306) (RETURN 73298 . 73304) (punctuation 73294 . 73295) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 73282 . 73289)))) 73273 . 73294) (open-paren 73269 . 73270) (close-paren 73267 . 73268) (symbol 73266 . 73267) (symbol 73254 . 73265) (open-paren 73253 . 73254) (symbol 73245 . 73252) (punctuation 73243 . 73244) (symbol 73231 . 73242) (STRUCT 73224 . 73230) (symbol 73217 . 73223) (close-paren 73214 . 73215) (punctuation 73207 . 73208) (punctuation 73206 . 73207) (semantic-list 73203 . 73206) (symbol 73194 . 73202) (RETURN 73187 . 73193) (open-paren 73183 . 73184) (close-paren 73181 . 73182) (symbol 73180 . 73181) (symbol 73168 . 73179) (open-paren 73167 . 73168) (symbol 73157 . 73166) (symbol 73142 . 73156) (ENUM 73137 . 73141) (symbol 73130 . 73136) (close-paren 73127 . 73128) (punctuation 73119 . 73120) (punctuation 73118 . 73119) (semantic-list 73115 . 73118) (symbol 73109 . 73114) (punctuation 73107 . 73108) (RETURN 73100 . 73106) (punctuation 73096 . 73097) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MISCP" 73086 . 73091)))) 73077 . 73096) (open-paren 73073 . 73074) (close-paren 73071 . 73072) (symbol 73070 . 73071) (symbol 73058 . 73069) (open-paren 73057 . 73058) (symbol 73048 . 73056) (punctuation 73046 . 73047) (symbol 73032 . 73045) (STRUCT 73025 . 73031) (symbol 73018 . 73024) (close-paren 73015 . 73016) (RETURN 72985 . 72991) (open-paren 72981 . 72982) (close-paren 72979 . 72980) (symbol 72978 . 72979) (symbol 72966 . 72977) (open-paren 72965 . 72966) (symbol 72959 . 72964) (punctuation 72957 . 72958) (symbol 72947 . 72956) (UNION 72941 . 72946) (symbol 72934 . 72940) (punctuation 72931 . 72932) (close-paren 72930 . 72931) (open-paren 72614 . 72615) (symbol 72602 . 72611) (UNION 72596 . 72601) (punctuation 72463 . 72464) (close-paren 72462 . 72463) (open-paren 72314 . 72315) (symbol 72302 . 72311) (STRUCT 72295 . 72301) (punctuation 72233 . 72234) (close-paren 72232 . 72233) (open-paren 71844 . 71845) (symbol 71827 . 71841) (STRUCT 71820 . 71826) (close-paren 71573 . 71574) (punctuation 71564 . 71565) (semantic-list 71561 . 71564) (symbol 71557 . 71561) (punctuation 71556 . 71557) (punctuation 71555 . 71556) (semantic-list 71550 . 71555) (symbol 71538 . 71549) (RETURN 71531 . 71537) (punctuation 71527 . 71528) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71479 . 71488)))) 71470 . 71527) (open-paren 71466 . 71467) (close-paren 71464 . 71465) (symbol 71463 . 71464) (INT 71459 . 71462) (punctuation 71457 . 71458) (symbol 71454 . 71457) (symbol 71442 . 71453) (open-paren 71441 . 71442) (symbol 71428 . 71440) (symbol 71416 . 71427) (symbol 71409 . 71415) (close-paren 71372 . 71373) (punctuation 71356 . 71357) (semantic-list 71353 . 71356) (symbol 71349 . 71353) (punctuation 71348 . 71349) (punctuation 71347 . 71348) (semantic-list 71342 . 71347) (symbol 71330 . 71341) (punctuation 71326 . 71327) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71277 . 71286)))) 71268 . 71326) (open-paren 71264 . 71265) (close-paren 71262 . 71263) (symbol 71259 . 71262) (symbol 71249 . 71258) (punctuation 71247 . 71248) (symbol 71246 . 71247) (INT 71242 . 71245) (punctuation 71240 . 71241) (symbol 71237 . 71240) (symbol 71225 . 71236) (open-paren 71224 . 71225) (symbol 71207 . 71223) (VOID 71202 . 71206) (symbol 71195 . 71201) (close-paren 71193 . 71194) (punctuation 71183 . 71184) (semantic-list 71180 . 71183) (symbol 71176 . 71180) (punctuation 71175 . 71176) (punctuation 71174 . 71175) (semantic-list 71169 . 71174) (symbol 71157 . 71168) (RETURN 71150 . 71156) (punctuation 71146 . 71147) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 71097 . 71106)))) 71088 . 71146) (open-paren 71084 . 71085) (close-paren 71082 . 71083) (symbol 71081 . 71082) (INT 71077 . 71080) (punctuation 71075 . 71076) (symbol 71072 . 71075) (symbol 71060 . 71071) (open-paren 71059 . 71060) (symbol 71045 . 71058) (symbol 71035 . 71044) (symbol 71028 . 71034) (close-paren 70985 . 70986) (punctuation 70971 . 70972) (semantic-list 70968 . 70971) (symbol 70964 . 70968) (punctuation 70963 . 70964) (punctuation 70962 . 70963) (semantic-list 70957 . 70962) (symbol 70945 . 70956) (RETURN 70938 . 70944) (punctuation 70934 . 70935) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70881 . 70890)))) 70872 . 70934) (open-paren 70868 . 70869) (close-paren 70866 . 70867) (symbol 70865 . 70866) (INT 70861 . 70864) (punctuation 70859 . 70860) (symbol 70856 . 70859) (symbol 70844 . 70855) (open-paren 70843 . 70844) (symbol 70825 . 70842) (symbol 70813 . 70824) (symbol 70806 . 70812) (close-paren 70804 . 70805) (punctuation 70788 . 70789) (semantic-list 70785 . 70788) (symbol 70781 . 70785) (punctuation 70780 . 70781) (punctuation 70779 . 70780) (semantic-list 70774 . 70779) (symbol 70762 . 70773) (punctuation 70758 . 70759) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70709 . 70718)))) 70700 . 70758) (open-paren 70696 . 70697) (close-paren 70694 . 70695) (symbol 70691 . 70694) (punctuation 70690 . 70691) (VOID 70685 . 70689) (punctuation 70683 . 70684) (symbol 70682 . 70683) (INT 70678 . 70681) (punctuation 70676 . 70677) (symbol 70673 . 70676) (symbol 70661 . 70672) (open-paren 70660 . 70661) (symbol 70643 . 70659) (VOID 70638 . 70642) (symbol 70631 . 70637) (close-paren 70629 . 70630) (punctuation 70619 . 70620) (semantic-list 70616 . 70619) (symbol 70612 . 70616) (punctuation 70611 . 70612) (punctuation 70610 . 70611) (semantic-list 70605 . 70610) (symbol 70593 . 70604) (RETURN 70586 . 70592) (punctuation 70582 . 70583) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 70533 . 70542)))) 70524 . 70582) (open-paren 70520 . 70521) (close-paren 70518 . 70519) (symbol 70517 . 70518) (INT 70513 . 70516) (punctuation 70511 . 70512) (symbol 70508 . 70511) (symbol 70496 . 70507) (open-paren 70495 . 70496) (symbol 70481 . 70494) (punctuation 70479 . 70480) (VOID 70474 . 70478) (symbol 70467 . 70473) (close-paren 70421 . 70422) (punctuation 70419 . 70420) (semantic-list 70351 . 70419) (RETURN 70344 . 70350) (punctuation 70340 . 70341) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 70309 . 70310)))) 70300 . 70340) (open-paren 70296 . 70297) (close-paren 70294 . 70295) (symbol 70293 . 70294) (INT 70289 . 70292) (punctuation 70287 . 70288) (symbol 70286 . 70287) (punctuation 70285 . 70286) (symbol 70269 . 70284) (STRUCT 70262 . 70268) (open-paren 70261 . 70262) (symbol 70251 . 70260) (INT 70247 . 70250) (symbol 70240 . 70246) (punctuation 70190 . 70191) (close-paren 70189 . 70190) (punctuation 70024 . 70025) (symbol 70014 . 70023) (symbol "Lisp_Save_Type" 69989 . 70013) (ENUM "enum" 69989 . 70013) (punctuation 69547 . 69548) (semantic-list 69522 . 69547) (punctuation 69520 . 69521) (number 69517 . 69519) (punctuation 69515 . 69516) (symbol 69508 . 69514) (UNSIGNED 69499 . 69507) (open-paren 69397 . 69398) (symbol 69379 . 69394) (STRUCT 69372 . 69378) (punctuation 69369 . 69370) (close-paren 69368 . 69369) (VOID 69364 . 69368) (open-paren 69363 . 69364) (close-paren 69361 . 69362) (symbol 69350 . 69361) (punctuation 69349 . 69350) (open-paren 69348 . 69349) (VOID 69343 . 69347) (TYPEDEF 69335 . 69342) (punctuation 68455 . 68456) (close-paren 68454 . 68455) (semantic-list 68424 . 68451) (punctuation 68422 . 68423) (symbol 68404 . 68421) (punctuation 68402 . 68403) (symbol 68385 . 68401) (punctuation 68317 . 68318) (semantic-list 68280 . 68317) (punctuation 68278 . 68279) (symbol 68261 . 68277) (punctuation 68259 . 68260) (symbol 68227 . 68252) (punctuation 68221 . 68222) (semantic-list 68189 . 68221) (punctuation 68187 . 68188) (symbol 68174 . 68186) (punctuation 68172 . 68173) (symbol 68154 . 68171) (punctuation 68148 . 68149) (semantic-list 68117 . 68148) (punctuation 68115 . 68116) (symbol 68102 . 68114) (punctuation 68100 . 68101) (symbol 68082 . 68099) (punctuation 68076 . 68077) (semantic-list 68044 . 68076) (punctuation 68042 . 68043) (symbol 68029 . 68041) (punctuation 68027 . 68028) (symbol 68009 . 68026) (punctuation 68003 . 68004) (semantic-list 67962 . 68003) (punctuation 67960 . 67961) (symbol 67948 . 67959) (punctuation 67946 . 67947) (symbol 67914 . 67939) (punctuation 67908 . 67909) (semantic-list 67871 . 67908) (punctuation 67869 . 67870) (symbol 67857 . 67868) (punctuation 67855 . 67856) (symbol 67833 . 67854) (punctuation 67827 . 67828) (semantic-list 67796 . 67827) (punctuation 67794 . 67795) (symbol 67782 . 67793) (punctuation 67780 . 67781) (symbol 67762 . 67779) (punctuation 67756 . 67757) (semantic-list 67702 . 67756) (punctuation 67700 . 67701) (symbol 67672 . 67693) (punctuation 67666 . 67667) (semantic-list 67634 . 67666) (punctuation 67632 . 67633) (symbol 67619 . 67631) (punctuation 67617 . 67618) (symbol 67599 . 67616) (open-paren 67593 . 67594) (symbol 67576 . 67590) (ENUM 67571 . 67575) (punctuation 67568 . 67569) (close-paren 67567 . 67568) (number 67565 . 67566) (punctuation 67563 . 67564) (symbol 67548 . 67562) (punctuation 67546 . 67547) (symbol 67529 . 67545) (punctuation 67527 . 67528) (symbol 67512 . 67526) (open-paren 67510 . 67511) (ENUM 67505 . 67509) (punctuation 67426 . 67427) (close-paren 67425 . 67426) (number 67423 . 67424) (punctuation 67421 . 67422) (symbol 67404 . 67420) (open-paren 67402 . 67403) (ENUM 67397 . 67401) (punctuation 67327 . 67328) (close-paren 67326 . 67327) (number 67324 . 67325) (punctuation 67322 . 67323) (symbol 67307 . 67321) (open-paren 67305 . 67306) (ENUM 67300 . 67304) (punctuation 67234 . 67235) (close-paren 67233 . 67234) (symbol 67219 . 67230) (punctuation 67213 . 67214) (symbol 67201 . 67213) (punctuation 67195 . 67196) (symbol 67179 . 67195) (punctuation 67173 . 67174) (symbol 67161 . 67173) (punctuation 67155 . 67156) (symbol 67144 . 67155) (open-paren 67138 . 67139) (ENUM 67131 . 67135) (punctuation 67065 . 67066) (close-paren 67064 . 67065) (open-paren 66843 . 66844) (symbol 66344 . 66356) (STRUCT 66337 . 66343) (punctuation 66231 . 66232) (close-paren 66230 . 66231) (open-paren 64495 . 64496) (symbol 64483 . 64494) (STRUCT 64476 . 64482) (punctuation 64473 . 64474) (close-paren 64472 . 64473) (open-paren 64360 . 64361) (symbol 64309 . 64322) (STRUCT 64302 . 64308) (close-paren 64241 . 64242) (punctuation 64239 . 64240) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 64232 . 64239) (punctuation 64230 . 64231) (semantic-list 64187 . 64229) (RETURN 64180 . 64186) (open-paren 64176 . 64177) (close-paren 64174 . 64175) (symbol 64173 . 64174) (symbol 64162 . 64172) (open-paren 64161 . 64162) (symbol 64147 . 64160) (symbol 64136 . 64146) (symbol 64129 . 64135) (close-paren 64067 . 64068) (punctuation 64062 . 64063) (semantic-list 64033 . 64061) (punctuation 64031 . 64032) (semantic-list 64022 . 64030) (RETURN 64015 . 64021) (open-paren 64011 . 64012) (close-paren 64009 . 64010) (symbol 64008 . 64009) (symbol 63997 . 64007) (punctuation 63995 . 63996) (symbol 63994 . 63995) (symbol 63983 . 63993) (open-paren 63982 . 63983) (symbol 63967 . 63981) (symbol 63956 . 63966) (symbol 63949 . 63955) (punctuation 63507 . 63508) (close-paren 63506 . 63507) (number 63503 . 63505) (punctuation 63501 . 63502) (symbol 63483 . 63500) (open-paren 63481 . 63482) (symbol 63463 . 63480) (ENUM 63458 . 63462) (close-paren 63400 . 63401) (punctuation 63392 . 63393) (punctuation 63391 . 63392) (RETURN 63376 . 63382) (open-paren 63372 . 63373) (close-paren 63370 . 63371) (symbol 63369 . 63370) (punctuation 63368 . 63369) (symbol 63352 . 63367) (STRUCT 63345 . 63351) (open-paren 63344 . 63345) (symbol 63328 . 63343) (symbol 63318 . 63327) (symbol 63311 . 63317) (close-paren 63266 . 63267) (punctuation 63252 . 63253) (punctuation 63251 . 63252) (RETURN 63237 . 63243) (open-paren 63233 . 63234) (close-paren 63231 . 63232) (symbol 63228 . 63231) (symbol 63218 . 63227) (punctuation 63216 . 63217) (symbol 63215 . 63216) (punctuation 63214 . 63215) (symbol 63198 . 63213) (STRUCT 63191 . 63197) (open-paren 63190 . 63191) (symbol 63179 . 63189) (symbol 63167 . 63178) (symbol 63160 . 63166) (close-paren 63018 . 63019) (punctuation 63005 . 63006) (punctuation 63004 . 63005) (RETURN 62990 . 62996) (open-paren 62986 . 62987) (close-paren 62984 . 62985) (symbol 62981 . 62984) (symbol 62971 . 62980) (punctuation 62969 . 62970) (symbol 62968 . 62969) (punctuation 62967 . 62968) (symbol 62951 . 62966) (STRUCT 62944 . 62950) (open-paren 62943 . 62944) (symbol 62933 . 62942) (symbol 62921 . 62932) (symbol 62914 . 62920) (close-paren 62841 . 62842) (punctuation 62828 . 62829) (punctuation 62827 . 62828) (RETURN 62813 . 62819) (open-paren 62809 . 62810) (close-paren 62807 . 62808) (symbol 62804 . 62807) (symbol 62794 . 62803) (punctuation 62792 . 62793) (symbol 62791 . 62792) (punctuation 62790 . 62791) (symbol 62774 . 62789) (STRUCT 62767 . 62773) (open-paren 62766 . 62767) (symbol 62756 . 62765) (symbol 62744 . 62755) (symbol 62737 . 62743) (close-paren 62645 . 62646) (number 62641 . 62642) (punctuation 62639 . 62640) (punctuation 62633 . 62634) (number 62631 . 62632) (punctuation 62615 . 62616) (punctuation 62614 . 62615) (RETURN 62600 . 62606) (open-paren 62596 . 62597) (close-paren 62594 . 62595) (symbol 62591 . 62594) (symbol 62581 . 62590) (punctuation 62579 . 62580) (symbol 62578 . 62579) (punctuation 62577 . 62578) (symbol 62561 . 62576) (STRUCT 62554 . 62560) (open-paren 62553 . 62554) (symbol 62542 . 62552) (symbol 62530 . 62541) (symbol 62523 . 62529) (close-paren 62459 . 62460) (punctuation 62451 . 62452) (number 62449 . 62450) (punctuation 62433 . 62434) (punctuation 62432 . 62433) (RETURN 62418 . 62424) (open-paren 62414 . 62415) (close-paren 62412 . 62413) (symbol 62409 . 62412) (symbol 62399 . 62408) (punctuation 62397 . 62398) (symbol 62396 . 62397) (punctuation 62395 . 62396) (symbol 62379 . 62394) (STRUCT 62372 . 62378) (open-paren 62371 . 62372) (symbol 62362 . 62370) (symbol 62350 . 62361) (symbol 62343 . 62349) (close-paren 62192 . 62193) (RETURN 62156 . 62162) (punctuation 62152 . 62153) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 62135 . 62147)))) 62126 . 62152) (open-paren 62122 . 62123) (close-paren 62120 . 62121) (symbol 62119 . 62120) (symbol 62107 . 62118) (open-paren 62106 . 62107) (symbol 62094 . 62105) (punctuation 62092 . 62093) (symbol 62076 . 62091) (STRUCT 62069 . 62075) (symbol 62062 . 62068) (close-paren 62059 . 62060) (RETURN 62016 . 62022) (open-paren 62012 . 62013) (close-paren 62010 . 62011) (symbol 62009 . 62010) (symbol 61997 . 62008) (open-paren 61996 . 61997) (symbol 61983 . 61995) (BOOL 61978 . 61982) (symbol 61971 . 61977) (punctuation 61967 . 61968) (close-paren 61966 . 61967) (open-paren 60050 . 60051) (symbol 60034 . 60049) (STRUCT 60027 . 60033) (punctuation 60024 . 60025) (close-paren 60023 . 60024) (open-paren 59557 . 59558) (symbol 59541 . 59556) (STRUCT 59534 . 59540) (close-paren 59168 . 59169) (punctuation 59166 . 59167) (semantic-list #("(XSYMBOL (sym)->constant)" 0 1 (macros (("sym" symbol "sym" 59162 . 59165)))) 59136 . 59166) (RETURN 59129 . 59135) (open-paren 59125 . 59126) (close-paren 59123 . 59124) (symbol 59120 . 59123) (symbol 59108 . 59119) (open-paren 59107 . 59108) (close-paren 59105 . 59106) (symbol 59088 . 59105) (open-paren 59087 . 59088) (INT 59083 . 59086) (symbol 59076 . 59082) (close-paren 58874 . 58875) (punctuation 58836 . 58837) (punctuation 58835 . 58836) (symbol 58826 . 58834) (punctuation 58825 . 58826) (punctuation 58824 . 58825) (semantic-list 58819 . 58824) (symbol 58811 . 58818) (RETURN 58804 . 58810) (open-paren 58800 . 58801) (close-paren 58798 . 58799) (symbol 58795 . 58798) (symbol 58783 . 58794) (open-paren 58782 . 58783) (symbol 58745 . 58781) (BOOL 58740 . 58744) (symbol 58733 . 58739) (close-paren 58669 . 58670) (punctuation 58648 . 58649) (punctuation 58647 . 58648) (symbol 58638 . 58646) (punctuation 58637 . 58638) (punctuation 58636 . 58637) (semantic-list 58631 . 58636) (symbol 58623 . 58630) (RETURN 58616 . 58622) (open-paren 58612 . 58613) (close-paren 58610 . 58611) (symbol 58607 . 58610) (symbol 58595 . 58606) (open-paren 58594 . 58595) (symbol 58576 . 58593) (BOOL 58571 . 58575) (symbol 58564 . 58570) (close-paren 58509 . 58510) (punctuation 58502 . 58503) (punctuation 58501 . 58502) (semantic-list 58496 . 58501) (symbol 58488 . 58495) (RETURN 58481 . 58487) (open-paren 58477 . 58478) (close-paren 58475 . 58476) (symbol 58472 . 58475) (symbol 58460 . 58471) (open-paren 58459 . 58460) (symbol 58447 . 58458) (symbol 58435 . 58446) (symbol 58428 . 58434) (close-paren 58425 . 58426) (punctuation 58415 . 58416) (symbol 58412 . 58415) (punctuation 58411 . 58412) (punctuation 58410 . 58411) (symbol 58407 . 58410) (punctuation 58403 . 58404) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 58369 . 58372)))) 58360 . 58403) (open-paren 58356 . 58357) (close-paren 58354 . 58355) (symbol 58353 . 58354) (punctuation 58352 . 58353) (symbol 58343 . 58351) (UNION 58337 . 58342) (punctuation 58335 . 58336) (symbol 58332 . 58335) (punctuation 58331 . 58332) (symbol 58319 . 58330) (STRUCT 58312 . 58318) (open-paren 58311 . 58312) (symbol 58296 . 58310) (VOID 58291 . 58295) (symbol 58284 . 58290) (close-paren 58282 . 58283) (punctuation 58272 . 58273) (symbol 58269 . 58272) (punctuation 58268 . 58269) (punctuation 58267 . 58268) (symbol 58264 . 58267) (punctuation 58260 . 58261) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 58226 . 58229)))) 58217 . 58260) (open-paren 58213 . 58214) (close-paren 58211 . 58212) (symbol 58210 . 58211) (punctuation 58209 . 58210) (symbol 58185 . 58208) (STRUCT 58178 . 58184) (punctuation 58176 . 58177) (symbol 58173 . 58176) (punctuation 58172 . 58173) (symbol 58160 . 58171) (STRUCT 58153 . 58159) (open-paren 58152 . 58153) (symbol 58137 . 58151) (VOID 58132 . 58136) (symbol 58125 . 58131) (close-paren 58123 . 58124) (punctuation 58111 . 58112) (symbol 58108 . 58111) (punctuation 58107 . 58108) (punctuation 58106 . 58107) (symbol 58103 . 58106) (punctuation 58099 . 58100) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 58066 . 58069)))) 58057 . 58099) (open-paren 58053 . 58054) (close-paren 58051 . 58052) (symbol 58050 . 58051) (punctuation 58049 . 58050) (symbol 58037 . 58048) (STRUCT 58030 . 58036) (punctuation 58028 . 58029) (symbol 58025 . 58028) (punctuation 58024 . 58025) (symbol 58012 . 58023) (STRUCT 58005 . 58011) (open-paren 58004 . 58005) (symbol 57987 . 58003) (VOID 57982 . 57986) (symbol 57975 . 57981) (close-paren 57972 . 57973) (punctuation 57970 . 57971) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 0 1 (macros (("v" symbol "v" 57968 . 57969) ("sym" symbol "sym" 57963 . 57966)))) 57940 . 57970) (open-paren 57936 . 57937) (close-paren 57934 . 57935) (symbol 57933 . 57934) (symbol 57921 . 57932) (punctuation 57919 . 57920) (symbol 57916 . 57919) (punctuation 57915 . 57916) (symbol 57903 . 57914) (STRUCT 57896 . 57902) (open-paren 57895 . 57896) (close-paren 57893 . 57894) (symbol 57879 . 57893) (open-paren 57878 . 57879) (VOID 57873 . 57877) (symbol 57866 . 57872) (close-paren 57863 . 57864) (punctuation 57857 . 57858) (symbol 57854 . 57857) (punctuation 57853 . 57854) (punctuation 57852 . 57853) (symbol 57849 . 57852) (RETURN 57842 . 57848) (punctuation 57838 . 57839) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57804 . 57807)))) 57795 . 57838) (open-paren 57791 . 57792) (close-paren 57789 . 57790) (symbol 57786 . 57789) (punctuation 57785 . 57786) (symbol 57773 . 57784) (STRUCT 57766 . 57772) (open-paren 57765 . 57766) (symbol 57754 . 57764) (punctuation 57752 . 57753) (symbol 57743 . 57751) (UNION 57737 . 57742) (symbol 57730 . 57736) (close-paren 57728 . 57729) (punctuation 57722 . 57723) (symbol 57719 . 57722) (punctuation 57718 . 57719) (punctuation 57717 . 57718) (symbol 57714 . 57717) (RETURN 57707 . 57713) (punctuation 57703 . 57704) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57669 . 57672)))) 57660 . 57703) (open-paren 57656 . 57657) (close-paren 57654 . 57655) (symbol 57651 . 57654) (punctuation 57650 . 57651) (symbol 57638 . 57649) (STRUCT 57631 . 57637) (open-paren 57630 . 57631) (symbol 57619 . 57629) (punctuation 57617 . 57618) (symbol 57593 . 57616) (STRUCT 57586 . 57592) (symbol 57579 . 57585) (close-paren 57577 . 57578) (punctuation 57569 . 57570) (symbol 57566 . 57569) (punctuation 57565 . 57566) (punctuation 57564 . 57565) (symbol 57561 . 57564) (RETURN 57554 . 57560) (punctuation 57550 . 57551) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "sym" 57517 . 57520)))) 57508 . 57550) (open-paren 57504 . 57505) (close-paren 57502 . 57503) (symbol 57499 . 57502) (punctuation 57498 . 57499) (symbol 57486 . 57497) (STRUCT 57479 . 57485) (open-paren 57478 . 57479) (symbol 57465 . 57477) (punctuation 57463 . 57464) (symbol 57451 . 57462) (STRUCT 57444 . 57450) (symbol 57437 . 57443) (close-paren 57434 . 57435) (punctuation 57432 . 57433) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 0 1 (macros (("sym" symbol "sym" 57428 . 57431)))) 57409 . 57432) (RETURN 57402 . 57408) (open-paren 57398 . 57399) (close-paren 57396 . 57397) (symbol 57393 . 57396) (punctuation 57392 . 57393) (symbol 57380 . 57391) (STRUCT 57373 . 57379) (open-paren 57372 . 57373) (close-paren 57370 . 57371) (symbol 57360 . 57370) (open-paren 57359 . 57360) (symbol 57347 . 57358) (symbol 57340 . 57346) (punctuation 57138 . 57139) (close-paren 57137 . 57138) (semantic-list 57044 . 57137) (punctuation 57042 . 57043) (punctuation 57041 . 57042) (semantic-list 57001 . 57039) (symbol 56992 . 57000) (open-paren 56991 . 56992) (symbol 56984 . 56990) (close-paren 56905 . 56906) (punctuation 56903 . 56904) (semantic-list 56828 . 56903) (RETURN 56821 . 56827) (open-paren 56817 . 56818) (close-paren 56815 . 56816) (symbol 56813 . 56815) (punctuation 56812 . 56813) (symbol 56796 . 56811) (STRUCT 56789 . 56795) (open-paren 56788 . 56789) (symbol 56765 . 56787) (INT 56761 . 56764) (symbol 56754 . 56760) (punctuation 56686 . 56687) (close-paren 56685 . 56686) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 56652 . 56671) ("type" STRUCT "struct" 56645 . 56651)))) 56630 . 56682) (punctuation 56628 . 56629) (symbol 56606 . 56627) (punctuation 56459 . 56460) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 56435 . 56450) ("type" STRUCT "struct" 56428 . 56434)))) 56413 . 56459) (punctuation 56411 . 56412) (symbol 56385 . 56410) (open-paren 56213 . 56214) (symbol 56191 . 56210) (ENUM 56186 . 56190) (punctuation 56183 . 56184) (close-paren 56182 . 56183) (open-paren 55195 . 55196) (symbol 55183 . 55192) (STRUCT 55176 . 55182) (close-paren 55035 . 55036) (ELSE 54995 . 54999) (punctuation 54974 . 54975) (punctuation 54973 . 54974) (semantic-list 54969 . 54973) (semantic-list 54857 . 54923) (IF 54854 . 54856) (open-paren 54850 . 54851) (close-paren 54848 . 54849) (symbol 54845 . 54848) (symbol 54833 . 54844) (punctuation 54831 . 54832) (symbol 54828 . 54831) (INT 54824 . 54827) (punctuation 54822 . 54823) (symbol 54820 . 54822) (symbol 54808 . 54819) (open-paren 54807 . 54808) (symbol 54792 . 54806) (VOID 54787 . 54791) (symbol 54780 . 54786) (close-paren 54643 . 54644) (punctuation 54641 . 54642) (semantic-list 54555 . 54641) (RETURN 54548 . 54554) (open-paren 54544 . 54545) (close-paren 54542 . 54543) (symbol 54539 . 54542) (INT 54535 . 54538) (punctuation 54533 . 54534) (symbol 54531 . 54533) (symbol 54519 . 54530) (open-paren 54518 . 54519) (symbol 54503 . 54517) (symbol 54491 . 54502) (symbol 54484 . 54490) (close-paren 54364 . 54365) (RETURN 54352 . 54358) (punctuation 54347 . 54348) (semantic-list 54311 . 54347) (WHILE 54305 . 54310) (semantic-list 54077 . 54302) (DO 54070 . 54072) (open-paren 54009 . 54010) (close-paren 54007 . 54008) (symbol 54004 . 54007) (symbol 53994 . 54003) (punctuation 53992 . 53993) (symbol 53990 . 53992) (symbol 53978 . 53989) (open-paren 53977 . 53978) (symbol 53956 . 53976) (symbol 53944 . 53955) (symbol 53937 . 53943) (punctuation 53934 . 53935) (close-paren 53933 . 53934) (open-paren 53171 . 53172) (symbol 53149 . 53168) (STRUCT 53142 . 53148) (punctuation 53139 . 53140) (close-paren 53138 . 53139) (open-paren 52087 . 52088) (symbol 52069 . 52084) (STRUCT 52062 . 52068) (punctuation 52059 . 52060) (close-paren 52058 . 52059) (number 52057 . 52058) (open-paren 52056 . 52057) (symbol 52044 . 52056) (INT 52040 . 52043) (CONST 52034 . 52039) (EXTERN 52027 . 52033) (punctuation 52024 . 52025) (close-paren 52023 . 52024) (number 52019 . 52020) (punctuation 52017 . 52018) (symbol 51997 . 52016) (punctuation 51991 . 51992) (number 51990 . 51991) (punctuation 51988 . 51989) (symbol 51968 . 51987) (punctuation 51962 . 51963) (number 51961 . 51962) (punctuation 51959 . 51960) (symbol 51939 . 51958) (punctuation 51933 . 51934) (number 51932 . 51933) (punctuation 51930 . 51931) (symbol 51910 . 51929) (open-paren 51904 . 51905) (symbol 51884 . 51901) (ENUM 51879 . 51883) (close-paren 50013 . 50014) (number 50001 . 50002) (punctuation 49916 . 49917) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 49904 . 49905)))) 49895 . 49916) (open-paren 49891 . 49892) (close-paren 49889 . 49890) (symbol 49883 . 49889) (symbol 49873 . 49882) (punctuation 49871 . 49872) (symbol 49870 . 49871) (punctuation 49869 . 49870) (VOID 49864 . 49868) (open-paren 49863 . 49864) (symbol 49854 . 49862) (VOID 49849 . 49853) (symbol 49842 . 49848) (punctuation 49714 . 49715) (close-paren 49713 . 49714) (number 49711 . 49712) (punctuation 49709 . 49710) (punctuation 49708 . 49709) (semantic-list #("(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 0 1 (macros (("ptr" semantic-list "(iname)" 14 . 20) ("tag" symbol "Lisp_Symbol" 1 . 12)))) 49680 . 49707) (punctuation 49678 . 49679) (symbol 49666 . 49677) (open-paren 49664 . 49665) (ENUM 49659 . 49663) (close-paren 49440 . 49441) (punctuation 49418 . 49419) (punctuation 49417 . 49418) (semantic-list 49410 . 49417) (symbol 49402 . 49409) (punctuation 49398 . 49399) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 49363 . 49364)))) 49354 . 49398) (open-paren 49210 . 49211) (close-paren 49208 . 49209) (symbol 49205 . 49208) (symbol 49193 . 49204) (punctuation 49191 . 49192) (symbol 49188 . 49191) (symbol 49178 . 49187) (punctuation 49176 . 49177) (symbol 49171 . 49176) (symbol 49159 . 49170) (open-paren 49158 . 49159) (symbol 49150 . 49157) (VOID 49145 . 49149) (symbol 49138 . 49144) (close-paren 49135 . 49136) (punctuation 49113 . 49114) (punctuation 49112 . 49113) (semantic-list 49105 . 49112) (symbol 49097 . 49104) (punctuation 49093 . 49094) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 49061 . 49062)))) 49052 . 49093) (open-paren 49048 . 49049) (close-paren 49046 . 49047) (symbol 49043 . 49046) (symbol 49031 . 49042) (punctuation 49029 . 49030) (symbol 49026 . 49029) (symbol 49016 . 49025) (punctuation 49014 . 49015) (symbol 49009 . 49014) (symbol 48997 . 49008) (open-paren 48996 . 48997) (symbol 48991 . 48995) (VOID 48986 . 48990) (symbol 48979 . 48985) (close-paren 48976 . 48977) (punctuation 48958 . 48959) (punctuation 48956 . 48957) (symbol 48951 . 48955) (punctuation 48950 . 48951) (symbol 48944 . 48950) (punctuation 48943 . 48944) (punctuation 48942 . 48943) (semantic-list 48935 . 48942) (symbol 48927 . 48934) (RETURN 48920 . 48926) (open-paren 48848 . 48849) (close-paren 48846 . 48847) (symbol 48841 . 48846) (symbol 48829 . 48840) (open-paren 48828 . 48829) (symbol 48819 . 48827) (symbol 48809 . 48818) (symbol 48802 . 48808) (close-paren 48799 . 48800) (RETURN 48786 . 48792) (open-paren 48710 . 48711) (close-paren 48708 . 48709) (symbol 48703 . 48708) (symbol 48691 . 48702) (open-paren 48690 . 48691) (symbol 48684 . 48689) (symbol 48674 . 48683) (symbol 48667 . 48673) (close-paren 48664 . 48665) (punctuation 48648 . 48649) (punctuation 48647 . 48648) (semantic-list 48640 . 48647) (symbol 48632 . 48639) (punctuation 48630 . 48631) (RETURN 48623 . 48629) (open-paren 48619 . 48620) (close-paren 48617 . 48618) (symbol 48614 . 48617) (symbol 48604 . 48613) (punctuation 48602 . 48603) (symbol 48597 . 48602) (symbol 48585 . 48596) (open-paren 48584 . 48585) (symbol 48574 . 48583) (punctuation 48572 . 48573) (symbol 48560 . 48571) (symbol 48553 . 48559) (close-paren 48550 . 48551) (punctuation 48534 . 48535) (punctuation 48533 . 48534) (semantic-list 48526 . 48533) (symbol 48518 . 48525) (RETURN 48511 . 48517) (open-paren 48507 . 48508) (close-paren 48505 . 48506) (symbol 48502 . 48505) (symbol 48492 . 48501) (punctuation 48490 . 48491) (symbol 48485 . 48490) (symbol 48473 . 48484) (open-paren 48472 . 48473) (symbol 48467 . 48471) (symbol 48455 . 48466) (symbol 48448 . 48454) (punctuation 48394 . 48395) (close-paren 48393 . 48394) (semantic-list 48377 . 48390) (SIZEOF 48370 . 48376) (punctuation 48368 . 48369) (symbol 48358 . 48367) (punctuation 48352 . 48353) (semantic-list 48321 . 48352) (symbol 48312 . 48320) (punctuation 48310 . 48311) (symbol 48293 . 48309) (punctuation 48287 . 48288) (semantic-list 48257 . 48287) (symbol 48248 . 48256) (punctuation 48246 . 48247) (symbol 48234 . 48245) (open-paren 48228 . 48229) (ENUM 48221 . 48225) (close-paren 48120 . 48121) (punctuation 48118 . 48119) (semantic-list 48080 . 48118) (punctuation 48078 . 48079) (punctuation 48076 . 48077) (punctuation 48075 . 48076) (symbol 48070 . 48074) (punctuation 48069 . 48070) (ELSE 48060 . 48064) (punctuation 48056 . 48057) (semantic-list 48025 . 48056) (punctuation 48023 . 48024) (punctuation 48022 . 48023) (number 48020 . 48021) (punctuation 48018 . 48019) (punctuation 48017 . 48018) (symbol 48012 . 48016) (punctuation 48011 . 48012) (semantic-list 48003 . 48006) (IF 48000 . 48002) (punctuation 47995 . 47996) (punctuation 47937 . 47938) (punctuation 47935 . 47936) (symbol 47930 . 47934) (open-paren 47854 . 47855) (close-paren 47852 . 47853) (symbol 47851 . 47852) (BOOL 47846 . 47850) (punctuation 47844 . 47845) (symbol 47843 . 47844) (symbol 47833 . 47842) (punctuation 47831 . 47832) (symbol 47830 . 47831) (symbol 47818 . 47829) (open-paren 47817 . 47818) (symbol 47801 . 47816) (VOID 47796 . 47800) (symbol 47789 . 47795) (close-paren 47756 . 47757) (punctuation 47748 . 47749) (symbol 47745 . 47747) (punctuation 47743 . 47744) (semantic-list 47736 . 47742) (symbol 47717 . 47735) (RETURN 47710 . 47716) (open-paren 47706 . 47707) (close-paren 47704 . 47705) (symbol 47703 . 47704) (symbol 47693 . 47702) (punctuation 47691 . 47692) (symbol 47690 . 47691) (symbol 47678 . 47689) (open-paren 47677 . 47678) (symbol 47661 . 47676) (symbol 47649 . 47660) (symbol 47642 . 47648) (close-paren 47639 . 47640) (punctuation 47637 . 47638) (semantic-list 47531 . 47637) (punctuation 47529 . 47530) (punctuation 47528 . 47529) (RETURN 47521 . 47527) (open-paren 47469 . 47470) (close-paren 47467 . 47468) (symbol 47466 . 47467) (symbol 47456 . 47465) (punctuation 47454 . 47455) (symbol 47453 . 47454) (symbol 47441 . 47452) (open-paren 47440 . 47441) (symbol 47421 . 47439) (BOOL 47416 . 47420) (symbol 47409 . 47415) (close-paren 47370 . 47371) (punctuation 47341 . 47342) (semantic-list 47302 . 47340) (RETURN 47295 . 47301) (open-paren 47216 . 47217) (close-paren 47214 . 47215) (symbol 47210 . 47214) (symbol 47200 . 47209) (open-paren 47199 . 47200) (symbol 47181 . 47198) (symbol 47171 . 47180) (symbol 47164 . 47170) (close-paren 47161 . 47162) (punctuation 47139 . 47140) (semantic-list 47107 . 47138) (RETURN 47100 . 47106) (open-paren 47021 . 47022) (close-paren 47019 . 47020) (symbol 47015 . 47019) (symbol 47005 . 47014) (open-paren 47004 . 47005) (symbol 46986 . 47003) (symbol 46976 . 46985) (symbol 46969 . 46975) (close-paren 46890 . 46891) (semantic-list 46850 . 46867) (RETURN 46843 . 46849) (open-paren 46839 . 46840) (close-paren 46837 . 46838) (symbol 46836 . 46837) (symbol 46824 . 46835) (open-paren 46823 . 46824) (symbol 46800 . 46822) (punctuation 46798 . 46799) (CHAR 46793 . 46797) (UNSIGNED 46784 . 46792) (symbol 46777 . 46783) (close-paren 46774 . 46775) (punctuation 46767 . 46768) (punctuation 46766 . 46767) (semantic-list 46763 . 46766) (symbol 46750 . 46762) (RETURN 46743 . 46749) (open-paren 46739 . 46740) (close-paren 46737 . 46738) (symbol 46736 . 46737) (symbol 46724 . 46735) (open-paren 46723 . 46724) (symbol 46706 . 46722) (punctuation 46704 . 46705) (symbol 46694 . 46703) (symbol 46687 . 46693) (close-paren 46684 . 46685) (RETURN 46671 . 46677) (open-paren 46601 . 46602) (close-paren 46599 . 46600) (symbol 46598 . 46599) (symbol 46586 . 46597) (open-paren 46585 . 46586) (symbol 46568 . 46584) (symbol 46558 . 46567) (symbol 46551 . 46557) (punctuation 46548 . 46549) (close-paren 46547 . 46548) (open-paren 46073 . 46074) (symbol 46054 . 46070) (STRUCT 46047 . 46053) (punctuation 45969 . 45970) (close-paren 45968 . 45969) (open-paren 45878 . 45879) (symbol 45864 . 45875) (STRUCT 45857 . 45863) (punctuation 45781 . 45782) (close-paren 45780 . 45781) (open-paren 44634 . 44635) (symbol 44614 . 44631) (STRUCT 44607 . 44613) (close-paren 44151 . 44152) (punctuation 44134 . 44135) (punctuation 44133 . 44134) (semantic-list 44125 . 44133) (symbol 44117 . 44124) (open-paren 44113 . 44114) (close-paren 44111 . 44112) (symbol 44104 . 44111) (symbol 44094 . 44103) (punctuation 44092 . 44093) (symbol 44086 . 44092) (symbol 44074 . 44085) (open-paren 44073 . 44074) (symbol 44056 . 44072) (VOID 44051 . 44055) (symbol 44044 . 44050) (close-paren 44042 . 44043) (semantic-list 44031 . 44039) (RETURN 44002 . 44008) (open-paren 43998 . 43999) (close-paren 43996 . 43997) (symbol 43990 . 43996) (symbol 43978 . 43989) (open-paren 43977 . 43978) (symbol 43970 . 43976) (symbol 43960 . 43969) (symbol 43953 . 43959) (close-paren 43950 . 43951) (punctuation 43931 . 43932) (punctuation 43930 . 43931) (symbol 43929 . 43930) (punctuation 43927 . 43928) (symbol 43922 . 43926) (punctuation 43921 . 43922) (punctuation 43920 . 43921) (symbol 43919 . 43920) (punctuation 43917 . 43918) (number 43915 . 43916) (punctuation 43913 . 43914) (symbol 43903 . 43912) (punctuation 43902 . 43903) (punctuation 43901 . 43902) (symbol 43900 . 43901) (RETURN 43893 . 43899) (open-paren 43827 . 43828) (close-paren 43825 . 43826) (symbol 43824 . 43825) (punctuation 43823 . 43824) (symbol 43811 . 43822) (STRUCT 43804 . 43810) (open-paren 43803 . 43804) (symbol 43790 . 43802) (symbol 43780 . 43789) (symbol 43773 . 43779) (close-paren 43680 . 43681) (punctuation 43673 . 43674) (punctuation 43672 . 43673) (semantic-list 43664 . 43672) (symbol 43656 . 43663) (RETURN 43649 . 43655) (open-paren 43645 . 43646) (close-paren 43643 . 43644) (symbol 43637 . 43643) (symbol 43625 . 43636) (open-paren 43624 . 43625) (symbol 43617 . 43623) (symbol 43607 . 43616) (symbol 43600 . 43606) (close-paren 43598 . 43599) (punctuation 43596 . 43597) (NEW 43593 . 43596) (punctuation 43591 . 43592) (open-paren 43565 . 43566) (close-paren 43563 . 43564) (NEW 43560 . 43563) (CHAR 43555 . 43559) (UNSIGNED 43546 . 43554) (punctuation 43544 . 43545) (symbol 43539 . 43544) (symbol 43529 . 43538) (punctuation 43527 . 43528) (symbol 43521 . 43527) (symbol 43509 . 43520) (open-paren 43508 . 43509) (symbol 43503 . 43507) (VOID 43498 . 43502) (symbol 43491 . 43497) (close-paren 43489 . 43490) (punctuation 43487 . 43488) (RETURN 43459 . 43465) (open-paren 43455 . 43456) (close-paren 43453 . 43454) (symbol 43448 . 43453) (symbol 43438 . 43447) (punctuation 43436 . 43437) (symbol 43430 . 43436) (symbol 43418 . 43429) (open-paren 43417 . 43418) (symbol 43412 . 43416) (CHAR 43407 . 43411) (UNSIGNED 43398 . 43406) (symbol 43391 . 43397) (close-paren 43389 . 43390) (semantic-list 43364 . 43372) (RETURN 43357 . 43363) (open-paren 43311 . 43312) (close-paren 43309 . 43310) (symbol 43303 . 43309) (symbol 43291 . 43302) (open-paren 43290 . 43291) (symbol 43283 . 43289) (punctuation 43281 . 43282) (CHAR 43276 . 43280) (symbol 43269 . 43275) (close-paren 43267 . 43268) (punctuation 43260 . 43261) (punctuation 43259 . 43260) (semantic-list 43251 . 43259) (symbol 43243 . 43250) (RETURN 43236 . 43242) (open-paren 43232 . 43233) (close-paren 43230 . 43231) (symbol 43224 . 43230) (symbol 43212 . 43223) (open-paren 43211 . 43212) (symbol 43205 . 43210) (punctuation 43203 . 43204) (CHAR 43198 . 43202) (UNSIGNED 43189 . 43197) (symbol 43182 . 43188) (close-paren 41715 . 41716) (punctuation 41703 . 41704) (punctuation 41702 . 41703) (semantic-list 41697 . 41702) (symbol 41689 . 41696) (punctuation 41687 . 41688) (punctuation 41686 . 41687) (number 41684 . 41685) (RETURN 41677 . 41683) (open-paren 41673 . 41674) (close-paren 41671 . 41672) (symbol 41668 . 41671) (symbol 41656 . 41667) (open-paren 41655 . 41656) (symbol 41638 . 41654) (BOOL 41633 . 41637) (symbol 41626 . 41632) (punctuation 41581 . 41582) (close-paren 41580 . 41581) (open-paren 41442 . 41443) (symbol 41428 . 41439) (STRUCT 41411 . 41417) (close-paren 41330 . 41331) (punctuation 41322 . 41323) (semantic-list 41318 . 41321) (symbol 41313 . 41317) (punctuation 41311 . 41312) (semantic-list 41307 . 41310) (symbol 41301 . 41306) (RETURN 41294 . 41300) (open-paren 41290 . 41291) (close-paren 41288 . 41289) (symbol 41287 . 41288) (symbol 41275 . 41286) (open-paren 41274 . 41275) (symbol 41265 . 41273) (symbol 41253 . 41264) (symbol 41246 . 41252) (close-paren 41244 . 41245) (punctuation 41236 . 41237) (semantic-list 41232 . 41235) (symbol 41227 . 41231) (punctuation 41225 . 41226) (semantic-list 41221 . 41224) (symbol 41215 . 41220) (RETURN 41208 . 41214) (open-paren 41204 . 41205) (close-paren 41202 . 41203) (symbol 41201 . 41202) (symbol 41189 . 41200) (open-paren 41188 . 41189) (symbol 41179 . 41187) (symbol 41167 . 41178) (symbol 41160 . 41166) (close-paren 41092 . 41093) (punctuation 41090 . 41091) (semantic-list 41010 . 41090) (RETURN 41003 . 41009) (open-paren 40999 . 41000) (close-paren 40997 . 40998) (symbol 40996 . 40997) (symbol 40984 . 40995) (open-paren 40983 . 40984) (symbol 40979 . 40982) (symbol 40967 . 40978) (symbol 40960 . 40966) (close-paren 40958 . 40959) (punctuation 40956 . 40957) (semantic-list 40876 . 40956) (RETURN 40869 . 40875) (open-paren 40865 . 40866) (close-paren 40863 . 40864) (symbol 40862 . 40863) (symbol 40850 . 40861) (open-paren 40849 . 40850) (symbol 40845 . 40848) (symbol 40833 . 40844) (symbol 40826 . 40832) (close-paren 40758 . 40759) (punctuation 40753 . 40754) (semantic-list 40749 . 40752) (symbol 40739 . 40748) (punctuation 40738 . 40739) (open-paren 40734 . 40735) (close-paren 40732 . 40733) (symbol 40731 . 40732) (symbol 40719 . 40730) (punctuation 40717 . 40718) (symbol 40716 . 40717) (symbol 40704 . 40715) (open-paren 40703 . 40704) (symbol 40695 . 40702) (VOID 40690 . 40694) (symbol 40683 . 40689) (close-paren 40681 . 40682) (punctuation 40676 . 40677) (semantic-list 40672 . 40675) (symbol 40662 . 40671) (punctuation 40661 . 40662) (open-paren 40657 . 40658) (close-paren 40655 . 40656) (symbol 40654 . 40655) (symbol 40642 . 40653) (punctuation 40640 . 40641) (symbol 40639 . 40640) (symbol 40627 . 40638) (open-paren 40626 . 40627) (symbol 40618 . 40625) (VOID 40613 . 40617) (symbol 40606 . 40612) (close-paren 40435 . 40436) (punctuation "." 40418 . 40433) (symbol "u" 40418 . 40433) (punctuation ">" 40418 . 40433) (punctuation "-" 40418 . 40433) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40431 . 40432)))) 40418 . 40433) (symbol "XCONS" 40418 . 40433) (RETURN 40411 . 40417) (open-paren 40407 . 40408) (close-paren 40405 . 40406) (symbol 40404 . 40405) (symbol 40392 . 40403) (open-paren 40391 . 40392) (close-paren 40389 . 40390) (symbol 40385 . 40389) (open-paren 40384 . 40385) (symbol 40372 . 40383) (symbol 40365 . 40371) (close-paren 40362 . 40363) (punctuation ">" 40345 . 40360) (punctuation "-" 40345 . 40360) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40358 . 40359)))) 40345 . 40360) (symbol "XCONS" 40345 . 40360) (RETURN 40338 . 40344) (open-paren 40334 . 40335) (close-paren 40332 . 40333) (symbol 40331 . 40332) (symbol 40319 . 40330) (open-paren 40318 . 40319) (close-paren 40316 . 40317) (symbol 40312 . 40316) (open-paren 40311 . 40312) (symbol 40299 . 40310) (symbol 40292 . 40298) (close-paren 40253 . 40254) (punctuation 40247 . 40248) (symbol 40246 . 40247) (punctuation 40245 . 40246) (punctuation 40244 . 40245) (semantic-list 40241 . 40244) (symbol 40235 . 40240) (punctuation 40234 . 40235) (RETURN 40227 . 40233) (open-paren 40223 . 40224) (close-paren 40221 . 40222) (symbol 40220 . 40221) (symbol 40208 . 40219) (open-paren 40207 . 40208) (symbol 40197 . 40206) (punctuation 40195 . 40196) (symbol 40183 . 40194) (symbol 40176 . 40182) (close-paren 40174 . 40175) (punctuation 40168 . 40169) (punctuation 40167 . 40168) (semantic-list 40164 . 40167) (symbol 40158 . 40163) (punctuation 40157 . 40158) (RETURN 40150 . 40156) (open-paren 40146 . 40147) (close-paren 40144 . 40145) (symbol 40143 . 40144) (symbol 40131 . 40142) (open-paren 40130 . 40131) (symbol 40120 . 40129) (punctuation 40118 . 40119) (symbol 40106 . 40117) (symbol 40099 . 40105) (punctuation 39639 . 39640) (close-paren 39638 . 39639) (open-paren 39412 . 39413) (symbol 39400 . 39409) (STRUCT 39383 . 39389) (close-paren 39305 . 39306) (punctuation 39303 . 39304) (semantic-list #("((ok) ? (void) 0 : (void) wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 39301 . 39302) ("predicate" symbol "predicate" 39290 . 39299) ("ok" symbol "ok" 39286 . 39288)))) 39267 . 39303) (open-paren 39263 . 39264) (close-paren 39261 . 39262) (symbol 39260 . 39261) (symbol 39248 . 39259) (punctuation 39246 . 39247) (symbol 39237 . 39246) (symbol 39225 . 39236) (punctuation 39223 . 39224) (symbol 39221 . 39223) (INT 39217 . 39220) (open-paren 39216 . 39217) (close-paren 39214 . 39215) (symbol 39204 . 39214) (open-paren 39203 . 39204) (VOID 39198 . 39202) (symbol 39191 . 39197) (close-paren 39165 . 39166) (RETURN 39155 . 39161) (punctuation 39151 . 39152) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "INTEGERP" 39118 . 39126)))) 39109 . 39151) (open-paren 39057 . 39058) (close-paren 39055 . 39056) (symbol 39054 . 39055) (punctuation 39053 . 39054) (VOID 39048 . 39052) (open-paren 39047 . 39048) (symbol 39026 . 39046) (symbol 39014 . 39025) (symbol 39007 . 39013) (close-paren 39004 . 39005) (RETURN 38974 . 38980) (open-paren 38970 . 38971) (close-paren 38968 . 38969) (symbol 38967 . 38968) (symbol 38955 . 38966) (open-paren 38954 . 38955) (symbol 38946 . 38953) (punctuation 38944 . 38945) (VOID 38939 . 38943) (symbol 38932 . 38938) (close-paren 36641 . 36642) (punctuation 36631 . 36632) (RETURN 36598 . 36604) (open-paren 36594 . 36595) (close-paren 36592 . 36593) (symbol 36587 . 36592) (INT 36583 . 36586) (open-paren 36582 . 36583) (symbol 36562 . 36581) (symbol 36550 . 36561) (symbol 36543 . 36549) (close-paren 36540 . 36541) (RETURN 36530 . 36536) (punctuation 36526 . 36527) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 36507 . 36514)))) 36498 . 36526) (open-paren 36421 . 36422) (close-paren 36419 . 36420) (symbol 36416 . 36419) (punctuation 36415 . 36416) (symbol 36403 . 36414) (STRUCT 36396 . 36402) (open-paren 36395 . 36396) (symbol 36378 . 36394) (symbol 36366 . 36377) (symbol 36359 . 36365) (close-paren 36356 . 36357) (RETURN 36346 . 36352) (punctuation 36342 . 36343) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XTYPE" 36297 . 36302)))) 36288 . 36342) (open-paren 36239 . 36240) (close-paren 36237 . 36238) (symbol 36233 . 36237) (symbol 36223 . 36232) (ENUM 36218 . 36222) (punctuation 36216 . 36217) (symbol 36213 . 36216) (punctuation 36212 . 36213) (VOID 36207 . 36211) (open-paren 36206 . 36207) (symbol 36192 . 36205) (symbol 36180 . 36191) (symbol 36173 . 36179) (close-paren 36113 . 36114) (RETURN 36077 . 36083) (punctuation 36073 . 36074) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 36055 . 36068)))) 36046 . 36073) (open-paren 36042 . 36043) (close-paren 36040 . 36041) (symbol 36039 . 36040) (symbol 36027 . 36038) (open-paren 36026 . 36027) (symbol 36013 . 36025) (punctuation 36011 . 36012) (symbol 35994 . 36010) (STRUCT 35987 . 35993) (symbol 35980 . 35986) (close-paren 35977 . 35978) (RETURN 35941 . 35947) (punctuation 35937 . 35938) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 35916 . 35932)))) 35907 . 35937) (open-paren 35903 . 35904) (close-paren 35901 . 35902) (symbol 35900 . 35901) (symbol 35888 . 35899) (open-paren 35887 . 35888) (symbol 35871 . 35886) (punctuation 35869 . 35870) (symbol 35849 . 35868) (STRUCT 35842 . 35848) (symbol 35835 . 35841) (close-paren 35832 . 35833) (RETURN 35796 . 35802) (punctuation 35792 . 35793) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 35775 . 35787)))) 35766 . 35792) (open-paren 35762 . 35763) (close-paren 35760 . 35761) (symbol 35759 . 35760) (symbol 35747 . 35758) (open-paren 35746 . 35747) (symbol 35734 . 35745) (punctuation 35732 . 35733) (symbol 35716 . 35731) (STRUCT 35709 . 35715) (symbol 35702 . 35708) (close-paren 35699 . 35700) (RETURN 35663 . 35669) (punctuation 35659 . 35660) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFERP" 35647 . 35654)))) 35638 . 35659) (open-paren 35634 . 35635) (close-paren 35632 . 35633) (symbol 35631 . 35632) (symbol 35619 . 35630) (open-paren 35618 . 35619) (symbol 35610 . 35617) (punctuation 35608 . 35609) (symbol 35601 . 35607) (STRUCT 35594 . 35600) (symbol 35587 . 35593) (close-paren 35584 . 35585) (RETURN 35548 . 35554) (punctuation 35544 . 35545) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 35534 . 35539)))) 35525 . 35544) (open-paren 35521 . 35522) (close-paren 35519 . 35520) (symbol 35518 . 35519) (symbol 35506 . 35517) (open-paren 35505 . 35506) (symbol 35499 . 35504) (punctuation 35497 . 35498) (symbol 35487 . 35496) (STRUCT 35480 . 35486) (symbol 35473 . 35479) (close-paren 35470 . 35471) (RETURN 35434 . 35440) (punctuation 35430 . 35431) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TERMINALP" 35416 . 35425)))) 35407 . 35430) (open-paren 35403 . 35404) (close-paren 35401 . 35402) (symbol 35400 . 35401) (symbol 35388 . 35399) (open-paren 35387 . 35388) (symbol 35377 . 35386) (punctuation 35375 . 35376) (symbol 35366 . 35374) (STRUCT 35359 . 35365) (symbol 35352 . 35358) (close-paren 35349 . 35350) (RETURN 35313 . 35319) (punctuation 35309 . 35310) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "WINDOWP" 35297 . 35304)))) 35288 . 35309) (open-paren 35284 . 35285) (close-paren 35282 . 35283) (symbol 35281 . 35282) (symbol 35269 . 35280) (open-paren 35268 . 35269) (symbol 35260 . 35267) (punctuation 35258 . 35259) (symbol 35251 . 35257) (STRUCT 35244 . 35250) (symbol 35237 . 35243) (close-paren 35234 . 35235) (RETURN 35198 . 35204) (punctuation 35194 . 35195) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "PROCESSP" 35181 . 35189)))) 35172 . 35194) (open-paren 35168 . 35169) (close-paren 35166 . 35167) (symbol 35165 . 35166) (symbol 35153 . 35164) (open-paren 35152 . 35153) (symbol 35143 . 35151) (punctuation 35141 . 35142) (symbol 35128 . 35140) (STRUCT 35121 . 35127) (symbol 35114 . 35120) (close-paren 35083 . 35084) (RETURN 35052 . 35058) (punctuation 35048 . 35049) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 35037 . 35043)))) 35028 . 35048) (open-paren 35024 . 35025) (close-paren 35022 . 35023) (symbol 35021 . 35022) (symbol 35009 . 35020) (open-paren 35008 . 35009) (symbol 35001 . 35007) (punctuation 34999 . 35000) (symbol 34988 . 34998) (STRUCT 34981 . 34987) (symbol 34974 . 34980) (close-paren 34841 . 34842) (RETURN 34809 . 34815) (punctuation 34805 . 34806) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 34793 . 34800)))) 34784 . 34805) (open-paren 34780 . 34781) (close-paren 34778 . 34779) (symbol 34777 . 34778) (symbol 34765 . 34776) (open-paren 34764 . 34765) (symbol 34756 . 34763) (punctuation 34754 . 34755) (symbol 34742 . 34753) (STRUCT 34735 . 34741) (symbol 34728 . 34734) (close-paren 34725 . 34726) (RETURN 34689 . 34695) (punctuation 34685 . 34686) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 34669 . 34680)))) 34660 . 34685) (open-paren 34656 . 34657) (close-paren 34654 . 34655) (symbol 34653 . 34654) (symbol 34641 . 34652) (open-paren 34640 . 34641) (symbol 34632 . 34639) (punctuation 34630 . 34631) (symbol 34618 . 34629) (STRUCT 34611 . 34617) (symbol 34604 . 34610) (close-paren 34601 . 34602) (punctuation 34599 . 34600) (semantic-list #("(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 0 1 (macros (("a" symbol "a" 34597 . 34598)))) 34583 . 34599) (RETURN 34576 . 34582) (open-paren 34572 . 34573) (close-paren 34570 . 34571) (symbol 34569 . 34570) (symbol 34557 . 34568) (open-paren 34556 . 34557) (close-paren 34554 . 34555) (symbol 34549 . 34554) (open-paren 34548 . 34549) (punctuation 34546 . 34547) (symbol 34536 . 34545) (STRUCT 34529 . 34535) (symbol 34522 . 34528) (close-paren 34462 . 34463) (punctuation 34453 . 34454) (symbol 34449 . 34452) (punctuation 34447 . 34448) (symbol 34441 . 34446) (punctuation 34439 . 34440) (punctuation 34438 . 34439) (symbol 34434 . 34437) (punctuation 34432 . 34433) (symbol 34426 . 34431) (punctuation 34424 . 34425) (symbol 34418 . 34423) (punctuation 34416 . 34417) (symbol 34412 . 34415) (RETURN 34405 . 34411) (open-paren 34401 . 34402) (close-paren 34399 . 34400) (symbol 34394 . 34399) (symbol 34384 . 34393) (punctuation 34382 . 34383) (symbol 34379 . 34382) (symbol 34369 . 34378) (punctuation 34367 . 34368) (symbol 34362 . 34367) (symbol 34352 . 34361) (open-paren 34351 . 34352) (symbol 34336 . 34350) (symbol 34326 . 34335) (symbol 34319 . 34325) (close-paren 34049 . 34050) (punctuation 34047 . 34048) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 34045 . 34046) ("x" symbol "x" 34042 . 34043)))) 34031 . 34047) (RETURN 34024 . 34030) (open-paren 34020 . 34021) (close-paren 34018 . 34019) (symbol 34017 . 34018) (symbol 34005 . 34016) (punctuation 34003 . 34004) (symbol 34002 . 34003) (symbol 33990 . 34001) (open-paren 33989 . 33990) (close-paren 33987 . 33988) (symbol 33985 . 33987) (open-paren 33984 . 33985) (BOOL 33979 . 33983) (symbol 33972 . 33978) (close-paren 33917 . 33918) (semantic-list 33897 . 33914) (punctuation 33895 . 33896) (punctuation 33886 . 33887) (semantic-list 33882 . 33885) (symbol 33870 . 33881) (punctuation 33868 . 33869) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 33856 . 33867) (RETURN 33849 . 33855) (punctuation 33815 . 33816) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 33779 . 33780)))) 33770 . 33815) (open-paren 33766 . 33767) (close-paren 33764 . 33765) (symbol 33763 . 33764) (symbol 33753 . 33762) (open-paren 33752 . 33753) (symbol 33740 . 33751) (symbol 33728 . 33739) (symbol 33721 . 33727) (close-paren 33637 . 33638) (RETURN 33612 . 33618) (open-paren 33608 . 33609) (close-paren 33606 . 33607) (symbol 33605 . 33606) (symbol 33593 . 33604) (open-paren 33592 . 33593) (close-paren 33590 . 33591) (symbol 33585 . 33590) (open-paren 33584 . 33585) (symbol 33574 . 33583) (symbol 33567 . 33573) (close-paren 33409 . 33410) (punctuation 33407 . 33408) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 33400 . 33407) (punctuation 33398 . 33399) (symbol 33396 . 33397) (punctuation 33394 . 33395) (symbol 33382 . 33393) (punctuation 33380 . 33381) (punctuation 33379 . 33380) (symbol 33377 . 33378) (punctuation 33375 . 33376) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 33363 . 33374) (RETURN 33356 . 33362) (open-paren 33326 . 33327) (close-paren 33324 . 33325) (symbol 33323 . 33324) (symbol 33311 . 33322) (open-paren 33310 . 33311) (symbol 33304 . 33309) (symbol 33293 . 33303) (symbol 33286 . 33292) (close-paren 33206 . 33207) (semantic-list 33194 . 33202) (RETURN 33187 . 33193) (punctuation 33183 . 33184) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 33176 . 33183) (punctuation 33174 . 33175) (semantic-list 33170 . 33173) (symbol 33166 . 33169) (punctuation 33164 . 33165) (symbol 33159 . 33163) (punctuation 33157 . 33158) (semantic-list 33153 . 33156) (symbol 33149 . 33152) (punctuation 33147 . 33148) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 33135 . 33146) (punctuation 33133 . 33134) (symbol 33131 . 33132) (symbol 33122 . 33130) (open-paren 33118 . 33119) (close-paren 33116 . 33117) (symbol 33112 . 33116) (INT 33108 . 33111) (punctuation 33106 . 33107) (symbol 33105 . 33106) (symbol 33093 . 33104) (open-paren 33092 . 33093) (symbol 33085 . 33091) (punctuation 33083 . 33084) (VOID 33078 . 33082) (symbol 33071 . 33077) (close-paren 33007 . 33008) (RETURN 32997 . 33003) (punctuation 32908 . 32909) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 32896 . 32903)))) 32887 . 32908) (open-paren 32883 . 32884) (close-paren 32881 . 32882) (symbol 32880 . 32881) (symbol 32868 . 32879) (open-paren 32867 . 32868) (symbol 32859 . 32866) (punctuation 32857 . 32858) (symbol 32845 . 32856) (STRUCT 32838 . 32844) (symbol 32831 . 32837) (close-paren 32790 . 32791) (punctuation 32779 . 32780) (punctuation 32778 . 32779) (symbol 32776 . 32777) (punctuation 32774 . 32775) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 32766 . 32773) (punctuation 32765 . 32766) (punctuation 32763 . 32764) (symbol 32761 . 32762) (punctuation 32759 . 32760) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 32747 . 32758) (RETURN 32740 . 32746) (open-paren 32710 . 32711) (close-paren 32708 . 32709) (symbol 32707 . 32708) (symbol 32695 . 32706) (open-paren 32694 . 32695) (symbol 32688 . 32693) (symbol 32678 . 32687) (ENUM 32673 . 32677) (symbol 32666 . 32672) (close-paren 32638 . 32639) (RETURN 32628 . 32634) (punctuation 32604 . 32605) (semantic-list 32587 . 32604) (punctuation 32585 . 32586) (semantic-list 32581 . 32584) (symbol 32577 . 32580) (punctuation 32575 . 32576) (semantic-list 32571 . 32574) (symbol 32566 . 32570) (punctuation 32564 . 32565) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 32552 . 32563) (punctuation 32550 . 32551) (symbol 32548 . 32549) (symbol 32538 . 32547) (open-paren 32504 . 32505) (close-paren 32502 . 32503) (symbol 32501 . 32502) (symbol 32489 . 32500) (open-paren 32488 . 32489) (symbol 32479 . 32487) (symbol 32469 . 32478) (symbol 32462 . 32468) (close-paren 32288 . 32289) (punctuation 32273 . 32274) (punctuation 32272 . 32273) (symbol 32270 . 32271) (RETURN 32263 . 32269) (semantic-list 32201 . 32260) (semantic-list 32181 . 32196) (IF 32178 . 32180) (open-paren 32149 . 32150) (close-paren 32147 . 32148) (symbol 32146 . 32147) (symbol 32134 . 32145) (open-paren 32133 . 32134) (symbol 32128 . 32132) (symbol 32118 . 32127) (symbol 32111 . 32117) (close-paren 32062 . 32063) (RETURN 32046 . 32052) (semantic-list 31986 . 32043) (ELSE 31977 . 31981) (semantic-list 31898 . 31974) (semantic-list 31880 . 31893) (IF 31877 . 31879) (open-paren 31843 . 31844) (close-paren 31841 . 31842) (symbol 31840 . 31841) (symbol 31830 . 31839) (open-paren 31829 . 31830) (symbol 31817 . 31828) (symbol 31805 . 31816) (symbol 31798 . 31804) (punctuation ";" 30670 . 30701) (symbol "EXTERNALLY_VISIBLE" 30562 . 30606) (symbol "VALMASK" 30562 . 30606) (CONST "const" 30562 . 30606) (symbol "EMACS_INT" 30562 . 30606) (EXTERN "extern" 30562 . 30606) (punctuation 30261 . 30262) (close-paren 30260 . 30261) (symbol 30235 . 30257) (punctuation 30233 . 30234) (punctuation 30232 . 30233) (number 30227 . 30231) (punctuation 30225 . 30226) (symbol 30210 . 30224) (punctuation 30204 . 30205) (symbol 30182 . 30204) (punctuation 30180 . 30181) (symbol 30157 . 30179) (punctuation 30155 . 30156) (symbol 30132 . 30154) (punctuation 30064 . 30065) (semantic-list 29992 . 30064) (punctuation 29990 . 29991) (symbol 29967 . 29989) (punctuation 29961 . 29962) (number 29959 . 29961) (punctuation 29957 . 29958) (symbol 29934 . 29956) (punctuation 29782 . 29783) (number 29781 . 29782) (punctuation 29779 . 29780) (semantic-list 29749 . 29778) (punctuation 29747 . 29748) (symbol 29724 . 29746) (punctuation 29718 . 29719) (number 29716 . 29718) (punctuation 29714 . 29715) (symbol 29691 . 29713) (open-paren 29318 . 29319) (symbol 29301 . 29315) (ENUM 29296 . 29300) (punctuation 29293 . 29294) (close-paren 29292 . 29293) (symbol 29222 . 29231) (punctuation 29218 . 29219) (symbol 29199 . 29218) (punctuation 29195 . 29196) (symbol 29180 . 29195) (punctuation 29176 . 29177) (symbol 29163 . 29176) (punctuation 29094 . 29095) (symbol 29077 . 29094) (punctuation 29073 . 29074) (symbol 29061 . 29073) (punctuation 29057 . 29058) (symbol 29047 . 29057) (punctuation 29043 . 29044) (symbol 29034 . 29043) (punctuation 29030 . 29031) (symbol 29005 . 29030) (punctuation 29001 . 29002) (symbol 28988 . 29001) (punctuation 28984 . 28985) (symbol 28969 . 28984) (punctuation 28965 . 28966) (symbol 28954 . 28965) (punctuation 28950 . 28951) (symbol 28934 . 28950) (punctuation 28930 . 28931) (symbol 28919 . 28930) (punctuation 28915 . 28916) (symbol 28905 . 28915) (punctuation 28901 . 28902) (symbol 28889 . 28901) (punctuation 28885 . 28886) (symbol 28876 . 28885) (punctuation 28872 . 28873) (symbol 28854 . 28872) (open-paren 28850 . 28851) (symbol 28840 . 28849) (ENUM 28835 . 28839) (punctuation ";" 28593 . 28634) (symbol "EXTERNALLY_VISIBLE" 28479 . 28533) (symbol "PSEUDOVECTOR_FLAG" 28479 . 28533) (CONST "const" 28479 . 28533) (symbol "ptrdiff_t" 28479 . 28533) (EXTERN "extern" 28479 . 28533) (punctuation ";" 28328 . 28367) (symbol "EXTERNALLY_VISIBLE" 28238 . 28290) (symbol "ARRAY_MARK_FLAG" 28238 . 28290) (CONST "const" 28238 . 28290) (symbol "ptrdiff_t" 28238 . 28290) (EXTERN "extern" 28238 . 28290) (close-paren 28154 . 28155) (punctuation 28152 . 28153) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 28150 . 28151)))) 28138 . 28152) (RETURN 28131 . 28137) (open-paren 28127 . 28128) (close-paren 28125 . 28126) (symbol 28124 . 28125) (symbol 28114 . 28123) (open-paren 28113 . 28114) (close-paren 28111 . 28112) (symbol 28108 . 28111) (open-paren 28107 . 28108) (symbol 28095 . 28106) (symbol 28088 . 28094) (close-paren 28085 . 28086) (punctuation 28083 . 28084) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 28081 . 28082)))) 28069 . 28083) (RETURN 28062 . 28068) (open-paren 28058 . 28059) (close-paren 28056 . 28057) (symbol 28055 . 28056) (symbol 28043 . 28054) (open-paren 28042 . 28043) (close-paren 28040 . 28041) (symbol 28037 . 28040) (open-paren 28036 . 28037) (symbol 28026 . 28035) (symbol 28019 . 28025) (punctuation 24869 . 24870) (close-paren 24868 . 24869) (open-paren 23322 . 23323) (symbol 23310 . 23321) (STRUCT 23303 . 23309) (punctuation 23300 . 23301) (close-paren 23299 . 23300) (number 23297 . 23298) (punctuation 23295 . 23296) (symbol 23278 . 23294) (punctuation 23274 . 23275) (number 23273 . 23274) (punctuation 23271 . 23272) (symbol 23254 . 23270) (punctuation 23250 . 23251) (number 23249 . 23250) (punctuation 23247 . 23248) (symbol 23230 . 23245) (punctuation 23226 . 23227) (number 23225 . 23226) (punctuation 23223 . 23224) (symbol 23206 . 23221) (open-paren 23202 . 23203) (symbol 23186 . 23201) (ENUM 23181 . 23185) (punctuation 23178 . 23179) (close-paren 23177 . 23178) (number 23175 . 23176) (punctuation 23173 . 23174) (symbol 23138 . 23172) (punctuation 23134 . 23135) (number 23133 . 23134) (punctuation 23131 . 23132) (symbol 23115 . 23130) (punctuation 23111 . 23112) (number 23110 . 23111) (punctuation 23108 . 23109) (symbol 23090 . 23107) (open-paren 23086 . 23087) (symbol 23070 . 23085) (ENUM 23065 . 23069) (punctuation 23024 . 23025) (close-paren 23023 . 23024) (symbol 23012 . 23023) (open-paren 23011 . 23012) (symbol 22997 . 23010) (DOUBLE 22990 . 22996) (EXTERN 22983 . 22989) (punctuation 22731 . 22732) (close-paren 22730 . 22731) (symbol 22719 . 22730) (punctuation 22717 . 22718) (symbol 22706 . 22717) (open-paren 22705 . 22706) (symbol 22692 . 22704) (VOID 22687 . 22691) (EXTERN 22670 . 22676) (punctuation 22668 . 22669) (close-paren 22667 . 22668) (symbol 22656 . 22667) (punctuation 22654 . 22655) (symbol 22643 . 22654) (open-paren 22642 . 22643) (symbol 22622 . 22641) (symbol 22610 . 22621) (EXTERN 22593 . 22599) (punctuation 22564 . 22565) (close-paren 22563 . 22564) (symbol 22552 . 22563) (punctuation 22550 . 22551) (INT 22547 . 22550) (punctuation 22545 . 22546) (symbol 22534 . 22545) (open-paren 22533 . 22534) (symbol 22518 . 22532) (VOID 22513 . 22517) (EXTERN 22506 . 22512) (punctuation 22504 . 22505) (close-paren 22503 . 22504) (INT 22500 . 22503) (punctuation 22498 . 22499) (symbol 22487 . 22498) (open-paren 22486 . 22487) (symbol 22471 . 22485) (symbol 22459 . 22470) (EXTERN 22452 . 22458) (punctuation 22420 . 22421) (close-paren 22419 . 22420) (INT 22416 . 22419) (punctuation 22414 . 22415) (symbol 22403 . 22414) (open-paren 22402 . 22403) (close-paren 22400 . 22401) (symbol 22394 . 22400) (open-paren 22393 . 22394) (punctuation 22392 . 22393) (VOID 22387 . 22391) (symbol 22380 . 22386) (punctuation 22378 . 22379) (close-paren 22377 . 22378) (symbol 22366 . 22377) (open-paren 22365 . 22366) (close-paren 22363 . 22364) (symbol 22356 . 22363) (open-paren 22355 . 22356) (punctuation 22354 . 22355) (symbol 22342 . 22353) (STRUCT 22335 . 22341) (symbol 22328 . 22334) (punctuation 22326 . 22327) (close-paren 22325 . 22326) (symbol 22314 . 22325) (open-paren 22313 . 22314) (symbol 22302 . 22312) (punctuation 22301 . 22302) (symbol 22286 . 22300) (STRUCT 22279 . 22285) (symbol 22272 . 22278) (punctuation 22270 . 22271) (close-paren 22269 . 22270) (symbol 22258 . 22269) (open-paren 22257 . 22258) (symbol 22245 . 22256) (punctuation 22244 . 22245) (symbol 22228 . 22243) (STRUCT 22221 . 22227) (symbol 22214 . 22220) (punctuation 22212 . 22213) (close-paren 22211 . 22212) (symbol 22200 . 22211) (open-paren 22199 . 22200) (symbol 22189 . 22198) (BOOL 22184 . 22188) (symbol 22177 . 22183) (punctuation 22175 . 22176) (close-paren 22174 . 22175) (symbol 22163 . 22174) (open-paren 22162 . 22163) (symbol 22154 . 22161) (BOOL 22149 . 22153) (symbol 22142 . 22148) (punctuation 22140 . 22141) (close-paren 22139 . 22140) (symbol 22128 . 22139) (open-paren 22127 . 22128) (close-paren 22125 . 22126) (symbol 22114 . 22125) (open-paren 22113 . 22114) (BOOL 22108 . 22112) (symbol 22101 . 22107) (punctuation 22099 . 22100) (close-paren 22098 . 22099) (symbol 22087 . 22098) (open-paren 22086 . 22087) (close-paren 22084 . 22085) (symbol 22077 . 22084) (open-paren 22076 . 22077) (BOOL 22071 . 22075) (symbol 22064 . 22070) (punctuation 22062 . 22063) (close-paren 22061 . 22062) (symbol 22050 . 22061) (open-paren 22049 . 22050) (symbol 22043 . 22048) (BOOL 22038 . 22042) (symbol 22031 . 22037) (punctuation 22029 . 22030) (close-paren 22028 . 22029) (symbol 22017 . 22028) (open-paren 22016 . 22017) (symbol 21999 . 22015) (BOOL 21994 . 21998) (symbol 21987 . 21993) (punctuation 21985 . 21986) (close-paren 21984 . 21985) (symbol 21973 . 21984) (open-paren 21972 . 21973) (symbol 21964 . 21971) (BOOL 21959 . 21963) (symbol 21952 . 21958) (punctuation 21950 . 21951) (close-paren 21949 . 21950) (symbol 21938 . 21949) (punctuation 21925 . 21926) (symbol 21916 . 21925) (punctuation 21914 . 21915) (symbol 21903 . 21914) (open-paren 21902 . 21903) (symbol 21874 . 21901) (VOID 21869 . 21873) (symbol 21862 . 21868) (punctuation 21738 . 21739) (close-paren 21737 . 21738) (symbol 21726 . 21737) (open-paren 21725 . 21726) (symbol 21714 . 21724) (BOOL 21709 . 21713) (symbol 21702 . 21708) (punctuation 21700 . 21701) (close-paren 21699 . 21700) (symbol 21688 . 21699) (open-paren 21687 . 21688) (symbol 21675 . 21686) (BOOL 21670 . 21674) (symbol 21663 . 21669) (punctuation 21661 . 21662) (close-paren 21660 . 21661) (INT 21657 . 21660) (punctuation 21655 . 21656) (symbol 21644 . 21655) (open-paren 21643 . 21644) (symbol 21629 . 21642) (BOOL 21624 . 21628) (symbol 21617 . 21623) (punctuation 21615 . 21616) (close-paren 21614 . 21615) (symbol 21603 . 21614) (open-paren 21602 . 21603) (symbol 21593 . 21601) (BOOL 21588 . 21592) (symbol 21581 . 21587) (punctuation 21579 . 21580) (close-paren 21578 . 21579) (symbol 21567 . 21578) (open-paren 21566 . 21567) (symbol 21557 . 21565) (BOOL 21552 . 21556) (symbol 21545 . 21551) (punctuation 21543 . 21544) (close-paren 21542 . 21543) (symbol 21531 . 21542) (open-paren 21530 . 21531) (close-paren 21528 . 21529) (symbol 21524 . 21528) (open-paren 21523 . 21524) (BOOL 21518 . 21522) (symbol 21511 . 21517) (punctuation 21509 . 21510) (close-paren 21508 . 21509) (symbol 21497 . 21508) (open-paren 21496 . 21497) (close-paren 21494 . 21495) (symbol 21489 . 21494) (open-paren 21488 . 21489) (BOOL 21483 . 21487) (symbol 21476 . 21482) (punctuation 21474 . 21475) (close-paren 21473 . 21474) (symbol 21462 . 21473) (open-paren 21461 . 21462) (close-paren 21459 . 21460) (symbol 21452 . 21459) (open-paren 21451 . 21452) (BOOL 21446 . 21450) (symbol 21439 . 21445) (punctuation 21437 . 21438) (close-paren 21436 . 21437) (symbol 21425 . 21436) (open-paren 21424 . 21425) (close-paren 21422 . 21423) (symbol 21414 . 21422) (open-paren 21413 . 21414) (BOOL 21408 . 21412) (symbol 21401 . 21407) (punctuation 21399 . 21400) (close-paren 21398 . 21399) (symbol 21387 . 21398) (open-paren 21386 . 21387) (symbol 21376 . 21385) (BOOL 21371 . 21375) (symbol 21364 . 21370) (punctuation 21362 . 21363) (close-paren 21361 . 21362) (symbol 21350 . 21361) (open-paren 21349 . 21350) (close-paren 21347 . 21348) (symbol 21341 . 21347) (open-paren 21340 . 21341) (BOOL 21335 . 21339) (symbol 21328 . 21334) (punctuation 21326 . 21327) (close-paren 21325 . 21326) (symbol 21314 . 21325) (open-paren 21313 . 21314) (close-paren 21311 . 21312) (symbol 21306 . 21311) (open-paren 21305 . 21306) (BOOL 21300 . 21304) (symbol 21293 . 21299) (punctuation 21291 . 21292) (close-paren 21290 . 21291) (symbol 21281 . 21290) (punctuation 21279 . 21280) (symbol 21268 . 21279) (open-paren 21267 . 21268) (symbol 21246 . 21266) (symbol 21234 . 21245) (symbol 21227 . 21233) (punctuation 21225 . 21226) (close-paren 21224 . 21225) (symbol 21213 . 21224) (open-paren 21212 . 21213) (symbol 21199 . 21211) (BOOL 21194 . 21198) (symbol 21187 . 21193) (punctuation 21185 . 21186) (close-paren 21184 . 21185) (symbol 21173 . 21184) (open-paren 21172 . 21173) (symbol 21164 . 21171) (BOOL 21159 . 21163) (symbol 21152 . 21158) (punctuation 21150 . 21151) (close-paren 21149 . 21150) (punctuation 21148 . 21149) (symbol 21139 . 21147) (UNION 21133 . 21138) (open-paren 21132 . 21133) (symbol 21117 . 21131) (BOOL 21112 . 21116) (symbol 21105 . 21111) (punctuation 21103 . 21104) (close-paren 21102 . 21103) (symbol 21091 . 21102) (open-paren 21090 . 21091) (symbol 21076 . 21089) (BOOL 21071 . 21075) (symbol 21064 . 21070) (UNION 21048 . 21053) (punctuation 20901 . 20902) (close-paren 20900 . 20901) (symbol 20894 . 20899) (punctuation 20892 . 20893) (symbol 20869 . 20891) (open-paren 20867 . 20868) (symbol 20844 . 20866) (ENUM 20839 . 20843) (punctuation 17588 . 17589) (close-paren 17587 . 17588) (symbol 17518 . 17537) (punctuation 17466 . 17467) (symbol 17447 . 17466) (punctuation 17400 . 17401) (symbol 17388 . 17400) (punctuation 17350 . 17351) (symbol 17337 . 17350) (punctuation 17296 . 17297) (symbol 17284 . 17296) (open-paren 17278 . 17279) (symbol 17262 . 17275) (ENUM 17257 . 17261) (punctuation 17096 . 17097) (close-paren 17095 . 17096) (symbol 17077 . 17092) (punctuation 17008 . 17009) (symbol 16993 . 17008) (punctuation 16826 . 16827) (symbol 16807 . 16826) (punctuation 16801 . 16802) (symbol 16781 . 16801) (punctuation 16775 . 16776) (symbol 16758 . 16775) (punctuation 16752 . 16753) (symbol 16736 . 16752) (punctuation 16730 . 16731) (number 16724 . 16730) (punctuation 16722 . 16723) (symbol 16707 . 16721) (open-paren 16701 . 16702) (symbol 16684 . 16698) (ENUM 16679 . 16683) (punctuation 16355 . 16356) (close-paren 16354 . 16355) (number 16350 . 16351) (punctuation 16348 . 16349) (symbol 16337 . 16347) (punctuation 16330 . 16331) (number 16329 . 16330) (punctuation 16327 . 16328) (number 16325 . 16326) (punctuation 16323 . 16324) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 16311 . 16322) (punctuation 16309 . 16310) (symbol 16299 . 16308) (punctuation 16229 . 16230) (number 16228 . 16229) (punctuation 16226 . 16227) (symbol 16210 . 16225) (punctuation 15946 . 15947) (number 15945 . 15946) (punctuation 15943 . 15944) (symbol 15931 . 15942) (punctuation 15784 . 15785) (number 15783 . 15784) (punctuation 15781 . 15782) (number 15779 . 15780) (punctuation 15777 . 15778) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 15765 . 15776) (punctuation 15763 . 15764) (symbol 15753 . 15762) (punctuation 15747 . 15748) (number 15746 . 15747) (punctuation 15744 . 15745) (symbol 15734 . 15743) (punctuation 15673 . 15674) (number 15672 . 15673) (punctuation 15670 . 15671) (symbol 15660 . 15669) (punctuation 15533 . 15534) (number 15532 . 15533) (punctuation 15530 . 15531) (symbol 15518 . 15529) (open-paren 15443 . 15444) (symbol 15431 . 15440) (ENUM 15426 . 15430) (close-paren 13172 . 13173) (semantic-list 13140 . 13172) (punctuation 13138 . 13139) (punctuation 13136 . 13137) (punctuation 13135 . 13136) (symbol 13110 . 13127) (symbol 13102 . 13109) (punctuation 13100 . 13101) (punctuation 13098 . 13099) (punctuation 13097 . 13098) (symbol 13084 . 13096) (symbol 13076 . 13083) (punctuation 13074 . 13075) (punctuation 13072 . 13073) (punctuation 13071 . 13072) (punctuation 9411 . 9412) (punctuation 9410 . 9411) (symbol 9404 . 9409) (string 9342 . 9403) (string 9273 . 9338) (symbol 9267 . 9272) (symbol 9265 . 9266) (punctuation ";" 9184 . 9219) (symbol "EXTERNALLY_VISIBLE" 9093 . 9136) (CONST "const" 9093 . 9136) (symbol "USE_LSB_TAG" 9093 . 9136) (EXTERN "extern" 9093 . 9136) (string 8380 . 8425) (symbol 8374 . 8379) (symbol 8372 . 8373) (spp-macro-def 8014 . 8025) (number 4127 . 4128) (punctuation 4125 . 4126) (punctuation 4124 . 4125) (semantic-list 4099 . 4123) (punctuation 4097 . 4098) (punctuation 4096 . 4097) (number "8" 3494 . 3519) (spp-macro-def 3458 . 3483) (punctuation 3448 . 3449) (LONG 3038 . 3042) (UNSIGNED 3029 . 3037) (TYPEDEF 3021 . 3028) (LONG 2996 . 3000) (TYPEDEF 2988 . 2995) (string 2524 . 2550) (symbol 2518 . 2523) (symbol 2515 . 2516) (punctuation ";" 2163 . 2197) (symbol "EXTERNALLY_VISIBLE" 2100 . 2141) (CONST "const" 2100 . 2141) (symbol "GCTYPEBITS" 2100 . 2141) (EXTERN "extern" 2100 . 2141) (symbol 1072 . 1091))
      :lexical-table 
        '(("pMd" . ((symbol "pI" 4631 . 4633) (string "\"d\"" 4633 . 4636)))
          ("LISP_INITIALLY_ZERO" . ((symbol "LISP_INITIALLY" 20968 . 20982) (semantic-list "(0)" 20983 . 20986)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 25428 . 25434)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 27128 . 27134) . ((symbol "LISP_INITIALLY" 27135 . 27149) (semantic-list "(XLI_BUILTIN_LISPSYM (i##name))" 27150 . 27181)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 28316 . 28327)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 30624 . 30669)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 38384 . 38390) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 38391 . 38429)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 91841 . 91860) . 
              ((DO "do" 91866 . 91868) (semantic-list "{						\\
    static struct Lisp_Intfwd i_fwd;		\\
    defvar_int (&i_fwd, lname, &globals.f_ ## vname);		\\
  }" 91869 . 91978) (WHILE "while" 91979 . 91984) (semantic-list "(false)" 91985 . 91992)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 92972 . 92978) . ((symbol "longjmp" 92979 . 92986) (semantic-list "(j, v)" 92987 . 92993)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 149192 . 149207) . 
              ((symbol "Lisp_Object" 149216 . 149227) (symbol "name" 149228 . 149232) (punctuation "=" 149233 . 149234) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 149235 . 149348)))
          ("GCALIGNMENT" . ((number "8" 8026 . 8027)))
          ("EMACS_LISP_H")
          ("max" (spp-arg-list ("a" "b") 1886 . 1892) . ((semantic-list "((a) > (b) ? (a) : (b))" 1893 . 1916)))
          ("pD" . ((string "\"ll\"" 5127 . 5131)))
          ("case_Lisp_Int" . 
              ((CASE "case" 15027 . 15031) (symbol "Lisp_Int0" 15032 . 15041) (punctuation ":" 15041 . 15042) (CASE "case" 15043 . 15047) (symbol "Lisp_Int1" 15048 . 15057)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 25337 . 25363)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 25456 . 25469)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 34960 . 34965) . ((symbol "i##sym" 34966 . 34972)))
          ("XSETCONS" (spp-arg-list ("a" "b") 36756 . 36762) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 36763 . 36799)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 89066 . 89120) . 
              ((STATIC "static" 89126 . 89132) (STRUCT "struct" 89133 . 89139) (symbol "Lisp_Subr" 89140 . 89149) (symbol "alignas" 89150 . 89157) (semantic-list "(GCALIGNMENT)" 89158 . 89171) (symbol "sname" 89172 . 89177) (punctuation "=" 89178 . 89179) (semantic-list "{ { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, intspec, 0}" 89188 . 89320) (punctuation ";" 89320 . 89321) (symbol "Lisp_Object" 89330 . 89341) (symbol "fnname" 89342 . 89348)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 144615 . 144640) . 
              ((DO "do" 144648 . 144650) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	sa_must_free = true;					 \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 144651 . 144991) (WHILE "while" 144992 . 144997) (semantic-list "(false)" 144998 . 145005)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 149367 . 149385) . 
              ((symbol "Lisp_Object" 149396 . 149407) (symbol "name" 149408 . 149412) (punctuation "=" 149427 . 149428) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 149429 . 149566)))
          ("min" (spp-arg-list ("a" "b") 1928 . 1934) . ((semantic-list "((a) < (b) ? (a) : (b))" 1935 . 1958)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 3857 . 3865)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9157 . 9183)))
          ("lisp_h_CHECK_LIST_CONS" (spp-arg-list ("x" "y") 10950 . 10956) . ((symbol "CHECK_TYPE" 10957 . 10967) (semantic-list "(CONSP (x), Qlistp, y)" 10968 . 10990)))
          ("lisp_h_MARKERP" (spp-arg-list ("x") 11490 . 11493) . ((semantic-list "(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 11494 . 11542)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 12040 . 12043) . 
              ((symbol "XCONS" 12044 . 12049) (semantic-list "(c)" 12050 . 12053) (punctuation "-" 12053 . 12054) (punctuation ">" 12054 . 12055) (symbol "car" 12055 . 12058)))
          ("lisp_h_check_cons_list" (spp-arg-list nil 12286 . 12288) . ((semantic-list "((void) 0)" 12289 . 12299)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 25491 . 25517)))
          ("TAG_SYMOFFSET" (spp-arg-list ("offset") 26683 . 26691) . ((symbol "TAG_PTR" 26692 . 26699) (semantic-list "(Lisp_Symbol, offset)" 26700 . 26721)))
          ("CHECK_RANGED_INTEGER" (spp-arg-list ("x" "lo" "hi") 85438 . 85449) . 
              ((DO "do" 85458 . 85460) (semantic-list "{									\\
    CHECK_NUMBER (x);							\\
    if (! ((lo) <= XINT (x) && XINT (x) <= (hi)))			\\
      args_out_of_range_3						\\
	(x,								\\
	 make_number ((lo) < 0 && (lo) < MOST_NEGATIVE_FIXNUM		\\
		      ? MOST_NEGATIVE_FIXNUM				\\
		      : (lo)),						\\
	 make_number (min (hi, MOST_POSITIVE_FIXNUM)));			\\
  }" 85461 . 85778) (WHILE "while" 85779 . 85784) (semantic-list "(false)" 85785 . 85792)))
          ("DEFVAR_BUFFER_DEFAULTS" (spp-arg-list ("lname" "vname" "doc") 92024 . 92043) . 
              ((DO "do" 92049 . 92051) (semantic-list "{								\\
    static struct Lisp_Objfwd o_fwd;				\\
    defvar_lisp_nopro (&o_fwd, lname, &BVAR (&buffer_defaults, vname));	\\
  }" 92052 . 92182) (WHILE "while" 92183 . 92188) (semantic-list "(false)" 92189 . 92196)))
          ("FOR_EACH_TAIL" (spp-arg-list ("hare" "list" "tortoise" "n") 150785 . 150810) . ((FOR "for" 150815 . 150818) (semantic-list "((tortoise) = (hare) = (list), (n) = true;		\\
       CONSP (hare);						\\
       (hare = XCDR (hare), (n) = !(n),				\\
   	((n)							\\
   	 ? (EQ (hare, tortoise)					\\
	    ? xsignal1 (Qcircular_list, list)			\\
	    : (void) 0)						\\
	 /* Move tortoise before the next iteration, in case */ \\
	 /* the next iteration does an Fsetcdr.  */		\\
   	 : (void) ((tortoise) = XCDR (tortoise)))))" 150819 . 151210)))
          ("eassume" (spp-arg-list ("cond") 6515 . 6521) . ((symbol "assume" 6522 . 6528) (semantic-list "(cond)" 6529 . 6535)))
          ("lisp_h_CHECK_NUMBER" (spp-arg-list ("x") 11018 . 11021) . ((symbol "CHECK_TYPE" 11022 . 11032) (semantic-list "(INTEGERP (x), Qintegerp, x)" 11033 . 11061)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 11308 . 11314) . ((semantic-list "(XLI (x) == XLI (y))" 11315 . 11335)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 13208 . 13212)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 15400 . 15406) . ((ENUM "enum" 15407 . 15411) (symbol "TYPE" 15412 . 15416)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 25539 . 25578)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 26387 . 26397) . ((semantic-list "(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 26402 . 26520)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 28561 . 28592)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 38190 . 38196) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 38197 . 38237)))
          ("XSETCOMPILED" (spp-arg-list ("a" "b") 38318 . 38324) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_COMPILED))" 38325 . 38365)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 42615 . 42620) . 
              ((DO "do" 42628 . 42630) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = -1;			\\
  }" 42631 . 42779) (WHILE "while" 42780 . 42785) (semantic-list "(false)" 42786 . 42793)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "nonlispfield") 50458 . 50478) . ((semantic-list "((offsetof (type, nonlispfield) - header_size) / word_size)" 50485 . 50544)))
          ("UNSIGNED_CMP" (spp-arg-list ("a" "op" "b") 50890 . 50900) . ((semantic-list "(max (sizeof ((a) + 0), sizeof ((b) + 0)) <= sizeof (unsigned)	\\
   ? ((a) + (unsigned) 0) op ((b) + (unsigned) 0)			\\
   : ((a) + (uintmax_t) 0) op ((b) + (uintmax_t) 0))" 50910 . 51081)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 119409 . 119412)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 148499 . 148505) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 148510 . 148561)))
          ("pMu" . ((symbol "pI" 4650 . 4652) (string "\"u\"" 4652 . 4655)))
          ("lisp_h_XLI" (spp-arg-list ("o") 10878 . 10881) . ((semantic-list "(o)" 10882 . 10885)))
          ("lisp_h_INTEGERP" (spp-arg-list ("x") 11410 . 11413) . ((semantic-list "((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 11414 . 11467)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 25600 . 25652)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 27853 . 27857)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 34231 . 34234) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 34239 . 34317)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 36950 . 36956) . ((semantic-list "((a) = make_lisp_symbol (b))" 36957 . 36985)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 37277 . 37306) . ((semantic-list "((v)->header.size = (PSEUDOVECTOR_FLAG			\\
		       | ((code) << PSEUDOVECTOR_AREA_BITS)	\\
		       | ((restsize) << PSEUDOVECTOR_SIZE_BITS) \\
		       | (lispsize)))" 37312 . 37478)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 59295 . 59306))
          ("TYPE_RANGED_INTEGERP" (spp-arg-list ("type" "x") 80580 . 80589) . ((semantic-list "(INTEGERP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XINT (x) : 0 <= XINT (x)) \\
   && XINT (x) <= TYPE_MAXIMUM (type))" 80594 . 80735)))
          ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" (spp-arg-list ("x") 86514 . 86517) . 
              ((DO "do" 86525 . 86527) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (NUMBERP (x), Qnumber_or_marker_p, x);			\\
  }" 86528 . 86699) (WHILE "while" 86700 . 86705) (semantic-list "(false)" 86706 . 86713)))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 98957 . 99001)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 116196 . 116214) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 116227 . 116359)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 135131 . 135141)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 146429 . 146440) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 146441 . 146463) (semantic-list "(buf, nelt, 0)" 146464 . 146478)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1795 . 1800) . ((punctuation ";" 1801 . 1802)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 25674 . 25745)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 30926 . 30953)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 42925 . 42930) . 
              ((DO "do" 42937 . 42939) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = XSTRING (STR)->size;	\\
  }" 42940 . 43105) (WHILE "while" 43106 . 43111) (semantic-list "(false)" 43112 . 43119)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 62218 . 62228) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 62236 . 62282)))
          ("CALLMANY" (spp-arg-list ("f" "array") 89754 . 89764) . ((semantic-list "(f)" 89765 . 89768) (semantic-list "(ARRAYELTS (array), array)" 89769 . 89795)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 92219 . 92238) . 
              ((DO "do" 92245 . 92247) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd ko_fwd;			\\
    defvar_kboard (&ko_fwd, lname, offsetof (KBOARD, vname ## _)); \\
  }" 92248 . 92380) (WHILE "while" 92381 . 92386) (semantic-list "(false)" 92387 . 92394)))
          ("QUIT" . 
              ((DO "do" 98715 . 98717) (semantic-list "{							\\
    if (!NILP (Vquit_flag) && NILP (Vinhibit_quit))	\\
      process_quit_flag ();				\\
    else if (pending_signals)				\\
      process_pending_signals ();			\\
  }" 98718 . 98891) (WHILE "while" 98892 . 98897) (semantic-list "(false)" 98898 . 98905)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 115853 . 115871) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 115885 . 116030)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_pipe[1] >= 0)" 134100 . 134121)))
          ("eabs" (spp-arg-list ("x") 143527 . 143530) . ((semantic-list "((x) < 0 ? -(x) : (x))" 143539 . 143561)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 144273 . 144279) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : (sa_must_free = true, record_xmalloc (size)))" 144280 . 144390)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 149907 . 149918) . ((symbol "AUTO_STRING_WITH_LEN" 149923 . 149943) (semantic-list "(name, str, strlen (str))" 149944 . 149969)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1720 . 1730) . 
              ((EXTERN "extern" 1731 . 1737) (symbol "DECLARE_GDB_SYM" 1738 . 1753) (semantic-list "(type, id)" 1754 . 1764)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2016 . 2021) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2022 . 2054)))
          ("pI" . ((string "\"ll\"" 3201 . 3205)))
          ("eassert" (spp-arg-list ("cond") 6437 . 6443) . ((semantic-list "((void) (false && (cond)))" 6444 . 6470)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 11089 . 11092) . ((symbol "CHECK_TYPE" 11093 . 11103) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 11104 . 11130)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 25767 . 25851)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 27390 . 27396) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 27401 . 27424) (semantic-list "(Lisp_Object, name)" 27425 . 27444) (symbol "DEFINE_GDB_SYMBOL_END" 27449 . 27470) (semantic-list "(LISPSYM_INITIALLY (name))" 27471 . 27497)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 37976 . 37982) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 37987 . 38039)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 38059 . 38065) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 38066 . 38105)))
          ("CHECK_NUMBER_COERCE_MARKER" (spp-arg-list ("x") 86097 . 86100) . 
              ((DO "do" 86109 . 86111) (semantic-list "{									\\
    if (MARKERP ((x)))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (INTEGERP (x), Qinteger_or_marker_p, x);		\\
  }" 86112 . 86286) (WHILE "while" 86287 . 86292) (semantic-list "(false)" 86293 . 86300)))
          ("sys_setjmp" (spp-arg-list ("j") 92937 . 92940) . ((symbol "setjmp" 92941 . 92947) (semantic-list "(j)" 92948 . 92951)))
          ("INTEGER_TO_CONS" (spp-arg-list ("i") 102480 . 102483) . ((semantic-list "(! FIXNUM_OVERFLOW_P (i)					    \\
   ? make_number (i)						    \\
   : EXPR_SIGNED (i) ? intbig_to_lisp (i) : uintbig_to_lisp (i))" 102496 . 102627)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 144040 . 144049) (symbol "sa_avail" 144050 . 144058) (punctuation "=" 144059 . 144060) (symbol "MAX_ALLOCA" 144061 . 144071) (punctuation ";" 144071 . 144072) (symbol "ptrdiff_t" 144077 . 144086) (symbol "sa_count" 144087 . 144095) (punctuation "=" 144096 . 144097) (symbol "SPECPDL_INDEX" 144098 . 144111) (semantic-list "()" 144112 . 144114) (punctuation ";" 144114 . 144115) (BOOL "bool" 144116 . 144120) (symbol "sa_must_free" 144121 . 144133) (punctuation "=" 144134 . 144135) (symbol "false" 144136 . 144141)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3128 . 3137)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 8703 . 8738)))
          ("lisp_h_MISCP" (spp-arg-list ("x") 11563 . 11566) . ((semantic-list "(XTYPE (x) == Lisp_Misc)" 11567 . 11591)))
          ("LISP_INITIALLY" (spp-arg-list ("i") 20831 . 20834) . ((semantic-list "(i)" 20835 . 20838)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 25873 . 25970)))
          ("XLI_BUILTIN_LISPSYM" (spp-arg-list ("iname") 26913 . 26920) . ((symbol "TAG_SYMOFFSET" 26921 . 26934) (semantic-list "((iname) * sizeof *lispsym)" 26935 . 26962)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 30866 . 30896)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "false" 147197 . 147202)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 12119 . 12122) . ((semantic-list "(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 12128 . 12193)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 12214 . 12217) . ((symbol "XUINT" 12218 . 12223) (semantic-list "(a)" 12224 . 12227)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 25992 . 26102)))
          ("XSETINT" (spp-arg-list ("a" "b") 36659 . 36665) . ((semantic-list "((a) = make_number (b))" 36666 . 36689)))
          ("XSETMISC" (spp-arg-list ("a" "b") 37064 . 37070) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Misc))" 37071 . 37107)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 37574 . 37586) . ((symbol "XSETTYPED_PSEUDOVECTOR" 37591 . 37613) (semantic-list "(a, b,					\\
			  (((struct vectorlike_header *)	\\
			    XUNTAG (a, Lisp_Vectorlike))	\\
			   ->size),				\\
			  code)" 37614 . 37733)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 38254 . 38260) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 38261 . 38297)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 42477 . 42550)))
          ("_UCHAR_T")
          ("CALLN" (spp-arg-list ("f" "...") 90104 . 90112) . ((symbol "CALLMANY" 90113 . 90121) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 90122 . 90159)))
          ("GCALIGNED")
          ("XSETFLOAT" (spp-arg-list ("a" "b") 37003 . 37009) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 37010 . 37047)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 37157 . 37166) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 37176 . 37252)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 37764 . 37782) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 37789 . 37942)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 38124 . 38130) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 38131 . 38169)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 38525 . 38531) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 38532 . 38575)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 91315 . 91334) . 
              ((DO "do" 91340 . 91342) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp (&o_fwd, lname, &globals.f_ ## vname);		\\
  }" 91343 . 91453) (WHILE "while" 91454 . 91459) (semantic-list "(false)" 91460 . 91467)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 145097 . 145110) . 
              ((DO "do" 145117 . 145119) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 145120 . 145240) (WHILE "while" 145241 . 145246) (semantic-list "(false)" 145247 . 145254)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1507 . 1517) . 
              ((symbol "type" 1518 . 1522) (CONST "const" 1523 . 1528) (symbol "id" 1529 . 1531) (symbol "EXTERNALLY_VISIBLE" 1532 . 1550)))
          ("GCTYPEBITS" . ((number "3" 2161 . 2162)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 11156 . 11174) . ((semantic-list "((ok) ? (void) 0 : (void) wrong_type_argument (predicate, x))" 11180 . 11241)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 11831 . 11836) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 11842 . 11906)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 25131 . 25148) . 
              ((EXTERN "extern" 25153 . 25159) (symbol "Lisp_Object" 25160 . 25171) (symbol "fnname" 25172 . 25178) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 25179 . 25190) (symbol "maxargs" 25194 . 25201)) 25179 . 25201)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 36886 . 36892) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 36893 . 36931)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 102951 . 102968) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 102975 . 103142)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 144163 . 144169) . ((semantic-list "(sa_avail -= (size), alloca (size))" 144170 . 144205)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 145631 . 145649) . 
              ((DO "do" 145661 . 145663) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	Lisp_Object arg_;				       \\
	(buf) = xmalloc (alloca_nbytes);		       \\
	arg_ = make_save_memory (buf, nelt);		       \\
	sa_must_free = true;				       \\
	record_unwind_protect (free_save_value, arg_);	       \\
      }							       \\
  }" 145664 . 146320) (WHILE "while" 146321 . 146326) (semantic-list "(false)" 146327 . 146334)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 148398 . 148404) . ((symbol "make_lisp_ptr" 148409 . 148422) (semantic-list "(&(union Aligned_Cons) { { a, { b } } }.s, Lisp_Cons)" 148423 . 148476)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 3484 . 3485)))
          ("lisp_h_XIL" (spp-arg-list ("i") 10905 . 10908) . ((semantic-list "(i)" 10909 . 10912)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 11357 . 11360) . ((semantic-list "(XTYPE (x) == Lisp_Float)" 11361 . 11386)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 12078 . 12081) . 
              ((symbol "XCONS" 12082 . 12087) (semantic-list "(c)" 12088 . 12091) (punctuation "-" 12091 . 12092) (punctuation ">" 12092 . 12093) (symbol "u" 12093 . 12094) (punctuation "." 12094 . 12095) (symbol "cdr" 12095 . 12098)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 14968 . 15004)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 36709 . 36715) . ((semantic-list "((a) = make_natnum (b))" 36716 . 36739)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 38452 . 38458) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 38459 . 38501)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 38602 . 38608) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 38609 . 38655)))
          ("VECSIZE" (spp-arg-list ("type") 50167 . 50173) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 50183 . 50242)))
          ("ASCII_CHAR_P" (spp-arg-list ("c") 51144 . 51147) . ((symbol "UNSIGNED_CMP" 51148 . 51160) (semantic-list "(c, <, 0x80)" 51161 . 51173)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 91493 . 91512) . 
              ((DO "do" 91517 . 91519) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp_nopro (&o_fwd, lname, &globals.f_ ## vname);	\\
  }" 91520 . 91635) (WHILE "while" 91636 . 91641) (semantic-list "(false)" 91642 . 91649)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 91669 . 91688) . 
              ((DO "do" 91694 . 91696) (semantic-list "{						\\
    static struct Lisp_Boolfwd b_fwd;		\\
    defvar_bool (&b_fwd, lname, &globals.f_ ## vname);		\\
  }" 91697 . 91808) (WHILE "while" 91809 . 91814) (semantic-list "(false)" 91815 . 91822)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 148929 . 148938) . 
              ((symbol "Lisp_Object" 148948 . 148959) (symbol "name" 148960 . 148964) (punctuation "=" 148965 . 148966) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 148967 . 149018)))
          ("lisp_h_CONSP" (spp-arg-list ("x") 11262 . 11265) . ((semantic-list "(XTYPE (x) == Lisp_Cons)" 11266 . 11290)))
          ("lisp_h_NILP" (spp-arg-list ("x") 11611 . 11614) . ((symbol "EQ" 11615 . 11617) (semantic-list "(x, Qnil)" 11618 . 11627)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 11657 . 11665) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 11671 . 11741)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 11774 . 11779) . ((semantic-list "(XSYMBOL (sym)->constant)" 11780 . 11805)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 11929 . 11932) . ((semantic-list "(XTYPE (x) == Lisp_Symbol)" 11933 . 11959)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 11986 . 11989) . ((semantic-list "(XTYPE (x) == Lisp_Vectorlike)" 11990 . 12020)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 25393 . 25406)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 36818 . 36824) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 36825 . 36867)))
          ("CHECK_TYPE_RANGED_INTEGER" (spp-arg-list ("type" "x") 85826 . 85835) . 
              ((DO "do" 85840 . 85842) (semantic-list "{									\\
    if (TYPE_SIGNED (type))						\\
      CHECK_RANGED_INTEGER (x, TYPE_MINIMUM (type), TYPE_MAXIMUM (type)); \\
    else								\\
      CHECK_RANGED_INTEGER (x, 0, TYPE_MAXIMUM (type));			\\
  }" 85843 . 86047) (WHILE "while" 86048 . 86053) (semantic-list "(false)" 86054 . 86061)))
          ("IS_DAEMON" . ((semantic-list "(daemon_pipe[1] != 0)" 134055 . 134076)))
          ("make_fixnum_or_float" (spp-arg-list ("val") 143676 . 143681) . ((semantic-list "(FIXNUM_OVERFLOW_P (val) ? make_float (val) : make_number (val))" 143687 . 143751)))
          ("SAFE_FREE" (spp-arg-list nil 145340 . 145342) . 
              ((DO "do" 145349 . 145351) (semantic-list "{					\\
    if (sa_must_free) {			\\
      sa_must_free = false;		\\
      unbind_to (sa_count, Qnil);	\\
    }					\\
  }" 145352 . 145470) (WHILE "while" 145471 . 145476) (semantic-list "(false)" 145477 . 145484)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 148857 . 148869) . 
              ((symbol "Lisp_Object" 148870 . 148881) (symbol "name" 148882 . 148886) (punctuation "=" 148887 . 148888) (symbol "AUTO_CONS_EXPR" 148889 . 148903) (semantic-list "(a, b)" 148904 . 148910)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 149037 . 149049) . 
              ((symbol "Lisp_Object" 149059 . 149070) (symbol "name" 149071 . 149075) (punctuation "=" 149076 . 149077) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 149078 . 149173)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 150340 . 150356) . 
              ((symbol "Lisp_Object" 150364 . 150375) (symbol "name" 150376 . 150380) (punctuation "=" 150381 . 150382) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(union Aligned_String)					\\
	  {{len, -1, 0, (unsigned char *) (str)}}.s),			\\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 150395 . 150597)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 151283 . 151314) . ((FOR "for" 151320 . 151323) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 151324 . 151470)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [931 950])
            ("stddef.h" include (:system-flag t) nil [1031 1050])
            ("string.h" include (:system-flag t) nil [1051 1070])
            ("limits.h" include (:system-flag t) nil [1071 1090])
            ("stdint.h" include (:system-flag t) nil [1091 1110])
            ("unistd.h" include (:system-flag t) nil [1111 1130])
            ("__MALLOC_HOOK_VOLATILE" variable (:constant-flag t) nil [1466 1488])
            ("__morecore" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1694 1704]))                  
                :type "void")
                nil [1666 1705])
            ("malloc" variable (:constant-flag t) nil [2239 2245])
            ("realloc" variable (:constant-flag t) nil [2262 2269])
            ("calloc" variable (:constant-flag t) nil [2287 2293])
            ("aligned_alloc" variable (:constant-flag t) nil [2310 2323])
            ("free" variable (:constant-flag t) nil [2347 2351])
            ("malloc_info" variable (:constant-flag t) nil [2366 2377])
            ("__malloc_initialize" function
               (:type "int"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7700 7705]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7668 7706])
            ("__malloc_initialized" variable
               (:type "int"
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [7574 7606])
            ("UNLOCK_ALIGNED_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7470 7491])
            ("LOCK_ALIGNED_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7440 7459])
            ("UNLOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7423 7429])
            ("LOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7408 7412])
            ("_free_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6688 6695]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6653 6696])
            ("_realloc_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6636 6643])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6644 6651]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6597 6652])
            ("_malloc_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6588 6595]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6550 6596])
            ("_free_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6541 6548]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6513 6549])
            ("_realloc_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6496 6503])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6504 6511]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6464 6512])
            ("_malloc_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6455 6462]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6424 6463])
            ("_bytes_free" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6235 6261])
            ("_chunks_free" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6207 6234])
            ("_bytes_used" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6180 6206])
            ("_chunks_used" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6152 6179])
            ("_aligned_blocks" variable
               (:type ("alignlist" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [6085 6126])
            ("alignlist" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("alignlist" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5929 5952])
                    ("aligned" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [5957 5971])
                    ("exact" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [6025 6037]))                  )
                (reparse-symbol extern-c-contents) [5904 6084])
            ("_fraghead" variable
               (:type ("list" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :dereference 1)
                (reparse-symbol extern-c-contents) [5807 5838])
            ("list" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("list" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5710 5728])
                    ("prev" variable
                       (:pointer 1
                        :type ("list" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5733 5751]))                  )
                (reparse-symbol extern-c-contents) [5690 5756])
            ("_heaplimit" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [5617 5642])
            ("_heapindex" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [5548 5573])
            ("ADDRESS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5441 5448])
            ("BLOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5379 5384])
            ("_heapinfo" variable
               (:type ("gmalloc_info" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [5292 5322])
            ("_heapbase" variable
               (:type "char"
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [5200 5223])
            ("gmalloc_info" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("busy" variable (:type ("" type
                               (:members 
                                  ( ("type" variable (:type "int") (reparse-symbol classsubparts) [4428 4437])
                                    ("info" variable (:type ("" type
                                         (:members 
                                            ( ("frag" variable (:type ("" type
                                                   (:members 
                                                      ( ("nfree" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4473 4486])
                                                        ("first" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4530 4543]))                                                      
                                                    :type "struct")
                                                    nil nil)) (reparse-symbol classsubparts) [4455 4599])
                                              ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4811 4826]))                                            
                                          :type "union")
                                          nil nil)) (reparse-symbol classsubparts) [4439 4837]))                                  
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [4291 4851])
                          ("free" variable (:type ("" type
                               (:members 
                                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4967 4979])
                                    ("next" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5024 5036])
                                    ("prev" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5073 5085]))                                  
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [4951 5138]))                        
                      :type "union")
                      nil nil))
                (reparse-symbol extern-c-contents) [4223 5155])
            ("FINAL_FREE_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4150 4167])
            ("HEAP" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3972 3976])
            ("BLOCKIFY" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3809 3817])
            ("BLOCKSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3775 3784])
            ("BLOCKLOG" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3732 3740])
            ("aligned_alloc" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3255 3262])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3263 3270]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3227 3271])
            ("free" function
               (:type "void"
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [3157 3167]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3139 3168])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3087 3117])
            ("ATTRIBUTE_ALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2938 2965])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2764 2792])
            ("errno.h" include (:system-flag t) nil [10251 10269])
            ("__morecore" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10721 10731]))                  
                :type "void")
                nil [10700 10732])
            ("_heapbase" variable
               (:pointer 1
                :type "char")
                nil [10804 10820])
            ("_heapinfo" variable
               (:pointer 1
                :type ("gmalloc_info" type (:type "class") nil nil))
                nil [10902 10925])
            ("_heapindex" variable (:type ("size_t" type (:type "class") nil nil)) nil [10966 10984])
            ("_heaplimit" variable (:type ("size_t" type (:type "class") nil nil)) nil [11028 11046])
            ("_fraghead" variable
               (:dereference 1
                :type ("list" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [11090 11122])
            ("_chunks_used" variable (:type ("size_t" type (:type "class") nil nil)) nil [11148 11168])
            ("_bytes_used" variable (:type ("size_t" type (:type "class") nil nil)) nil [11169 11188])
            ("_chunks_free" variable (:type ("size_t" type (:type "class") nil nil)) nil [11189 11209])
            ("_bytes_free" variable (:type ("size_t" type (:type "class") nil nil)) nil [11210 11229])
            ("__malloc_initialized" variable (:type "int") nil [11259 11284])
            ("__malloc_extra_blocks" variable (:type ("size_t" type (:type "class") nil nil)) nil [11581 11610])
            ("heapsize" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [11643 11666])
            ("PROTECT_MALLOC_STATE" variable (:constant-flag t) nil [12895 12915])
            ("align" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12991 13003]))                  
                :type "void")
                nil [12970 13635])
            ("get_contiguous_space" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13828 13843])
                    ("position" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13844 13859]))                  
                :type "void")
                nil [13792 14316])
            ("register_heapinfo" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [14534 14539]))                  
                :type "void")
                nil [14503 15048])
            ("malloc_initialize_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16172 16177]))                  
                :type "void")
                nil [16139 16770])
            ("__malloc_initialize" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [17004 17009]))                  
                :type "int")
                nil [16979 17114])
            ("morecore_recursing" variable
               (:typemodifiers ("static")
                :type "int")
                nil [17116 17146])
            ("morecore_nolock" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17273 17285]))                  
                :type "void")
                nil [17242 20727])
            ("_malloc_internal_nolock" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20799 20811]))                  
                :type "void")
                nil [20767 27283])
            ("_malloc_internal" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27310 27322]))                  
                :type "void")
                nil [27285 27428])
            ("gmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27445 27457]))                  
                :type "void")
                nil [27430 28078])
            ("_malloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28277 28284]))                  
                :type "void")
                nil [28255 28285])
            ("_free" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28305 28312]))                  
                :type "void")
                nil [28286 28313])
            ("_realloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28337 28344])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28345 28352]))                  
                :type "void")
                nil [28314 28353])
            ("_malloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28371 28383]))                  
                :type "void")
                nil [28355 28411])
            ("_free" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28425 28435]))                  
                :type "void")
                nil [28413 28453])
            ("_realloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28472 28482])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28483 28495]))                  
                :type "void")
                nil [28455 28529])
            ("_aligned_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("alignlist" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [29613 29654])
            ("_free_internal_nolock" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [29772 29782]))                  
                :type "void")
                nil [29744 37649])
            ("_free_internal" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [37760 37770]))                  
                :type "void")
                nil [37739 37829])
            ("gfree" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [37877 37887]))                  
                :type "void")
                nil [37866 38002])
            ("cfree" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [38131 38141]))                  
                :type "void")
                nil [38119 38159])
            ("grealloc_hook" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [39225 39232])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39233 39240]))                  
                :type "void")
                nil [39194 39241])
            ("_realloc_internal_nolock" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [39629 39639])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39640 39652]))                  
                :type "void")
                nil [39596 42848])
            ("_realloc_internal" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [42876 42886])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42887 42899]))                  
                :type "void")
                nil [42850 43011])
            ("grealloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [43029 43039])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43040 43052]))                  
                :type "void")
                nil [43013 43254])
            ("gcalloc" function
               (:pointer 1
                :arguments 
                  ( ("nmemb" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44195 44208])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44209 44221]))                  
                :type "void")
                nil [44180 44465])
            ("__sbrk" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("increment" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45561 45581]))                  
                :type "void")
                nil [45540 45582])
            ("gdefault_morecore" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("increment" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45830 45850]))                  
                :type "void")
                nil [45797 46063])
            ("gdefault_morecore" variable (:type "int") nil [46099 46117])
            ("galigned_alloc" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46832 46849])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46850 46862]))                  
                :type "void")
                nil [46810 48796])
            ("memalign" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48996 49013])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49014 49026]))                  
                :type "void")
                nil [48979 49072])
            ("posix_memalign" function
               (:arguments 
                  ( ("memptr" variable
                       (:pointer 2
                        :type "void")
                        (reparse-symbol arg-sub-list) [49185 49199])
                    ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49200 49217])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49218 49230]))                  
                :type "int")
                nil [49165 49486])
            ("valloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50467 50474]))                  
                :type "void")
                nil [50446 50475])
            ("getpagesize.h" include nil nil [50540 50566])
            ("getpagesize" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [50619 50624]))                  
                :type "int")
                nil [50595 50625])
            ("pagesize" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [50635 50658])
            ("valloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50675 50687]))                  
                :type "void")
                nil [50660 50785])
            ("malloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53077 53089]))                  
                :type "void")
                nil [53062 53118])
            ("calloc" function
               (:pointer 1
                :arguments 
                  ( ("nmemb" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53135 53148])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53149 53161]))                  
                :type "void")
                nil [53120 53197])
            ("free" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [53210 53220]))                  
                :type "void")
                nil [53199 53239])
            ("aligned_alloc" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53263 53280])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53281 53293]))                  
                :type "void")
                nil [53241 53340])
            ("realloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [53358 53368])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53369 53381]))                  
                :type "void")
                nil [53342 53416]))          
      :file "gmalloc.c"
      :pointmax 58715
      :fsize 58714
      :lastmodtime '(22493 59862 823021 903000)
      :unmatched-syntax nil
      :lexical-table 
        '(("__MALLOC_HOOK_VOLATILE" . ((VOLATILE "volatile" 1489 . 1497)))
          ("BLOCKSIZE" . ((semantic-list "(1 << BLOCKLOG)" 3785 . 3800)))
          ("BLOCK" (spp-arg-list ("A") 5384 . 5387) . ((semantic-list "(((char *) (A) - _heapbase) / BLOCKSIZE + 1)" 5388 . 5432)))
          ("BLOCKLOG" . ((semantic-list "(INT_WIDTH > 16 ? 12 : 9)" 3741 . 3766)))
          ("UNLOCK_ALIGNED_BLOCKS" (spp-arg-list nil 7491 . 7493))
          ("ADDRESS" (spp-arg-list ("B") 5448 . 5451) . ((semantic-list "((void *) (((B) - 1) * BLOCKSIZE + _heapbase))" 5452 . 5498)))
          ("HEAP" . ((semantic-list "(INT_WIDTH > 16 ? 4194304 : 65536)" 3978 . 4012)))
          ("BLOCKIFY" (spp-arg-list ("SIZE") 3817 . 3823) . ((semantic-list "(((SIZE) + BLOCKSIZE - 1) / BLOCKSIZE)" 3824 . 3862)))
          ("malloc_info" . ((symbol "gmalloc_info" 2378 . 2390)))
          ("PROTECT_MALLOC_STATE" (spp-arg-list ("PROT") 12915 . 12921))
          ("UNLOCK" (spp-arg-list nil 7429 . 7431))
          ("LOCK_ALIGNED_BLOCKS" (spp-arg-list nil 7459 . 7461))
          ("LOCK" (spp-arg-list nil 7412 . 7414))
          ("FINAL_FREE_BLOCKS" . ((number "8" 4168 . 4169)))
          )
)
    (semanticdb-table "semanticdb-table"
      :file "getpagesize.h"
      :fsize 1542
      :lastmodtime '(22246 10475 498914 53000))
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("stdbool.h" include (:system-flag t) nil [1340 1360])
            ("GNUC_PREREQ" variable (:constant-flag t) nil [1763 1774])
            ("bool_bf" type
               (:typedef ("bool")
                :type "typedef")
                nil [2112 2133])
            ("__has_attribute" variable (:constant-flag t) nil [2320 2335])
            ("__has_attribute_alloc_size" variable (:constant-flag t) nil [2368 2394])
            ("__has_attribute_cleanup" variable (:constant-flag t) nil [2426 2449])
            ("__has_attribute_externally_visible" variable (:constant-flag t) nil [2481 2515])
            ("__has_attribute_no_address_safety_analysis" variable (:constant-flag t) nil [2547 2589])
            ("__has_attribute_no_sanitize_address" variable (:constant-flag t) nil [2605 2640])
            ("__has_builtin" variable (:constant-flag t) nil [2862 2875])
            ("__has_builtin___builtin_assume_aligned" variable (:constant-flag t) nil [2906 2944])
            ("__has_feature" variable (:constant-flag t) nil [3118 3131])
            ("ADDRESS_SANITIZER" variable (:constant-flag t) nil [3312 3329])
            ("__builtin_assume_aligned" variable (:constant-flag t) nil [3454 3478])
            ("getenv_TZ" variable (:constant-flag t) nil [7953 7962])
            ("setenv_TZ" variable (:constant-flag t) nil [7987 7996])
            ("emacs_getenv_TZ" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8043 8048]))                  
                :type "char")
                nil [8013 8049])
            ("emacs_setenv_TZ" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8078 8091]))                  
                :type "int")
                nil [8050 8092])
            ("NO_INLINE" variable (:constant-flag t) nil [8163 8172])
            ("EXTERNALLY_VISIBLE" variable (:constant-flag t) nil [8349 8367])
            ("ATTRIBUTE_FORMAT" variable (:constant-flag t) nil [8483 8499])
            ("PRINTF_ARCHETYPE" variable (:constant-flag t) nil [8726 8742])
            ("ATTRIBUTE_FORMAT_PRINTF" variable (:constant-flag t) nil [8769 8792])
            ("ATTRIBUTE_CONST" variable (:constant-flag t) nil [8904 8919])
            ("ATTRIBUTE_UNUSED" variable (:constant-flag t) nil [8948 8964])
            ("ATTRIBUTE_MALLOC" variable (:constant-flag t) nil [9004 9020])
            ("ATTRIBUTE_ALLOC_SIZE" variable (:constant-flag t) nil [9212 9232])
            ("ATTRIBUTE_MALLOC_SIZE" variable (:constant-flag t) nil [9255 9276])
            ("ADDRESS_SANITIZER_WORKAROUND" variable (:constant-flag t) nil [9678 9706])
            ("ATTRIBUTE_NO_SANITIZE_ADDRESS" variable (:constant-flag t) nil [10219 10248])
            ("INLINE" variable (:constant-flag t) nil [11513 11519])
            ("EXTERN_INLINE" variable (:constant-flag t) nil [11546 11559])
            ("INLINE_HEADER_BEGIN" variable (:constant-flag t) nil [11586 11605])
            ("INLINE_HEADER_END" variable (:constant-flag t) nil [11638 11655])
            ("UNINIT" variable (:constant-flag t) nil [11898 11904]))          
      :file "conf_post.h"
      :pointmax 11924
      :fsize 11923
      :lastmodtime '(22511 14636 982480 638000)
      :unmatched-syntax '((close-paren 9667 . 9668) (semantic-list 9592 . 9667) (punctuation 9590 . 9591) (punctuation 9589 . 9590))
      :lexical-table 
        '(("__has_attribute_no_address_safety_analysis" . ((symbol "false" 2590 . 2595)))
          ("getenv_TZ" . ((symbol "emacs_getenv_TZ" 7963 . 7978)))
          ("ATTRIBUTE_CONST" . ((symbol "_GL_ATTRIBUTE_CONST" 8920 . 8939)))
          ("INLINE_HEADER_BEGIN" . ((symbol "_GL_INLINE_HEADER_BEGIN" 11606 . 11629)))
          ("__has_attribute_externally_visible" . ((symbol "GNUC_PREREQ" 2516 . 2527) (semantic-list "(4, 1, 0)" 2528 . 2537)))
          ("ATTRIBUTE_MALLOC" . ((symbol "__attribute__" 9021 . 9034) (semantic-list "((__malloc__))" 9035 . 9049)))
          ("__has_builtin" (spp-arg-list ("a") 2875 . 2878) . ((symbol "__has_builtin_##a" 2879 . 2896)))
          ("__has_builtin___builtin_assume_aligned" . ((symbol "GNUC_PREREQ" 2945 . 2956) (semantic-list "(4, 7, 0)" 2957 . 2966)))
          ("__has_attribute_no_sanitize_address" . ((symbol "GNUC_PREREQ" 2641 . 2652) (semantic-list "(4, 8, 0)" 2653 . 2662)))
          ("__has_feature" (spp-arg-list ("a") 3131 . 3134) . ((symbol "false" 3135 . 3140)))
          ("ATTRIBUTE_MALLOC_SIZE" (spp-arg-list ("args") 9276 . 9282) . 
              ((symbol "ATTRIBUTE_MALLOC" 9283 . 9299) (symbol "ATTRIBUTE_ALLOC_SIZE" 9300 . 9320) (semantic-list "(args)" 9321 . 9327)))
          ("INLINE" . ((symbol "_GL_INLINE" 11520 . 11530)))
          ("EXTERN_INLINE" . ((symbol "_GL_EXTERN_INLINE" 11560 . 11577)))
          ("setenv_TZ" . ((symbol "emacs_setenv_TZ" 7997 . 8012)))
          ("PRINTF_ARCHETYPE" . ((symbol "__printf__" 8743 . 8753)))
          ("ATTRIBUTE_NO_SANITIZE_ADDRESS")
          ("ADDRESS_SANITIZER" . ((symbol "false" 3330 . 3335)))
          ("EXTERNALLY_VISIBLE")
          ("GNUC_PREREQ" (spp-arg-list ("v" "w" "x") 1774 . 1783) . ((semantic-list "((v) < __GNUC__ + ((w) < __GNUC_MINOR__ + ((x) <= __GNUC_PATCHLEVEL__)))" 1790 . 1862)))
          ("__builtin_assume_aligned" (spp-arg-list ("ptr" "...") 3478 . 3488) . ((semantic-list "((void *) (ptr))" 3489 . 3505)))
          ("ADDRESS_SANITIZER_WORKAROUND")
          ("INLINE_HEADER_END" . ((symbol "_GL_INLINE_HEADER_END" 11656 . 11677)))
          ("__has_attribute_cleanup" . ((symbol "GNUC_PREREQ" 2450 . 2461) (semantic-list "(3, 4, 0)" 2462 . 2471)))
          ("ATTRIBUTE_FORMAT" (spp-arg-list ("spec") 8499 . 8505))
          ("__has_attribute" (spp-arg-list ("a") 2335 . 2338) . ((symbol "__has_attribute_##a" 2339 . 2358)))
          ("__has_attribute_alloc_size" . ((symbol "GNUC_PREREQ" 2395 . 2406) (semantic-list "(4, 3, 0)" 2407 . 2416)))
          ("NO_INLINE" . ((symbol "__attribute__" 8173 . 8186) (semantic-list "((noinline))" 8186 . 8198)))
          ("UNINIT")
          ("ATTRIBUTE_FORMAT_PRINTF" (spp-arg-list ("string_index" "first_to_check") 8792 . 8822) . ((symbol "ATTRIBUTE_FORMAT" 8827 . 8843) (semantic-list "((PRINTF_ARCHETYPE, string_index, first_to_check))" 8844 . 8894)))
          ("ATTRIBUTE_ALLOC_SIZE" (spp-arg-list ("args") 9232 . 9238))
          ("ATTRIBUTE_UNUSED" . ((symbol "_GL_UNUSED" 8965 . 8975)))
          )
))
  :file "!work!emacs!master!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
