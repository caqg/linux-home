" vim Initialization

source $HOME/.vim/exrc

set directory=
set directory+=~/tmp
set directory+=.		"do not interfere with git or svn
set directory+=/var/tmp
set directory+=/tmp

set path=.,,
set path+=/usr/include/c++/5/**
set path+=/usr/include/x86_64-linux-gnu/c++/5/**
set path+=/usr/lib/gcc/x86_64-linux-gnu/5/include*/**
set path+=/usr/include/x86_64-linux-gnu
set path+=/usr/local/include
set path+=/usr/include

set tags=
set tags+=tags
set tags+=./tags
set tags+=../tags

syntax on
filetype indent on
filetype plugin on

if has("cscope")
  set cscopeprg=cscope
  set cscopetag
  set csto=0
  set cscopeverbose
  if filereadable("cscope.out")
    cscope add cscope.out
  endif
endif

let TE_Ctags_Path="ctags"
let TE_Use_Right_Window=1

" Not in plain vi
set backup
set laststatus=1
set writebackup
set nohlsearch
set incsearch
set textwidth=78
if v:version >= 700
  set numberwidth=5
endif

" C/C++, closer to the Emacs settings
autocmd FileType c,cpp,java :set cinoptions=:0,j1,J1,l0,g0,t0,(0,)30
autocmd FileType c,cpp,java :set noexpandtab
autocmd FileType c,cpp,java :set foldmethod=syntax
autocmd FileType c,cpp,java :set foldcolumn=0
autocmd FileType c,cpp,java :set nofoldenable
autocmd FileType c,cpp,java :set formatoptions+=cj
autocmd FileType c,cpp,java :set shiftwidth=8
autocmd FileType c,cpp,java :set nosmarttab

" delete trailing whitespace
autocmd FileType c,cpp,java	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType gdb,make	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType awk,tcl	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType yacc,lex	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType lisp		autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType scheme		autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType verilog 	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType xml,xsd	autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType conf		autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType gitconfig	autocmd BufWritePre <buffer> :%s/\s\+$//e

set ruler
set diffopt=filler,iwhite,vertical

" Adjust Verilog's indentation
function! VerilogSettings ()
  if exists('b:current_syntax')
    if b:current_syntax == 'verilog'
      let b:verilog_indent_modules = 1
    endif
  endif
endfunction
autocmd BufReadPost *.v call VerilogSettings()

" Treat *.md as markdown, not modula2
autocmd BufNewFile,BufRead *.md setfiletype markdown

" Man pages
runtime! ftplugin/man.vim

"end .vimrc
