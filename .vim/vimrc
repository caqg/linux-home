" vim initialization

set autoindent
set autowrite
set backspace           =indent
set backspace          +=eol
set backspace          +=start
set backup
set nohlsearch
set incsearch
set laststatus          =1
set magic
set numberwidth         =5
set ruler
set shell               =/bin/bash
set shiftwidth          =8
set smartcase
set smarttab
set tabstop             =8
set textwidth           =78
set nowrap
set writebackup

if exists("+autochdir")
   set autochdir
endif

set directory           =
set directory          +=~/tmp
set directory          +=.              "do not interfere with git or svn
set directory          +=/var/tmp
set directory          +=/tmp

set path                =,,
set path               +=/usr/include/c++/11/**
set path               +=/usr/include/x86_64-linux-gnu/c++/11/**
set path               +=/usr/lib/gcc/x86_64-linux-gnu/11/include*/**
set path               +=/usr/include/x86_64-linux-gnu
set path               +=/usr/local/include
set path               +=/usr/include
set path               +=/usr/include/libxml2

set tags                =
set tags               +=./TAGS;~/Projects
set tags               +=TAGS
set tags               +=./tags;~/Projects
set tags               +=tags

if has("terminfo")
    if &term == "xterm-256color"
        if getenv('WSL_DISTRO_NAME') != v:null
            set t_u7    =
        endif
        set t_Co        =256
    elseif &term == "xterm*"
        set t_Co        = 16
    endif
endif

set mouse=a

if &term == "screen"
    if getenv('WSL_DISTRO_NAME') != v:null
        set t_Co=256
    endif
    if has('gui_running')
        colorscheme default
    endif
    set background=dark
else
    set background=dark
    colorscheme solarized8
    " highlight Terminal ctermfg=fg ctermbg=bg guifg=fg guibg=bg
    " call togglebg#map("<F12>")
endif

if &diff
    set background=dark
    if has('gui_running')
        set lines=999 columns=999
        colorscheme solarized8
        " highlight Terminal ctermfg=fg ctermbg=bg guifg=fg guibg=bg
        " call togglebg#map("<F12>")
    endif
    syntax off
else
    syntax on
endif

" highlight Terminal ctermfg=fg ctermbg=bg guifg=fg guibg=bg

"set rtp+=/usr/share/vim/addons

if version < 800
    set noeb vb t_vb=
else
    set belloff=all
endif

filetype indent on
filetype plugin on

if has("cscope")
    set cscopeprg       =cscope
    set nocscopetag
    set csto            =0
    set cscopeverbose
    if filereadable("cscope.out")
        try
            cscope add cscope.out
        catch /E568:/
            silent
        endtry
    endif
endif

let TE_Ctags_Path       = "/usr/local/bin/u-ctags"
let TE_Use_Right_Window = 1

" C/C++/Java, closer to the Emacs settings
autocmd FileType c,cpp,java     set cinoptions          =:0
autocmd FileType c,cpp,java     set cinoptions         +=(0
autocmd FileType c,cpp,java     set cinoptions         +=)30
autocmd FileType c,cpp,java     set cinoptions         +=g0
autocmd FileType c,cpp,java     set cinoptions         +=j1
autocmd FileType c,cpp,java     set cinoptions         +=J1
autocmd FileType c,cpp,java     set cinoptions         +=l0
autocmd FileType c,cpp,java     set cinoptions         +=t0
autocmd FileType c,cpp,java     set noexpandtab
autocmd FileType c,cpp,java     set foldmethod          =syntax
autocmd FileType c,cpp,java     set foldcolumn          =0
autocmd FileType c,cpp,java     set nofoldenable
autocmd FileType c,cpp,java     set formatoptions      +=croqj
autocmd FileType c,cpp,java     set shiftwidth          =8
autocmd FileType c,cpp,java     set nosmarttab
autocmd FileType c,cpp,java     set tabstop             =8
function! FlipFolding()
    if &foldenable
        set nofoldenable
        set foldcolumn  =0
    else
        set foldenable
        set foldcolumn  =5
    endif
endfunction
command! FlipFolding :call FlipFolding()
noremap <F11> :call FlipFolding()<CR>

" vim script
autocmd FileType vim            set shiftwidth     =4
autocmd FileType vim            set expandtab
autocmd FileType vim            set foldcolumn     =0
autocmd FileType vim            set foldmethod     =indent
autocmd FileType vim            set nofoldenable

" trim trailing whitespace
autocmd FileType awk,tcl        autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType c,cpp,java     autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType conf           autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType gdb,make       autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType gitconfig      autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType lisp           autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType scheme         autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType systemverilog  autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType verilog        autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType vim            autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType xml,xsd        autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd FileType yacc,lex       autocmd BufWritePre <buffer> %s/\s\+$//e


" More diff-specifics

"-- autocmd VimEnter * if &diff | execute 'windo set wrap' | endif

set diffopt             =filler
set diffopt            +=iwhite

if &columns < 150
    set diffopt            +=horizontal
else
    set diffopt            +=vertical
endif

set scrollopt           =hor
set scrollopt          +=ver
set scrollopt          +=jump

" Adjust Verilog's indentation
function! VerilogSettings ()
    if exists('b:current_syntax')
        if b:current_syntax == 'verilog'
            let b:verilog_indent_modules = 1
        endif
    endif
endfunction
autocmd BufReadPost *.v call VerilogSettings()

autocmd FileType verilog,systemverilog set wrap
autocmd FileType verilog,systemverilog set linebreak
autocmd FileType verilog,systemverilog set breakindent
autocmd FileType verilog,systemverilog set breakindentopt =min:20,shift:2

" Treat *.md as markdown, not modula2
autocmd BufNewFile,BufRead *.md setfiletype markdown

" Man pages
runtime! ftplugin/man.vim

" console menu
if !has("gui_running")
    set wildmenu
    set cpo-=<
    source $VIMRUNTIME/menu.vim
endif

packadd termdebug
let g:termdebug_wide = 1
hi debugPC term=reverse ctermbg=4 guibg=darkblue

"end vimrc
