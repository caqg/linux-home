//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

EDAM_VERSION_MAJOR = 1;
EDAM_VERSION_MINOR = 27;
PublicUserInfo = function(args) {
  this.userId = null;
  this.shardId = null;
  this.privilege = null;
  this.username = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
  }
};
PublicUserInfo.prototype = {};
PublicUserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserInfo.prototype.write = function(output) {
  output.writeStructBegin('PublicUserInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 2);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 5);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 6);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationResult = function(args) {
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.user = null;
  this.publicUserInfo = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  this.secondFactorRequired = null;
  this.secondFactorDeliveryHint = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.expiration !== undefined) {
      this.expiration = args.expiration;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.publicUserInfo !== undefined) {
      this.publicUserInfo = args.publicUserInfo;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
    if (args.secondFactorRequired !== undefined) {
      this.secondFactorRequired = args.secondFactorRequired;
    }
    if (args.secondFactorDeliveryHint !== undefined) {
      this.secondFactorDeliveryHint = args.secondFactorDeliveryHint;
    }
  }
};
AuthenticationResult.prototype = {};
AuthenticationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicUserInfo = new PublicUserInfo();
        this.publicUserInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.secondFactorRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.secondFactorDeliveryHint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationResult.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationResult');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.publicUserInfo !== null && this.publicUserInfo !== undefined) {
    output.writeFieldBegin('publicUserInfo', Thrift.Type.STRUCT, 5);
    this.publicUserInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 6);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 7);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  if (this.secondFactorRequired !== null && this.secondFactorRequired !== undefined) {
    output.writeFieldBegin('secondFactorRequired', Thrift.Type.BOOL, 8);
    output.writeBool(this.secondFactorRequired);
    output.writeFieldEnd();
  }
  if (this.secondFactorDeliveryHint !== null && this.secondFactorDeliveryHint !== undefined) {
    output.writeFieldBegin('secondFactorDeliveryHint', Thrift.Type.STRING, 9);
    output.writeString(this.secondFactorDeliveryHint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
