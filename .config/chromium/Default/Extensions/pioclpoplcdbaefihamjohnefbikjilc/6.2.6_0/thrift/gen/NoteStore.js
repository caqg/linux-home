//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

NoteStore_getSyncState_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getSyncState_args.prototype = {};
NoteStore_getSyncState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncState_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncState_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSyncState_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSyncState_result.prototype = {};
NoteStore_getSyncState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncState_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSyncStateWithMetrics_args = function(args) {
  this.authenticationToken = null;
  this.clientMetrics = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.clientMetrics !== undefined) {
      this.clientMetrics = args.clientMetrics;
    }
  }
};
NoteStore_getSyncStateWithMetrics_args.prototype = {};
NoteStore_getSyncStateWithMetrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientMetrics = new ClientUsageMetrics();
        this.clientMetrics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncStateWithMetrics_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncStateWithMetrics_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.clientMetrics !== null && this.clientMetrics !== undefined) {
    output.writeFieldBegin('clientMetrics', Thrift.Type.STRUCT, 2);
    this.clientMetrics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSyncStateWithMetrics_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSyncStateWithMetrics_result.prototype = {};
NoteStore_getSyncStateWithMetrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncStateWithMetrics_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncStateWithMetrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.fullSyncOnly = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.afterUSN !== undefined) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined) {
      this.maxEntries = args.maxEntries;
    }
    if (args.fullSyncOnly !== undefined) {
      this.fullSyncOnly = args.fullSyncOnly;
    }
  }
};
NoteStore_getSyncChunk_args.prototype = {};
NoteStore_getSyncChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fullSyncOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncChunk_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 2);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 3);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.fullSyncOnly !== null && this.fullSyncOnly !== undefined) {
    output.writeFieldBegin('fullSyncOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.fullSyncOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSyncChunk_result.prototype = {};
NoteStore_getSyncChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncChunk_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.filter = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.afterUSN !== undefined) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined) {
      this.maxEntries = args.maxEntries;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
NoteStore_getFilteredSyncChunk_args.prototype = {};
NoteStore_getFilteredSyncChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new SyncChunkFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getFilteredSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 2);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 3);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getFilteredSyncChunk_result.prototype = {};
NoteStore_getFilteredSyncChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getFilteredSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_toBeGetFilteredSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.filter = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.afterUSN !== undefined) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined) {
      this.maxEntries = args.maxEntries;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
NoteStore_toBeGetFilteredSyncChunk_args.prototype = {};
NoteStore_toBeGetFilteredSyncChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new SyncChunkFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_toBeGetFilteredSyncChunk_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_toBeGetFilteredSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 2);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 3);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_toBeGetFilteredSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_toBeGetFilteredSyncChunk_result.prototype = {};
NoteStore_toBeGetFilteredSyncChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_toBeGetFilteredSyncChunk_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_toBeGetFilteredSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined) {
      this.linkedNotebook = args.linkedNotebook;
    }
  }
};
NoteStore_getLinkedNotebookSyncState_args.prototype = {};
NoteStore_getLinkedNotebookSyncState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new LinkedNotebook();
        this.linkedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getLinkedNotebookSyncState_result.prototype = {};
NoteStore_getLinkedNotebookSyncState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.fullSyncOnly = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined) {
      this.linkedNotebook = args.linkedNotebook;
    }
    if (args.afterUSN !== undefined) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined) {
      this.maxEntries = args.maxEntries;
    }
    if (args.fullSyncOnly !== undefined) {
      this.fullSyncOnly = args.fullSyncOnly;
    }
  }
};
NoteStore_getLinkedNotebookSyncChunk_args.prototype = {};
NoteStore_getLinkedNotebookSyncChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new LinkedNotebook();
        this.linkedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.fullSyncOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook.write(output);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 3);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 4);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.fullSyncOnly !== null && this.fullSyncOnly !== undefined) {
    output.writeFieldBegin('fullSyncOnly', Thrift.Type.BOOL, 5);
    output.writeBool(this.fullSyncOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getLinkedNotebookSyncChunk_result.prototype = {};
NoteStore_getLinkedNotebookSyncChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SyncChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listNotebooks_args.prototype = {};
NoteStore_listNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listNotebooks_result.prototype = {};
NoteStore_listNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size370 = 0;
        var _rtmp3374;
        this.success = [];
        var _etype373 = 0;
        _rtmp3374 = input.readListBegin();
        _etype373 = _rtmp3374.etype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          var elem376 = null;
          elem376 = new Notebook();
          elem376.read(input);
          this.success.push(elem376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter377 in this.success)
    {
      if (this.success.hasOwnProperty(iter377))
      {
        iter377 = this.success[iter377];
        iter377.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listPublishedBusinessNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listPublishedBusinessNotebooks_args.prototype = {};
NoteStore_listPublishedBusinessNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listPublishedBusinessNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listPublishedBusinessNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listPublishedBusinessNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listPublishedBusinessNotebooks_result.prototype = {};
NoteStore_listPublishedBusinessNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size378 = 0;
        var _rtmp3382;
        this.success = [];
        var _etype381 = 0;
        _rtmp3382 = input.readListBegin();
        _etype381 = _rtmp3382.etype;
        _size378 = _rtmp3382.size;
        for (var _i383 = 0; _i383 < _size378; ++_i383)
        {
          var elem384 = null;
          elem384 = new Notebook();
          elem384.read(input);
          this.success.push(elem384);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listPublishedBusinessNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listPublishedBusinessNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter385 in this.success)
    {
      if (this.success.hasOwnProperty(iter385))
      {
        iter385 = this.success[iter385];
        iter385.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listAccessibleBusinessNotebooks_args.prototype = {};
NoteStore_listAccessibleBusinessNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listAccessibleBusinessNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listAccessibleBusinessNotebooks_result.prototype = {};
NoteStore_listAccessibleBusinessNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.success = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = new Notebook();
          elem392.read(input);
          this.success.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listAccessibleBusinessNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter393 in this.success)
    {
      if (this.success.hasOwnProperty(iter393))
      {
        iter393 = this.success[iter393];
        iter393.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNotebook_args.prototype = {};
NoteStore_getNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNotebook_result.prototype = {};
NoteStore_getNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getDefaultNotebook_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getDefaultNotebook_args.prototype = {};
NoteStore_getDefaultNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getDefaultNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getDefaultNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getDefaultNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getDefaultNotebook_result.prototype = {};
NoteStore_getDefaultNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getDefaultNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getDefaultNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebook !== undefined) {
      this.notebook = args.notebook;
    }
  }
};
NoteStore_createNotebook_args.prototype = {};
NoteStore_createNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Notebook();
        this.notebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebook !== null && this.notebook !== undefined) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2);
    this.notebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createNotebook_result.prototype = {};
NoteStore_createNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebook !== undefined) {
      this.notebook = args.notebook;
    }
  }
};
NoteStore_updateNotebook_args.prototype = {};
NoteStore_updateNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Notebook();
        this.notebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebook !== null && this.notebook !== undefined) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2);
    this.notebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateNotebook_result.prototype = {};
NoteStore_updateNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeNotebook_args.prototype = {};
NoteStore_expungeNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeNotebook_result.prototype = {};
NoteStore_expungeNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listTags_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listTags_args.prototype = {};
NoteStore_listTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTags_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listTags_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listTags_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listTags_result.prototype = {};
NoteStore_listTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size394 = 0;
        var _rtmp3398;
        this.success = [];
        var _etype397 = 0;
        _rtmp3398 = input.readListBegin();
        _etype397 = _rtmp3398.etype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var elem400 = null;
          elem400 = new Tag();
          elem400.read(input);
          this.success.push(elem400);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTags_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter401 in this.success)
    {
      if (this.success.hasOwnProperty(iter401))
      {
        iter401 = this.success[iter401];
        iter401.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listTagsByNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
  }
};
NoteStore_listTagsByNotebook_args.prototype = {};
NoteStore_listTagsByNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTagsByNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listTagsByNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listTagsByNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_listTagsByNotebook_result.prototype = {};
NoteStore_listTagsByNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size402 = 0;
        var _rtmp3406;
        this.success = [];
        var _etype405 = 0;
        _rtmp3406 = input.readListBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = new Tag();
          elem408.read(input);
          this.success.push(elem408);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTagsByNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listTagsByNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter409 in this.success)
    {
      if (this.success.hasOwnProperty(iter409))
      {
        iter409 = this.success[iter409];
        iter409.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getTag_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getTag_args.prototype = {};
NoteStore_getTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getTag_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getTag_result.prototype = {};
NoteStore_getTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Tag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getTag_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createTag_args = function(args) {
  this.authenticationToken = null;
  this.tag = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
NoteStore_createTag_args.prototype = {};
NoteStore_createTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Tag();
        this.tag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createTag_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_createTag_result.prototype = {};
NoteStore_createTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Tag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createTag_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateTag_args = function(args) {
  this.authenticationToken = null;
  this.tag = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
NoteStore_updateTag_args.prototype = {};
NoteStore_updateTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Tag();
        this.tag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateTag_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateTag_result.prototype = {};
NoteStore_updateTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateTag_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_untagAll_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_untagAll_args.prototype = {};
NoteStore_untagAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_untagAll_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_untagAll_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_untagAll_result = function(args) {
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_untagAll_result.prototype = {};
NoteStore_untagAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_untagAll_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_untagAll_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeTag_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeTag_args.prototype = {};
NoteStore_expungeTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeTag_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeTag_result.prototype = {};
NoteStore_expungeTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeTag_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listSearches_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listSearches_args.prototype = {};
NoteStore_listSearches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSearches_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listSearches_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listSearches_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listSearches_result.prototype = {};
NoteStore_listSearches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.success = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = new SavedSearch();
          elem416.read(input);
          this.success.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSearches_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listSearches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter417 in this.success)
    {
      if (this.success.hasOwnProperty(iter417))
      {
        iter417 = this.success[iter417];
        iter417.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSearch_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getSearch_args.prototype = {};
NoteStore_getSearch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSearch_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getSearch_result.prototype = {};
NoteStore_getSearch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SavedSearch();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSearch_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createSearch_args = function(args) {
  this.authenticationToken = null;
  this.search = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.search !== undefined) {
      this.search = args.search;
    }
  }
};
NoteStore_createSearch_args.prototype = {};
NoteStore_createSearch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search = new SavedSearch();
        this.search.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSearch_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2);
    this.search.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createSearch_result.prototype = {};
NoteStore_createSearch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SavedSearch();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSearch_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateSearch_args = function(args) {
  this.authenticationToken = null;
  this.search = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.search !== undefined) {
      this.search = args.search;
    }
  }
};
NoteStore_updateSearch_args.prototype = {};
NoteStore_updateSearch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search = new SavedSearch();
        this.search.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSearch_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2);
    this.search.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateSearch_result.prototype = {};
NoteStore_updateSearch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSearch_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeSearch_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeSearch_args.prototype = {};
NoteStore_expungeSearch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSearch_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeSearch_result.prototype = {};
NoteStore_expungeSearch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSearch_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNotes_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.offset = null;
  this.maxNotes = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
  }
};
NoteStore_findNotes_args.prototype = {};
NoteStore_findNotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotes_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNotes_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 4);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNotes_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNotes_result.prototype = {};
NoteStore_findNotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NoteList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotes_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNotes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNoteOffset_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_findNoteOffset_args.prototype = {};
NoteStore_findNoteOffset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteOffset_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNoteOffset_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 3);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNoteOffset_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNoteOffset_result.prototype = {};
NoteStore_findNoteOffset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteOffset_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNoteOffset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNotesMetadata_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.offset = null;
  this.maxNotes = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
    if (args.resultSpec !== undefined) {
      this.resultSpec = args.resultSpec;
    }
  }
};
NoteStore_findNotesMetadata_args.prototype = {};
NoteStore_findNotesMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new NotesMetadataResultSpec();
        this.resultSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotesMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNotesMetadata_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 4);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 5);
    this.resultSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNotesMetadata_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNotesMetadata_result.prototype = {};
NoteStore_findNotesMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NotesMetadataList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotesMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNotesMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNoteCounts_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.withTrash = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.withTrash !== undefined) {
      this.withTrash = args.withTrash;
    }
  }
};
NoteStore_findNoteCounts_args.prototype = {};
NoteStore_findNoteCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withTrash = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteCounts_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNoteCounts_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.withTrash !== null && this.withTrash !== undefined) {
    output.writeFieldBegin('withTrash', Thrift.Type.BOOL, 3);
    output.writeBool(this.withTrash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findNoteCounts_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNoteCounts_result.prototype = {};
NoteStore_findNoteCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NoteCollectionCounts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteCounts_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findNoteCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.withContent = null;
  this.withResourcesData = null;
  this.withResourcesRecognition = null;
  this.withResourcesAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.withContent !== undefined) {
      this.withContent = args.withContent;
    }
    if (args.withResourcesData !== undefined) {
      this.withResourcesData = args.withResourcesData;
    }
    if (args.withResourcesRecognition !== undefined) {
      this.withResourcesRecognition = args.withResourcesRecognition;
    }
    if (args.withResourcesAlternateData !== undefined) {
      this.withResourcesAlternateData = args.withResourcesAlternateData;
    }
  }
};
NoteStore_getNote_args.prototype = {};
NoteStore_getNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.withContent !== null && this.withContent !== undefined) {
    output.writeFieldBegin('withContent', Thrift.Type.BOOL, 3);
    output.writeBool(this.withContent);
    output.writeFieldEnd();
  }
  if (this.withResourcesData !== null && this.withResourcesData !== undefined) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withResourcesData);
    output.writeFieldEnd();
  }
  if (this.withResourcesRecognition !== null && this.withResourcesRecognition !== undefined) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.withResourcesAlternateData !== null && this.withResourcesAlternateData !== undefined) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withResourcesAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNote_result.prototype = {};
NoteStore_getNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Note();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getPreferences_args = function(args) {
  this.authenticationToken = null;
  this.preferenceNames = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.preferenceNames !== undefined) {
      this.preferenceNames = args.preferenceNames;
    }
  }
};
NoteStore_getPreferences_args.prototype = {};
NoteStore_getPreferences_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size418 = 0;
        var _rtmp3422;
        this.preferenceNames = [];
        var _etype421 = 0;
        _rtmp3422 = input.readListBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readString().value;
          this.preferenceNames.push(elem424);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPreferences_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getPreferences_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.preferenceNames !== null && this.preferenceNames !== undefined) {
    output.writeFieldBegin('preferenceNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.preferenceNames.length);
    for (var iter425 in this.preferenceNames)
    {
      if (this.preferenceNames.hasOwnProperty(iter425))
      {
        iter425 = this.preferenceNames[iter425];
        output.writeString(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getPreferences_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getPreferences_result.prototype = {};
NoteStore_getPreferences_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Preferences();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPreferences_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getPreferences_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updatePreferences_args = function(args) {
  this.authenticationToken = null;
  this.preferencesToUpdate = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.preferencesToUpdate !== undefined) {
      this.preferencesToUpdate = args.preferencesToUpdate;
    }
  }
};
NoteStore_updatePreferences_args.prototype = {};
NoteStore_updatePreferences_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size426 = 0;
        var _rtmp3430;
        this.preferencesToUpdate = {};
        var _ktype427 = 0;
        var _vtype428 = 0;
        _rtmp3430 = input.readMapBegin();
        _ktype427 = _rtmp3430.ktype;
        _vtype428 = _rtmp3430.vtype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          if (_i431 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key432 = null;
          var val433 = null;
          key432 = input.readString().value;
          var _size434 = 0;
          var _rtmp3438;
          val433 = [];
          var _etype437 = 0;
          _rtmp3438 = input.readListBegin();
          _etype437 = _rtmp3438.etype;
          _size434 = _rtmp3438.size;
          for (var _i439 = 0; _i439 < _size434; ++_i439)
          {
            var elem440 = null;
            elem440 = input.readString().value;
            val433.push(elem440);
          }
          input.readListEnd();
          this.preferencesToUpdate[key432] = val433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updatePreferences_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updatePreferences_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.preferencesToUpdate !== null && this.preferencesToUpdate !== undefined) {
    output.writeFieldBegin('preferencesToUpdate', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.preferencesToUpdate));
    for (var kiter441 in this.preferencesToUpdate)
    {
      if (this.preferencesToUpdate.hasOwnProperty(kiter441))
      {
        var viter442 = this.preferencesToUpdate[kiter441];
        output.writeString(kiter441);
        output.writeListBegin(Thrift.Type.STRING, viter442.length);
        for (var iter443 in viter442)
        {
          if (viter442.hasOwnProperty(iter443))
          {
            iter443 = viter442[iter443];
            output.writeString(iter443);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updatePreferences_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updatePreferences_result.prototype = {};
NoteStore_updatePreferences_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updatePreferences_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updatePreferences_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteApplicationData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteApplicationData_args.prototype = {};
NoteStore_getNoteApplicationData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationData_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteApplicationData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteApplicationData_result.prototype = {};
NoteStore_getNoteApplicationData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LazyMap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationData_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
NoteStore_getNoteApplicationDataEntry_args.prototype = {};
NoteStore_getNoteApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteApplicationDataEntry_result.prototype = {};
NoteStore_getNoteApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
NoteStore_setNoteApplicationDataEntry_args.prototype = {};
NoteStore_setNoteApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_setNoteApplicationDataEntry_result.prototype = {};
NoteStore_setNoteApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
NoteStore_unsetNoteApplicationDataEntry_args.prototype = {};
NoteStore_unsetNoteApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unsetNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_unsetNoteApplicationDataEntry_result.prototype = {};
NoteStore_unsetNoteApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unsetNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteContent_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteContent_args.prototype = {};
NoteStore_getNoteContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteContent_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteContent_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteContent_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteContent_result.prototype = {};
NoteStore_getNoteContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteContent_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteSearchText_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.noteOnly = null;
  this.tokenizeForIndexing = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.noteOnly !== undefined) {
      this.noteOnly = args.noteOnly;
    }
    if (args.tokenizeForIndexing !== undefined) {
      this.tokenizeForIndexing = args.tokenizeForIndexing;
    }
  }
};
NoteStore_getNoteSearchText_args.prototype = {};
NoteStore_getNoteSearchText_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noteOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.tokenizeForIndexing = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteSearchText_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteSearchText_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteOnly !== null && this.noteOnly !== undefined) {
    output.writeFieldBegin('noteOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.noteOnly);
    output.writeFieldEnd();
  }
  if (this.tokenizeForIndexing !== null && this.tokenizeForIndexing !== undefined) {
    output.writeFieldBegin('tokenizeForIndexing', Thrift.Type.BOOL, 4);
    output.writeBool(this.tokenizeForIndexing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteSearchText_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteSearchText_result.prototype = {};
NoteStore_getNoteSearchText_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteSearchText_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteSearchText_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceSearchText_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceSearchText_args.prototype = {};
NoteStore_getResourceSearchText_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceSearchText_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceSearchText_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceSearchText_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceSearchText_result.prototype = {};
NoteStore_getResourceSearchText_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceSearchText_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceSearchText_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteTagNames_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteTagNames_args.prototype = {};
NoteStore_getNoteTagNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteTagNames_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteTagNames_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteTagNames_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteTagNames_result.prototype = {};
NoteStore_getNoteTagNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.success = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readString().value;
          this.success.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteTagNames_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteTagNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter451 in this.success)
    {
      if (this.success.hasOwnProperty(iter451))
      {
        iter451 = this.success[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createNote_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
  }
};
NoteStore_createNote_args.prototype = {};
NoteStore_createNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_createNote_result.prototype = {};
NoteStore_createNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Note();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNote_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
  }
};
NoteStore_updateNote_args.prototype = {};
NoteStore_updateNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateNote_result.prototype = {};
NoteStore_updateNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Note();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_deleteNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_deleteNote_args.prototype = {};
NoteStore_deleteNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_deleteNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_deleteNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_deleteNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_deleteNote_result.prototype = {};
NoteStore_deleteNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_deleteNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_deleteNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeNote_args.prototype = {};
NoteStore_expungeNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeNote_result.prototype = {};
NoteStore_expungeNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNotes_args = function(args) {
  this.authenticationToken = null;
  this.noteGuids = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuids !== undefined) {
      this.noteGuids = args.noteGuids;
    }
  }
};
NoteStore_expungeNotes_args.prototype = {};
NoteStore_expungeNotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.noteGuids = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readString().value;
          this.noteGuids.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotes_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNotes_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuids !== null && this.noteGuids !== undefined) {
    output.writeFieldBegin('noteGuids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.noteGuids.length);
    for (var iter459 in this.noteGuids)
    {
      if (this.noteGuids.hasOwnProperty(iter459))
      {
        iter459 = this.noteGuids[iter459];
        output.writeString(iter459);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeNotes_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeNotes_result.prototype = {};
NoteStore_expungeNotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotes_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeNotes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeInactiveNotes_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_expungeInactiveNotes_args.prototype = {};
NoteStore_expungeInactiveNotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeInactiveNotes_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeInactiveNotes_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeInactiveNotes_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_expungeInactiveNotes_result.prototype = {};
NoteStore_expungeInactiveNotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeInactiveNotes_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeInactiveNotes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_copyNote_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.toNotebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.toNotebookGuid !== undefined) {
      this.toNotebookGuid = args.toNotebookGuid;
    }
  }
};
NoteStore_copyNote_args.prototype = {};
NoteStore_copyNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.toNotebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_copyNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_copyNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.toNotebookGuid !== null && this.toNotebookGuid !== undefined) {
    output.writeFieldBegin('toNotebookGuid', Thrift.Type.STRING, 3);
    output.writeString(this.toNotebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_copyNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_copyNote_result.prototype = {};
NoteStore_copyNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Note();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_copyNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_copyNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listNoteVersions_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_listNoteVersions_args.prototype = {};
NoteStore_listNoteVersions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNoteVersions_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listNoteVersions_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listNoteVersions_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_listNoteVersions_result.prototype = {};
NoteStore_listNoteVersions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.success = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new NoteVersionId();
          elem466.read(input);
          this.success.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNoteVersions_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listNoteVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter467 in this.success)
    {
      if (this.success.hasOwnProperty(iter467))
      {
        iter467 = this.success[iter467];
        iter467.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteVersion_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.updateSequenceNum = null;
  this.withResourcesData = null;
  this.withResourcesRecognition = null;
  this.withResourcesAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.withResourcesData !== undefined) {
      this.withResourcesData = args.withResourcesData;
    }
    if (args.withResourcesRecognition !== undefined) {
      this.withResourcesRecognition = args.withResourcesRecognition;
    }
    if (args.withResourcesAlternateData !== undefined) {
      this.withResourcesAlternateData = args.withResourcesAlternateData;
    }
  }
};
NoteStore_getNoteVersion_args.prototype = {};
NoteStore_getNoteVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteVersion_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteVersion_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 3);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.withResourcesData !== null && this.withResourcesData !== undefined) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withResourcesData);
    output.writeFieldEnd();
  }
  if (this.withResourcesRecognition !== null && this.withResourcesRecognition !== undefined) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.withResourcesAlternateData !== null && this.withResourcesAlternateData !== undefined) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withResourcesAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteVersion_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteVersion_result.prototype = {};
NoteStore_getNoteVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Note();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteVersion_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResource_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.withData = null;
  this.withRecognition = null;
  this.withAttributes = null;
  this.withAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.withData !== undefined) {
      this.withData = args.withData;
    }
    if (args.withRecognition !== undefined) {
      this.withRecognition = args.withRecognition;
    }
    if (args.withAttributes !== undefined) {
      this.withAttributes = args.withAttributes;
    }
    if (args.withAlternateData !== undefined) {
      this.withAlternateData = args.withAlternateData;
    }
  }
};
NoteStore_getResource_args.prototype = {};
NoteStore_getResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResource_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResource_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.withData !== null && this.withData !== undefined) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 3);
    output.writeBool(this.withData);
    output.writeFieldEnd();
  }
  if (this.withRecognition !== null && this.withRecognition !== undefined) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 4);
    output.writeBool(this.withRecognition);
    output.writeFieldEnd();
  }
  if (this.withAttributes !== null && this.withAttributes !== undefined) {
    output.writeFieldBegin('withAttributes', Thrift.Type.BOOL, 5);
    output.writeBool(this.withAttributes);
    output.writeFieldEnd();
  }
  if (this.withAlternateData !== null && this.withAlternateData !== undefined) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResource_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResource_result.prototype = {};
NoteStore_getResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Resource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResource_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceApplicationData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceApplicationData_args.prototype = {};
NoteStore_getResourceApplicationData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationData_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceApplicationData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceApplicationData_result.prototype = {};
NoteStore_getResourceApplicationData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LazyMap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationData_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
NoteStore_getResourceApplicationDataEntry_args.prototype = {};
NoteStore_getResourceApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceApplicationDataEntry_result.prototype = {};
NoteStore_getResourceApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
NoteStore_setResourceApplicationDataEntry_args.prototype = {};
NoteStore_setResourceApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_setResourceApplicationDataEntry_result.prototype = {};
NoteStore_setResourceApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
NoteStore_unsetResourceApplicationDataEntry_args.prototype = {};
NoteStore_unsetResourceApplicationDataEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unsetResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_unsetResourceApplicationDataEntry_result.prototype = {};
NoteStore_unsetResourceApplicationDataEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unsetResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateResource_args = function(args) {
  this.authenticationToken = null;
  this.resource = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
NoteStore_updateResource_args.prototype = {};
NoteStore_updateResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new Resource();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateResource_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateResource_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateResource_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateResource_result.prototype = {};
NoteStore_updateResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateResource_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceData_args.prototype = {};
NoteStore_getResourceData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceData_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceData_result.prototype = {};
NoteStore_getResourceData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceData_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceByHash_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.contentHash = null;
  this.withData = null;
  this.withRecognition = null;
  this.withAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.contentHash !== undefined) {
      this.contentHash = args.contentHash;
    }
    if (args.withData !== undefined) {
      this.withData = args.withData;
    }
    if (args.withRecognition !== undefined) {
      this.withRecognition = args.withRecognition;
    }
    if (args.withAlternateData !== undefined) {
      this.withAlternateData = args.withAlternateData;
    }
  }
};
NoteStore_getResourceByHash_args.prototype = {};
NoteStore_getResourceByHash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceByHash_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceByHash_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.contentHash !== null && this.contentHash !== undefined) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 3);
    output.writeBinary(this.contentHash);
    output.writeFieldEnd();
  }
  if (this.withData !== null && this.withData !== undefined) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withData);
    output.writeFieldEnd();
  }
  if (this.withRecognition !== null && this.withRecognition !== undefined) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withRecognition);
    output.writeFieldEnd();
  }
  if (this.withAlternateData !== null && this.withAlternateData !== undefined) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceByHash_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceByHash_result.prototype = {};
NoteStore_getResourceByHash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Resource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceByHash_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceByHash_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceRecognition_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceRecognition_args.prototype = {};
NoteStore_getResourceRecognition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceRecognition_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceRecognition_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceRecognition_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceRecognition_result.prototype = {};
NoteStore_getResourceRecognition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceRecognition_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceRecognition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceAlternateData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceAlternateData_args.prototype = {};
NoteStore_getResourceAlternateData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAlternateData_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceAlternateData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceAlternateData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceAlternateData_result.prototype = {};
NoteStore_getResourceAlternateData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAlternateData_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceAlternateData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceAttributes_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceAttributes_args.prototype = {};
NoteStore_getResourceAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceAttributes_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getResourceAttributes_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceAttributes_result.prototype = {};
NoteStore_getResourceAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResourceAttributes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getResourceAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getAds_args = function(args) {
  this.authenticationToken = null;
  this.adParameters = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.adParameters !== undefined) {
      this.adParameters = args.adParameters;
    }
  }
};
NoteStore_getAds_args.prototype = {};
NoteStore_getAds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.adParameters = new AdParameters();
        this.adParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getAds_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getAds_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.adParameters !== null && this.adParameters !== undefined) {
    output.writeFieldBegin('adParameters', Thrift.Type.STRUCT, 2);
    this.adParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getAds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getAds_result.prototype = {};
NoteStore_getAds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size468 = 0;
        var _rtmp3472;
        this.success = [];
        var _etype471 = 0;
        _rtmp3472 = input.readListBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = new Ad();
          elem474.read(input);
          this.success.push(elem474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getAds_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getAds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter475 in this.success)
    {
      if (this.success.hasOwnProperty(iter475))
      {
        iter475 = this.success[iter475];
        iter475.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getRandomAd_args = function(args) {
  this.authenticationToken = null;
  this.adParameters = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.adParameters !== undefined) {
      this.adParameters = args.adParameters;
    }
  }
};
NoteStore_getRandomAd_args.prototype = {};
NoteStore_getRandomAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.adParameters = new AdParameters();
        this.adParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getRandomAd_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getRandomAd_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.adParameters !== null && this.adParameters !== undefined) {
    output.writeFieldBegin('adParameters', Thrift.Type.STRUCT, 2);
    this.adParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getRandomAd_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getRandomAd_result.prototype = {};
NoteStore_getRandomAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Ad();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getRandomAd_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getRandomAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getPublicNotebook_args = function(args) {
  this.userId = null;
  this.publicUri = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.publicUri !== undefined) {
      this.publicUri = args.publicUri;
    }
  }
};
NoteStore_getPublicNotebook_args.prototype = {};
NoteStore_getPublicNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.publicUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPublicNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getPublicNotebook_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.publicUri !== null && this.publicUri !== undefined) {
    output.writeFieldBegin('publicUri', Thrift.Type.STRING, 2);
    output.writeString(this.publicUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getPublicNotebook_result = function(args) {
  this.success = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getPublicNotebook_result.prototype = {};
NoteStore_getPublicNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPublicNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getPublicNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createSharedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebook !== undefined) {
      this.sharedNotebook = args.sharedNotebook;
    }
  }
};
NoteStore_createSharedNotebook_args.prototype = {};
NoteStore_createSharedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new SharedNotebook();
        this.sharedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSharedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createSharedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebook !== null && this.sharedNotebook !== undefined) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2);
    this.sharedNotebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createSharedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createSharedNotebook_result.prototype = {};
NoteStore_createSharedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SharedNotebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSharedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createSharedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNotebook_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebook = null;
  this.message = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebook !== undefined) {
      this.sharedNotebook = args.sharedNotebook;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteStore_shareNotebook_args.prototype = {};
NoteStore_shareNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new SharedNotebook();
        this.sharedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebook !== null && this.sharedNotebook !== undefined) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2);
    this.sharedNotebook.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_shareNotebook_result.prototype = {};
NoteStore_shareNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SharedNotebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateSharedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebook !== undefined) {
      this.sharedNotebook = args.sharedNotebook;
    }
  }
};
NoteStore_updateSharedNotebook_args.prototype = {};
NoteStore_updateSharedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new SharedNotebook();
        this.sharedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSharedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateSharedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebook !== null && this.sharedNotebook !== undefined) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2);
    this.sharedNotebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateSharedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateSharedNotebook_result.prototype = {};
NoteStore_updateSharedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSharedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateSharedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setSharedNotebookRecipientSettings_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebookId = null;
  this.recipientSettings = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebookId !== undefined) {
      this.sharedNotebookId = args.sharedNotebookId;
    }
    if (args.recipientSettings !== undefined) {
      this.recipientSettings = args.recipientSettings;
    }
  }
};
NoteStore_setSharedNotebookRecipientSettings_args.prototype = {};
NoteStore_setSharedNotebookRecipientSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sharedNotebookId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientSettings = new SharedNotebookRecipientSettings();
        this.recipientSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setSharedNotebookRecipientSettings_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setSharedNotebookRecipientSettings_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookId !== null && this.sharedNotebookId !== undefined) {
    output.writeFieldBegin('sharedNotebookId', Thrift.Type.I64, 2);
    output.writeI64(this.sharedNotebookId);
    output.writeFieldEnd();
  }
  if (this.recipientSettings !== null && this.recipientSettings !== undefined) {
    output.writeFieldBegin('recipientSettings', Thrift.Type.STRUCT, 3);
    this.recipientSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_setSharedNotebookRecipientSettings_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_setSharedNotebookRecipientSettings_result.prototype = {};
NoteStore_setSharedNotebookRecipientSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setSharedNotebookRecipientSettings_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_setSharedNotebookRecipientSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_sendMessageToSharedNotebookMembers_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  this.messageText = null;
  this.recipients = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.messageText !== undefined) {
      this.messageText = args.messageText;
    }
    if (args.recipients !== undefined) {
      this.recipients = args.recipients;
    }
  }
};
NoteStore_sendMessageToSharedNotebookMembers_args.prototype = {};
NoteStore_sendMessageToSharedNotebookMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.recipients = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = input.readString().value;
          this.recipients.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_sendMessageToSharedNotebookMembers_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_sendMessageToSharedNotebookMembers_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.messageText !== null && this.messageText !== undefined) {
    output.writeFieldBegin('messageText', Thrift.Type.STRING, 3);
    output.writeString(this.messageText);
    output.writeFieldEnd();
  }
  if (this.recipients !== null && this.recipients !== undefined) {
    output.writeFieldBegin('recipients', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.recipients.length);
    for (var iter483 in this.recipients)
    {
      if (this.recipients.hasOwnProperty(iter483))
      {
        iter483 = this.recipients[iter483];
        output.writeString(iter483);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_sendMessageToSharedNotebookMembers_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_sendMessageToSharedNotebookMembers_result.prototype = {};
NoteStore_sendMessageToSharedNotebookMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_sendMessageToSharedNotebookMembers_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_sendMessageToSharedNotebookMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listSharedNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listSharedNotebooks_args.prototype = {};
NoteStore_listSharedNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSharedNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listSharedNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listSharedNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listSharedNotebooks_result.prototype = {};
NoteStore_listSharedNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.success = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = new SharedNotebook();
          elem490.read(input);
          this.success.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSharedNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listSharedNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter491 in this.success)
    {
      if (this.success.hasOwnProperty(iter491))
      {
        iter491 = this.success[iter491];
        iter491.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeSharedNotebooks_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebookIds = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebookIds !== undefined) {
      this.sharedNotebookIds = args.sharedNotebookIds;
    }
  }
};
NoteStore_expungeSharedNotebooks_args.prototype = {};
NoteStore_expungeSharedNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.sharedNotebookIds = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = input.readI64().value;
          this.sharedNotebookIds.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSharedNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeSharedNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookIds !== null && this.sharedNotebookIds !== undefined) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length);
    for (var iter499 in this.sharedNotebookIds)
    {
      if (this.sharedNotebookIds.hasOwnProperty(iter499))
      {
        iter499 = this.sharedNotebookIds[iter499];
        output.writeI64(iter499);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeSharedNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_expungeSharedNotebooks_result.prototype = {};
NoteStore_expungeSharedNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSharedNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeSharedNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined) {
      this.linkedNotebook = args.linkedNotebook;
    }
  }
};
NoteStore_createLinkedNotebook_args.prototype = {};
NoteStore_createLinkedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new LinkedNotebook();
        this.linkedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createLinkedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_createLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createLinkedNotebook_result.prototype = {};
NoteStore_createLinkedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LinkedNotebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createLinkedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_createLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined) {
      this.linkedNotebook = args.linkedNotebook;
    }
  }
};
NoteStore_updateLinkedNotebook_args.prototype = {};
NoteStore_updateLinkedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new LinkedNotebook();
        this.linkedNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateLinkedNotebook_result.prototype = {};
NoteStore_updateLinkedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listLinkedNotebooks_args.prototype = {};
NoteStore_listLinkedNotebooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listLinkedNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listLinkedNotebooks_result.prototype = {};
NoteStore_listLinkedNotebooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.success = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = new LinkedNotebook();
          elem506.read(input);
          this.success.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_listLinkedNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter507 in this.success)
    {
      if (this.success.hasOwnProperty(iter507))
      {
        iter507 = this.success[iter507];
        iter507.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeLinkedNotebook_args.prototype = {};
NoteStore_expungeLinkedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_expungeLinkedNotebook_result.prototype = {};
NoteStore_expungeLinkedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_args = function(args) {
  this.shareKeyOrGlobalId = null;
  this.authenticationToken = null;
  if (args) {
    if (args.shareKeyOrGlobalId !== undefined) {
      this.shareKeyOrGlobalId = args.shareKeyOrGlobalId;
    }
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_authenticateToSharedNotebook_args.prototype = {};
NoteStore_authenticateToSharedNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shareKeyOrGlobalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_args');
  if (this.shareKeyOrGlobalId !== null && this.shareKeyOrGlobalId !== undefined) {
    output.writeFieldBegin('shareKeyOrGlobalId', Thrift.Type.STRING, 1);
    output.writeString(this.shareKeyOrGlobalId);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_authenticateToSharedNotebook_result.prototype = {};
NoteStore_authenticateToSharedNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getSharedNotebookByAuth_args.prototype = {};
NoteStore_getSharedNotebookByAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSharedNotebookByAuth_result.prototype = {};
NoteStore_getSharedNotebookByAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SharedNotebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_emailNote_args = function(args) {
  this.authenticationToken = null;
  this.parameters = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
NoteStore_emailNote_args.prototype = {};
NoteStore_emailNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new NoteEmailParameters();
        this.parameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_emailNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_emailNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2);
    this.parameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_emailNote_result = function(args) {
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_emailNote_result.prototype = {};
NoteStore_emailNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_emailNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_emailNote_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_shareNote_args.prototype = {};
NoteStore_shareNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_shareNote_result.prototype = {};
NoteStore_shareNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_stopSharingNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
  }
};
NoteStore_stopSharingNote_args.prototype = {};
NoteStore_stopSharingNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_stopSharingNote_result = function(args) {
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_stopSharingNote_result.prototype = {};
NoteStore_stopSharingNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNote_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_args = function(args) {
  this.guid = null;
  this.noteKey = null;
  this.authenticationToken = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.noteKey !== undefined) {
      this.noteKey = args.noteKey;
    }
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_authenticateToSharedNote_args.prototype = {};
NoteStore_authenticateToSharedNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNote_args');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteKey !== null && this.noteKey !== undefined) {
    output.writeFieldBegin('noteKey', Thrift.Type.STRING, 2);
    output.writeString(this.noteKey);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 3);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_authenticateToSharedNote_result.prototype = {};
NoteStore_authenticateToSharedNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findRelated_args = function(args) {
  this.authenticationToken = null;
  this.query = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.resultSpec !== undefined) {
      this.resultSpec = args.resultSpec;
    }
  }
};
NoteStore_findRelated_args.prototype = {};
NoteStore_findRelated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new RelatedQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new RelatedResultSpec();
        this.resultSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findRelated_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findRelated_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 3);
    this.resultSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findRelated_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findRelated_result.prototype = {};
NoteStore_findRelated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RelatedResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findRelated_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findRelated_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findSearchSuggestions_args = function(args) {
  this.authenticationToken = null;
  this.query = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.resultSpec !== undefined) {
      this.resultSpec = args.resultSpec;
    }
  }
};
NoteStore_findSearchSuggestions_args.prototype = {};
NoteStore_findSearchSuggestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new SearchSuggestionQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new SearchSuggestionResultSpec();
        this.resultSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findSearchSuggestions_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findSearchSuggestions_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 3);
    this.resultSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findSearchSuggestions_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findSearchSuggestions_result.prototype = {};
NoteStore_findSearchSuggestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchSuggestionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findSearchSuggestions_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findSearchSuggestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateUserSetting_args = function(args) {
  this.authenticationToken = null;
  this.setting = null;
  this.value = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.setting !== undefined) {
      this.setting = args.setting;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
NoteStore_updateUserSetting_args.prototype = {};
NoteStore_updateUserSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.setting = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateUserSetting_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateUserSetting_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.I32, 2);
    output.writeI32(this.setting);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateUserSetting_result = function(args) {
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateUserSetting_result.prototype = {};
NoteStore_updateUserSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateUserSetting_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateUserSetting_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findTimeZones_args = function(args) {
  this.authenticationToken = null;
  this.timeZoneSpec = null;
  this.maxTimeZones = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.timeZoneSpec !== undefined) {
      this.timeZoneSpec = args.timeZoneSpec;
    }
    if (args.maxTimeZones !== undefined) {
      this.maxTimeZones = args.maxTimeZones;
    }
  }
};
NoteStore_findTimeZones_args.prototype = {};
NoteStore_findTimeZones_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeZoneSpec = new TimeZoneSpec();
        this.timeZoneSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTimeZones = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findTimeZones_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findTimeZones_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.timeZoneSpec !== null && this.timeZoneSpec !== undefined) {
    output.writeFieldBegin('timeZoneSpec', Thrift.Type.STRUCT, 2);
    this.timeZoneSpec.write(output);
    output.writeFieldEnd();
  }
  if (this.maxTimeZones !== null && this.maxTimeZones !== undefined) {
    output.writeFieldBegin('maxTimeZones', Thrift.Type.I32, 3);
    output.writeI32(this.maxTimeZones);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findTimeZones_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_findTimeZones_result.prototype = {};
NoteStore_findTimeZones_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.success = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = new TimeZone();
          elem514.read(input);
          this.success.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findTimeZones_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findTimeZones_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter515 in this.success)
    {
      if (this.success.hasOwnProperty(iter515))
      {
        iter515 = this.success[iter515];
        iter515.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findContacts_args = function(args) {
  this.authenticationToken = null;
  this.query = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
NoteStore_findContacts_args.prototype = {};
NoteStore_findContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ContactsQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findContacts_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findContacts_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findContacts_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_findContacts_result.prototype = {};
NoteStore_findContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size516 = 0;
        var _rtmp3520;
        this.success = [];
        var _etype519 = 0;
        _rtmp3520 = input.readListBegin();
        _etype519 = _rtmp3520.etype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var elem522 = null;
          elem522 = new Contact();
          elem522.read(input);
          this.success.push(elem522);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findContacts_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter523 in this.success)
    {
      if (this.success.hasOwnProperty(iter523))
      {
        iter523 = this.success[iter523];
        iter523.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findInBusiness_args = function(args) {
  this.authenticationToken = null;
  this.query = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
NoteStore_findInBusiness_args.prototype = {};
NoteStore_findInBusiness_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new BusinessQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findInBusiness_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findInBusiness_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_findInBusiness_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_findInBusiness_result.prototype = {};
NoteStore_findInBusiness_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BusinessQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findInBusiness_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_findInBusiness_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNoteWithBusiness_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_shareNoteWithBusiness_args.prototype = {};
NoteStore_shareNoteWithBusiness_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNoteWithBusiness_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNoteWithBusiness_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_shareNoteWithBusiness_result = function(args) {
  this.success = null;
  this.systemException = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_shareNoteWithBusiness_result.prototype = {};
NoteStore_shareNoteWithBusiness_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNoteWithBusiness_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_shareNoteWithBusiness_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_stopSharingNoteWithBusiness_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_stopSharingNoteWithBusiness_args.prototype = {};
NoteStore_stopSharingNoteWithBusiness_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNoteWithBusiness_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNoteWithBusiness_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_stopSharingNoteWithBusiness_result = function(args) {
  this.success = null;
  this.systemException = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_stopSharingNoteWithBusiness_result.prototype = {};
NoteStore_stopSharingNoteWithBusiness_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNoteWithBusiness_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNoteWithBusiness_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_requestAccessToNotebook_args = function(args) {
  this.authToken = null;
  this.notebookGuid = null;
  this.privilegeLevel = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.privilegeLevel !== undefined) {
      this.privilegeLevel = args.privilegeLevel;
    }
  }
};
NoteStore_requestAccessToNotebook_args.prototype = {};
NoteStore_requestAccessToNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilegeLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_requestAccessToNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_requestAccessToNotebook_args');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.privilegeLevel !== null && this.privilegeLevel !== undefined) {
    output.writeFieldBegin('privilegeLevel', Thrift.Type.I32, 3);
    output.writeI32(this.privilegeLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_requestAccessToNotebook_result = function(args) {
  this.systemException = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_requestAccessToNotebook_result.prototype = {};
NoteStore_requestAccessToNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_requestAccessToNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_requestAccessToNotebook_result');
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteLockStatus_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_getNoteLockStatus_args.prototype = {};
NoteStore_getNoteLockStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteLockStatus_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteLockStatus_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNoteLockStatus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getNoteLockStatus_result.prototype = {};
NoteStore_getNoteLockStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NoteLockStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteLockStatus_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNoteLockStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_acquireNoteLock_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_acquireNoteLock_args.prototype = {};
NoteStore_acquireNoteLock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_acquireNoteLock_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_acquireNoteLock_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_acquireNoteLock_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_acquireNoteLock_result.prototype = {};
NoteStore_acquireNoteLock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NoteLockStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_acquireNoteLock_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_acquireNoteLock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_releaseNoteLock_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_releaseNoteLock_args.prototype = {};
NoteStore_releaseNoteLock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_releaseNoteLock_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_releaseNoteLock_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_releaseNoteLock_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_releaseNoteLock_result.prototype = {};
NoteStore_releaseNoteLock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NoteLockStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_releaseNoteLock_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_releaseNoteLock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
  }
};
NoteStore_updateNoteIfUsnMatches_args.prototype = {};
NoteStore_updateNoteIfUsnMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNoteIfUsnMatches_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateNoteIfUsnMatches_result.prototype = {};
NoteStore_updateNoteIfUsnMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UpdateNoteIfUsnMatchesResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_updateNoteIfUsnMatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_manageNotebookShares_args = function(args) {
  this.authenticationToken = null;
  this.parameters = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
NoteStore_manageNotebookShares_args.prototype = {};
NoteStore_manageNotebookShares_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ManageNotebookSharesParameters();
        this.parameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_manageNotebookShares_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_manageNotebookShares_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2);
    this.parameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_manageNotebookShares_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_manageNotebookShares_result.prototype = {};
NoteStore_manageNotebookShares_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ManageNotebookSharesResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_manageNotebookShares_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_manageNotebookShares_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebookShares_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
  }
};
NoteStore_getNotebookShares_args.prototype = {};
NoteStore_getNotebookShares_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookShares_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebookShares_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebookShares_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getNotebookShares_result.prototype = {};
NoteStore_getNotebookShares_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ShareRelationships();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookShares_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebookShares_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_joinPublishedBusinessNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
  }
};
NoteStore_joinPublishedBusinessNotebook_args.prototype = {};
NoteStore_joinPublishedBusinessNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_joinPublishedBusinessNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_joinPublishedBusinessNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_joinPublishedBusinessNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_joinPublishedBusinessNotebook_result.prototype = {};
NoteStore_joinPublishedBusinessNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SharedNotebook();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_joinPublishedBusinessNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_joinPublishedBusinessNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unpublishNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  this.convertGroupSharesToIndividual = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.convertGroupSharesToIndividual !== undefined) {
      this.convertGroupSharesToIndividual = args.convertGroupSharesToIndividual;
    }
  }
};
NoteStore_unpublishNotebook_args.prototype = {};
NoteStore_unpublishNotebook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.convertGroupSharesToIndividual = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unpublishNotebook_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unpublishNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.convertGroupSharesToIndividual !== null && this.convertGroupSharesToIndividual !== undefined) {
    output.writeFieldBegin('convertGroupSharesToIndividual', Thrift.Type.BOOL, 3);
    output.writeBool(this.convertGroupSharesToIndividual);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_unpublishNotebook_result = function(args) {
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_unpublishNotebook_result.prototype = {};
NoteStore_unpublishNotebook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unpublishNotebook_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_unpublishNotebook_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebookSharesEmailAddresses_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  this.identities = null;
  this.skipUnknownUserIdentities = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.identities !== undefined) {
      this.identities = args.identities;
    }
    if (args.skipUnknownUserIdentities !== undefined) {
      this.skipUnknownUserIdentities = args.skipUnknownUserIdentities;
    }
  }
};
NoteStore_getNotebookSharesEmailAddresses_args.prototype = {};
NoteStore_getNotebookSharesEmailAddresses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.identities = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = new UserIdentity();
          elem530.read(input);
          this.identities.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.skipUnknownUserIdentities = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookSharesEmailAddresses_args.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebookSharesEmailAddresses_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.identities !== null && this.identities !== undefined) {
    output.writeFieldBegin('identities', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.identities.length);
    for (var iter531 in this.identities)
    {
      if (this.identities.hasOwnProperty(iter531))
      {
        iter531 = this.identities[iter531];
        iter531.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skipUnknownUserIdentities !== null && this.skipUnknownUserIdentities !== undefined) {
    output.writeFieldBegin('skipUnknownUserIdentities', Thrift.Type.BOOL, 4);
    output.writeBool(this.skipUnknownUserIdentities);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStore_getNotebookSharesEmailAddresses_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getNotebookSharesEmailAddresses_result.prototype = {};
NoteStore_getNotebookSharesEmailAddresses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size532 = 0;
        var _rtmp3536;
        this.success = [];
        var _etype535 = 0;
        _rtmp3536 = input.readSetBegin();
        _etype535 = _rtmp3536.etype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          var elem538 = null;
          elem538 = input.readString().value;
          this.success.push(elem538);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookSharesEmailAddresses_result.prototype.write = function(output) {
  output.writeStructBegin('NoteStore_getNotebookSharesEmailAddresses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter539 in this.success)
    {
      if (this.success.hasOwnProperty(iter539))
      {
        iter539 = this.success[iter539];
        output.writeString(iter539);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStoreClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
NoteStoreClient.prototype = {};
NoteStoreClient.prototype.getSyncState = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getSyncState(authenticationToken);
    return this.recv_getSyncState();
  } else {
    var postData = this.send_getSyncState(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getSyncState);
  }
};

NoteStoreClient.prototype.send_getSyncState = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getSyncState', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getSyncState_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getSyncState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getSyncState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSyncState failed: unknown result';
};
NoteStoreClient.prototype.getSyncStateWithMetrics = function(authenticationToken, clientMetrics, callback) {
  if (callback === undefined) {
    this.send_getSyncStateWithMetrics(authenticationToken, clientMetrics);
    return this.recv_getSyncStateWithMetrics();
  } else {
    var postData = this.send_getSyncStateWithMetrics(authenticationToken, clientMetrics, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getSyncStateWithMetrics);
  }
};

NoteStoreClient.prototype.send_getSyncStateWithMetrics = function(authenticationToken, clientMetrics, callback) {
  this.output.writeMessageBegin('getSyncStateWithMetrics', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getSyncStateWithMetrics_args();
  args.authenticationToken = authenticationToken;
  args.clientMetrics = clientMetrics;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getSyncStateWithMetrics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getSyncStateWithMetrics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSyncStateWithMetrics failed: unknown result';
};
NoteStoreClient.prototype.getSyncChunk = function(authenticationToken, afterUSN, maxEntries, fullSyncOnly, callback) {
  if (callback === undefined) {
    this.send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly);
    return this.recv_getSyncChunk();
  } else {
    var postData = this.send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getSyncChunk);
  }
};

NoteStoreClient.prototype.send_getSyncChunk = function(authenticationToken, afterUSN, maxEntries, fullSyncOnly, callback) {
  this.output.writeMessageBegin('getSyncChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getSyncChunk_args();
  args.authenticationToken = authenticationToken;
  args.afterUSN = afterUSN;
  args.maxEntries = maxEntries;
  args.fullSyncOnly = fullSyncOnly;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getSyncChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getSyncChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSyncChunk failed: unknown result';
};
NoteStoreClient.prototype.getFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter, callback) {
  if (callback === undefined) {
    this.send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter);
    return this.recv_getFilteredSyncChunk();
  } else {
    var postData = this.send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getFilteredSyncChunk);
  }
};

NoteStoreClient.prototype.send_getFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter, callback) {
  this.output.writeMessageBegin('getFilteredSyncChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getFilteredSyncChunk_args();
  args.authenticationToken = authenticationToken;
  args.afterUSN = afterUSN;
  args.maxEntries = maxEntries;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getFilteredSyncChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getFilteredSyncChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFilteredSyncChunk failed: unknown result';
};
NoteStoreClient.prototype.toBeGetFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter, callback) {
  if (callback === undefined) {
    this.send_toBeGetFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter);
    return this.recv_toBeGetFilteredSyncChunk();
  } else {
    var postData = this.send_toBeGetFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_toBeGetFilteredSyncChunk);
  }
};

NoteStoreClient.prototype.send_toBeGetFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter, callback) {
  this.output.writeMessageBegin('toBeGetFilteredSyncChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_toBeGetFilteredSyncChunk_args();
  args.authenticationToken = authenticationToken;
  args.afterUSN = afterUSN;
  args.maxEntries = maxEntries;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_toBeGetFilteredSyncChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_toBeGetFilteredSyncChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'toBeGetFilteredSyncChunk failed: unknown result';
};
NoteStoreClient.prototype.getLinkedNotebookSyncState = function(authenticationToken, linkedNotebook, callback) {
  if (callback === undefined) {
    this.send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
    return this.recv_getLinkedNotebookSyncState();
  } else {
    var postData = this.send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getLinkedNotebookSyncState);
  }
};

NoteStoreClient.prototype.send_getLinkedNotebookSyncState = function(authenticationToken, linkedNotebook, callback) {
  this.output.writeMessageBegin('getLinkedNotebookSyncState', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getLinkedNotebookSyncState_args();
  args.authenticationToken = authenticationToken;
  args.linkedNotebook = linkedNotebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getLinkedNotebookSyncState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getLinkedNotebookSyncState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLinkedNotebookSyncState failed: unknown result';
};
NoteStoreClient.prototype.getLinkedNotebookSyncChunk = function(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly, callback) {
  if (callback === undefined) {
    this.send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
    return this.recv_getLinkedNotebookSyncChunk();
  } else {
    var postData = this.send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getLinkedNotebookSyncChunk);
  }
};

NoteStoreClient.prototype.send_getLinkedNotebookSyncChunk = function(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly, callback) {
  this.output.writeMessageBegin('getLinkedNotebookSyncChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getLinkedNotebookSyncChunk_args();
  args.authenticationToken = authenticationToken;
  args.linkedNotebook = linkedNotebook;
  args.afterUSN = afterUSN;
  args.maxEntries = maxEntries;
  args.fullSyncOnly = fullSyncOnly;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getLinkedNotebookSyncChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getLinkedNotebookSyncChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLinkedNotebookSyncChunk failed: unknown result';
};
NoteStoreClient.prototype.listNotebooks = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listNotebooks(authenticationToken);
    return this.recv_listNotebooks();
  } else {
    var postData = this.send_listNotebooks(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listNotebooks);
  }
};

NoteStoreClient.prototype.send_listNotebooks = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listNotebooks failed: unknown result';
};
NoteStoreClient.prototype.listPublishedBusinessNotebooks = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listPublishedBusinessNotebooks(authenticationToken);
    return this.recv_listPublishedBusinessNotebooks();
  } else {
    var postData = this.send_listPublishedBusinessNotebooks(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listPublishedBusinessNotebooks);
  }
};

NoteStoreClient.prototype.send_listPublishedBusinessNotebooks = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listPublishedBusinessNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listPublishedBusinessNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listPublishedBusinessNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listPublishedBusinessNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listPublishedBusinessNotebooks failed: unknown result';
};
NoteStoreClient.prototype.listAccessibleBusinessNotebooks = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listAccessibleBusinessNotebooks(authenticationToken);
    return this.recv_listAccessibleBusinessNotebooks();
  } else {
    var postData = this.send_listAccessibleBusinessNotebooks(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listAccessibleBusinessNotebooks);
  }
};

NoteStoreClient.prototype.send_listAccessibleBusinessNotebooks = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listAccessibleBusinessNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listAccessibleBusinessNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listAccessibleBusinessNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listAccessibleBusinessNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listAccessibleBusinessNotebooks failed: unknown result';
};
NoteStoreClient.prototype.getNotebook = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getNotebook(authenticationToken, guid);
    return this.recv_getNotebook();
  } else {
    var postData = this.send_getNotebook(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNotebook);
  }
};

NoteStoreClient.prototype.send_getNotebook = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNotebook_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotebook failed: unknown result';
};
NoteStoreClient.prototype.getDefaultNotebook = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getDefaultNotebook(authenticationToken);
    return this.recv_getDefaultNotebook();
  } else {
    var postData = this.send_getDefaultNotebook(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getDefaultNotebook);
  }
};

NoteStoreClient.prototype.send_getDefaultNotebook = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getDefaultNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getDefaultNotebook_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getDefaultNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getDefaultNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDefaultNotebook failed: unknown result';
};
NoteStoreClient.prototype.createNotebook = function(authenticationToken, notebook, callback) {
  if (callback === undefined) {
    this.send_createNotebook(authenticationToken, notebook);
    return this.recv_createNotebook();
  } else {
    var postData = this.send_createNotebook(authenticationToken, notebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createNotebook);
  }
};

NoteStoreClient.prototype.send_createNotebook = function(authenticationToken, notebook, callback) {
  this.output.writeMessageBegin('createNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createNotebook_args();
  args.authenticationToken = authenticationToken;
  args.notebook = notebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createNotebook failed: unknown result';
};
NoteStoreClient.prototype.updateNotebook = function(authenticationToken, notebook, callback) {
  if (callback === undefined) {
    this.send_updateNotebook(authenticationToken, notebook);
    return this.recv_updateNotebook();
  } else {
    var postData = this.send_updateNotebook(authenticationToken, notebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateNotebook);
  }
};

NoteStoreClient.prototype.send_updateNotebook = function(authenticationToken, notebook, callback) {
  this.output.writeMessageBegin('updateNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateNotebook_args();
  args.authenticationToken = authenticationToken;
  args.notebook = notebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateNotebook failed: unknown result';
};
NoteStoreClient.prototype.expungeNotebook = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_expungeNotebook(authenticationToken, guid);
    return this.recv_expungeNotebook();
  } else {
    var postData = this.send_expungeNotebook(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeNotebook);
  }
};

NoteStoreClient.prototype.send_expungeNotebook = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('expungeNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeNotebook_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeNotebook failed: unknown result';
};
NoteStoreClient.prototype.listTags = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listTags(authenticationToken);
    return this.recv_listTags();
  } else {
    var postData = this.send_listTags(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listTags);
  }
};

NoteStoreClient.prototype.send_listTags = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listTags', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listTags_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listTags = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listTags_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listTags failed: unknown result';
};
NoteStoreClient.prototype.listTagsByNotebook = function(authenticationToken, notebookGuid, callback) {
  if (callback === undefined) {
    this.send_listTagsByNotebook(authenticationToken, notebookGuid);
    return this.recv_listTagsByNotebook();
  } else {
    var postData = this.send_listTagsByNotebook(authenticationToken, notebookGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listTagsByNotebook);
  }
};

NoteStoreClient.prototype.send_listTagsByNotebook = function(authenticationToken, notebookGuid, callback) {
  this.output.writeMessageBegin('listTagsByNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listTagsByNotebook_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listTagsByNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listTagsByNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listTagsByNotebook failed: unknown result';
};
NoteStoreClient.prototype.getTag = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getTag(authenticationToken, guid);
    return this.recv_getTag();
  } else {
    var postData = this.send_getTag(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getTag);
  }
};

NoteStoreClient.prototype.send_getTag = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getTag', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getTag_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTag failed: unknown result';
};
NoteStoreClient.prototype.createTag = function(authenticationToken, tag, callback) {
  if (callback === undefined) {
    this.send_createTag(authenticationToken, tag);
    return this.recv_createTag();
  } else {
    var postData = this.send_createTag(authenticationToken, tag, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createTag);
  }
};

NoteStoreClient.prototype.send_createTag = function(authenticationToken, tag, callback) {
  this.output.writeMessageBegin('createTag', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createTag_args();
  args.authenticationToken = authenticationToken;
  args.tag = tag;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createTag failed: unknown result';
};
NoteStoreClient.prototype.updateTag = function(authenticationToken, tag, callback) {
  if (callback === undefined) {
    this.send_updateTag(authenticationToken, tag);
    return this.recv_updateTag();
  } else {
    var postData = this.send_updateTag(authenticationToken, tag, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateTag);
  }
};

NoteStoreClient.prototype.send_updateTag = function(authenticationToken, tag, callback) {
  this.output.writeMessageBegin('updateTag', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateTag_args();
  args.authenticationToken = authenticationToken;
  args.tag = tag;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTag failed: unknown result';
};
NoteStoreClient.prototype.untagAll = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_untagAll(authenticationToken, guid);
    this.recv_untagAll();
  } else {
    var postData = this.send_untagAll(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_untagAll);
  }
};

NoteStoreClient.prototype.send_untagAll = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('untagAll', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_untagAll_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_untagAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_untagAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  return;
};
NoteStoreClient.prototype.expungeTag = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_expungeTag(authenticationToken, guid);
    return this.recv_expungeTag();
  } else {
    var postData = this.send_expungeTag(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeTag);
  }
};

NoteStoreClient.prototype.send_expungeTag = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('expungeTag', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeTag_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeTag failed: unknown result';
};
NoteStoreClient.prototype.listSearches = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listSearches(authenticationToken);
    return this.recv_listSearches();
  } else {
    var postData = this.send_listSearches(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listSearches);
  }
};

NoteStoreClient.prototype.send_listSearches = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listSearches', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listSearches_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listSearches = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listSearches_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listSearches failed: unknown result';
};
NoteStoreClient.prototype.getSearch = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getSearch(authenticationToken, guid);
    return this.recv_getSearch();
  } else {
    var postData = this.send_getSearch(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getSearch);
  }
};

NoteStoreClient.prototype.send_getSearch = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getSearch', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getSearch_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getSearch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getSearch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearch failed: unknown result';
};
NoteStoreClient.prototype.createSearch = function(authenticationToken, search, callback) {
  if (callback === undefined) {
    this.send_createSearch(authenticationToken, search);
    return this.recv_createSearch();
  } else {
    var postData = this.send_createSearch(authenticationToken, search, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createSearch);
  }
};

NoteStoreClient.prototype.send_createSearch = function(authenticationToken, search, callback) {
  this.output.writeMessageBegin('createSearch', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createSearch_args();
  args.authenticationToken = authenticationToken;
  args.search = search;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createSearch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createSearch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createSearch failed: unknown result';
};
NoteStoreClient.prototype.updateSearch = function(authenticationToken, search, callback) {
  if (callback === undefined) {
    this.send_updateSearch(authenticationToken, search);
    return this.recv_updateSearch();
  } else {
    var postData = this.send_updateSearch(authenticationToken, search, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateSearch);
  }
};

NoteStoreClient.prototype.send_updateSearch = function(authenticationToken, search, callback) {
  this.output.writeMessageBegin('updateSearch', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateSearch_args();
  args.authenticationToken = authenticationToken;
  args.search = search;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateSearch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateSearch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSearch failed: unknown result';
};
NoteStoreClient.prototype.expungeSearch = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_expungeSearch(authenticationToken, guid);
    return this.recv_expungeSearch();
  } else {
    var postData = this.send_expungeSearch(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeSearch);
  }
};

NoteStoreClient.prototype.send_expungeSearch = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('expungeSearch', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeSearch_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeSearch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeSearch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeSearch failed: unknown result';
};
NoteStoreClient.prototype.findNotes = function(authenticationToken, filter, offset, maxNotes, callback) {
  if (callback === undefined) {
    this.send_findNotes(authenticationToken, filter, offset, maxNotes);
    return this.recv_findNotes();
  } else {
    var postData = this.send_findNotes(authenticationToken, filter, offset, maxNotes, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findNotes);
  }
};

NoteStoreClient.prototype.send_findNotes = function(authenticationToken, filter, offset, maxNotes, callback) {
  this.output.writeMessageBegin('findNotes', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findNotes_args();
  args.authenticationToken = authenticationToken;
  args.filter = filter;
  args.offset = offset;
  args.maxNotes = maxNotes;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findNotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findNotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findNotes failed: unknown result';
};
NoteStoreClient.prototype.findNoteOffset = function(authenticationToken, filter, guid, callback) {
  if (callback === undefined) {
    this.send_findNoteOffset(authenticationToken, filter, guid);
    return this.recv_findNoteOffset();
  } else {
    var postData = this.send_findNoteOffset(authenticationToken, filter, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findNoteOffset);
  }
};

NoteStoreClient.prototype.send_findNoteOffset = function(authenticationToken, filter, guid, callback) {
  this.output.writeMessageBegin('findNoteOffset', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findNoteOffset_args();
  args.authenticationToken = authenticationToken;
  args.filter = filter;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findNoteOffset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findNoteOffset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findNoteOffset failed: unknown result';
};
NoteStoreClient.prototype.findNotesMetadata = function(authenticationToken, filter, offset, maxNotes, resultSpec, callback) {
  if (callback === undefined) {
    this.send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
    return this.recv_findNotesMetadata();
  } else {
    var postData = this.send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findNotesMetadata);
  }
};

NoteStoreClient.prototype.send_findNotesMetadata = function(authenticationToken, filter, offset, maxNotes, resultSpec, callback) {
  this.output.writeMessageBegin('findNotesMetadata', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findNotesMetadata_args();
  args.authenticationToken = authenticationToken;
  args.filter = filter;
  args.offset = offset;
  args.maxNotes = maxNotes;
  args.resultSpec = resultSpec;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findNotesMetadata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findNotesMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findNotesMetadata failed: unknown result';
};
NoteStoreClient.prototype.findNoteCounts = function(authenticationToken, filter, withTrash, callback) {
  if (callback === undefined) {
    this.send_findNoteCounts(authenticationToken, filter, withTrash);
    return this.recv_findNoteCounts();
  } else {
    var postData = this.send_findNoteCounts(authenticationToken, filter, withTrash, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findNoteCounts);
  }
};

NoteStoreClient.prototype.send_findNoteCounts = function(authenticationToken, filter, withTrash, callback) {
  this.output.writeMessageBegin('findNoteCounts', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findNoteCounts_args();
  args.authenticationToken = authenticationToken;
  args.filter = filter;
  args.withTrash = withTrash;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findNoteCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findNoteCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findNoteCounts failed: unknown result';
};
NoteStoreClient.prototype.getNote = function(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  if (callback === undefined) {
    this.send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
    return this.recv_getNote();
  } else {
    var postData = this.send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNote);
  }
};

NoteStoreClient.prototype.send_getNote = function(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  this.output.writeMessageBegin('getNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNote_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.withContent = withContent;
  args.withResourcesData = withResourcesData;
  args.withResourcesRecognition = withResourcesRecognition;
  args.withResourcesAlternateData = withResourcesAlternateData;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNote failed: unknown result';
};
NoteStoreClient.prototype.getPreferences = function(authenticationToken, preferenceNames, callback) {
  if (callback === undefined) {
    this.send_getPreferences(authenticationToken, preferenceNames);
    return this.recv_getPreferences();
  } else {
    var postData = this.send_getPreferences(authenticationToken, preferenceNames, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getPreferences);
  }
};

NoteStoreClient.prototype.send_getPreferences = function(authenticationToken, preferenceNames, callback) {
  this.output.writeMessageBegin('getPreferences', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getPreferences_args();
  args.authenticationToken = authenticationToken;
  args.preferenceNames = preferenceNames;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getPreferences = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getPreferences_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPreferences failed: unknown result';
};
NoteStoreClient.prototype.updatePreferences = function(authenticationToken, preferencesToUpdate, callback) {
  if (callback === undefined) {
    this.send_updatePreferences(authenticationToken, preferencesToUpdate);
    return this.recv_updatePreferences();
  } else {
    var postData = this.send_updatePreferences(authenticationToken, preferencesToUpdate, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updatePreferences);
  }
};

NoteStoreClient.prototype.send_updatePreferences = function(authenticationToken, preferencesToUpdate, callback) {
  this.output.writeMessageBegin('updatePreferences', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updatePreferences_args();
  args.authenticationToken = authenticationToken;
  args.preferencesToUpdate = preferencesToUpdate;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updatePreferences = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updatePreferences_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePreferences failed: unknown result';
};
NoteStoreClient.prototype.getNoteApplicationData = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getNoteApplicationData(authenticationToken, guid);
    return this.recv_getNoteApplicationData();
  } else {
    var postData = this.send_getNoteApplicationData(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteApplicationData);
  }
};

NoteStoreClient.prototype.send_getNoteApplicationData = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getNoteApplicationData', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteApplicationData_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteApplicationData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteApplicationData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteApplicationData failed: unknown result';
};
NoteStoreClient.prototype.getNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  if (callback === undefined) {
    this.send_getNoteApplicationDataEntry(authenticationToken, guid, key);
    return this.recv_getNoteApplicationDataEntry();
  } else {
    var postData = this.send_getNoteApplicationDataEntry(authenticationToken, guid, key, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_getNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this.output.writeMessageBegin('getNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.setNoteApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  if (callback === undefined) {
    this.send_setNoteApplicationDataEntry(authenticationToken, guid, key, value);
    return this.recv_setNoteApplicationDataEntry();
  } else {
    var postData = this.send_setNoteApplicationDataEntry(authenticationToken, guid, key, value, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_setNoteApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_setNoteApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  this.output.writeMessageBegin('setNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_setNoteApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_setNoteApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_setNoteApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setNoteApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.unsetNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  if (callback === undefined) {
    this.send_unsetNoteApplicationDataEntry(authenticationToken, guid, key);
    return this.recv_unsetNoteApplicationDataEntry();
  } else {
    var postData = this.send_unsetNoteApplicationDataEntry(authenticationToken, guid, key, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_unsetNoteApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_unsetNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this.output.writeMessageBegin('unsetNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_unsetNoteApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_unsetNoteApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_unsetNoteApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'unsetNoteApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.getNoteContent = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getNoteContent(authenticationToken, guid);
    return this.recv_getNoteContent();
  } else {
    var postData = this.send_getNoteContent(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteContent);
  }
};

NoteStoreClient.prototype.send_getNoteContent = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getNoteContent', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteContent_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteContent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteContent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteContent failed: unknown result';
};
NoteStoreClient.prototype.getNoteSearchText = function(authenticationToken, guid, noteOnly, tokenizeForIndexing, callback) {
  if (callback === undefined) {
    this.send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
    return this.recv_getNoteSearchText();
  } else {
    var postData = this.send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteSearchText);
  }
};

NoteStoreClient.prototype.send_getNoteSearchText = function(authenticationToken, guid, noteOnly, tokenizeForIndexing, callback) {
  this.output.writeMessageBegin('getNoteSearchText', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteSearchText_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.noteOnly = noteOnly;
  args.tokenizeForIndexing = tokenizeForIndexing;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteSearchText = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteSearchText_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteSearchText failed: unknown result';
};
NoteStoreClient.prototype.getResourceSearchText = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceSearchText(authenticationToken, guid);
    return this.recv_getResourceSearchText();
  } else {
    var postData = this.send_getResourceSearchText(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceSearchText);
  }
};

NoteStoreClient.prototype.send_getResourceSearchText = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceSearchText', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceSearchText_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceSearchText = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceSearchText_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceSearchText failed: unknown result';
};
NoteStoreClient.prototype.getNoteTagNames = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getNoteTagNames(authenticationToken, guid);
    return this.recv_getNoteTagNames();
  } else {
    var postData = this.send_getNoteTagNames(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteTagNames);
  }
};

NoteStoreClient.prototype.send_getNoteTagNames = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getNoteTagNames', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteTagNames_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteTagNames = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteTagNames_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteTagNames failed: unknown result';
};
NoteStoreClient.prototype.createNote = function(authenticationToken, note, callback) {
  if (callback === undefined) {
    this.send_createNote(authenticationToken, note);
    return this.recv_createNote();
  } else {
    var postData = this.send_createNote(authenticationToken, note, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createNote);
  }
};

NoteStoreClient.prototype.send_createNote = function(authenticationToken, note, callback) {
  this.output.writeMessageBegin('createNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createNote_args();
  args.authenticationToken = authenticationToken;
  args.note = note;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createNote failed: unknown result';
};
NoteStoreClient.prototype.updateNote = function(authenticationToken, note, callback) {
  if (callback === undefined) {
    this.send_updateNote(authenticationToken, note);
    return this.recv_updateNote();
  } else {
    var postData = this.send_updateNote(authenticationToken, note, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateNote);
  }
};

NoteStoreClient.prototype.send_updateNote = function(authenticationToken, note, callback) {
  this.output.writeMessageBegin('updateNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateNote_args();
  args.authenticationToken = authenticationToken;
  args.note = note;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateNote failed: unknown result';
};
NoteStoreClient.prototype.deleteNote = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_deleteNote(authenticationToken, guid);
    return this.recv_deleteNote();
  } else {
    var postData = this.send_deleteNote(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_deleteNote);
  }
};

NoteStoreClient.prototype.send_deleteNote = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('deleteNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_deleteNote_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_deleteNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_deleteNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteNote failed: unknown result';
};
NoteStoreClient.prototype.expungeNote = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_expungeNote(authenticationToken, guid);
    return this.recv_expungeNote();
  } else {
    var postData = this.send_expungeNote(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeNote);
  }
};

NoteStoreClient.prototype.send_expungeNote = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('expungeNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeNote_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeNote failed: unknown result';
};
NoteStoreClient.prototype.expungeNotes = function(authenticationToken, noteGuids, callback) {
  if (callback === undefined) {
    this.send_expungeNotes(authenticationToken, noteGuids);
    return this.recv_expungeNotes();
  } else {
    var postData = this.send_expungeNotes(authenticationToken, noteGuids, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeNotes);
  }
};

NoteStoreClient.prototype.send_expungeNotes = function(authenticationToken, noteGuids, callback) {
  this.output.writeMessageBegin('expungeNotes', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeNotes_args();
  args.authenticationToken = authenticationToken;
  args.noteGuids = noteGuids;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeNotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeNotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeNotes failed: unknown result';
};
NoteStoreClient.prototype.expungeInactiveNotes = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_expungeInactiveNotes(authenticationToken);
    return this.recv_expungeInactiveNotes();
  } else {
    var postData = this.send_expungeInactiveNotes(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeInactiveNotes);
  }
};

NoteStoreClient.prototype.send_expungeInactiveNotes = function(authenticationToken, callback) {
  this.output.writeMessageBegin('expungeInactiveNotes', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeInactiveNotes_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeInactiveNotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeInactiveNotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeInactiveNotes failed: unknown result';
};
NoteStoreClient.prototype.copyNote = function(authenticationToken, noteGuid, toNotebookGuid, callback) {
  if (callback === undefined) {
    this.send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
    return this.recv_copyNote();
  } else {
    var postData = this.send_copyNote(authenticationToken, noteGuid, toNotebookGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_copyNote);
  }
};

NoteStoreClient.prototype.send_copyNote = function(authenticationToken, noteGuid, toNotebookGuid, callback) {
  this.output.writeMessageBegin('copyNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_copyNote_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.toNotebookGuid = toNotebookGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_copyNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_copyNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'copyNote failed: unknown result';
};
NoteStoreClient.prototype.listNoteVersions = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_listNoteVersions(authenticationToken, noteGuid);
    return this.recv_listNoteVersions();
  } else {
    var postData = this.send_listNoteVersions(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listNoteVersions);
  }
};

NoteStoreClient.prototype.send_listNoteVersions = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('listNoteVersions', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listNoteVersions_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listNoteVersions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listNoteVersions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listNoteVersions failed: unknown result';
};
NoteStoreClient.prototype.getNoteVersion = function(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  if (callback === undefined) {
    this.send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
    return this.recv_getNoteVersion();
  } else {
    var postData = this.send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteVersion);
  }
};

NoteStoreClient.prototype.send_getNoteVersion = function(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  this.output.writeMessageBegin('getNoteVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteVersion_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.updateSequenceNum = updateSequenceNum;
  args.withResourcesData = withResourcesData;
  args.withResourcesRecognition = withResourcesRecognition;
  args.withResourcesAlternateData = withResourcesAlternateData;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteVersion failed: unknown result';
};
NoteStoreClient.prototype.getResource = function(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData, callback) {
  if (callback === undefined) {
    this.send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
    return this.recv_getResource();
  } else {
    var postData = this.send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResource);
  }
};

NoteStoreClient.prototype.send_getResource = function(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData, callback) {
  this.output.writeMessageBegin('getResource', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResource_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.withData = withData;
  args.withRecognition = withRecognition;
  args.withAttributes = withAttributes;
  args.withAlternateData = withAlternateData;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResource failed: unknown result';
};
NoteStoreClient.prototype.getResourceApplicationData = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceApplicationData(authenticationToken, guid);
    return this.recv_getResourceApplicationData();
  } else {
    var postData = this.send_getResourceApplicationData(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceApplicationData);
  }
};

NoteStoreClient.prototype.send_getResourceApplicationData = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceApplicationData', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceApplicationData_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceApplicationData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceApplicationData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceApplicationData failed: unknown result';
};
NoteStoreClient.prototype.getResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  if (callback === undefined) {
    this.send_getResourceApplicationDataEntry(authenticationToken, guid, key);
    return this.recv_getResourceApplicationDataEntry();
  } else {
    var postData = this.send_getResourceApplicationDataEntry(authenticationToken, guid, key, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_getResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this.output.writeMessageBegin('getResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.setResourceApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  if (callback === undefined) {
    this.send_setResourceApplicationDataEntry(authenticationToken, guid, key, value);
    return this.recv_setResourceApplicationDataEntry();
  } else {
    var postData = this.send_setResourceApplicationDataEntry(authenticationToken, guid, key, value, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_setResourceApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_setResourceApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  this.output.writeMessageBegin('setResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_setResourceApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_setResourceApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_setResourceApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setResourceApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.unsetResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  if (callback === undefined) {
    this.send_unsetResourceApplicationDataEntry(authenticationToken, guid, key);
    return this.recv_unsetResourceApplicationDataEntry();
  } else {
    var postData = this.send_unsetResourceApplicationDataEntry(authenticationToken, guid, key, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_unsetResourceApplicationDataEntry);
  }
};

NoteStoreClient.prototype.send_unsetResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this.output.writeMessageBegin('unsetResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_unsetResourceApplicationDataEntry_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_unsetResourceApplicationDataEntry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_unsetResourceApplicationDataEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'unsetResourceApplicationDataEntry failed: unknown result';
};
NoteStoreClient.prototype.updateResource = function(authenticationToken, resource, callback) {
  if (callback === undefined) {
    this.send_updateResource(authenticationToken, resource);
    return this.recv_updateResource();
  } else {
    var postData = this.send_updateResource(authenticationToken, resource, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateResource);
  }
};

NoteStoreClient.prototype.send_updateResource = function(authenticationToken, resource, callback) {
  this.output.writeMessageBegin('updateResource', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateResource_args();
  args.authenticationToken = authenticationToken;
  args.resource = resource;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateResource failed: unknown result';
};
NoteStoreClient.prototype.getResourceData = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceData(authenticationToken, guid);
    return this.recv_getResourceData();
  } else {
    var postData = this.send_getResourceData(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceData);
  }
};

NoteStoreClient.prototype.send_getResourceData = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceData', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceData_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceData failed: unknown result';
};
NoteStoreClient.prototype.getResourceByHash = function(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData, callback) {
  if (callback === undefined) {
    this.send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
    return this.recv_getResourceByHash();
  } else {
    var postData = this.send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceByHash);
  }
};

NoteStoreClient.prototype.send_getResourceByHash = function(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData, callback) {
  this.output.writeMessageBegin('getResourceByHash', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceByHash_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.contentHash = contentHash;
  args.withData = withData;
  args.withRecognition = withRecognition;
  args.withAlternateData = withAlternateData;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceByHash = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceByHash_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceByHash failed: unknown result';
};
NoteStoreClient.prototype.getResourceRecognition = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceRecognition(authenticationToken, guid);
    return this.recv_getResourceRecognition();
  } else {
    var postData = this.send_getResourceRecognition(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceRecognition);
  }
};

NoteStoreClient.prototype.send_getResourceRecognition = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceRecognition', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceRecognition_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceRecognition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceRecognition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceRecognition failed: unknown result';
};
NoteStoreClient.prototype.getResourceAlternateData = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceAlternateData(authenticationToken, guid);
    return this.recv_getResourceAlternateData();
  } else {
    var postData = this.send_getResourceAlternateData(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceAlternateData);
  }
};

NoteStoreClient.prototype.send_getResourceAlternateData = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceAlternateData', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceAlternateData_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceAlternateData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceAlternateData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceAlternateData failed: unknown result';
};
NoteStoreClient.prototype.getResourceAttributes = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_getResourceAttributes(authenticationToken, guid);
    return this.recv_getResourceAttributes();
  } else {
    var postData = this.send_getResourceAttributes(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getResourceAttributes);
  }
};

NoteStoreClient.prototype.send_getResourceAttributes = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('getResourceAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getResourceAttributes_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getResourceAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getResourceAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getResourceAttributes failed: unknown result';
};
NoteStoreClient.prototype.getAds = function(authenticationToken, adParameters, callback) {
  if (callback === undefined) {
    this.send_getAds(authenticationToken, adParameters);
    return this.recv_getAds();
  } else {
    var postData = this.send_getAds(authenticationToken, adParameters, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getAds);
  }
};

NoteStoreClient.prototype.send_getAds = function(authenticationToken, adParameters, callback) {
  this.output.writeMessageBegin('getAds', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getAds_args();
  args.authenticationToken = authenticationToken;
  args.adParameters = adParameters;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getAds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getAds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAds failed: unknown result';
};
NoteStoreClient.prototype.getRandomAd = function(authenticationToken, adParameters, callback) {
  if (callback === undefined) {
    this.send_getRandomAd(authenticationToken, adParameters);
    return this.recv_getRandomAd();
  } else {
    var postData = this.send_getRandomAd(authenticationToken, adParameters, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getRandomAd);
  }
};

NoteStoreClient.prototype.send_getRandomAd = function(authenticationToken, adParameters, callback) {
  this.output.writeMessageBegin('getRandomAd', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getRandomAd_args();
  args.authenticationToken = authenticationToken;
  args.adParameters = adParameters;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getRandomAd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getRandomAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRandomAd failed: unknown result';
};
NoteStoreClient.prototype.getPublicNotebook = function(userId, publicUri, callback) {
  if (callback === undefined) {
    this.send_getPublicNotebook(userId, publicUri);
    return this.recv_getPublicNotebook();
  } else {
    var postData = this.send_getPublicNotebook(userId, publicUri, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getPublicNotebook);
  }
};

NoteStoreClient.prototype.send_getPublicNotebook = function(userId, publicUri, callback) {
  this.output.writeMessageBegin('getPublicNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getPublicNotebook_args();
  args.userId = userId;
  args.publicUri = publicUri;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getPublicNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getPublicNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPublicNotebook failed: unknown result';
};
NoteStoreClient.prototype.createSharedNotebook = function(authenticationToken, sharedNotebook, callback) {
  if (callback === undefined) {
    this.send_createSharedNotebook(authenticationToken, sharedNotebook);
    return this.recv_createSharedNotebook();
  } else {
    var postData = this.send_createSharedNotebook(authenticationToken, sharedNotebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createSharedNotebook);
  }
};

NoteStoreClient.prototype.send_createSharedNotebook = function(authenticationToken, sharedNotebook, callback) {
  this.output.writeMessageBegin('createSharedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createSharedNotebook_args();
  args.authenticationToken = authenticationToken;
  args.sharedNotebook = sharedNotebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createSharedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createSharedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createSharedNotebook failed: unknown result';
};
NoteStoreClient.prototype.shareNotebook = function(authenticationToken, sharedNotebook, message, callback) {
  if (callback === undefined) {
    this.send_shareNotebook(authenticationToken, sharedNotebook, message);
    return this.recv_shareNotebook();
  } else {
    var postData = this.send_shareNotebook(authenticationToken, sharedNotebook, message, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_shareNotebook);
  }
};

NoteStoreClient.prototype.send_shareNotebook = function(authenticationToken, sharedNotebook, message, callback) {
  this.output.writeMessageBegin('shareNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_shareNotebook_args();
  args.authenticationToken = authenticationToken;
  args.sharedNotebook = sharedNotebook;
  args.message = message;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_shareNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_shareNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shareNotebook failed: unknown result';
};
NoteStoreClient.prototype.updateSharedNotebook = function(authenticationToken, sharedNotebook, callback) {
  if (callback === undefined) {
    this.send_updateSharedNotebook(authenticationToken, sharedNotebook);
    return this.recv_updateSharedNotebook();
  } else {
    var postData = this.send_updateSharedNotebook(authenticationToken, sharedNotebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateSharedNotebook);
  }
};

NoteStoreClient.prototype.send_updateSharedNotebook = function(authenticationToken, sharedNotebook, callback) {
  this.output.writeMessageBegin('updateSharedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateSharedNotebook_args();
  args.authenticationToken = authenticationToken;
  args.sharedNotebook = sharedNotebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateSharedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateSharedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSharedNotebook failed: unknown result';
};
NoteStoreClient.prototype.setSharedNotebookRecipientSettings = function(authenticationToken, sharedNotebookId, recipientSettings, callback) {
  if (callback === undefined) {
    this.send_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings);
    return this.recv_setSharedNotebookRecipientSettings();
  } else {
    var postData = this.send_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_setSharedNotebookRecipientSettings);
  }
};

NoteStoreClient.prototype.send_setSharedNotebookRecipientSettings = function(authenticationToken, sharedNotebookId, recipientSettings, callback) {
  this.output.writeMessageBegin('setSharedNotebookRecipientSettings', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_setSharedNotebookRecipientSettings_args();
  args.authenticationToken = authenticationToken;
  args.sharedNotebookId = sharedNotebookId;
  args.recipientSettings = recipientSettings;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_setSharedNotebookRecipientSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_setSharedNotebookRecipientSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setSharedNotebookRecipientSettings failed: unknown result';
};
NoteStoreClient.prototype.sendMessageToSharedNotebookMembers = function(authenticationToken, notebookGuid, messageText, recipients, callback) {
  if (callback === undefined) {
    this.send_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients);
    return this.recv_sendMessageToSharedNotebookMembers();
  } else {
    var postData = this.send_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_sendMessageToSharedNotebookMembers);
  }
};

NoteStoreClient.prototype.send_sendMessageToSharedNotebookMembers = function(authenticationToken, notebookGuid, messageText, recipients, callback) {
  this.output.writeMessageBegin('sendMessageToSharedNotebookMembers', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_sendMessageToSharedNotebookMembers_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.messageText = messageText;
  args.recipients = recipients;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_sendMessageToSharedNotebookMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_sendMessageToSharedNotebookMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageToSharedNotebookMembers failed: unknown result';
};
NoteStoreClient.prototype.listSharedNotebooks = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listSharedNotebooks(authenticationToken);
    return this.recv_listSharedNotebooks();
  } else {
    var postData = this.send_listSharedNotebooks(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listSharedNotebooks);
  }
};

NoteStoreClient.prototype.send_listSharedNotebooks = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listSharedNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listSharedNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listSharedNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listSharedNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listSharedNotebooks failed: unknown result';
};
NoteStoreClient.prototype.expungeSharedNotebooks = function(authenticationToken, sharedNotebookIds, callback) {
  if (callback === undefined) {
    this.send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds);
    return this.recv_expungeSharedNotebooks();
  } else {
    var postData = this.send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeSharedNotebooks);
  }
};

NoteStoreClient.prototype.send_expungeSharedNotebooks = function(authenticationToken, sharedNotebookIds, callback) {
  this.output.writeMessageBegin('expungeSharedNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeSharedNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.sharedNotebookIds = sharedNotebookIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeSharedNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeSharedNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeSharedNotebooks failed: unknown result';
};
NoteStoreClient.prototype.createLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  if (callback === undefined) {
    this.send_createLinkedNotebook(authenticationToken, linkedNotebook);
    return this.recv_createLinkedNotebook();
  } else {
    var postData = this.send_createLinkedNotebook(authenticationToken, linkedNotebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_createLinkedNotebook);
  }
};

NoteStoreClient.prototype.send_createLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  this.output.writeMessageBegin('createLinkedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_createLinkedNotebook_args();
  args.authenticationToken = authenticationToken;
  args.linkedNotebook = linkedNotebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_createLinkedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_createLinkedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createLinkedNotebook failed: unknown result';
};
NoteStoreClient.prototype.updateLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  if (callback === undefined) {
    this.send_updateLinkedNotebook(authenticationToken, linkedNotebook);
    return this.recv_updateLinkedNotebook();
  } else {
    var postData = this.send_updateLinkedNotebook(authenticationToken, linkedNotebook, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateLinkedNotebook);
  }
};

NoteStoreClient.prototype.send_updateLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  this.output.writeMessageBegin('updateLinkedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateLinkedNotebook_args();
  args.authenticationToken = authenticationToken;
  args.linkedNotebook = linkedNotebook;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateLinkedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateLinkedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateLinkedNotebook failed: unknown result';
};
NoteStoreClient.prototype.listLinkedNotebooks = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_listLinkedNotebooks(authenticationToken);
    return this.recv_listLinkedNotebooks();
  } else {
    var postData = this.send_listLinkedNotebooks(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_listLinkedNotebooks);
  }
};

NoteStoreClient.prototype.send_listLinkedNotebooks = function(authenticationToken, callback) {
  this.output.writeMessageBegin('listLinkedNotebooks', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_listLinkedNotebooks_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_listLinkedNotebooks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_listLinkedNotebooks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listLinkedNotebooks failed: unknown result';
};
NoteStoreClient.prototype.expungeLinkedNotebook = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_expungeLinkedNotebook(authenticationToken, guid);
    return this.recv_expungeLinkedNotebook();
  } else {
    var postData = this.send_expungeLinkedNotebook(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_expungeLinkedNotebook);
  }
};

NoteStoreClient.prototype.send_expungeLinkedNotebook = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('expungeLinkedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_expungeLinkedNotebook_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_expungeLinkedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_expungeLinkedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'expungeLinkedNotebook failed: unknown result';
};
NoteStoreClient.prototype.authenticateToSharedNotebook = function(shareKeyOrGlobalId, authenticationToken, callback) {
  if (callback === undefined) {
    this.send_authenticateToSharedNotebook(shareKeyOrGlobalId, authenticationToken);
    return this.recv_authenticateToSharedNotebook();
  } else {
    var postData = this.send_authenticateToSharedNotebook(shareKeyOrGlobalId, authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_authenticateToSharedNotebook);
  }
};

NoteStoreClient.prototype.send_authenticateToSharedNotebook = function(shareKeyOrGlobalId, authenticationToken, callback) {
  this.output.writeMessageBegin('authenticateToSharedNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_authenticateToSharedNotebook_args();
  args.shareKeyOrGlobalId = shareKeyOrGlobalId;
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_authenticateToSharedNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_authenticateToSharedNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateToSharedNotebook failed: unknown result';
};
NoteStoreClient.prototype.getSharedNotebookByAuth = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getSharedNotebookByAuth(authenticationToken);
    return this.recv_getSharedNotebookByAuth();
  } else {
    var postData = this.send_getSharedNotebookByAuth(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getSharedNotebookByAuth);
  }
};

NoteStoreClient.prototype.send_getSharedNotebookByAuth = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getSharedNotebookByAuth', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getSharedNotebookByAuth_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getSharedNotebookByAuth = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getSharedNotebookByAuth_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSharedNotebookByAuth failed: unknown result';
};
NoteStoreClient.prototype.emailNote = function(authenticationToken, parameters, callback) {
  if (callback === undefined) {
    this.send_emailNote(authenticationToken, parameters);
    this.recv_emailNote();
  } else {
    var postData = this.send_emailNote(authenticationToken, parameters, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_emailNote);
  }
};

NoteStoreClient.prototype.send_emailNote = function(authenticationToken, parameters, callback) {
  this.output.writeMessageBegin('emailNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_emailNote_args();
  args.authenticationToken = authenticationToken;
  args.parameters = parameters;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_emailNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_emailNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
NoteStoreClient.prototype.shareNote = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_shareNote(authenticationToken, guid);
    return this.recv_shareNote();
  } else {
    var postData = this.send_shareNote(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_shareNote);
  }
};

NoteStoreClient.prototype.send_shareNote = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('shareNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_shareNote_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_shareNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_shareNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shareNote failed: unknown result';
};
NoteStoreClient.prototype.stopSharingNote = function(authenticationToken, guid, callback) {
  if (callback === undefined) {
    this.send_stopSharingNote(authenticationToken, guid);
    this.recv_stopSharingNote();
  } else {
    var postData = this.send_stopSharingNote(authenticationToken, guid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_stopSharingNote);
  }
};

NoteStoreClient.prototype.send_stopSharingNote = function(authenticationToken, guid, callback) {
  this.output.writeMessageBegin('stopSharingNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_stopSharingNote_args();
  args.authenticationToken = authenticationToken;
  args.guid = guid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_stopSharingNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_stopSharingNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
NoteStoreClient.prototype.authenticateToSharedNote = function(guid, noteKey, authenticationToken, callback) {
  if (callback === undefined) {
    this.send_authenticateToSharedNote(guid, noteKey, authenticationToken);
    return this.recv_authenticateToSharedNote();
  } else {
    var postData = this.send_authenticateToSharedNote(guid, noteKey, authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_authenticateToSharedNote);
  }
};

NoteStoreClient.prototype.send_authenticateToSharedNote = function(guid, noteKey, authenticationToken, callback) {
  this.output.writeMessageBegin('authenticateToSharedNote', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_authenticateToSharedNote_args();
  args.guid = guid;
  args.noteKey = noteKey;
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_authenticateToSharedNote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_authenticateToSharedNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateToSharedNote failed: unknown result';
};
NoteStoreClient.prototype.findRelated = function(authenticationToken, query, resultSpec, callback) {
  if (callback === undefined) {
    this.send_findRelated(authenticationToken, query, resultSpec);
    return this.recv_findRelated();
  } else {
    var postData = this.send_findRelated(authenticationToken, query, resultSpec, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findRelated);
  }
};

NoteStoreClient.prototype.send_findRelated = function(authenticationToken, query, resultSpec, callback) {
  this.output.writeMessageBegin('findRelated', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findRelated_args();
  args.authenticationToken = authenticationToken;
  args.query = query;
  args.resultSpec = resultSpec;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findRelated = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findRelated_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findRelated failed: unknown result';
};
NoteStoreClient.prototype.findSearchSuggestions = function(authenticationToken, query, resultSpec, callback) {
  if (callback === undefined) {
    this.send_findSearchSuggestions(authenticationToken, query, resultSpec);
    return this.recv_findSearchSuggestions();
  } else {
    var postData = this.send_findSearchSuggestions(authenticationToken, query, resultSpec, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findSearchSuggestions);
  }
};

NoteStoreClient.prototype.send_findSearchSuggestions = function(authenticationToken, query, resultSpec, callback) {
  this.output.writeMessageBegin('findSearchSuggestions', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findSearchSuggestions_args();
  args.authenticationToken = authenticationToken;
  args.query = query;
  args.resultSpec = resultSpec;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findSearchSuggestions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findSearchSuggestions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findSearchSuggestions failed: unknown result';
};
NoteStoreClient.prototype.updateUserSetting = function(authenticationToken, setting, value, callback) {
  if (callback === undefined) {
    this.send_updateUserSetting(authenticationToken, setting, value);
    this.recv_updateUserSetting();
  } else {
    var postData = this.send_updateUserSetting(authenticationToken, setting, value, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateUserSetting);
  }
};

NoteStoreClient.prototype.send_updateUserSetting = function(authenticationToken, setting, value, callback) {
  this.output.writeMessageBegin('updateUserSetting', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateUserSetting_args();
  args.authenticationToken = authenticationToken;
  args.setting = setting;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateUserSetting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateUserSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  return;
};
NoteStoreClient.prototype.findTimeZones = function(authenticationToken, timeZoneSpec, maxTimeZones, callback) {
  if (callback === undefined) {
    this.send_findTimeZones(authenticationToken, timeZoneSpec, maxTimeZones);
    return this.recv_findTimeZones();
  } else {
    var postData = this.send_findTimeZones(authenticationToken, timeZoneSpec, maxTimeZones, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findTimeZones);
  }
};

NoteStoreClient.prototype.send_findTimeZones = function(authenticationToken, timeZoneSpec, maxTimeZones, callback) {
  this.output.writeMessageBegin('findTimeZones', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findTimeZones_args();
  args.authenticationToken = authenticationToken;
  args.timeZoneSpec = timeZoneSpec;
  args.maxTimeZones = maxTimeZones;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findTimeZones = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findTimeZones_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findTimeZones failed: unknown result';
};
NoteStoreClient.prototype.findContacts = function(authenticationToken, query, callback) {
  if (callback === undefined) {
    this.send_findContacts(authenticationToken, query);
    return this.recv_findContacts();
  } else {
    var postData = this.send_findContacts(authenticationToken, query, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findContacts);
  }
};

NoteStoreClient.prototype.send_findContacts = function(authenticationToken, query, callback) {
  this.output.writeMessageBegin('findContacts', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findContacts_args();
  args.authenticationToken = authenticationToken;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findContacts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContacts failed: unknown result';
};
NoteStoreClient.prototype.findInBusiness = function(authenticationToken, query, callback) {
  if (callback === undefined) {
    this.send_findInBusiness(authenticationToken, query);
    return this.recv_findInBusiness();
  } else {
    var postData = this.send_findInBusiness(authenticationToken, query, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_findInBusiness);
  }
};

NoteStoreClient.prototype.send_findInBusiness = function(authenticationToken, query, callback) {
  this.output.writeMessageBegin('findInBusiness', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_findInBusiness_args();
  args.authenticationToken = authenticationToken;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_findInBusiness = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_findInBusiness_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findInBusiness failed: unknown result';
};
NoteStoreClient.prototype.shareNoteWithBusiness = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_shareNoteWithBusiness(authenticationToken, noteGuid);
    return this.recv_shareNoteWithBusiness();
  } else {
    var postData = this.send_shareNoteWithBusiness(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_shareNoteWithBusiness);
  }
};

NoteStoreClient.prototype.send_shareNoteWithBusiness = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('shareNoteWithBusiness', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_shareNoteWithBusiness_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_shareNoteWithBusiness = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_shareNoteWithBusiness_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shareNoteWithBusiness failed: unknown result';
};
NoteStoreClient.prototype.stopSharingNoteWithBusiness = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_stopSharingNoteWithBusiness(authenticationToken, noteGuid);
    return this.recv_stopSharingNoteWithBusiness();
  } else {
    var postData = this.send_stopSharingNoteWithBusiness(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_stopSharingNoteWithBusiness);
  }
};

NoteStoreClient.prototype.send_stopSharingNoteWithBusiness = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('stopSharingNoteWithBusiness', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_stopSharingNoteWithBusiness_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_stopSharingNoteWithBusiness = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_stopSharingNoteWithBusiness_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'stopSharingNoteWithBusiness failed: unknown result';
};
NoteStoreClient.prototype.requestAccessToNotebook = function(authToken, notebookGuid, privilegeLevel, callback) {
  if (callback === undefined) {
    this.send_requestAccessToNotebook(authToken, notebookGuid, privilegeLevel);
    this.recv_requestAccessToNotebook();
  } else {
    var postData = this.send_requestAccessToNotebook(authToken, notebookGuid, privilegeLevel, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_requestAccessToNotebook);
  }
};

NoteStoreClient.prototype.send_requestAccessToNotebook = function(authToken, notebookGuid, privilegeLevel, callback) {
  this.output.writeMessageBegin('requestAccessToNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_requestAccessToNotebook_args();
  args.authToken = authToken;
  args.notebookGuid = notebookGuid;
  args.privilegeLevel = privilegeLevel;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_requestAccessToNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_requestAccessToNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  return;
};
NoteStoreClient.prototype.getNoteLockStatus = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_getNoteLockStatus(authenticationToken, noteGuid);
    return this.recv_getNoteLockStatus();
  } else {
    var postData = this.send_getNoteLockStatus(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteLockStatus);
  }
};

NoteStoreClient.prototype.send_getNoteLockStatus = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('getNoteLockStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNoteLockStatus_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNoteLockStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNoteLockStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteLockStatus failed: unknown result';
};
NoteStoreClient.prototype.acquireNoteLock = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_acquireNoteLock(authenticationToken, noteGuid);
    return this.recv_acquireNoteLock();
  } else {
    var postData = this.send_acquireNoteLock(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_acquireNoteLock);
  }
};

NoteStoreClient.prototype.send_acquireNoteLock = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('acquireNoteLock', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_acquireNoteLock_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_acquireNoteLock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_acquireNoteLock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquireNoteLock failed: unknown result';
};
NoteStoreClient.prototype.releaseNoteLock = function(authenticationToken, noteGuid, callback) {
  if (callback === undefined) {
    this.send_releaseNoteLock(authenticationToken, noteGuid);
    return this.recv_releaseNoteLock();
  } else {
    var postData = this.send_releaseNoteLock(authenticationToken, noteGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_releaseNoteLock);
  }
};

NoteStoreClient.prototype.send_releaseNoteLock = function(authenticationToken, noteGuid, callback) {
  this.output.writeMessageBegin('releaseNoteLock', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_releaseNoteLock_args();
  args.authenticationToken = authenticationToken;
  args.noteGuid = noteGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_releaseNoteLock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_releaseNoteLock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'releaseNoteLock failed: unknown result';
};
NoteStoreClient.prototype.updateNoteIfUsnMatches = function(authenticationToken, note, callback) {
  if (callback === undefined) {
    this.send_updateNoteIfUsnMatches(authenticationToken, note);
    return this.recv_updateNoteIfUsnMatches();
  } else {
    var postData = this.send_updateNoteIfUsnMatches(authenticationToken, note, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_updateNoteIfUsnMatches);
  }
};

NoteStoreClient.prototype.send_updateNoteIfUsnMatches = function(authenticationToken, note, callback) {
  this.output.writeMessageBegin('updateNoteIfUsnMatches', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_updateNoteIfUsnMatches_args();
  args.authenticationToken = authenticationToken;
  args.note = note;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_updateNoteIfUsnMatches = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_updateNoteIfUsnMatches_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateNoteIfUsnMatches failed: unknown result';
};
NoteStoreClient.prototype.manageNotebookShares = function(authenticationToken, parameters, callback) {
  if (callback === undefined) {
    this.send_manageNotebookShares(authenticationToken, parameters);
    return this.recv_manageNotebookShares();
  } else {
    var postData = this.send_manageNotebookShares(authenticationToken, parameters, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_manageNotebookShares);
  }
};

NoteStoreClient.prototype.send_manageNotebookShares = function(authenticationToken, parameters, callback) {
  this.output.writeMessageBegin('manageNotebookShares', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_manageNotebookShares_args();
  args.authenticationToken = authenticationToken;
  args.parameters = parameters;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_manageNotebookShares = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_manageNotebookShares_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'manageNotebookShares failed: unknown result';
};
NoteStoreClient.prototype.getNotebookShares = function(authenticationToken, notebookGuid, callback) {
  if (callback === undefined) {
    this.send_getNotebookShares(authenticationToken, notebookGuid);
    return this.recv_getNotebookShares();
  } else {
    var postData = this.send_getNotebookShares(authenticationToken, notebookGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNotebookShares);
  }
};

NoteStoreClient.prototype.send_getNotebookShares = function(authenticationToken, notebookGuid, callback) {
  this.output.writeMessageBegin('getNotebookShares', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNotebookShares_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNotebookShares = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNotebookShares_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotebookShares failed: unknown result';
};
NoteStoreClient.prototype.joinPublishedBusinessNotebook = function(authenticationToken, notebookGuid, callback) {
  if (callback === undefined) {
    this.send_joinPublishedBusinessNotebook(authenticationToken, notebookGuid);
    return this.recv_joinPublishedBusinessNotebook();
  } else {
    var postData = this.send_joinPublishedBusinessNotebook(authenticationToken, notebookGuid, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_joinPublishedBusinessNotebook);
  }
};

NoteStoreClient.prototype.send_joinPublishedBusinessNotebook = function(authenticationToken, notebookGuid, callback) {
  this.output.writeMessageBegin('joinPublishedBusinessNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_joinPublishedBusinessNotebook_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_joinPublishedBusinessNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_joinPublishedBusinessNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'joinPublishedBusinessNotebook failed: unknown result';
};
NoteStoreClient.prototype.unpublishNotebook = function(authenticationToken, notebookGuid, convertGroupSharesToIndividual, callback) {
  if (callback === undefined) {
    this.send_unpublishNotebook(authenticationToken, notebookGuid, convertGroupSharesToIndividual);
    this.recv_unpublishNotebook();
  } else {
    var postData = this.send_unpublishNotebook(authenticationToken, notebookGuid, convertGroupSharesToIndividual, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_unpublishNotebook);
  }
};

NoteStoreClient.prototype.send_unpublishNotebook = function(authenticationToken, notebookGuid, convertGroupSharesToIndividual, callback) {
  this.output.writeMessageBegin('unpublishNotebook', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_unpublishNotebook_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.convertGroupSharesToIndividual = convertGroupSharesToIndividual;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_unpublishNotebook = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_unpublishNotebook_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  return;
};
NoteStoreClient.prototype.getNotebookSharesEmailAddresses = function(authenticationToken, notebookGuid, identities, skipUnknownUserIdentities, callback) {
  if (callback === undefined) {
    this.send_getNotebookSharesEmailAddresses(authenticationToken, notebookGuid, identities, skipUnknownUserIdentities);
    return this.recv_getNotebookSharesEmailAddresses();
  } else {
    var postData = this.send_getNotebookSharesEmailAddresses(authenticationToken, notebookGuid, identities, skipUnknownUserIdentities, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNotebookSharesEmailAddresses);
  }
};

NoteStoreClient.prototype.send_getNotebookSharesEmailAddresses = function(authenticationToken, notebookGuid, identities, skipUnknownUserIdentities, callback) {
  this.output.writeMessageBegin('getNotebookSharesEmailAddresses', Thrift.MessageType.CALL, this.seqid);
  var args = new NoteStore_getNotebookSharesEmailAddresses_args();
  args.authenticationToken = authenticationToken;
  args.notebookGuid = notebookGuid;
  args.identities = identities;
  args.skipUnknownUserIdentities = skipUnknownUserIdentities;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

NoteStoreClient.prototype.recv_getNotebookSharesEmailAddresses = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NoteStore_getNotebookSharesEmailAddresses_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotebookSharesEmailAddresses failed: unknown result';
};
