//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

UserSetting = {
'RECEIVE_REMINDER_EMAIL' : 1,
'TIMEZONE' : 2
};
ShareRelationshipPrivilegeLevel = {
'READ_NOTEBOOK' : 0,
'READ_NOTEBOOK_PLUS_ACTIVITY' : 10,
'MODIFY_NOTEBOOK_PLUS_ACTIVITY' : 20,
'FULL_ACCESS' : 30
};
SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  this.userLastUpdated = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.fullSyncBefore !== undefined) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
    if (args.userLastUpdated !== undefined) {
      this.userLastUpdated = args.userLastUpdated;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userLastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  if (this.userLastUpdated !== null && this.userLastUpdated !== undefined) {
    output.writeFieldBegin('userLastUpdated', Thrift.Type.I64, 5);
    output.writeI64(this.userLastUpdated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Preferences = function(args) {
  this.updateSequenceNum = null;
  this.preferences = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.preferences !== undefined) {
      this.preferences = args.preferences;
    }
  }
};
Preferences.prototype = {};
Preferences.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.preferences = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          var _size8 = 0;
          var _rtmp312;
          val7 = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var elem14 = null;
            elem14 = input.readString().value;
            val7.push(elem14);
          }
          input.readListEnd();
          this.preferences[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Preferences.prototype.write = function(output) {
  output.writeStructBegin('Preferences');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.preferences !== null && this.preferences !== undefined) {
    output.writeFieldBegin('preferences', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.preferences));
    for (var kiter15 in this.preferences)
    {
      if (this.preferences.hasOwnProperty(kiter15))
      {
        var viter16 = this.preferences[kiter15];
        output.writeString(kiter15);
        output.writeListBegin(Thrift.Type.STRING, viter16.length);
        for (var iter17 in viter16)
        {
          if (viter16.hasOwnProperty(iter17))
          {
            iter17 = viter16[iter17];
            output.writeString(iter17);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  this.preferences = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.chunkHighUSN !== undefined) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.searches !== undefined) {
      this.searches = args.searches;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.expungedNotes !== undefined) {
      this.expungedNotes = args.expungedNotes;
    }
    if (args.expungedNotebooks !== undefined) {
      this.expungedNotebooks = args.expungedNotebooks;
    }
    if (args.expungedTags !== undefined) {
      this.expungedTags = args.expungedTags;
    }
    if (args.expungedSearches !== undefined) {
      this.expungedSearches = args.expungedSearches;
    }
    if (args.linkedNotebooks !== undefined) {
      this.linkedNotebooks = args.linkedNotebooks;
    }
    if (args.expungedLinkedNotebooks !== undefined) {
      this.expungedLinkedNotebooks = args.expungedLinkedNotebooks;
    }
    if (args.preferences !== undefined) {
      this.preferences = args.preferences;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.notes = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new Note();
          elem24.read(input);
          this.notes.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.notebooks = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = new Notebook();
          elem31.read(input);
          this.notebooks.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.tags = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Tag();
          elem38.read(input);
          this.tags.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.searches = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new SavedSearch();
          elem45.read(input);
          this.searches.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.resources = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new Resource();
          elem52.read(input);
          this.resources.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size53 = 0;
        var _rtmp357;
        this.expungedNotes = [];
        var _etype56 = 0;
        _rtmp357 = input.readListBegin();
        _etype56 = _rtmp357.etype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          var elem59 = null;
          elem59 = input.readString().value;
          this.expungedNotes.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.expungedNotebooks = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString().value;
          this.expungedNotebooks.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size67 = 0;
        var _rtmp371;
        this.expungedTags = [];
        var _etype70 = 0;
        _rtmp371 = input.readListBegin();
        _etype70 = _rtmp371.etype;
        _size67 = _rtmp371.size;
        for (var _i72 = 0; _i72 < _size67; ++_i72)
        {
          var elem73 = null;
          elem73 = input.readString().value;
          this.expungedTags.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.expungedSearches = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readString().value;
          this.expungedSearches.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size81 = 0;
        var _rtmp385;
        this.linkedNotebooks = [];
        var _etype84 = 0;
        _rtmp385 = input.readListBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = new LinkedNotebook();
          elem87.read(input);
          this.linkedNotebooks.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.expungedLinkedNotebooks = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString().value;
          this.expungedLinkedNotebooks.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.preferences = new Preferences();
        this.preferences.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN !== null && this.chunkHighUSN !== undefined) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter95 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter95))
      {
        iter95 = this.notes[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter96 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter96))
      {
        iter96 = this.notebooks[iter96];
        iter96.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter97 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter97))
      {
        iter97 = this.tags[iter97];
        iter97.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches !== null && this.searches !== undefined) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter98 in this.searches)
    {
      if (this.searches.hasOwnProperty(iter98))
      {
        iter98 = this.searches[iter98];
        iter98.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter99 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter99))
      {
        iter99 = this.resources[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes !== null && this.expungedNotes !== undefined) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter100 in this.expungedNotes)
    {
      if (this.expungedNotes.hasOwnProperty(iter100))
      {
        iter100 = this.expungedNotes[iter100];
        output.writeString(iter100);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks !== null && this.expungedNotebooks !== undefined) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter101 in this.expungedNotebooks)
    {
      if (this.expungedNotebooks.hasOwnProperty(iter101))
      {
        iter101 = this.expungedNotebooks[iter101];
        output.writeString(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags !== null && this.expungedTags !== undefined) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter102 in this.expungedTags)
    {
      if (this.expungedTags.hasOwnProperty(iter102))
      {
        iter102 = this.expungedTags[iter102];
        output.writeString(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches !== null && this.expungedSearches !== undefined) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter103 in this.expungedSearches)
    {
      if (this.expungedSearches.hasOwnProperty(iter103))
      {
        iter103 = this.expungedSearches[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks !== null && this.linkedNotebooks !== undefined) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter104 in this.linkedNotebooks)
    {
      if (this.linkedNotebooks.hasOwnProperty(iter104))
      {
        iter104 = this.linkedNotebooks[iter104];
        iter104.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks !== null && this.expungedLinkedNotebooks !== undefined) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter105 in this.expungedLinkedNotebooks)
    {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter105))
      {
        iter105 = this.expungedLinkedNotebooks[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.preferences !== null && this.preferences !== undefined) {
    output.writeFieldBegin('preferences', Thrift.Type.STRUCT, 15);
    this.preferences.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.includePreferences = null;
  this.requireNoteContentClass = null;
  this.notebookGuids = null;
  if (args) {
    if (args.includeNotes !== undefined) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.includePreferences !== undefined) {
      this.includePreferences = args.includePreferences;
    }
    if (args.requireNoteContentClass !== undefined) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
    if (args.notebookGuids !== undefined) {
      this.notebookGuids = args.notebookGuids;
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includePreferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.SET) {
        var _size106 = 0;
        var _rtmp3110;
        this.notebookGuids = [];
        var _etype109 = 0;
        _rtmp3110 = input.readSetBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readString().value;
          this.notebookGuids.push(elem112);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype.write = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes !== null && this.includeNotes !== undefined) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources !== null && this.includeNoteResources !== undefined) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes !== null && this.includeNoteAttributes !== undefined) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags !== null && this.includeTags !== undefined) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches !== null && this.includeSearches !== undefined) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources !== null && this.includeResources !== undefined) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks !== null && this.includeLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged !== null && this.includeExpunged !== undefined) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap !== null && this.includeNoteApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap !== null && this.includeResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap !== null && this.includeNoteResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includePreferences !== null && this.includePreferences !== undefined) {
    output.writeFieldBegin('includePreferences', Thrift.Type.BOOL, 14);
    output.writeBool(this.includePreferences);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass !== null && this.requireNoteContentClass !== undefined) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  if (this.notebookGuids !== null && this.notebookGuids !== undefined) {
    output.writeFieldBegin('notebookGuids', Thrift.Type.SET, 15);
    output.writeSetBegin(Thrift.Type.STRING, this.notebookGuids.length);
    for (var iter113 in this.notebookGuids)
    {
      if (this.notebookGuids.hasOwnProperty(iter113))
      {
        iter113 = this.notebookGuids[iter113];
        output.writeString(iter113);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  this.emphasized = null;
  this.includeAllReadableNotebooks = null;
  if (args) {
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined) {
      this.inactive = args.inactive;
    }
    if (args.emphasized !== undefined) {
      this.emphasized = args.emphasized;
    }
    if (args.includeAllReadableNotebooks !== undefined) {
      this.includeAllReadableNotebooks = args.includeAllReadableNotebooks;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.tagGuids = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString().value;
          this.tagGuids.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.emphasized = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAllReadableNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype.write = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter121 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter121))
      {
        iter121 = this.tagGuids[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive !== null && this.inactive !== undefined) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  if (this.emphasized !== null && this.emphasized !== undefined) {
    output.writeFieldBegin('emphasized', Thrift.Type.STRING, 8);
    output.writeString(this.emphasized);
    output.writeFieldEnd();
  }
  if (this.includeAllReadableNotebooks !== null && this.includeAllReadableNotebooks !== undefined) {
    output.writeFieldBegin('includeAllReadableNotebooks', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeAllReadableNotebooks);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.notes = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = new Note();
          elem128.read(input);
          this.notes.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size129 = 0;
        var _rtmp3133;
        this.stoppedWords = [];
        var _etype132 = 0;
        _rtmp3133 = input.readListBegin();
        _etype132 = _rtmp3133.etype;
        _size129 = _rtmp3133.size;
        for (var _i134 = 0; _i134 < _size129; ++_i134)
        {
          var elem135 = null;
          elem135 = input.readString().value;
          this.stoppedWords.push(elem135);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.searchedWords = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString().value;
          this.searchedWords.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype.write = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter143 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter143))
      {
        iter143 = this.notes[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter144 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter144))
      {
        iter144 = this.stoppedWords[iter144];
        output.writeString(iter144);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter145 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter145))
      {
        iter145 = this.searchedWords[iter145];
        output.writeString(iter145);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.largestResourceMime !== undefined) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.tagGuids = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = input.readString().value;
          this.tagGuids.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype.write = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter153 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter153))
      {
        iter153 = this.tagGuids[iter153];
        output.writeString(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime !== null && this.largestResourceMime !== undefined) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize !== null && this.largestResourceSize !== undefined) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.notes = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = new NoteMetadata();
          elem160.read(input);
          this.notes.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size161 = 0;
        var _rtmp3165;
        this.stoppedWords = [];
        var _etype164 = 0;
        _rtmp3165 = input.readListBegin();
        _etype164 = _rtmp3165.etype;
        _size161 = _rtmp3165.size;
        for (var _i166 = 0; _i166 < _size161; ++_i166)
        {
          var elem167 = null;
          elem167 = input.readString().value;
          this.stoppedWords.push(elem167);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.searchedWords = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = input.readString().value;
          this.searchedWords.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter175 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter175))
      {
        iter175 = this.notes[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter176 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter176))
      {
        iter176 = this.stoppedWords[iter176];
        output.writeString(iter176);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter177 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter177))
      {
        iter177 = this.searchedWords[iter177];
        output.writeString(iter177);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeDeleted = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeDeleted !== undefined) {
      this.includeDeleted = args.includeDeleted;
    }
    if (args.includeUpdateSequenceNum !== undefined) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDeleted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle !== null && this.includeTitle !== undefined) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength !== null && this.includeContentLength !== undefined) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated !== null && this.includeCreated !== undefined) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated !== null && this.includeUpdated !== undefined) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeDeleted !== null && this.includeDeleted !== undefined) {
    output.writeFieldBegin('includeDeleted', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeDeleted);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum !== null && this.includeUpdateSequenceNum !== undefined) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid !== null && this.includeNotebookGuid !== undefined) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids !== null && this.includeTagGuids !== undefined) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime !== null && this.includeLargestResourceMime !== undefined) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize !== null && this.includeLargestResourceSize !== undefined) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined) {
      this.notebookCounts = args.notebookCounts;
    }
    if (args.tagCounts !== undefined) {
      this.tagCounts = args.tagCounts;
    }
    if (args.trashCount !== undefined) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size178 = 0;
        var _rtmp3182;
        this.notebookCounts = {};
        var _ktype179 = 0;
        var _vtype180 = 0;
        _rtmp3182 = input.readMapBegin();
        _ktype179 = _rtmp3182.ktype;
        _vtype180 = _rtmp3182.vtype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          if (_i183 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key184 = null;
          var val185 = null;
          key184 = input.readString().value;
          val185 = input.readI32().value;
          this.notebookCounts[key184] = val185;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size186 = 0;
        var _rtmp3190;
        this.tagCounts = {};
        var _ktype187 = 0;
        var _vtype188 = 0;
        _rtmp3190 = input.readMapBegin();
        _ktype187 = _rtmp3190.ktype;
        _vtype188 = _rtmp3190.vtype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          if (_i191 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key192 = null;
          var val193 = null;
          key192 = input.readString().value;
          val193 = input.readI32().value;
          this.tagCounts[key192] = val193;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype.write = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts !== null && this.notebookCounts !== undefined) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter194 in this.notebookCounts)
    {
      if (this.notebookCounts.hasOwnProperty(kiter194))
      {
        var viter195 = this.notebookCounts[kiter194];
        output.writeString(kiter194);
        output.writeI32(viter195);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts !== null && this.tagCounts !== undefined) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter196 in this.tagCounts)
    {
      if (this.tagCounts.hasOwnProperty(kiter196))
      {
        var viter197 = this.tagCounts[kiter196];
        output.writeString(kiter196);
        output.writeI32(viter197);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount !== null && this.trashCount !== undefined) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdImpressions = function(args) {
  this.adId = null;
  this.impressionCount = null;
  this.impressionTime = null;
  if (args) {
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.impressionCount !== undefined) {
      this.impressionCount = args.impressionCount;
    }
    if (args.impressionTime !== undefined) {
      this.impressionTime = args.impressionTime;
    }
  }
};
AdImpressions.prototype = {};
AdImpressions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.adId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.impressionCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.impressionTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdImpressions.prototype.write = function(output) {
  output.writeStructBegin('AdImpressions');
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.I32, 1);
    output.writeI32(this.adId);
    output.writeFieldEnd();
  }
  if (this.impressionCount !== null && this.impressionCount !== undefined) {
    output.writeFieldBegin('impressionCount', Thrift.Type.I32, 2);
    output.writeI32(this.impressionCount);
    output.writeFieldEnd();
  }
  if (this.impressionTime !== null && this.impressionTime !== undefined) {
    output.writeFieldBegin('impressionTime', Thrift.Type.I32, 3);
    output.writeI32(this.impressionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdParameters = function(args) {
  this.clientLanguage = null;
  this.impressions = null;
  this.supportHtml = null;
  this.clientProperties = null;
  if (args) {
    if (args.clientLanguage !== undefined) {
      this.clientLanguage = args.clientLanguage;
    }
    if (args.impressions !== undefined) {
      this.impressions = args.impressions;
    }
    if (args.supportHtml !== undefined) {
      this.supportHtml = args.supportHtml;
    }
    if (args.clientProperties !== undefined) {
      this.clientProperties = args.clientProperties;
    }
  }
};
AdParameters.prototype = {};
AdParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.impressions = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new AdImpressions();
          elem204.read(input);
          this.impressions.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.supportHtml = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size205 = 0;
        var _rtmp3209;
        this.clientProperties = {};
        var _ktype206 = 0;
        var _vtype207 = 0;
        _rtmp3209 = input.readMapBegin();
        _ktype206 = _rtmp3209.ktype;
        _vtype207 = _rtmp3209.vtype;
        _size205 = _rtmp3209.size;
        for (var _i210 = 0; _i210 < _size205; ++_i210)
        {
          if (_i210 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key211 = null;
          var val212 = null;
          key211 = input.readString().value;
          val212 = input.readString().value;
          this.clientProperties[key211] = val212;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdParameters.prototype.write = function(output) {
  output.writeStructBegin('AdParameters');
  if (this.clientLanguage !== null && this.clientLanguage !== undefined) {
    output.writeFieldBegin('clientLanguage', Thrift.Type.STRING, 2);
    output.writeString(this.clientLanguage);
    output.writeFieldEnd();
  }
  if (this.impressions !== null && this.impressions !== undefined) {
    output.writeFieldBegin('impressions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.impressions.length);
    for (var iter213 in this.impressions)
    {
      if (this.impressions.hasOwnProperty(iter213))
      {
        iter213 = this.impressions[iter213];
        iter213.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.supportHtml !== null && this.supportHtml !== undefined) {
    output.writeFieldBegin('supportHtml', Thrift.Type.BOOL, 5);
    output.writeBool(this.supportHtml);
    output.writeFieldEnd();
  }
  if (this.clientProperties !== null && this.clientProperties !== undefined) {
    output.writeFieldBegin('clientProperties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.clientProperties));
    for (var kiter214 in this.clientProperties)
    {
      if (this.clientProperties.hasOwnProperty(kiter214))
      {
        var viter215 = this.clientProperties[kiter214];
        output.writeString(kiter214);
        output.writeString(viter215);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.toAddresses !== undefined) {
      this.toAddresses = args.toAddresses;
    }
    if (args.ccAddresses !== undefined) {
      this.ccAddresses = args.ccAddresses;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.toAddresses = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = input.readString().value;
          this.toAddresses.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size223 = 0;
        var _rtmp3227;
        this.ccAddresses = [];
        var _etype226 = 0;
        _rtmp3227 = input.readListBegin();
        _etype226 = _rtmp3227.etype;
        _size223 = _rtmp3227.size;
        for (var _i228 = 0; _i228 < _size223; ++_i228)
        {
          var elem229 = null;
          elem229 = input.readString().value;
          this.ccAddresses.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype.write = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddresses !== null && this.toAddresses !== undefined) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter230 in this.toAddresses)
    {
      if (this.toAddresses.hasOwnProperty(iter230))
      {
        iter230 = this.toAddresses[iter230];
        output.writeString(iter230);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses !== null && this.ccAddresses !== undefined) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter231 in this.ccAddresses)
    {
      if (this.ccAddresses.hasOwnProperty(iter231))
      {
        iter231 = this.ccAddresses[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.saved !== undefined) {
      this.saved = args.saved;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype.write = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved !== null && this.saved !== undefined) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientUsageMetrics = function(args) {
  this.sessions = null;
  this.subjectConsumerKey = null;
  this.subjectConsumerSecret = null;
  if (args) {
    if (args.sessions !== undefined) {
      this.sessions = args.sessions;
    }
    if (args.subjectConsumerKey !== undefined) {
      this.subjectConsumerKey = args.subjectConsumerKey;
    }
    if (args.subjectConsumerSecret !== undefined) {
      this.subjectConsumerSecret = args.subjectConsumerSecret;
    }
  }
};
ClientUsageMetrics.prototype = {};
ClientUsageMetrics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sessions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subjectConsumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subjectConsumerSecret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientUsageMetrics.prototype.write = function(output) {
  output.writeStructBegin('ClientUsageMetrics');
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.I32, 1);
    output.writeI32(this.sessions);
    output.writeFieldEnd();
  }
  if (this.subjectConsumerKey !== null && this.subjectConsumerKey !== undefined) {
    output.writeFieldBegin('subjectConsumerKey', Thrift.Type.STRING, 2);
    output.writeString(this.subjectConsumerKey);
    output.writeFieldEnd();
  }
  if (this.subjectConsumerSecret !== null && this.subjectConsumerSecret !== undefined) {
    output.writeFieldBegin('subjectConsumerSecret', Thrift.Type.STRING, 3);
    output.writeString(this.subjectConsumerSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedQuery = function(args) {
  this.noteGuid = null;
  this.plainText = null;
  this.filter = null;
  this.referenceUri = null;
  this.context = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.plainText !== undefined) {
      this.plainText = args.plainText;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.referenceUri !== undefined) {
      this.referenceUri = args.referenceUri;
    }
    if (args.context !== undefined) {
      this.context = args.context;
    }
  }
};
RelatedQuery.prototype = {};
RelatedQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plainText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.referenceUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedQuery.prototype.write = function(output) {
  output.writeStructBegin('RelatedQuery');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.plainText !== null && this.plainText !== undefined) {
    output.writeFieldBegin('plainText', Thrift.Type.STRING, 2);
    output.writeString(this.plainText);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceUri !== null && this.referenceUri !== undefined) {
    output.writeFieldBegin('referenceUri', Thrift.Type.STRING, 4);
    output.writeString(this.referenceUri);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 5);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResult = function(args) {
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.containingNotebooks = null;
  this.debugInfo = null;
  this.experts = null;
  this.relatedContent = null;
  if (args) {
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.containingNotebooks !== undefined) {
      this.containingNotebooks = args.containingNotebooks;
    }
    if (args.debugInfo !== undefined) {
      this.debugInfo = args.debugInfo;
    }
    if (args.experts !== undefined) {
      this.experts = args.experts;
    }
    if (args.relatedContent !== undefined) {
      this.relatedContent = args.relatedContent;
    }
  }
};
RelatedResult.prototype = {};
RelatedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.notes = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = new Note();
          elem238.read(input);
          this.notes.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size239 = 0;
        var _rtmp3243;
        this.notebooks = [];
        var _etype242 = 0;
        _rtmp3243 = input.readListBegin();
        _etype242 = _rtmp3243.etype;
        _size239 = _rtmp3243.size;
        for (var _i244 = 0; _i244 < _size239; ++_i244)
        {
          var elem245 = null;
          elem245 = new Notebook();
          elem245.read(input);
          this.notebooks.push(elem245);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size246 = 0;
        var _rtmp3250;
        this.tags = [];
        var _etype249 = 0;
        _rtmp3250 = input.readListBegin();
        _etype249 = _rtmp3250.etype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var elem252 = null;
          elem252 = new Tag();
          elem252.read(input);
          this.tags.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size253 = 0;
        var _rtmp3257;
        this.containingNotebooks = [];
        var _etype256 = 0;
        _rtmp3257 = input.readListBegin();
        _etype256 = _rtmp3257.etype;
        _size253 = _rtmp3257.size;
        for (var _i258 = 0; _i258 < _size253; ++_i258)
        {
          var elem259 = null;
          elem259 = new NotebookDescriptor();
          elem259.read(input);
          this.containingNotebooks.push(elem259);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.experts = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = new UserProfile();
          elem266.read(input);
          this.experts.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size267 = 0;
        var _rtmp3271;
        this.relatedContent = [];
        var _etype270 = 0;
        _rtmp3271 = input.readListBegin();
        _etype270 = _rtmp3271.etype;
        _size267 = _rtmp3271.size;
        for (var _i272 = 0; _i272 < _size267; ++_i272)
        {
          var elem273 = null;
          elem273 = new RelatedContent();
          elem273.read(input);
          this.relatedContent.push(elem273);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResult.prototype.write = function(output) {
  output.writeStructBegin('RelatedResult');
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter274 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter274))
      {
        iter274 = this.notes[iter274];
        iter274.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter275 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter275))
      {
        iter275 = this.notebooks[iter275];
        iter275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter276 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter276))
      {
        iter276 = this.tags[iter276];
        iter276.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containingNotebooks !== null && this.containingNotebooks !== undefined) {
    output.writeFieldBegin('containingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.containingNotebooks.length);
    for (var iter277 in this.containingNotebooks)
    {
      if (this.containingNotebooks.hasOwnProperty(iter277))
      {
        iter277 = this.containingNotebooks[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 5);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  if (this.experts !== null && this.experts !== undefined) {
    output.writeFieldBegin('experts', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.experts.length);
    for (var iter278 in this.experts)
    {
      if (this.experts.hasOwnProperty(iter278))
      {
        iter278 = this.experts[iter278];
        iter278.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedContent !== null && this.relatedContent !== undefined) {
    output.writeFieldBegin('relatedContent', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.relatedContent.length);
    for (var iter279 in this.relatedContent)
    {
      if (this.relatedContent.hasOwnProperty(iter279))
      {
        iter279 = this.relatedContent[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResultSpec = function(args) {
  this.maxNotes = null;
  this.maxNotebooks = null;
  this.maxTags = null;
  this.writableNotebooksOnly = null;
  this.includeContainingNotebooks = null;
  this.includeDebugInfo = null;
  this.maxExperts = null;
  this.maxRelatedContent = null;
  if (args) {
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
    if (args.maxNotebooks !== undefined) {
      this.maxNotebooks = args.maxNotebooks;
    }
    if (args.maxTags !== undefined) {
      this.maxTags = args.maxTags;
    }
    if (args.writableNotebooksOnly !== undefined) {
      this.writableNotebooksOnly = args.writableNotebooksOnly;
    }
    if (args.includeContainingNotebooks !== undefined) {
      this.includeContainingNotebooks = args.includeContainingNotebooks;
    }
    if (args.includeDebugInfo !== undefined) {
      this.includeDebugInfo = args.includeDebugInfo;
    }
    if (args.maxExperts !== undefined) {
      this.maxExperts = args.maxExperts;
    }
    if (args.maxRelatedContent !== undefined) {
      this.maxRelatedContent = args.maxRelatedContent;
    }
  }
};
RelatedResultSpec.prototype = {};
RelatedResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxNotebooks = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTags = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.writableNotebooksOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContainingNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDebugInfo = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxExperts = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.maxRelatedContent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResultSpec.prototype.write = function(output) {
  output.writeStructBegin('RelatedResultSpec');
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 1);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.maxNotebooks !== null && this.maxNotebooks !== undefined) {
    output.writeFieldBegin('maxNotebooks', Thrift.Type.I32, 2);
    output.writeI32(this.maxNotebooks);
    output.writeFieldEnd();
  }
  if (this.maxTags !== null && this.maxTags !== undefined) {
    output.writeFieldBegin('maxTags', Thrift.Type.I32, 3);
    output.writeI32(this.maxTags);
    output.writeFieldEnd();
  }
  if (this.writableNotebooksOnly !== null && this.writableNotebooksOnly !== undefined) {
    output.writeFieldBegin('writableNotebooksOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.writableNotebooksOnly);
    output.writeFieldEnd();
  }
  if (this.includeContainingNotebooks !== null && this.includeContainingNotebooks !== undefined) {
    output.writeFieldBegin('includeContainingNotebooks', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContainingNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeDebugInfo !== null && this.includeDebugInfo !== undefined) {
    output.writeFieldBegin('includeDebugInfo', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeDebugInfo);
    output.writeFieldEnd();
  }
  if (this.maxExperts !== null && this.maxExperts !== undefined) {
    output.writeFieldBegin('maxExperts', Thrift.Type.I32, 7);
    output.writeI32(this.maxExperts);
    output.writeFieldEnd();
  }
  if (this.maxRelatedContent !== null && this.maxRelatedContent !== undefined) {
    output.writeFieldBegin('maxRelatedContent', Thrift.Type.I32, 8);
    output.writeI32(this.maxRelatedContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSuggestionQuery = function(args) {
  this.prefix = null;
  this.contextFilter = null;
  if (args) {
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    }
    if (args.contextFilter !== undefined) {
      this.contextFilter = args.contextFilter;
    }
  }
};
SearchSuggestionQuery.prototype = {};
SearchSuggestionQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contextFilter = new NoteFilter();
        this.contextFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSuggestionQuery.prototype.write = function(output) {
  output.writeStructBegin('SearchSuggestionQuery');
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 1);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.contextFilter !== null && this.contextFilter !== undefined) {
    output.writeFieldBegin('contextFilter', Thrift.Type.STRUCT, 2);
    this.contextFilter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSuggestionResultSpec = function(args) {
  this.maxTypeAheadSuggestions = null;
  if (args) {
    if (args.maxTypeAheadSuggestions !== undefined) {
      this.maxTypeAheadSuggestions = args.maxTypeAheadSuggestions;
    }
  }
};
SearchSuggestionResultSpec.prototype = {};
SearchSuggestionResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxTypeAheadSuggestions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSuggestionResultSpec.prototype.write = function(output) {
  output.writeStructBegin('SearchSuggestionResultSpec');
  if (this.maxTypeAheadSuggestions !== null && this.maxTypeAheadSuggestions !== undefined) {
    output.writeFieldBegin('maxTypeAheadSuggestions', Thrift.Type.I32, 1);
    output.writeI32(this.maxTypeAheadSuggestions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSuggestion = function(args) {
  this.suggestionText = null;
  if (args) {
    if (args.suggestionText !== undefined) {
      this.suggestionText = args.suggestionText;
    }
  }
};
SearchSuggestion.prototype = {};
SearchSuggestion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.suggestionText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSuggestion.prototype.write = function(output) {
  output.writeStructBegin('SearchSuggestion');
  if (this.suggestionText !== null && this.suggestionText !== undefined) {
    output.writeFieldBegin('suggestionText', Thrift.Type.STRING, 1);
    output.writeString(this.suggestionText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSuggestionResult = function(args) {
  this.typeAheadSuggestions = null;
  if (args) {
    if (args.typeAheadSuggestions !== undefined) {
      this.typeAheadSuggestions = args.typeAheadSuggestions;
    }
  }
};
SearchSuggestionResult.prototype = {};
SearchSuggestionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.typeAheadSuggestions = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = new SearchSuggestion();
          elem286.read(input);
          this.typeAheadSuggestions.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSuggestionResult.prototype.write = function(output) {
  output.writeStructBegin('SearchSuggestionResult');
  if (this.typeAheadSuggestions !== null && this.typeAheadSuggestions !== undefined) {
    output.writeFieldBegin('typeAheadSuggestions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.typeAheadSuggestions.length);
    for (var iter287 in this.typeAheadSuggestions)
    {
      if (this.typeAheadSuggestions.hasOwnProperty(iter287))
      {
        iter287 = this.typeAheadSuggestions[iter287];
        iter287.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeZone = function(args) {
  this.id = null;
  this.displayName = null;
  this.rawUTCOffsetMillis = null;
  this.dstSavingsAdjustmentMillis = null;
  this.nextEnterDaylightSavings = null;
  this.nextLeaveDaylightSavings = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.rawUTCOffsetMillis !== undefined) {
      this.rawUTCOffsetMillis = args.rawUTCOffsetMillis;
    }
    if (args.dstSavingsAdjustmentMillis !== undefined) {
      this.dstSavingsAdjustmentMillis = args.dstSavingsAdjustmentMillis;
    }
    if (args.nextEnterDaylightSavings !== undefined) {
      this.nextEnterDaylightSavings = args.nextEnterDaylightSavings;
    }
    if (args.nextLeaveDaylightSavings !== undefined) {
      this.nextLeaveDaylightSavings = args.nextLeaveDaylightSavings;
    }
  }
};
TimeZone.prototype = {};
TimeZone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rawUTCOffsetMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.dstSavingsAdjustmentMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.nextEnterDaylightSavings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.nextLeaveDaylightSavings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeZone.prototype.write = function(output) {
  output.writeStructBegin('TimeZone');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.rawUTCOffsetMillis !== null && this.rawUTCOffsetMillis !== undefined) {
    output.writeFieldBegin('rawUTCOffsetMillis', Thrift.Type.I32, 3);
    output.writeI32(this.rawUTCOffsetMillis);
    output.writeFieldEnd();
  }
  if (this.dstSavingsAdjustmentMillis !== null && this.dstSavingsAdjustmentMillis !== undefined) {
    output.writeFieldBegin('dstSavingsAdjustmentMillis', Thrift.Type.I32, 4);
    output.writeI32(this.dstSavingsAdjustmentMillis);
    output.writeFieldEnd();
  }
  if (this.nextEnterDaylightSavings !== null && this.nextEnterDaylightSavings !== undefined) {
    output.writeFieldBegin('nextEnterDaylightSavings', Thrift.Type.I64, 5);
    output.writeI64(this.nextEnterDaylightSavings);
    output.writeFieldEnd();
  }
  if (this.nextLeaveDaylightSavings !== null && this.nextLeaveDaylightSavings !== undefined) {
    output.writeFieldBegin('nextLeaveDaylightSavings', Thrift.Type.I64, 6);
    output.writeI64(this.nextLeaveDaylightSavings);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeZoneSpec = function(args) {
  this.id = null;
  this.rawUTCOffsetMillis = null;
  this.dstSavingsAdjustmentMillis = null;
  this.nextEnterDaylightSavings = null;
  this.nextLeaveDaylightSavings = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.rawUTCOffsetMillis !== undefined) {
      this.rawUTCOffsetMillis = args.rawUTCOffsetMillis;
    }
    if (args.dstSavingsAdjustmentMillis !== undefined) {
      this.dstSavingsAdjustmentMillis = args.dstSavingsAdjustmentMillis;
    }
    if (args.nextEnterDaylightSavings !== undefined) {
      this.nextEnterDaylightSavings = args.nextEnterDaylightSavings;
    }
    if (args.nextLeaveDaylightSavings !== undefined) {
      this.nextLeaveDaylightSavings = args.nextLeaveDaylightSavings;
    }
  }
};
TimeZoneSpec.prototype = {};
TimeZoneSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.rawUTCOffsetMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dstSavingsAdjustmentMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.nextEnterDaylightSavings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.nextLeaveDaylightSavings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeZoneSpec.prototype.write = function(output) {
  output.writeStructBegin('TimeZoneSpec');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.rawUTCOffsetMillis !== null && this.rawUTCOffsetMillis !== undefined) {
    output.writeFieldBegin('rawUTCOffsetMillis', Thrift.Type.I32, 2);
    output.writeI32(this.rawUTCOffsetMillis);
    output.writeFieldEnd();
  }
  if (this.dstSavingsAdjustmentMillis !== null && this.dstSavingsAdjustmentMillis !== undefined) {
    output.writeFieldBegin('dstSavingsAdjustmentMillis', Thrift.Type.I32, 3);
    output.writeI32(this.dstSavingsAdjustmentMillis);
    output.writeFieldEnd();
  }
  if (this.nextEnterDaylightSavings !== null && this.nextEnterDaylightSavings !== undefined) {
    output.writeFieldBegin('nextEnterDaylightSavings', Thrift.Type.I64, 4);
    output.writeI64(this.nextEnterDaylightSavings);
    output.writeFieldEnd();
  }
  if (this.nextLeaveDaylightSavings !== null && this.nextLeaveDaylightSavings !== undefined) {
    output.writeFieldBegin('nextLeaveDaylightSavings', Thrift.Type.I64, 5);
    output.writeI64(this.nextLeaveDaylightSavings);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Contact = function(args) {
  this.name = null;
  this.email = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactsQuery = function(args) {
  this.maxEntries = null;
  this.prefix = null;
  if (args) {
    if (args.maxEntries !== undefined) {
      this.maxEntries = args.maxEntries;
    }
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    }
  }
};
ContactsQuery.prototype = {};
ContactsQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactsQuery.prototype.write = function(output) {
  output.writeStructBegin('ContactsQuery');
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 1);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 2);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessQuery = function(args) {
  this.filter = null;
  this.numExperts = null;
  this.includeNotebooks = null;
  this.includeNotesCounts = null;
  if (args) {
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.numExperts !== undefined) {
      this.numExperts = args.numExperts;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeNotesCounts !== undefined) {
      this.includeNotesCounts = args.includeNotesCounts;
    }
  }
};
BusinessQuery.prototype = {};
BusinessQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numExperts = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotesCounts = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessQuery.prototype.write = function(output) {
  output.writeStructBegin('BusinessQuery');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.numExperts !== null && this.numExperts !== undefined) {
    output.writeFieldBegin('numExperts', Thrift.Type.I32, 2);
    output.writeI32(this.numExperts);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeNotesCounts !== null && this.includeNotesCounts !== undefined) {
    output.writeFieldBegin('includeNotesCounts', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotesCounts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessQueryResult = function(args) {
  this.totalNotebooks = null;
  this.totalNotesByNotebook = null;
  this.experts = null;
  this.matchingNotebooks = null;
  if (args) {
    if (args.totalNotebooks !== undefined) {
      this.totalNotebooks = args.totalNotebooks;
    }
    if (args.totalNotesByNotebook !== undefined) {
      this.totalNotesByNotebook = args.totalNotesByNotebook;
    }
    if (args.experts !== undefined) {
      this.experts = args.experts;
    }
    if (args.matchingNotebooks !== undefined) {
      this.matchingNotebooks = args.matchingNotebooks;
    }
  }
};
BusinessQueryResult.prototype = {};
BusinessQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNotebooks = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size288 = 0;
        var _rtmp3292;
        this.totalNotesByNotebook = {};
        var _ktype289 = 0;
        var _vtype290 = 0;
        _rtmp3292 = input.readMapBegin();
        _ktype289 = _rtmp3292.ktype;
        _vtype290 = _rtmp3292.vtype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          if (_i293 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key294 = null;
          var val295 = null;
          key294 = input.readString().value;
          val295 = input.readI32().value;
          this.totalNotesByNotebook[key294] = val295;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.experts = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new UserProfile();
          elem302.read(input);
          this.experts.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size303 = 0;
        var _rtmp3307;
        this.matchingNotebooks = [];
        var _etype306 = 0;
        _rtmp3307 = input.readListBegin();
        _etype306 = _rtmp3307.etype;
        _size303 = _rtmp3307.size;
        for (var _i308 = 0; _i308 < _size303; ++_i308)
        {
          var elem309 = null;
          elem309 = new Notebook();
          elem309.read(input);
          this.matchingNotebooks.push(elem309);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessQueryResult.prototype.write = function(output) {
  output.writeStructBegin('BusinessQueryResult');
  if (this.totalNotebooks !== null && this.totalNotebooks !== undefined) {
    output.writeFieldBegin('totalNotebooks', Thrift.Type.I32, 1);
    output.writeI32(this.totalNotebooks);
    output.writeFieldEnd();
  }
  if (this.totalNotesByNotebook !== null && this.totalNotesByNotebook !== undefined) {
    output.writeFieldBegin('totalNotesByNotebook', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.totalNotesByNotebook));
    for (var kiter310 in this.totalNotesByNotebook)
    {
      if (this.totalNotesByNotebook.hasOwnProperty(kiter310))
      {
        var viter311 = this.totalNotesByNotebook[kiter310];
        output.writeString(kiter310);
        output.writeI32(viter311);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.experts !== null && this.experts !== undefined) {
    output.writeFieldBegin('experts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.experts.length);
    for (var iter312 in this.experts)
    {
      if (this.experts.hasOwnProperty(iter312))
      {
        iter312 = this.experts[iter312];
        iter312.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.matchingNotebooks !== null && this.matchingNotebooks !== undefined) {
    output.writeFieldBegin('matchingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.matchingNotebooks.length);
    for (var iter313 in this.matchingNotebooks)
    {
      if (this.matchingNotebooks.hasOwnProperty(iter313))
      {
        iter313 = this.matchingNotebooks[iter313];
        iter313.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteLockStatus = function(args) {
  this.noteUpdateSequenceNumber = null;
  this.lockHolderUserId = null;
  this.lockRenewBy = null;
  this.viewingUserIds = null;
  this.viewIdleExpiration = null;
  if (args) {
    if (args.noteUpdateSequenceNumber !== undefined) {
      this.noteUpdateSequenceNumber = args.noteUpdateSequenceNumber;
    }
    if (args.lockHolderUserId !== undefined) {
      this.lockHolderUserId = args.lockHolderUserId;
    }
    if (args.lockRenewBy !== undefined) {
      this.lockRenewBy = args.lockRenewBy;
    }
    if (args.viewingUserIds !== undefined) {
      this.viewingUserIds = args.viewingUserIds;
    }
    if (args.viewIdleExpiration !== undefined) {
      this.viewIdleExpiration = args.viewIdleExpiration;
    }
  }
};
NoteLockStatus.prototype = {};
NoteLockStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.noteUpdateSequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lockHolderUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lockRenewBy = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.viewingUserIds = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readI32().value;
          this.viewingUserIds.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.viewIdleExpiration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteLockStatus.prototype.write = function(output) {
  output.writeStructBegin('NoteLockStatus');
  if (this.noteUpdateSequenceNumber !== null && this.noteUpdateSequenceNumber !== undefined) {
    output.writeFieldBegin('noteUpdateSequenceNumber', Thrift.Type.I32, 1);
    output.writeI32(this.noteUpdateSequenceNumber);
    output.writeFieldEnd();
  }
  if (this.lockHolderUserId !== null && this.lockHolderUserId !== undefined) {
    output.writeFieldBegin('lockHolderUserId', Thrift.Type.I32, 2);
    output.writeI32(this.lockHolderUserId);
    output.writeFieldEnd();
  }
  if (this.lockRenewBy !== null && this.lockRenewBy !== undefined) {
    output.writeFieldBegin('lockRenewBy', Thrift.Type.I64, 3);
    output.writeI64(this.lockRenewBy);
    output.writeFieldEnd();
  }
  if (this.viewingUserIds !== null && this.viewingUserIds !== undefined) {
    output.writeFieldBegin('viewingUserIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.viewingUserIds.length);
    for (var iter321 in this.viewingUserIds)
    {
      if (this.viewingUserIds.hasOwnProperty(iter321))
      {
        iter321 = this.viewingUserIds[iter321];
        output.writeI32(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.viewIdleExpiration !== null && this.viewIdleExpiration !== undefined) {
    output.writeFieldBegin('viewIdleExpiration', Thrift.Type.I32, 5);
    output.writeI32(this.viewIdleExpiration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateNoteIfUsnMatchesResult = function(args) {
  this.note = null;
  this.updated = null;
  if (args) {
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
  }
};
UpdateNoteIfUsnMatchesResult.prototype = {};
UpdateNoteIfUsnMatchesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.updated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateNoteIfUsnMatchesResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateNoteIfUsnMatchesResult');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.BOOL, 2);
    output.writeBool(this.updated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShareRelationshipRestrictions = function(args) {
  this.noSetReadOnly = null;
  this.noSetReadPlusActivity = null;
  this.noSetModify = null;
  this.noSetFullAccess = null;
  if (args) {
    if (args.noSetReadOnly !== undefined) {
      this.noSetReadOnly = args.noSetReadOnly;
    }
    if (args.noSetReadPlusActivity !== undefined) {
      this.noSetReadPlusActivity = args.noSetReadPlusActivity;
    }
    if (args.noSetModify !== undefined) {
      this.noSetModify = args.noSetModify;
    }
    if (args.noSetFullAccess !== undefined) {
      this.noSetFullAccess = args.noSetFullAccess;
    }
  }
};
ShareRelationshipRestrictions.prototype = {};
ShareRelationshipRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadPlusActivity = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetModify = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetFullAccess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationshipRestrictions.prototype.write = function(output) {
  output.writeStructBegin('ShareRelationshipRestrictions');
  if (this.noSetReadOnly !== null && this.noSetReadOnly !== undefined) {
    output.writeFieldBegin('noSetReadOnly', Thrift.Type.BOOL, 1);
    output.writeBool(this.noSetReadOnly);
    output.writeFieldEnd();
  }
  if (this.noSetReadPlusActivity !== null && this.noSetReadPlusActivity !== undefined) {
    output.writeFieldBegin('noSetReadPlusActivity', Thrift.Type.BOOL, 2);
    output.writeBool(this.noSetReadPlusActivity);
    output.writeFieldEnd();
  }
  if (this.noSetModify !== null && this.noSetModify !== undefined) {
    output.writeFieldBegin('noSetModify', Thrift.Type.BOOL, 3);
    output.writeBool(this.noSetModify);
    output.writeFieldEnd();
  }
  if (this.noSetFullAccess !== null && this.noSetFullAccess !== undefined) {
    output.writeFieldBegin('noSetFullAccess', Thrift.Type.BOOL, 4);
    output.writeBool(this.noSetFullAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvitationShareRelationship = function(args) {
  this.displayName = null;
  this.identity = null;
  this.privilege = null;
  this.allowPreview = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.identity !== undefined) {
      this.identity = args.identity;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.allowPreview !== undefined) {
      this.allowPreview = args.allowPreview;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
InvitationShareRelationship.prototype = {};
InvitationShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new UserIdentity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.allowPreview = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('InvitationShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 2);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.allowPreview !== null && this.allowPreview !== undefined) {
    output.writeFieldBegin('allowPreview', Thrift.Type.BOOL, 4);
    output.writeBool(this.allowPreview);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MemberShareRelationship = function(args) {
  this.displayName = null;
  this.recipientId = null;
  this.bestPrivilege = null;
  this.individualPrivilege = null;
  this.restrictions = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.recipientId !== undefined) {
      this.recipientId = args.recipientId;
    }
    if (args.bestPrivilege !== undefined) {
      this.bestPrivilege = args.bestPrivilege;
    }
    if (args.individualPrivilege !== undefined) {
      this.individualPrivilege = args.individualPrivilege;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
MemberShareRelationship.prototype = {};
MemberShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recipientId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bestPrivilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.individualPrivilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new ShareRelationshipRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MemberShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('MemberShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientId !== null && this.recipientId !== undefined) {
    output.writeFieldBegin('recipientId', Thrift.Type.I32, 2);
    output.writeI32(this.recipientId);
    output.writeFieldEnd();
  }
  if (this.bestPrivilege !== null && this.bestPrivilege !== undefined) {
    output.writeFieldBegin('bestPrivilege', Thrift.Type.I32, 3);
    output.writeI32(this.bestPrivilege);
    output.writeFieldEnd();
  }
  if (this.individualPrivilege !== null && this.individualPrivilege !== undefined) {
    output.writeFieldBegin('individualPrivilege', Thrift.Type.I32, 4);
    output.writeI32(this.individualPrivilege);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 5);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 6);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShareRelationships = function(args) {
  this.invitations = null;
  this.memberships = null;
  this.invitationRestrictions = null;
  if (args) {
    if (args.invitations !== undefined) {
      this.invitations = args.invitations;
    }
    if (args.memberships !== undefined) {
      this.memberships = args.memberships;
    }
    if (args.invitationRestrictions !== undefined) {
      this.invitationRestrictions = args.invitationRestrictions;
    }
  }
};
ShareRelationships.prototype = {};
ShareRelationships.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.invitations = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new InvitationShareRelationship();
          elem328.read(input);
          this.invitations.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size329 = 0;
        var _rtmp3333;
        this.memberships = [];
        var _etype332 = 0;
        _rtmp3333 = input.readListBegin();
        _etype332 = _rtmp3333.etype;
        _size329 = _rtmp3333.size;
        for (var _i334 = 0; _i334 < _size329; ++_i334)
        {
          var elem335 = null;
          elem335 = new MemberShareRelationship();
          elem335.read(input);
          this.memberships.push(elem335);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitationRestrictions = new ShareRelationshipRestrictions();
        this.invitationRestrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationships.prototype.write = function(output) {
  output.writeStructBegin('ShareRelationships');
  if (this.invitations !== null && this.invitations !== undefined) {
    output.writeFieldBegin('invitations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitations.length);
    for (var iter336 in this.invitations)
    {
      if (this.invitations.hasOwnProperty(iter336))
      {
        iter336 = this.invitations[iter336];
        iter336.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.memberships !== null && this.memberships !== undefined) {
    output.writeFieldBegin('memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memberships.length);
    for (var iter337 in this.memberships)
    {
      if (this.memberships.hasOwnProperty(iter337))
      {
        iter337 = this.memberships[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationRestrictions !== null && this.invitationRestrictions !== undefined) {
    output.writeFieldBegin('invitationRestrictions', Thrift.Type.STRUCT, 3);
    this.invitationRestrictions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesParameters = function(args) {
  this.notebookGuid = null;
  this.inviteMessage = null;
  this.membershipsToUpdate = null;
  this.invitationsToCreateOrUpdate = null;
  this.unshares = null;
  if (args) {
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.inviteMessage !== undefined) {
      this.inviteMessage = args.inviteMessage;
    }
    if (args.membershipsToUpdate !== undefined) {
      this.membershipsToUpdate = args.membershipsToUpdate;
    }
    if (args.invitationsToCreateOrUpdate !== undefined) {
      this.invitationsToCreateOrUpdate = args.invitationsToCreateOrUpdate;
    }
    if (args.unshares !== undefined) {
      this.unshares = args.unshares;
    }
  }
};
ManageNotebookSharesParameters.prototype = {};
ManageNotebookSharesParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inviteMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.membershipsToUpdate = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new MemberShareRelationship();
          elem344.read(input);
          this.membershipsToUpdate.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size345 = 0;
        var _rtmp3349;
        this.invitationsToCreateOrUpdate = [];
        var _etype348 = 0;
        _rtmp3349 = input.readListBegin();
        _etype348 = _rtmp3349.etype;
        _size345 = _rtmp3349.size;
        for (var _i350 = 0; _i350 < _size345; ++_i350)
        {
          var elem351 = null;
          elem351 = new InvitationShareRelationship();
          elem351.read(input);
          this.invitationsToCreateOrUpdate.push(elem351);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.unshares = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = new UserIdentity();
          elem358.read(input);
          this.unshares.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesParameters.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesParameters');
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 1);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.inviteMessage !== null && this.inviteMessage !== undefined) {
    output.writeFieldBegin('inviteMessage', Thrift.Type.STRING, 2);
    output.writeString(this.inviteMessage);
    output.writeFieldEnd();
  }
  if (this.membershipsToUpdate !== null && this.membershipsToUpdate !== undefined) {
    output.writeFieldBegin('membershipsToUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.membershipsToUpdate.length);
    for (var iter359 in this.membershipsToUpdate)
    {
      if (this.membershipsToUpdate.hasOwnProperty(iter359))
      {
        iter359 = this.membershipsToUpdate[iter359];
        iter359.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToCreateOrUpdate !== null && this.invitationsToCreateOrUpdate !== undefined) {
    output.writeFieldBegin('invitationsToCreateOrUpdate', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitationsToCreateOrUpdate.length);
    for (var iter360 in this.invitationsToCreateOrUpdate)
    {
      if (this.invitationsToCreateOrUpdate.hasOwnProperty(iter360))
      {
        iter360 = this.invitationsToCreateOrUpdate[iter360];
        iter360.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unshares !== null && this.unshares !== undefined) {
    output.writeFieldBegin('unshares', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.unshares.length);
    for (var iter361 in this.unshares)
    {
      if (this.unshares.hasOwnProperty(iter361))
      {
        iter361 = this.unshares[iter361];
        iter361.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesError = function(args) {
  this.identity = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.identity !== undefined) {
      this.identity = args.identity;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
ManageNotebookSharesError.prototype = {};
ManageNotebookSharesError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new UserIdentity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesError.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesError');
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 1);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesResult = function(args) {
  this.errors = null;
  if (args) {
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
ManageNotebookSharesResult.prototype = {};
ManageNotebookSharesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.errors = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = new ManageNotebookSharesError();
          elem368.read(input);
          this.errors.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesResult.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesResult');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter369 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter369))
      {
        iter369 = this.errors[iter369];
        iter369.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

